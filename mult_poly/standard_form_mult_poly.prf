(|standard_form_mult_poly|
 (|Unif_cons| 0
  (|Unif_cons-1| |nil| 3810977422
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (EXPAND "Unif?" 1)
          (("4" (SKEEP)
            (("4" (CASE "i=0")
              (("1" (EXPAND "nth" 1)
                (("1" (ASSERT)
                  (("1" (LIFT-IF 1)
                    (("1" (SPLIT 1)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "nth" 2)
                          (("2" (LIFT-IF 2)
                            (("2" (SPLIT 2)
                              (("1" (FLATTEN) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "Unif?" -3)
                                  (("2" (INST -3 "0" "j-1")
                                    (("1" (EXPAND "nth" -3)
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2" (ASSERT)
                                      (("2" (EXPAND "length" 1)
                                        (("2" (TYPEPRED "j")
                                          (("2" (EXPAND "length" -1)
                                            (("2" (EXPAND "length" -1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (EXPAND "length" 1)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "nth" 2)
                (("2" (ASSERT)
                  (("2" (LIFT-IF 2)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "nth" 1)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "Unif?" -3)
                                  (("2" (INST -3 "0" "i-1")
                                    (("1" (EXPAND "nth" -3)
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2" (EXPAND "length" 1)
                                      (("2" (ASSERT)
                                        (("2" (TYPEPRED "i")
                                          (("2" (EXPAND "length" -1)
                                            (("2" (EXPAND "length" -1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (EXPAND "length" 1)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "Unif?" -2)
                          (("2" (INST -2 "i-1" "j-1") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|caretzero_every| 0
  (|caretzero_every-1| |nil| 3810977425
   ("" (INDUCT "n")
    (("1" (EXPAND "^") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "^" 1)
        (("2" (LEMMA "every_append[nat]")
          (("2"
            (INST -1
             "(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0))"
             "(: 0 :)" "(: 0 :)^j")
            (("1" (TYPEPRED "(: 0 :)")
              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|every_append| FORMULA-DECL NIL |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|sum_TCC1| 0
  (|sum_TCC1-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL
   NIL (|sum| SUBTYPE "standard_form_mult_poly.l" "(list_adt[nat].cons?)")))
 (|sum_TCC2| 0
  (|sum_TCC2-1| |nil| 3810975173 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL
   (|sum| TERMINATION
    "standard_form_mult_poly.sum(list_adt[nat].cdr(standard_form_mult_poly.l))"
    "NIL")))
 (|last_last_nth_TCC1| 0
  (|last_last_nth_TCC1-1| |nil| 3813568747
   ("" (INDUCT "l")
    (("1" (ASSERT) NIL NIL)
     ("2" (SKEEP)
      (("2" (ASSERT) (("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|last_last_nth| SUBTYPE
    "(number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), 1)"
    "below[length[nat](l)]")))
 (|last_last_nth| 0
  (|last_last_nth-1| |nil| 3813568896
   ("" (INDUCT "l")
    (("1" (ASSERT) NIL NIL)
     ("2" (SKEEP)
      (("2" (CASE "cons2_var=null")
        (("1" (ASSERT)
          (("1" (EXPAND "last" 1 1)
            (("1" (EXPAND "length" 1 1)
              (("1" (EXPAND "length" 1 1)
                (("1" (ASSERT)
                  (("1" (EXPAND "length" 1 1)
                    (("1" (EXPAND "nth" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "last" 2 1)
            (("2" (EXPAND "length" 2 1)
              (("2" (ASSERT)
                (("2" (LIFT-IF 2)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth" 1 1)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (PROPAX) NIL NIL)
                               ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (EXPAND "nth" 2)
                          (("2" (LIFT-IF 2)
                            (("2" (SPLIT 2)
                              (("1" (GRIND) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" 2)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (ASSERT) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|sum_nat| 0
  (|sum_nat-1| |nil| 3810977428
   ("" (INDUCT "l")
    (("1" (LEMMA "rationals.closed_plus")
      (("1" (EXPAND "sum") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (EXPAND "sum") (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (EXPAND "sum") (("3" (ASSERT) NIL NIL)) NIL)
     ("4" (SKEEP)
      (("4" (SPLIT 1)
        (("1" (EXPAND "sum" 1)
          (("1" (TYPEPRED "cons1_var")
            (("1" (LEMMA "rationals.closed_plus") (("1" (INST?) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "sum" 1)
          (("2" (LEMMA "integers.closed_plus")
            (("2" (TYPEPRED "cons1_var")
              (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("3" (EXPAND "sum" 1) (("3" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|closed_plus| FORMULA-DECL NIL |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|closed_plus| FORMULA-DECL NIL |rationals| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|sum_append| 0
  (|sum_append-1| |nil| 3810977430
   ("" (INDUCT "l1")
    (("1" (SKEEP)
      (("1" (EXPAND "sum" 1 1)
        (("1" (LIFT-IF 1)
          (("1" (SPLIT 1)
            (("1" (FLATTEN)
              (("1" (LEMMA "append_null_left[nat]")
                (("1" (INST? -1)
                  (("1" (REPLACE -1)
                    (("1" (EXPAND "sum" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (LEMMA "append_null_left[nat]")
                (("2" (INST? -1)
                  (("2" (REPLACE -1)
                    (("2" (EXPAND "sum" 2 3)
                      (("2" (EXPAND "sum" 2 2) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "sum" 1 1)
          (("2" (ASSERT)
            (("2" (LIFT-IF 1)
              (("2" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (LEMMA "length_append[nat]")
                    (("1" (INST? -1)
                      (("1" (EXPAND "length" -1 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -1 1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (LEMMA "car_append[nat]")
                    (("2" (INST? -1)
                      (("2" (REPLACE -1)
                        (("2" (ASSERT)
                          (("2" (LEMMA "cdr_append[nat]")
                            (("2" (INST? -1)
                              (("2" (REPLACE -1)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "sum" 2 2)
                                    (("2" (INST? -3) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|sum_0_TCC1| 0
  (|sum_0_TCC1-1| |nil| 3813659027 ("" (GRIND) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|sum_0| SUBTYPE "(: 0 :)" "list[nat]")))
 (|sum_0| 0
  (|sum_0-1| |nil| 3813659181
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "^" 1)
        (("2" (EXPAND "append" 1 1)
          (("2" (EXPAND "sum" 1 1)
            (("2" (EXPAND "append" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (GRIND) NIL NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|sum_append_0| 0
  (|sum_append_0-1| |nil| 3813659207
   ("" (SKEEP)
    (("" (LEMMA "sum_append")
      (("" (LEMMA "sum_0")
        (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|sum_append| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sum_0| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|sum_0_con| 0
  (|sum_0_con-1| |nil| 3813924819
   ("" (INDUCT "l")
    (("1" (FLATTEN) (("1" (INST 1 "0") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (CASE "cons2_var=null")
        (("1" (ASSERT)
          (("1" (INST 1 "1")
            (("1" (EXPAND "^" 1)
              (("1" (EXPAND "sum" -3 1)
                (("1" (ASSERT)
                  (("1" (EXPAND "sum" -3 1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "sum" -2)
            (("2" (ASSERT)
              (("2" (LEMMA "sum_nat")
                (("2" (INST-CP -1 "cons2_var")
                  (("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (SKEEP)
                          (("2" (INST 2 "n+1")
                            (("2" (EXPAND "^")
                              (("2" (EXPAND "append" 2 1)
                                (("2" (EXPAND "append" 2 1)
                                  (("2" (DECOMPOSE-EQUALITY 2)
                                    (("1" (EXPAND "^" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (LEMMA "caretzero_every")
                                      (("2" (INST -1 "n+1")
                                        (("2" (EXPAND "^" -1)
                                          (("2" (EXPAND "append" -1)
                                            (("2" (EXPAND "append" -1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|caretzero_every| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sum_nat| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|add_mono_commutative_TCC1| 0
  (|add_mono_commutative_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (TYPEPRED "m2") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|add_mono_commutative| SUBTYPE "standard_form_mult_poly.m1"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = standard_form_mult_poly.m2`alpha}")))
 (|add_mono_commutative| 0
  (|add_mono_commutative-1| |nil| 3810977433
   ("" (SKEEP) (("" (EXPAND "add_mono") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)) SHOSTAK))
 (|term_deg_TCC1| 0
  (|term_deg_TCC1-1| |nil| 3810975173 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|term_deg| SUBTYPE "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (|term_deg_TCC2| 0
  (|term_deg_TCC2-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "sum_nat")
      (("" (INST?) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|sum_nat| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|term_deg| SUBTYPE
    "standard_form_mult_poly.sum(list_adt[monomial].car(standard_form_mult_poly.p)`alpha)"
    "nat")))
 (|term_deg_TCC3| 0
  (|term_deg_TCC3-1| |nil| 3810975173
   ("" (SKEEP) (("" (EXPAND "length") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|term_deg| TERMINATION
    "standard_form_mult_poly.term_deg(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|term_deg_example| 0
  (|term_deg_example-1| |nil| 3810977435 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|homogen?_TCC1| 0
  (|homogen?_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (SKEEP) (("" (TYPEPRED "j") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|term_deg| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   NIL
   (|homogen?| SUBTYPE "standard_form_mult_poly.j"
    "below[length[nat](term_deg(p))]")))
 (|homogen?_TCC2| 0
  (|homogen?_TCC2-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (SKEEP) (("" (TYPEPRED "j") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|term_deg| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   NIL
   (|homogen?| SUBTYPE "(number_fields.+)(standard_form_mult_poly.j, 1)"
    "below[length[nat](term_deg(p))]")))
 (|max_deg_TCC1| 0
  (|max_deg_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (ASSERT) (("" (EXPAND "term_deg") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|term_deg| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL))
   NIL
   (|max_deg| SUBTYPE
    "standard_form_mult_poly.term_deg(standard_form_mult_poly.p)"
    "(list_adt[nat].cons?)")))
 (|max_deg_TCC2| 0
  (|max_deg_TCC2-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL NIL
   (|max_deg| SUBTYPE "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (|max_deg_TCC3| 0
  (|max_deg_TCC3-1| |nil| 3810975173
   ("" (SKEEP) (("" (EXPAND "length") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|max_deg| TERMINATION
    "standard_form_mult_poly.max_deg(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|max_length_TCC1| 0
  (|max_length_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|max_length| SUBTYPE "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (|max_length_TCC2| 0
  (|max_length_TCC2-1| |nil| 3810975173
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP) (("2" (EXPAND "length" 4) (("2" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   NIL
   (|max_length| TERMINATION
    "standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|max_length_ex1| 0
  (|max_length_ex1-1| |nil| 3810977437 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|max_length_ex2| 0
  (|max_length_ex2-1| |nil| 3810977438 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|max_length_is_max| 0
  (|max_length_is_max-1| |nil| 3810977440
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "cons?(cons2_var) = FALSE")
        (("1" (SKEEP)
          (("1" (TYPEPRED "j")
            (("1" (EXPAND "length" -1)
              (("1" (EXPAND "length" -1)
                (("1" (ASSERT)
                  (("1" (EXPAND "nth" 2)
                    (("1" (EXPAND "max_length" 2) (("1" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2" (EXPAND "nth" 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (EXPAND "max_length" 1)
                    (("1" (ASSERT)
                      (("1" (FLATTEN 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (FLATTEN 1)
                    (("2" (ASSERT)
                      (("2" (INST -2 "j-1")
                        (("2" (EXPAND "max_length" 2) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|max_length_is_nth| 0
  (|max_length_is_nth-1| |nil| 3810977443
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "cons2_var=null")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (INST 1 "0")
              (("1" (EXPAND "nth" 1) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "max_length" 2 1)
            (("2" (EXPAND "max" 2 1)
              (("2" (ASSERT)
                (("2" (CASE "length(cons1_var`alpha) < max_length(cons2_var)")
                  (("1" (SKEEP)
                    (("1" (INST 2 "j+1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth" 2 1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (INST 3 "0")
                      (("1" (EXPAND "nth" 3 1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|max_length_Unif| 0
  (|max_length_Unif-1| |nil| 3810977446
   ("" (SKEEP)
    (("" (LEMMA "max_length_is_nth")
      (("" (INST?)
        (("" (SKEEP)
          (("" (TYPEPRED "p")
            (("" (INST -1 "j!1" "j") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|UnifInd| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|max_length_Unif_cdr| 0
  (|max_length_Unif_cdr-1| |nil| 3810977448
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (LEMMA "max_length_is_nth")
        (("" (INST-CP -1 "p")
          (("" (INST -1 "cdr(p)")
            (("" (SKEEP)
              (("" (SKEEP)
                (("" (INST -3 "j+1" "j!1")
                  (("1" (EXPAND "nth" -3 1) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|UnifInd| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|max_length_a| 0
  (|max_length_a-1| |nil| 3810977450
   ("" (INDUCT "p")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "length" 1 1)
        (("2" (EXPAND "max_length" 1)
          (("2" (EXPAND "length_a" 1)
            (("2" (EXPAND "max" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (EXPAND "max" 1 1) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "max" 2 1)
                      (("2" (ASSERT)
                        (("2" (ASSERT)
                          (("2" (FLIP-INEQ 1)
                            (("2" (MULT-BY -1 "length(cons2_var)")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length_a| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|lft_TCC1| 0
  (|lft_TCC1-1| |nil| 3810975173
   ("" (LEMMA "max_length_a")
    (("" (SKEEP)
      (("" (INST -1 "p")
        (("" (TYPEPRED "n")
          (("" (ASSERT)
            (("" (MULT-BY -1 "length(p)") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|max_length_a| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft| SUBTYPE
    "(number_fields.-)((number_fields.+)(list_props[monomial].length(standard_form_mult_poly.p), number_fields.*(standard_form_mult_poly.n, list_props[monomial].length(standard_form_mult_poly.p))), standard_form_mult_poly.length_a(standard_form_mult_poly.p))"
    "naturalnumber")))
 (|lft_TCC2| 0
  (|lft_TCC3-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|lft| SUBTYPE
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(list_adt[monomial].car(standard_form_mult_poly.p)`alpha)))"
    "nat")))
 (|lft_TCC3| 0
  (|lft_TCC4-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (TYPEPRED "n")
      (("" (EXPAND "max_length" -1)
        (("" (ASSERT)
          (("" (EXPAND "length" 1)
            (("" (LIFT-IF -1)
              (("" (SPLIT -1)
                (("1" (FLATTEN)
                  (("1" (LIFT-IF 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (EXPAND "max" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|lft| SUBTYPE "standard_form_mult_poly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p)))}")))
 (|lft_TCC4| 0
  (|lft_TCC5-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length_a" 2 2)
      (("" (ASSERT)
        (("" (CASE "p=null")
          (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "length" 3 3)
              (("2" (ASSERT)
                (("2" (EXPAND "length" 3 5) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_a| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|lft| TERMINATION
    "standard_form_mult_poly.lft(list_adt[monomial].cdr(standard_form_mult_poly.p))(standard_form_mult_poly.n)"
    "NIL")))
 (|lft_TCC5| 0
  (|lft_TCC6-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (TYPEPRED "n")
      (("" (LEMMA "max_length_is_nth")
        (("" (INST -1 "cdr(p)")
          (("1" (SKEEP)
            (("1" (LEMMA "max_length_is_max")
              (("1" (INST -1 "p" "j+1")
                (("1" (EXPAND "nth" -1) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (EXPAND "length" 1)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF 1)
                      (("2" (SPLIT 1)
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" 2) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "max_length" 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft| SUBTYPE "standard_form_mult_poly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(list_adt[monomial].cdr(standard_form_mult_poly.p)))}")))
 (|lft_TCC6| 0
  (|lft_TCC7-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" 3 3)
      (("" (ASSERT)
        (("" (EXPAND "length" 1)
          (("" (ASSERT)
            (("" (LIFT-IF 1)
              (("" (SPLIT 1)
                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (EXPAND "length" 4 4)
                      (("2" (EXPAND "length_a" 4 2)
                        (("2" (ASSERT)
                          (("2" (MOVE-TERMS 4 L 1)
                            (("2" (ASSERT)
                              (("2" (MOVE-TERMS 4 L 2)
                                (("2" (ASSERT)
                                  (("2"
                                    (CASE
                                        "NOT length[monomial](cdr(p)) * n =  n * length[monomial](cdr[monomial](p))")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (REPLACES -1)
                                      (("2" (ASSERT)
                                        (("2" (MOVE-TERMS 4 L 1)
                                          (("2" (ASSERT)
                                            (("2"
                                              (CASE
                                                  "NOT length_a(cdr[monomial](p)) = length_a(cdr(p))")
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (REPLACES -1)
                                                (("2"
                                                  (CASE
                                                      "NOT 1 - length(car(p)`alpha) - length_a(cdr(p)) - -length_a(cdr(p)) + n = 1 - length(car(p)`alpha) + n")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (REPLACES -1)
                                                    (("2" (TYPEPRED "n")
                                                      (("2" (MOVE-TERMS 4 R 2)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (LEMMA
                                                             "max_length_is_max")
                                                            (("2"
                                                              (INST -1 "p" "0")
                                                              (("2"
                                                                (EXPAND "nth"
                                                                        -1)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length_a| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|lft| TERMINATION
    "standard_form_mult_poly.lft(list_adt[monomial].cdr(standard_form_mult_poly.p))(standard_form_mult_poly.n)"
    "NIL")))
 (|lft_one_TCC1| 0
  (|lft_one_TCC2-1| |nil| 3811599960 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|lft_one| SUBTYPE
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(standard_form_mult_poly.m`alpha)))"
    "nat")))
 (|lft_one_length_TCC1| 0
  (|lft_one_length_TCC1-1| |nil| 3813922449 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|lft_one_length| SUBTYPE "standard_form_mult_poly.m"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (|lft_one_length| 0
  (|lft_one_length-1| |nil| 3813922651
   ("" (SKEEP)
    (("" (EXPAND "lft_one" 1)
      (("" (LEMMA "length_append[nat]")
        (("" (INST?)
          (("" (ASSERT)
            (("" (REPLACE -1)
              (("" (LEMMA "length_appendn[nat]")
                (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|lft_alt_TCC1| 0
  (|lft_alt_TCC1-1| |nil| 3811599960
   ("" (SKEEP :PREDS? T)
    (("" (REWRITE "every_nth")
      (("" (SKEEP)
        (("" (LEMMA "max_length_is_max")
          (("" (INST?)
            (("1" (ASSERT) NIL NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   NIL
   (|lft_alt| SUBTYPE "standard_form_mult_poly.p"
    "list[{m: monomial | n >= length[nat](m`alpha)}]")))
 (|lft_is_alt| 0
  (|lft_is_alt-1| |nil| 3811600316
   ("" (INDUCT "p")
    (("1" (EXPAND "lft")
      (("1" (ASSERT)
        (("1" (EXPAND "lft_alt")
          (("1" (EXPAND "map") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "lft_alt" 1)
          (("2" (EXPAND "map" 1)
            (("2" (EXPAND "lft" 1)
              (("2" (ASSERT)
                (("2" (EXPAND "length" 1 1)
                  (("2" (ASSERT)
                    (("2" (ASSERT)
                      (("2" (ASSERT)
                        (("2" (INST?)
                          (("1" (EXPAND "lft_alt" -1)
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (LIFT-IF 1)
                                (("1" (SPLIT 1)
                                  (("1" (FLATTEN)
                                    (("1" (DECOMPOSE-EQUALITY 1)
                                      (("1" (EXPAND "lft_one")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (EXPAND "lft_one")
                                      (("2" (DECOMPOSE-EQUALITY 2)
                                        (("1" (TYPEPRED "n")
                                          (("1"
                                            (CASE
                                                "n = length(cons1_var`alpha)")
                                            (("1" (EXPAND "max_length")
                                              (("1" (ASSERT)
                                                (("1" (FLIP-INEQ 2)
                                                  (("1" (EXPAND "max")
                                                    (("1" (REPLACE -2 1)
                                                      (("1" (ASSERT)
                                                        (("1" (EXPAND "^" 1)
                                                          (("1"
                                                            (REWRITE
                                                             "append_null_right")
                                                            (("1"
                                                              (DECOMPOSE-EQUALITY
                                                               1)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (EXPAND "max_length")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "n")
                                          (("2" (EXPAND "max_length")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "n")
                            (("2" (EXPAND "max_length" -1)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_example1_TCC1| 0
  (|lft_example1_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (REPLACE -1) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|lft_example1| SUBTYPE "3"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mp))}")))
 (|lft_example1| 0
  (|lft_example1-1| |nil| 3810977453 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|Lft_length| 0
  (|Lft_length-1| |nil| 3810977454
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (EXPAND "lft") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "length" 1 1)
          (("2" (EXPAND "lft" 1)
            (("2" (LIFT-IF 1)
              (("2" (ASSERT)
                (("2" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "length" 1 2) (("1" (INST?) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "length" 2 2) (("2" (INST?) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|max_length_lft| 0
  (|max_length_lft-1| |nil| 3810977457
   ("" (INDUCT "p")
    (("1" (SKEEP)
      (("1" (LEMMA "Lft_length")
        (("1" (INST?)
          (("1" (EXPAND "max_length" 1)
            (("1" (EXPAND "length" -1)
              (("1" (ASSERT)
                (("1" (EXPAND "lft") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "lft" 1)
          (("2" (LIFT-IF 1)
            (("2" (ASSERT)
              (("2" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "max_length" 1 2)
                        (("1" (LEMMA "length_append[nat]")
                          (("1" (INST?)
                            (("1" (REPLACE -1)
                              (("1" (LEMMA "length_appendn[nat]")
                                (("1" (INST?)
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "length" 1 2)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "max_length" 2 2)
                        (("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_length_nth_TCC1| 0
  (|lft_length_nth_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (TYPEPRED "j")
      (("" (LEMMA "Lft_length")
        (("" (INST?) (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft_length_nth| SUBTYPE "standard_form_mult_poly.j"
    "below[length[monomial](lft(p)(n))]")))
 (|lft_length_nth| 0
  (|lft_length_nth-1| |nil| 3810977461
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (EXPAND "lft") (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (CASE "cons2_var = null")
            (("1" (REPLACE -1)
              (("1" (SKEEP)
                (("1" (TYPEPRED "j")
                  (("1" (EXPAND "length" -1)
                    (("1" (EXPAND "length" -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth" 1)
                          (("1" (EXPAND "lft" 1)
                            (("1" (LIFT-IF 1)
                              (("1" (SPLIT 1)
                                (("1" (FLATTEN)
                                  (("1" (LEMMA "length_append[nat]")
                                    (("1" (INST?)
                                      (("1" (REPLACE -1)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "length_appendn[nat]")
                                            (("1" (INST?)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (EXPAND "length" 1 2)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "n")
                                                (("2" (REPLACE -5)
                                                  (("2"
                                                    (EXPAND "max_length" -1)
                                                    (("2"
                                                      (EXPAND "max_length" -1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "n")
                                        (("2" (EXPAND "max_length" -1)
                                          (("2" (EXPAND "max_length" -1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "n")
                                      (("2" (EXPAND "max_length" -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (EXPAND "lft" 2)
                  (("2" (LIFT-IF)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (CASE "j=0")
                          (("1" (REPLACE -1)
                            (("1" (EXPAND "nth" 1)
                              (("1" (TYPEPRED "n")
                                (("1" (EXPAND "max_length" -1)
                                  (("1" (LEMMA "length_append[nat]")
                                    (("1" (INST?)
                                      (("1" (REPLACE -1)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "length_appendn[nat]")
                                            (("1" (INST?)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "nth" 2)
                            (("2" (ASSERT)
                              (("2" (INST -3 "n")
                                (("2" (INST -3 "j-1")
                                  (("2" (TYPEPRED "j")
                                    (("2" (EXPAND "length" -1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (CASE "j=0")
                          (("1" (EXPAND "nth" 2)
                            (("1" (ASSERT)
                              (("1" (ASSERT)
                                (("1" (TYPEPRED "n")
                                  (("1" (EXPAND "max_length" -1)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "nth" 3)
                            (("2" (ASSERT)
                              (("2" (INST -1 "n")
                                (("2" (INST -1 "j-1")
                                  (("2" (TYPEPRED "j")
                                    (("2" (EXPAND "length" -1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (ASSERT)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "j")
            (("4" (LEMMA "Lft_length")
              (("4" (INST?) (("4" (REPLACE -1) (("4" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_nth_C_TCC1| 0
  (|lft_nth_C_TCC1-1| |nil| 3813581540
   ("" (SKEEP)
    (("" (LEMMA "Lft_length") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|lft_nth_C| SUBTYPE "standard_form_mult_poly.i"
    "below[length[monomial](lft(p)(n))]")))
 (|lft_nth_C| 0
  (|lft_nth_C-1| |nil| 3813582353
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "nth" 1)
            (("1" (ASSERT)
              (("1" (EXPAND "lft" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "nth" 2 1)
            (("2" (ASSERT)
              (("2" (EXPAND "nth" 2 2)
                (("2" (ASSERT)
                  (("2" (EXPAND "lft" 2 1)
                    (("2" (ASSERT) (("2" (INST -1 "n" "i-1") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (ASSERT)
      (("3" (LEMMA "Lft_length")
        (("3" (HIDE 2)
          (("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_nth_alpha_TCC1| 0
  (|lft_nth_alpha_TCC2-1| |nil| 3813656195
   ("" (SKEEP)
    (("" (TYPEPRED "n")
      (("" (LEMMA "max_length_is_max")
        (("" (INST?)
          (("1" (ASSERT) NIL NIL)
           ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft_nth_alpha| SUBTYPE
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.i)`alpha)))"
    "nat")))
 (|lft_nth_alpha| 0
  (|lft_nth_alpha-1| |nil| 3813656446
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (LEMMA "lft_is_alt")
            (("1" (INST?)
              (("1" (REPLACE -1 1)
                (("1" (EXPAND "lft_alt" 1)
                  (("1" (EXPAND "map" 1 1)
                    (("1" (EXPAND "nth" 1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "lft_one" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "nth" 2)
            (("2" (ASSERT)
              (("2" (EXPAND "lft" 2)
                (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "max_length_is_max")
          (("3" (INST?)
            (("1" (ASSERT) NIL NIL)
             ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)) NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (TYPEPRED "i")
          (("5" (LEMMA "Lft_length")
            (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|lft_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|lft_Unif_TCC1| 0
  (|lft_Unif_TCC1-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|lft_Unif| SUBTYPE
    "standard_form_mult_poly.max_length(standard_form_mult_poly.p)"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.p))}")))
 (|lft_Unif| 0
  (|lft_Unif-1| |nil| 3810977466
   ("" (SKEEP)
    (("" (CASE "p = null")
      (("1" (REPLACE -1)
        (("1" (EXPAND "lft")
          (("1" (ASSERT) (("1" (EXPAND "Unif?") (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "Unif?")
        (("2" (CASE "lft(p)(max_length(p)) = null")
          (("1" (ASSERT) NIL NIL)
           ("2" (FLATTEN)
            (("2" (SKEEP)
              (("2" (LEMMA "lft_length_nth")
                (("2" (INST?)
                  (("1" (REPLACE -1)
                    (("1" (LEMMA "lft_length_nth")
                      (("1" (INST -1 "p" "max_length(p)" "j")
                        (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (TYPEPRED "j")
                          (("2" (LEMMA "Lft_length")
                            (("2" (INST?)
                              (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "i")
                    (("2" (LEMMA "Lft_length")
                      (("2" (INST?)
                        (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_n_last_TCC1| 0
  (|lft_n_last_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" -1) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)) NIL
   (|lft_n_last| SUBTYPE
    "list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|lft_n_last_TCC2| 0
  (|lft_n_last_TCC3-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "lft_length_nth")
      (("" (INST?)
        (("1" (EXPAND "length" -1)
          (("1" (LIFT-IF -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT)
          (("2" (TYPEPRED "j")
            (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft_n_last| SUBTYPE
    "list_props[monomial].nth(standard_form_mult_poly.lft(standard_form_mult_poly.p)(standard_form_mult_poly.n), standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|lft_n_last| 0
  (|lft_n_last-1| |nil| 3810977468
   ("" (INDUCT "p")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "j=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" -3)
              (("1" (HIDE 1)
                (("1" (EXPAND "lft" 1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "nth" 3)
            (("2" (ASSERT)
              (("2" (EXPAND "lft" 3)
                (("2" (ASSERT)
                  (("2" (EXPAND "nth" -2)
                    (("2" (INST -1 "n" "j-1") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "lft_length_nth")
        (("3" (INST? -1)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (TYPEPRED "n")
                (("2" (EXPAND "max_length") (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (TYPEPRED "j")
          (("4" (LEMMA "Lft_length")
            (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (EXPAND "length" -1)
        (("5" (LIFT-IF -1) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|lft_n_max_length| 0
  (|lft_n_max_length-1| |nil| 3814224639
   ("" (SKEEP)
    (("" (LEMMA "max_length_is_nth")
      (("" (INST?)
        (("1" (ASSERT)
          (("1" (SKEEP)
            (("1" (LEMMA "lft_length_nth")
              (("1" (INST?)
                (("1" (ASSERT) NIL NIL)
                 ("2" (TYPEPRED "j")
                  (("2" (LEMMA "Lft_length")
                    (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "Lft_length")
          (("2" (INST?)
            (("2" (EXPAND "length" -1)
              (("2" (LIFT-IF -1)
                (("2" (SPLIT -1)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|leq_TCC1| 0
  (|leq_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" 5 2) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|leq| TERMINATION
    "standard_form_mult_poly.leq((# C := standard_form_mult_poly.l1`C, alpha := list_adt[nat].cdr(standard_form_mult_poly.l1`alpha) #), (# C := standard_form_mult_poly.l2`C, alpha := list_adt[nat].cdr(standard_form_mult_poly.l2`alpha) #))"
    "NIL")))
 (|leq_reflexive| 0
  (|leq_reflexive-1| |nil| 3810977472
   ("" (EXPAND "reflexive?")
    (("" (EXPAND "leq")
      ((""
        (CASE
            " FORALL (m:nat, x: monomial): length(x`alpha)=m IMPLIES ((null?(x`alpha) AND null?(x`alpha)) OR cons?(x`alpha) AND cons?(x`alpha) AND leq((# C := x`C, alpha := cdr(x`alpha) #), (# C := x`C, alpha := cdr(x`alpha) #)))")
        (("1" (SKEEP)
          (("1" (INST -1 "length(x`alpha)" "x")
            (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (INDUCT "m")
          (("1" (SKEEP)
            (("1" (HIDE 3)
              (("1" (EXPAND "length" -1)
                (("1" (LIFT-IF -1)
                  (("1" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (EXPAND "length" -2)
                  (("2" (LIFT-IF -2)
                    (("2" (SPLIT -2)
                      (("1" (FLATTEN -1)
                        (("1" (TYPEPRED "j") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (FLATTEN -1)
                        (("2" (SIMPLIFY -1)
                          (("2"
                            (INST -2 "(# C := x`C, alpha := cdr(x`alpha) #)")
                            (("2" (ASSERT)
                              (("2" (ASSERT)
                                (("2" (EXPAND "leq" 3) (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|reflexive?| CONST-DECL "bool" |relations| NIL))
   SHOSTAK))
 (|leq_transitive| 0
  (|leq_transitive-1| |nil| 3810977475
   ("" (EXPAND "transitive?" 1)
    ((""
      (CASE
          "FORALL (n:nat, x: monomial), (y: monomial), (z: monomial): length(x`alpha)=n IMPLIES ( leq(x, y) & leq(y, z) => leq(x, z))")
      (("1" (SKEEP)
        (("1" (INST -1 "length(x`alpha)" "x" "y" "z") (("1" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (CASE "length(x`alpha) = length(y`alpha)")
              (("1" (CASE "length(z`alpha) = length(y`alpha)")
                (("1" (EXPAND "length" -)
                  (("1" (LIFT-IF)
                    (("1" (ASSERT)
                      (("1" (LIFT-IF)
                        (("1" (SPLIT)
                          (("1" (ASSERT)
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (ASSERT)
                                      (("1" (SPLIT)
                                        (("1" (EXPAND "leq")
                                          (("1" (FLATTEN) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF)
                                (("2" (SPLIT)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SPLIT)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "leq" 2 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (EXPAND "leq" -2)
                (("2" (ASSERT)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "leq" 2)
                      (("2" (EXPAND "leq" -2)
                        (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (CASE "NOT length(x`alpha) = length(y`alpha)")
                (("1" (EXPAND "leq" -3)
                  (("1" (ASSERT)
                    (("1" (EXPAND "leq" -4)
                      (("1" (CASE "length(y`alpha) < length(z`alpha)")
                        (("1" (ASSERT)
                          (("1" (EXPAND "leq" 2) (("1" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE "NOT length(y`alpha) = length(z`alpha)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "leq" 3) (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "leq" -4)
                  (("2" (ASSERT)
                    (("2" (CASE "length(y`alpha)< length(z`alpha)")
                      (("1" (ASSERT)
                        (("1" (EXPAND "leq" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "leq" 2 1)
                          (("2" (FLATTEN)
                            (("2"
                              (CASE "NOT length(y`alpha) = length(z`alpha)")
                              (("1" (ASSERT)
                                (("1" (EXPAND "leq" -5)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "leq" -6)
                                  (("2" (ASSERT)
                                    (("2" (CASE "sum(x`alpha) < sum(y`alpha)")
                                      (("1"
                                        (CASE "sum(y`alpha) < sum(z`alpha)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (CASE "sum(x`alpha) = sum(y`alpha)")
                                          (("1" (ASSERT)
                                            (("1"
                                              (CASE
                                                  "(sum(y`alpha) = sum(z`alpha))")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      "car(x`alpha) < car(y`alpha)")
                                                  (("1"
                                                    (CASE
                                                        "car(y`alpha) < car(z`alpha)")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (CASE
                                                          "car(y`alpha) = car(z`alpha)")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "car(x`alpha) = car(y`alpha)")
                                                      (("1"
                                                        (CASE
                                                            "car(y`alpha) < car(z`alpha)")
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (INST -6
                                                                 "(# C := x`C, alpha := cdr(x`alpha) #)"
                                                                 "(# C := y`C, alpha := cdr(y`alpha) #)"
                                                                 "(# C := z`C, alpha := cdr(z`alpha) #)")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -6)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL))
   SHOSTAK))
 (|leq_dichotomous| 0
  (|leq_dichotomous-1| |nil| 3810977483
   ("" (EXPAND "dichotomous?")
    ((""
      (CASE
          "FORALL (n:nat, x: monomial), (y: monomial): (length(x`alpha) =n) IMPLIES (leq(x, y) OR leq(y, x))")
      (("1" (SKEEP)
        (("1" (INST -1 "length(x`alpha)" "x" "y") (("1" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (EXPAND "leq" 1)
              (("1" (ASSERT)
                (("1" (CASE "length(y`alpha)=0")
                  (("1" (ASSERT)
                    (("1" (EXPAND "length" -)
                      (("1" (LIFT-IF -1)
                        (("1" (SPLIT -1)
                          (("1" (FLATTEN)
                            (("1" (LIFT-IF -2)
                              (("1" (SPLIT -2)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (EXPAND "leq" +)
                (("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (CASE "NOT length(y`alpha) = length(x`alpha)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (ASSERT)
                          (("2" (HIDE 2 7)
                            (("2"
                              (INST -2 "(# C := y`C, alpha := cdr(y`alpha) #)"
                               "(# C := x`C, alpha := cdr(x`alpha) #)")
                              (("2" (ASSERT)
                                (("2" (EXPAND "length" -1)
                                  (("2" (EXPAND "length" -2)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|dichotomous?| CONST-DECL "bool" |orders| NIL))
   SHOSTAK))
 (|almost_total_order| 0
  (|almost_total_order-1| |nil| 3810977487
   (""
    (CASE
        "FORALL (n:nat, m1, m2: monomial): length(m1`alpha) = n IMPLIES ( leq(m1, m2) AND leq(m2, m1) IMPLIES m1`alpha = m2`alpha)")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m1`alpha)" "m1" "m2") (("1" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF)
              (("1" (SPLIT -1)
                (("1" (EXPAND "leq")
                  (("1" (ASSERT)
                    (("1" (FLATTEN)
                      (("1" (SPLIT -2)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "length" -2)
              (("2" (LIFT-IF -2)
                (("2" (ASSERT)
                  (("2" (SPLIT -2)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "leq" -3)
                        (("2" (EXPAND "leq" -4)
                          (("2" (SPLIT -3)
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                             ("3" (ASSERT)
                              (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)
                             ("5" (FLATTEN)
                              (("5" (ASSERT)
                                (("5"
                                  (INST -8
                                   "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                   "(# C := m2`C, alpha := cdr(m2`alpha) #)")
                                  (("5" (ASSERT)
                                    (("5" (HIDE -6)
                                      (("5" (HIDE -8)
                                        (("5" (HIDE -6)
                                          (("5"
                                            (CASE
                                                "FORALL(l1,l2:list[nat]): cons?(l1) AND cons?(l2) IMPLIES (car(l1)=car(l2) AND cdr(l1) = cdr(l2))  IMPLIES l1=l2")
                                            (("1"
                                              (INST -1 "m1`alpha" "m2`alpha")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2" (SKEEP)
                                                (("2"
                                                  (LEMMA
                                                   "list_extensionality[nat]")
                                                  (("2" (INST -1 "l1" "l2")
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "length" 1)
                                                        (("2" (SKEEP)
                                                          (("2" (CASE "n=0")
                                                            (("1"
                                                              (EXPAND "nth" 1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "nth" 2)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|IMP_bubblesort_TCC1| 0
  (|IMP_bubblesort_TCC1-1| |nil| 3810975173
   ("" (EXPAND "total_preorder?")
    (("" (LEMMA "leq_reflexive")
      (("" (LEMMA "leq_transitive")
        (("" (LEMMA "leq_dichotomous")
          (("" (ASSERT)
            (("" (EXPAND "preorder?" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq_reflexive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_dichotomous| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|preorder?| CONST-DECL "bool" |orders| NIL)
    (|leq_transitive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|))
   NIL
   (|IMP_bubblesort| SUBTYPE "standard_form_mult_poly.leq"
    "(total_preorder[monomial].total_preorder?)")))
 (|leq_total_preorder| 0
  (|leq_total_preorder-1| |nil| 3810977491
   ("" (EXPAND "total_preorder?")
    (("" (LEMMA "leq_dichotomous")
      (("" (ASSERT)
        (("" (EXPAND "preorder?")
          (("" (LEMMA "leq_reflexive")
            (("" (LEMMA "leq_transitive") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq_dichotomous| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|preorder?| CONST-DECL "bool" |orders| NIL)
    (|leq_transitive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_reflexive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|))
   SHOSTAK))
 (|mv_sort_ex1| 0
  (|mv_sort_ex1-1| |nil| 3810977493 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|sort_of_unif| 0
  (|sort_of_unif-1| |nil| 3811579596
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_sort")
      (("" (SPLIT 1)
        (("1" (FLATTEN) (("1" (EXPAND "Unif?") (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "Unif?")
            (("2" (FLATTEN)
              (("2" (SKEEP :PREDS? T)
                (("2" (LEMMA "bubblesort_works")
                  (("2" (INST?)
                    (("2" (FLATTEN)
                      (("2" (REWRITE "permutations_is_commutative")
                        (("1" (LEMMA "permutations_preserve_contents")
                          (("1"
                            (INST-CP -1 "bubblesort(lft(p)(max_length(p)))"
                             "lft(p)(max_length(p))" "i")
                            (("1" (ASSERT)
                              (("1" (SKOLEM -2 "i1")
                                (("1"
                                  (INST -1 "bubblesort(lft(p)(max_length(p)))"
                                   "lft(p)(max_length(p))" "j")
                                  (("1" (ASSERT)
                                    (("1" (SKOLEM -1 "j1")
                                      (("1" (LEMMA "lft_Unif")
                                        (("1" (INST?)
                                          (("1" (EXPAND "Unif?")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -1)
                                                (("1" (EXPAND "lft" -1)
                                                  (("1" (CASE "length(p) < 1")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (EXPAND "length" -1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (ASSERT)
                                                        (("2" (LIFT-IF -1)
                                                          (("2" (SPLIT -1)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -1 "i1" "j1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "leq_total_preorder")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "leq_total_preorder")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "leq_total_preorder")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bubblesort_works| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lft_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (|bubblesort| CONST-DECL "list[T]" |bubblesort| |sorting|)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_sort_max_length| 0
  (|mv_sort_max_length-1| |nil| 3814220335
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_sort")
      (("" (LIFT-IF 1)
        (("" (SPLIT 1)
          (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (LEMMA "max_length_is_nth")
              (("2" (INST-CP -1 "bubblesort(lft(p)(max_length(p)))")
                (("1" (INST -1 "p")
                  (("1" (SKEEP*)
                    (("1" (LEMMA "bubblesort_works")
                      (("1" (INST?)
                        (("1" (FLATTEN)
                          (("1" (REWRITE "permutations_is_commutative")
                            (("1" (LEMMA "permutations_preserve_contents")
                              (("1"
                                (INST-CP -1 "bubblesort(lft(p)(max_length(p)))"
                                 "lft(p)(max_length(p))" "j!1")
                                (("1" (ASSERT)
                                  (("1" (SKEEP -2)
                                    (("1"
                                      (INST -1
                                       "bubblesort(lft(p)(max_length(p)))"
                                       "lft(p)(max_length(p))" "j")
                                      (("1" (ASSERT)
                                        (("1" (SKOLEM -1 "j1")
                                          (("1" (LEMMA "max_length_lft")
                                            (("1" (INST -1 "p" "max_length(p)")
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "lft_length_nth")
                                                  (("1"
                                                    (INST-CP -1 "p"
                                                     "max_length(p)" "j!2")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (TYPEPRED "j!2")
                                                      (("2"
                                                        (LEMMA "Lft_length")
                                                        (("2" (INST?)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "j")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "bubblesort" 1 1)
                                            (("2" (LIFT-IF 1)
                                              (("2" (SPLIT 1)
                                                (("1" (FLATTEN)
                                                  (("1" (LEMMA "Lft_length")
                                                    (("1" (INST?)
                                                      (("1"
                                                        (EXPAND "length" -1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2"
                                                    (LEMMA
                                                     "bubblesort_aux_preserves_length")
                                                    (("2" (INST?)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (LEMMA "Lft_length")
                                                          (("2" (INST?)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (LEMMA "leq_total_preorder")
                                        (("3" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "leq_total_preorder")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "leq_total_preorder")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "bubblesort" 1 1)
                    (("2" (LIFT-IF 1)
                      (("2" (SPLIT 1)
                        (("1" (FLATTEN)
                          (("1" (LEMMA "Lft_length")
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -1)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (LEMMA "bubblesort_aux_preserves_length")
                            (("2" (INST?)
                              (("1"
                                (CASE "cons?
          (bubblesort_aux(lft(p)(max_length(p)),
                          length[monomial](lft(p)(max_length(p))) - 1))")
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "length" -1 1)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" -1 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (ASSERT)
                                  (("3" (LEMMA "leq_total_preorder")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL)
                                 ("4" (LEMMA "Lft_length")
                                  (("4" (INST?)
                                    (("4" (ASSERT)
                                      (("4" (HIDE -2)
                                        (("4" (EXPAND "length" -1)
                                          (("4" (ASSERT)
                                            (("4" (EXPAND "length" 1 1)
                                              (("4" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "length" 1 1)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|bubblesort_aux| DEF-DECL "list[T]" |bubblesort| |sorting|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|bubblesort_works| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_length_lft| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|bubblesort_aux_preserves_length| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|bubblesort| CONST-DECL "list[T]" |bubblesort| |sorting|)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_sort_is_sorted| 0
  (|mv_sort_is_sorted-1| |nil| 3810977495
   ("" (SKEEP)
    (("" (EXPAND "mv_sort")
      (("" (SPLIT)
        (("1" (EXPAND "mv_is_sorted?")
          (("1" (EXPAND "is_sorted?")
            (("1" (ASSERT)
              (("1" (EXPAND "Unif?") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (LEMMA "bubblesort_is_sorted")
            (("2" (LEMMA "sort_of_unif")
              (("2" (EXPAND "mv_is_sorted?")
                (("2" (EXPAND "mv_sort")
                  (("2" (ASSERT)
                    (("2" (INST?) (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|sort_of_unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|bubblesort_is_sorted| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|))
   SHOSTAK))
 (|cons_smaller_to_sorted_is_sorted| 0
  (|cons_smaller_to_sorted_is_sorted-1| |nil| 3810977497
   ("" (SKEEP)
    (("" (EXPAND "is_sorted?")
      (("" (SKEEP)
        (("" (CASE "k=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "nth" 2)
            (("2" (ASSERT)
              (("2" (INST -2 "k-1")
                (("2" (EXPAND "length" -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|add_mono_sorted_TCC1| 0
  (|add_mono_sorted_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (TYPEPRED "m2") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|add_mono_sorted| SUBTYPE "standard_form_mult_poly.m2"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = standard_form_mult_poly.m1`alpha}")))
 (|add_mono_sorted| 0
  (|add_mono_sorted-1| |nil| 3810977499
   ("" (SKEEP)
    (("" (EXPAND "is_sorted?" 1)
      (("" (SKEEP)
        (("" (CASE "k=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "nth" 2)
            (("2" (ASSERT)
              (("2" (EXPAND "is_sorted?" -2)
                (("2" (INST -2 "k-1")
                  (("2" (EXPAND "length" -4) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|constant_doesnt_matter| 0
  (|constant_doesnt_matter-1| |nil| 3810977501
   (""
    (CASE
        "FORALL (n:nat, m1, m2, m3: monomial): length(m1`alpha) = n  IMPLIES ( leq(m1, m3) AND m1`alpha = m2`alpha IMPLIES leq(m2, m3))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m1`alpha)" "m1" "m2" "m3")
        (("1" (ASSERT) NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (ASSERT)
            (("1" (EXPAND "leq" 1 1)
              (("1" (REPLACE -3 -1)
                (("1" (REPLACE -3 -1 RL)
                  (("1" (REPLACE -3 -1)
                    (("1" (EXPAND "length" -1)
                      (("1" (LIFT-IF -1)
                        (("1" (SPLIT -1)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" 1 1)
                                (("1" (EXPAND "length" 1 1)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "leq" -3)
              (("2" (EXPAND "leq" 1)
                (("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (SPLIT -3)
                      (("1" (FLATTEN)
                        (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                       ("3" (FLATTEN)
                        (("3" (ASSERT)
                          (("3" (REPLACE -8)
                            (("3" (ASSERT)
                              (("3"
                                (INST -6
                                 "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                 "(# C := m2`C, alpha := cdr(m2`alpha) #)"
                                 "(# C := m3`C, alpha := cdr(m3`alpha) #)")
                                (("3" (ASSERT)
                                  (("3" (EXPAND "length" -6)
                                    (("3" (REVEAL -)
                                      (("3" (HIDE -1 -2)
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|constant_doesnt_matter_last| 0
  (|constant_doesnt_matter_last-1| |nil| 3810977506
   (""
    (CASE
        "FORALL (n:nat,m1, m2, m3: monomial): (length(m1`alpha) = n AND leq(m1, m2) AND m2`alpha = m3`alpha) IMPLIES leq(m1, m3)")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m1`alpha)" "m1" "m2" "m3")
        (("1" (ASSERT) NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT -1)
                (("1" (EXPAND "leq" 1)
                  (("1" (ASSERT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "leq" -3)
              (("2" (EXPAND "leq" 1)
                (("2" (REPLACE -4)
                  (("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (SPLIT -3)
                          (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                           ("3" (FLATTEN)
                            (("3" (HIDE 1)
                              (("3" (HIDE 1)
                                (("3" (HIDE 1)
                                  (("3" (ASSERT)
                                    (("3"
                                      (INST -6
                                       "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                       "(# C := m2`C, alpha := cdr(m3`alpha) #)"
                                       "(# C := m3`C, alpha := cdr(m3`alpha) #)")
                                      (("3" (EXPAND "length" -7)
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|append_leq| 0
  (|append_leq-1| |nil| 3810977509
   (""
    (CASE
        "FORALL (n:nat,l: list[nat], m1: monomial,m2: {mm: monomial | length(m1`alpha) = length(mm`alpha)}): LET M1: [# alpha: list[nat], C: real #] = (# C := m1`C, alpha := append(m1`alpha, l) #), M2: [# alpha: list[nat], C: real #] = (# C := m2`C, alpha := append(m2`alpha, l) #) IN length(m1`alpha) =n AND leq(m1, m2) IMPLIES leq(M1, M2)")
    (("1" (SKEEP) (("1" (INST -1 "length(m1`alpha)" "l" "m1" "m2") NIL NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (INDUCT "l")
          (("1" (SKEEP)
            (("1" (LEMMA "append_null_right[nat]")
              (("1" (LEMMA "append_null_right[nat]")
                (("1" (INST? -1)
                  (("1" (REPLACE -1)
                    (("1" (INST -2 "m2`alpha")
                      (("1" (REPLACE -2)
                        (("1" (EXPAND "leq") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (EXPAND "length" -2)
                (("2" (LIFT-IF -2)
                  (("2" (SPLIT -2)
                    (("1" (TYPEPRED "m2")
                      (("1" (EXPAND "length" -1)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF -1)
                            (("1" (SPLIT -1)
                              (("1" (LEMMA "append_null_left[nat]")
                                (("1" (INST -1 "cons(cons1_var,cons2_var)")
                                  (("1"
                                    (CASE
                                        "m1`alpha = (: :) AND m2`alpha = (: :)")
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -1)
                                        (("1" (REPLACE -2)
                                          (("1" (REPLACE -3)
                                            (("1" (HIDE -1)
                                              (("1" (HIDE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (HIDE -1)
                                                    (("1" (HIDE -1)
                                                      (("1" (EXPAND "leq" 1)
                                                        (("1"
                                                          (INST -1
                                                           "(# C := m1`C, alpha := (: :) #)"
                                                           "(# C := m2`C, alpha := (: :) #)")
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("1"
                                                              (EXPAND "leq" -1
                                                                      1)
                                                              (("1"
                                                                (LEMMA
                                                                 "append_null_left[nat]")
                                                                (("1"
                                                                  (INST -1
                                                                   "cons2_var")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (SKEEP)
            (("3" (EXPAND "length" -2)
              (("3" (LIFT-IF -2)
                (("3" (SPLIT -2)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (TYPEPRED "m2")
                        (("2" (EXPAND "leq" -4)
                          (("2" (SPLIT -4)
                            (("1" (EXPAND "leq" 2)
                              (("1" (LEMMA "sum_append")
                                (("1" (INST? -1)
                                  (("1" (LEMMA "length_append[nat]")
                                    (("1" (INST? -1)
                                      (("1" (REPLACE -1)
                                        (("1" (LEMMA "length_append[nat]")
                                          (("1" (INST -1 "m2`alpha" "l")
                                            (("1" (REPLACE -1)
                                              (("1" (ASSERT)
                                                (("1" (HIDE -1)
                                                  (("1" (HIDE -1)
                                                    (("1" (REPLACE -1)
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (LEMMA "sum_append")
                                                          (("1"
                                                            (INST -1 "m2`alpha"
                                                             "l")
                                                            (("1" (REPLACE -1)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (EXPAND "sum"
                                                                          2 2)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (LIFT-IF
                                                                       3)
                                                                      (("1"
                                                                        (SPLIT
                                                                         3)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sum"
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "sum"
                                                                             2
                                                                             4)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "leq" 2)
                              (("2" (FLATTEN)
                                (("2" (LEMMA "length_append[nat]")
                                  (("2" (INST? -1)
                                    (("2" (REPLACE -1)
                                      (("2" (HIDE -1)
                                        (("2" (LEMMA "length_append[nat]")
                                          (("2" (INST -1 "m2`alpha" "l")
                                            (("2" (REPLACE -1)
                                              (("2" (ASSERT)
                                                (("2" (HIDE -1)
                                                  (("2" (REPLACE -4)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA "sum_append")
                                                        (("2"
                                                          (LEMMA "sum_append")
                                                          (("2" (INST? -1)
                                                            (("2" (REPLACE -1)
                                                              (("2" (HIDE -1)
                                                                (("2"
                                                                  (INST -1
                                                                   "m2`alpha"
                                                                   "l")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("2"
                                                                      (HIDE -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "car_append[nat]")
                                                                            (("2"
                                                                              (LEMMA
                                                                               "car_append[nat]")
                                                                              (("2"
                                                                                (INST?
                                                                                 -1)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "l"
                                                                                       "m2`alpha")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             6)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               4)
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "length_append[nat]")
                                                                                                    (("2"
                                                                                                      (INST?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (LIFT-IF
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (SPLIT
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (FLATTEN)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (HIDE
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (LEMMA
                                                                                                                       "length_append[nat]")
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "m1`alpha"
                                                                                                                         "l")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "length"
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "length"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "leq" 2)
                              (("3" (FLATTEN)
                                (("3" (HIDE 2)
                                  (("3" (HIDE 2)
                                    (("3" (HIDE 2)
                                      (("3" (HIDE 2)
                                        (("3" (LEMMA "length_append[nat]")
                                          (("3" (LEMMA "length_append[nat]")
                                            (("3" (INST -1 "m1`alpha" "l")
                                              (("3" (REPLACE -1)
                                                (("3" (EXPAND "length" -1 2)
                                                  (("3" (EXPAND "length" -1 1)
                                                    (("3" (LIFT-IF -1)
                                                      (("3" (SPLIT -1)
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT)
                                                            (("2" (HIDE -1)
                                                              (("2"
                                                                (INST -1
                                                                 "m2`alpha"
                                                                 "l")
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1 1)
                                                                        (("2"
                                                                          (LIFT-IF)
                                                                          (("2"
                                                                            (SPLIT
                                                                             -1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "sum_append")
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "sum_append")
                                                                                      (("2"
                                                                                        (INST?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "m2`alpha"
                                                                                               "l")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "car_append[nat]")
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "car_append[nat]")
                                                                                                        (("2"
                                                                                                          (INST?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (HIDE
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (INST?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (REPLACE
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (HIDE
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "cdr_append[nat]")
                                                                                                                        (("2"
                                                                                                                          (LEMMA
                                                                                                                           "cdr_append[nat]")
                                                                                                                          (("2"
                                                                                                                            (INST?
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (REPLACE
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (HIDE
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (INST
                                                                                                                                   -1
                                                                                                                                   "l"
                                                                                                                                   "m2`alpha")
                                                                                                                                  (("2"
                                                                                                                                    (REPLACE
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (HIDE
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -7
                                                                                                                                         "l"
                                                                                                                                         "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                                                                                                                         "(# C := m2`C, alpha := cdr(m2`alpha) #)")
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          NIL
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (TYPEPRED
                                                                                                                                           "m2")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "length"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (PROPAX)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL NIL
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|sum_append| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL))
   SHOSTAK))
 (|sortedsimplify_TCC1| 0
  (|sortedsimplify_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|sortedsimplify| SUBTYPE
    "list_adt[monomial].cdr(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (|sortedsimplify_TCC2| 0
  (|sortedsimplify_TCC2-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|sortedsimplify| SUBTYPE
    "list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = list_adt[monomial].car(standard_form_mult_poly.p)`alpha}")))
 (|sortedsimplify_TCC3| 0
  (|sortedsimplify_TCC3-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "add_mono")
      (("" (REPLACE -1)
        (("" (CASE "cdr(cdr(p)) = null")
          (("1" (REPLACE -1)
            (("1" (EXPAND "is_sorted?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (LEMMA "cons_smaller_to_sorted_is_sorted")
            (("2" (INST?)
              (("2" (ASSERT)
                (("2" (TYPEPRED "p")
                  (("2" (LEMMA "cdr_of_sorted_is_sorted")
                    (("2" (INST -1 "p")
                      (("2" (ASSERT)
                        (("2" (LEMMA "cdr_of_sorted_is_sorted")
                          (("2" (INST -1 "cdr(p)")
                            (("2" (ASSERT)
                              (("2" (EXPAND "is_sorted?" -2)
                                (("2" (INST -2 "0")
                                  (("1" (EXPAND "length" -2)
                                    (("1" (EXPAND "length" -2)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" -2)
                                          (("1" (LIFT-IF -2)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "nth" -2)
                                                (("1" (SPLIT -2)
                                                  (("1" (FLATTEN)
                                                    (("1" (HIDE -1)
                                                      (("1" (EXPAND "nth" -1)
                                                        (("1"
                                                          (LEMMA
                                                           "constant_doesnt_matter")
                                                          (("1"
                                                            (INST -1
                                                             "car(cdr(p))"
                                                             "(# C:= car[monomial](cdr[monomial](p))`C +car[monomial](p)`C,alpha :=car(cdr(p))`alpha #)"
                                                             "car(cdr(cdr(p)))")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "nth" -1)
                                                        (("2"
                                                          (LEMMA
                                                           "constant_doesnt_matter")
                                                          (("2"
                                                            (INST -1
                                                             "car(cdr(p))"
                                                             "(# C:= car[monomial](cdr[monomial](p))`C +car[monomial](p)`C,alpha :=car(cdr(p))`alpha #)"
                                                             "car(cdr(cdr(p)))")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "length" 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL))
   NIL
   (|sortedsimplify| SUBTYPE
    "list_adt[monomial].cons(standard_form_mult_poly.add_mono(list_adt[monomial].car(standard_form_mult_poly.p), list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))), list_adt[monomial].cdr(list_adt[monomial].cdr(standard_form_mult_poly.p)))"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (|sortedsimplify_TCC4| 0
  (|sortedsimplify_TCC4-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" 3 1)
      (("" (EXPAND "length" 3 2)
        (("" (ASSERT) (("" (EXPAND "length" 3 2) (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|sortedsimplify| TERMINATION
    "standard_form_mult_poly.sortedsimplify(list_adt[monomial].cons(standard_form_mult_poly.add_mono(list_adt[monomial].car(standard_form_mult_poly.p), list_adt[monomial].car(list_adt[monomial].cdr(standard_form_mult_poly.p))), list_adt[monomial].cdr(list_adt[monomial].cdr(standard_form_mult_poly.p))))"
    "NIL")))
 (|sortedsimplify_TCC5| 0
  (|sortedsimplify_TCC5-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (LEMMA "cdr_of_sorted_is_sorted")
        (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|))
   NIL
   (|sortedsimplify| SUBTYPE
    "list_adt[monomial].cdr(standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (|simplify_TCC1| 0
  (|simplify_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "mv_sort")
      (("" (SPLIT 2)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (EXPAND "is_sorted?" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (LEMMA "bubblesort_is_sorted") (("2" (INST? -1) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|bubblesort_is_sorted| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|simplify| SUBTYPE
    "standard_form_mult_poly.mv_sort(standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (|simplify_cdr| 0
  (|simplify_cdr-1| |nil| 3810977529
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "simplified?")
        (("" (SPLIT 1)
          (("1" (PROPAX) NIL NIL)
           ("2" (FLATTEN)
            (("2" (SPLIT 3)
              (("1" (PROPAX) NIL NIL)
               ("2" (SKEEP)
                (("2" (SPLIT -3)
                  (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT -1)
                      (("1" (INST -1 "i+1" "j+1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)
                         ("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|simplify_cons| 0
  (|simplify_cons-1| |nil| 3810977531
   (""
    (CASE
        "FORALL (n:nat, p: MultPoly | is_sorted?(p)): length(p) = n AND cons?(p) IMPLIES cons?(sortedsimplify(p))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(p)" "p") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT)
                (("1" (ASSERT) NIL NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "sortedsimplify" 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1"
                              (INST -2
                               "cons(add_mono(car(p), car(cdr(p))),cdr(cdr(p)))")
                              (("1" (EXPAND "length" -2)
                                (("1" (EXPAND "length" -3)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" -2)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (ASSERT)
            (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|leq_simplify_TCC1| 0
  (|leq_simplify_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "simplify_cons") (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|leq_simplify| SUBTYPE
    "standard_form_mult_poly.sortedsimplify(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (|leq_simplify| 0
  (|leq_simplify-1| |nil| 3810977534
   (""
    (CASE
        "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p), m: monomial): length(p) = n AND leq(m, car(p)) IMPLIES leq(m, car(sortedsimplify(p)))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(p)" "p" "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "sortedsimplify" 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "length" -3)
                          (("1" (EXPAND "length" -3)
                            (("1" (ASSERT)
                              (("1"
                                (INST -2
                                 "cons(add_mono(car(p), car(cdr(p))),cdr(cdr(p)))"
                                 "m")
                                (("1" (EXPAND "length" -2)
                                  (("1" (EXPAND "add_mono" 3)
                                    (("1" (LEMMA "constant_doesnt_matter_last")
                                      (("1"
                                        (INST -1 "m" "car(p)"
                                         "(# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #)")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "p")
                                  (("2" (HIDE -1)
                                    (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                      (("2" (INST -1 "p")
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "cdr_of_sorted_is_sorted")
                                            (("2" (INST -1 "cdr(p)")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2"
                                                    (CASE "cdr(cdr(p))=null")
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (EXPAND "is_sorted?" 1)
                                                        (("1" (SKEEP)
                                                          (("1" (TYPEPRED "k")
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (INST -1 "cdr(cdr(p))"
                                                       "add_mono(car(p),car(cdr(p)))")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "add_mono" 2)
                                                          (("2" (REPLACE -4)
                                                            (("2"
                                                              (EXPAND
                                                               "is_sorted?" -2)
                                                              (("2"
                                                                (INST -2 "0")
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -2)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -2)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth"
                                                                       -2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         -2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "constant_doesnt_matter")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "car(cdr(p))"
                                                                                 "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                                 "car(cdr(cdr(p)))")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "length" 1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (ASSERT)
            (("3" (LEMMA "simplify_cons")
              (("3" (INST -1 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("4" (SKEEP)
          (("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "simplify_cons")
        (("3" (INST -1 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|constant_doesnt_matter_last| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|sorted_simp_is_sorted| 0
  (|sorted_simp_is_sorted-1| |nil| 3810977540
   (""
    (CASE
        "FORALL (n:nat,p: MultPoly | is_sorted?(p)): length(p) = n IMPLIES is_sorted?(sortedsimplify(p)) = TRUE")
    (("1" (SKEEP) (("1" (INST -1 "length(p)" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF)
              (("1" (SPLIT)
                (("1" (EXPAND "sortedsimplify") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "sortedsimplify" 1)
              (("2" (ASSERT)
                (("2" (SPLIT 1)
                  (("1" (PROPAX) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (LEMMA "add_mono_sorted")
                              (("1" (CASE "cdr(cdr(p)) = null")
                                (("1" (REPLACE -1)
                                  (("1" (EXPAND "sortedsimplify" 1)
                                    (("1" (EXPAND "is_sorted?" 1)
                                      (("1" (SKEEP)
                                        (("1" (TYPEPRED "k")
                                          (("1" (EXPAND "length" -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (INST -1 "cdr(cdr(p))" "car(p)"
                                   "car(cdr(p))")
                                  (("2" (ASSERT)
                                    (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                      (("2" (INST? -1)
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "cdr_of_sorted_is_sorted")
                                            (("2" (INST -1 "p")
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "add_mono" -3 1)
                                                  (("2" (REPLACE -4)
                                                    (("2"
                                                      (LEMMA
                                                       "constant_doesnt_matter")
                                                      (("2"
                                                        (INST -1 "car(cdr(p))"
                                                         "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                         "car(cdr(cdr(p)))")
                                                        (("2"
                                                          (EXPAND "is_sorted?"
                                                                  -2)
                                                          (("2" (INST -2 "0")
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -2)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -2)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "nth" -2)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth"
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -6
                                                                           "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             -7)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "length"
                                                                               -6)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -6)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "length"
                                                                      1)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (TYPEPRED "p")
                              (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                (("2" (INST -1 "p")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "length" -4)
                                      (("2" (INST -3 "cdr(p)")
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "leq_simplify")
                                            (("2" (INST -1 "cdr(p)" "car(p)")
                                              (("2" (EXPAND "is_sorted?" -3)
                                                (("2" (INST -3 "0")
                                                  (("2" (EXPAND "length" -3)
                                                    (("2" (EXPAND "length" -3)
                                                      (("2" (EXPAND "nth" -3)
                                                        (("2" (EXPAND "nth" -3)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -3)
                                                            (("2" (LIFT-IF -3)
                                                              (("2" (SPLIT -3)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "simplify_cons")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "cdr(p)")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST
                                                                               -2
                                                                               "sortedsimplify(cdr(p))"
                                                                               "car(p)")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "simplify_cons")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "cdr(p)")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "cons_smaller_to_sorted_is_sorted")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "sortedsimplify(cdr(p))"
                                                                                 "car(p)")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
     ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|add_mono_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|cons_smaller_simplify| 0
  (|cons_smaller_simplify-1| |nil| 3810977547
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (ASSERT) NIL NIL)
     ("5" (SKEEP)
      (("5" (CASE "cons2_var = null")
        (("1" (REPLACE -1)
          (("1" (SKEEP)
            (("1" (EXPAND "simplified?" 2)
              (("1" (EXPAND "length" 2)
                (("1" (EXPAND "length" 2)
                  (("1" (SPLIT 2)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE 1)
                        (("2" (SPLIT 1)
                          (("1" (PROPAX) NIL NIL)
                           ("2" (SKEEP)
                            (("2" (TYPEPRED "i")
                              (("2" (TYPEPRED "j")
                                (("2" (EXPAND "length")
                                  (("2" (EXPAND "length")
                                    (("2" (ASSERT)
                                      (("2" (CASE "i=0")
                                        (("1" (REPLACE -1)
                                          (("1" (EXPAND "nth")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "nth" -4)
                                                (("1" (LIFT-IF -4)
                                                  (("1" (ASSERT)
                                                    (("1" (SPLIT -4)
                                                      (("1" (PROPAX) NIL NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "nth" -3)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF -3)
                                              (("2" (SPLIT -3)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "nth" -2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2" (EXPAND "simplified?" 3)
              (("2" (EXPAND "length" 3)
                (("2" (ASSERT)
                  (("2" (EXPAND "length" 3)
                    (("2" (SPLIT 3)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (HIDE 1)
                          (("2" (SPLIT 1)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (SKEEP)
                              (("2" (TYPEPRED "i")
                                (("2" (TYPEPRED "j")
                                  (("2" (EXPAND "length")
                                    (("2" (EXPAND "length")
                                      (("2" (CASE "i=0")
                                        (("1" (REPLACE -1)
                                          (("1" (EXPAND "nth" -4)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "nth" -4)
                                                (("1" (LIFT-IF -4)
                                                  (("1" (SPLIT -4)
                                                    (("1" (FLATTEN) NIL NIL)
                                                     ("2" (FLATTEN)
                                                      (("2"
                                                        (LEMMA
                                                         "cdr_of_sorted_is_sorted")
                                                        (("2"
                                                          (INST -1
                                                           "cons(cons1_var,cons2_var)")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "simplify_cdr")
                                                              (("2"
                                                                (INST -1
                                                                 "cons(cons1_var,cons2_var)")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (INST -7
                                                                     "m")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "is_sorted?"
                                                                       -8)
                                                                      (("2"
                                                                        (INST
                                                                         -8
                                                                         "0")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "length"
                                                                           -8)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "nth"
                                                                             -8)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               -8)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "leq_transitive")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "transitive?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (INST?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "cons1_var")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "simplified?"
                                                                                             -10)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -10)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "0"
                                                                                                   "1")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "nth"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "nth"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "m`alpha = car(cons2_var)`alpha")
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (LEMMA
                                                                                                                 "constant_doesnt_matter")
                                                                                                                (("1"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "m"
                                                                                                                   "car(cons2_var)"
                                                                                                                   "cons1_var")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "almost_total_order")
                                                                                                                      (("1"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "cons1_var"
                                                                                                                         "car(cons2_var)")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "simplified?"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "length"
                                                                                                                   -8)
                                                                                                                  (("2"
                                                                                                                    (SPLIT
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "0"
                                                                                                                       "j-1")
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "nth"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (EXPAND
                                                                                                                         "length"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("3"
                                                                                                                        (EXPAND
                                                                                                                         "length"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("3"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "nth" -3)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF -3)
                                              (("2" (SPLIT -3)
                                                (("1" (FLATTEN)
                                                  (("1" (EXPAND "nth" -2)
                                                    (("1" (LIFT-IF -2)
                                                      (("1" (SPLIT -2)
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2"
                                                            (LEMMA
                                                             "cdr_of_sorted_is_sorted")
                                                            (("2"
                                                              (INST -1
                                                               "cons(cons1_var,cons2_var)")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (LEMMA
                                                                   "simplify_cdr")
                                                                  (("2"
                                                                    (INST -1
                                                                     "cons(cons1_var,cons2_var)")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (INST
                                                                         -7
                                                                         "m")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "is_sorted?"
                                                                           -8)
                                                                          (("2"
                                                                            (INST
                                                                             -8
                                                                             "0")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -8)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "nth"
                                                                                   -8)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "nth"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "leq_transitive")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "transitive?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "m"
                                                                                           "cons1_var"
                                                                                           "car(cons2_var)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "m`alpha = car(cons2_var)`alpha")
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "constant_doesnt_matter")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "m"
                                                                                                   "car(cons2_var)"
                                                                                                   "cons1_var")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "almost_total_order")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "car(cons2_var)"
                                                                                                         "cons1_var")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "simplified?"
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (SPLIT
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "0"
                                                                                                         "i-1")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "nth"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("3"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2"
                                                    (EXPAND "simplified?" -6)
                                                    (("2" (EXPAND "length" -6)
                                                      (("2"
                                                        (EXPAND "length" -6)
                                                        (("2" (ASSERT)
                                                          (("2" (SPLIT -6)
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (HIDE 1)
                                                                (("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (INST -1
                                                                     "i-1"
                                                                     "j-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (LEMMA "leq_total_preorder") (("6" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|simplify_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_transitive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|almost_total_order| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|cons_simplify| 0
  (|cons_simplify-1| |nil| 3810977559
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "simplified?" 1)
        (("" (EXPAND "length" 1)
          (("" (EXPAND "length" 1)
            (("" (ASSERT)
              (("" (SPLIT 1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (SKEEP)
                      (("2" (CASE "i=0")
                        (("1" (EXPAND "nth" -2)
                          (("1" (ASSERT)
                            (("1" (INST -5 "j-1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE "j=0")
                          (("1" (EXPAND "nth" -2)
                            (("1" (ASSERT)
                              (("1" (INST -5 "i-1") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "nth" -1)
                            (("2" (ASSERT)
                              (("2" (EXPAND "simplified?" -3)
                                (("2" (ASSERT)
                                  (("2" (SPLIT -3)
                                    (("1" (ASSERT)
                                      (("1" (TYPEPRED "i")
                                        (("1" (EXPAND "length" -1)
                                          (("1" (REPLACE -2)
                                            (("1" (ASSERT)
                                              (("1" (TYPEPRED "j")
                                                (("1" (EXPAND "length" -1)
                                                  (("1" (REPLACE -3)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (SPLIT -1)
                                        (("1" (INST -1 "i-1" "j-1")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|car_equal_simplify_TCC1| 0
  (|car_equal_simplify_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "simplify_cons")
      (("" (INST -1 "p") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|car_equal_simplify| SUBTYPE
    "standard_form_mult_poly.sortedsimplify(standard_form_mult_poly.p)"
    "(list_adt[monomial].cons?)")))
 (|car_equal_simplify| 0
  (|car_equal_simplify-1| |nil| 3810977562
   (""
    (CASE
        "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p)): length(p) = n IMPLIES car(p)`alpha = car(sortedsimplify(p))`alpha")
    (("1" (SKEEP) (("1" (INST -1 "length(p)" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "length" -2)
              (("2" (EXPAND "sortedsimplify" 1)
                (("2" (LIFT-IF 1)
                  (("2" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (SPLIT 2)
                        (("1" (FLATTEN)
                          (("1" (LEMMA "cdr_of_sorted_is_sorted")
                            (("1" (INST -1 "p")
                              (("1" (ASSERT)
                                (("1" (LEMMA "cdr_of_sorted_is_sorted")
                                  (("1" (INST -1 "cdr(p)")
                                    (("1" (ASSERT)
                                      (("1"
                                        (LEMMA
                                         "cons_smaller_to_sorted_is_sorted")
                                        (("1" (CASE "cdr(cdr(p)) = null")
                                          (("1" (REPLACE -1)
                                            (("1" (EXPAND "sortedsimplify" 1)
                                              (("1" (EXPAND "add_mono" 1)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (INST -1 "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "add_mono" -1 1)
                                                (("2" (EXPAND "is_sorted?" -3)
                                                  (("2" (INST -3 "0")
                                                    (("1" (EXPAND "nth" -3)
                                                      (("1" (EXPAND "nth" -3)
                                                        (("1"
                                                          (EXPAND "length" -3)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -3)
                                                            (("1" (ASSERT)
                                                              (("1" (SPLIT -3)
                                                                (("1"
                                                                  (REPLACE -4)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "constant_doesnt_matter")
                                                                    (("1"
                                                                      (INST -1
                                                                       "car(cdr(p))"
                                                                       "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                       "car(cdr(cdr(p)))")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (INST
                                                                             -5
                                                                             "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "length"
                                                                               -5)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -6)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "add_mono"
                                                                                     -5
                                                                                     1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -4)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "length" 1)
                                                                  (("2"
                                                                    (LIFT-IF 1)
                                                                    (("2"
                                                                      (SPLIT 1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "length" 1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "simplify_cons")
            (("3" (INST -1 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("4" (SKEEP)
          (("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "simplify_cons")
        (("3" (INST -1 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|length_sortedsimplify_car_eq_TCC1| 0
  (|length_sortedsimplify_car_eq_TCC1-1| |nil| 3811154754
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|length_sortedsimplify_car_eq| SUBTYPE
    "list_adt[monomial].cons(standard_form_mult_poly.m1, standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (|length_sortedsimplify_car_eq_TCC2| 0
  (|length_sortedsimplify_car_eq_TCC2-1| |nil| 3811154754
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|length_sortedsimplify_car_eq| SUBTYPE
    "list_adt[monomial].cons(standard_form_mult_poly.m2, standard_form_mult_poly.p)"
    "{q: standard_form_mult_poly.MultPoly | sorting[monomial, standard_form_mult_poly.leq].is_sorted?(q)}")))
 (|length_sortedsimplify_car_eq| 0
  (|length_sortedsimplify_car_eq-1| |nil| 3811154807
   (""
    (CASE
        "FORALL (n: nat, p: MultPoly, m1, m2: {m: monomial | is_sorted?(cons(m, p))}):
        n= length(p) AND m1`alpha = m2`alpha IMPLIES
         length(sortedsimplify(cons(m1, p))) =
          length(sortedsimplify(cons(m2, p)))")
    (("1" (SKEEP)
      (("1" (INST?) (("1" (INST -1 "length(p)") (("1" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (EXPAND "length" -1)
              (("1" (ASSERT)
                (("1" (LIFT-IF -1)
                  (("1" (SPLIT -1)
                    (("1" (EXPAND "sortedsimplify" 1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "leq_total_preorder")
            (("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (CASE "j=0")
                  (("1" (REPLACE -1)
                    (("1" (HIDE -3)
                      (("1" (EXPAND "sortedsimplify")
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -3)
                            (("1" (LIFT-IF -3)
                              (("1" (SPLIT -3)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF 2)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" -2)
                                              (("1" (LIFT-IF -2)
                                                (("1" (SPLIT -2)
                                                  (("1"
                                                    (EXPAND "sortedsimplify")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "length" +)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (LIFT-IF 2)
                                            (("2" (SPLIT 2)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (FLATTEN)
                                                (("2" (EXPAND "length" 2)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "length" -3)
                    (("2" (LIFT-IF -3)
                      (("2" (SPLIT -3)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (EXPAND "sortedsimplify" +)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF 3)
                                (("2" (SPLIT 3)
                                  (("1" (FLATTEN)
                                    (("1" (LIFT-IF 1)
                                      (("1" (SPLIT 1)
                                        (("1" (FLATTEN)
                                          (("1" (LEMMA "add_mono_sorted")
                                            (("1"
                                              (LEMMA "constant_doesnt_matter")
                                              (("1" (EXPAND "length" -5)
                                                (("1" (LIFT-IF -5)
                                                  (("1" (SPLIT -5)
                                                    (("1" (FLATTEN) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (INST -2 "car(p)" "_"
                                                           "car(cdr(p))")
                                                          (("2" (TYPEPRED "m1")
                                                            (("2"
                                                              (EXPAND
                                                               "is_sorted?" -1)
                                                              (("2"
                                                                (INST -1 "1")
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "nth"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST-CP
                                                                               -3
                                                                               " add_mono(m1, car(p))")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "add_mono"
                                                                                 -4
                                                                                 1)
                                                                                (("1"
                                                                                  (INST
                                                                                   -3
                                                                                   "add_mono(m2, car(p))")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "add_mono"
                                                                                     -3
                                                                                     1)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "cdr_of_sorted_is_sorted")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "cons(m1, p)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "cdr_of_sorted_is_sorted")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "p")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (INST-CP
                                                                                                   -7
                                                                                                   "cdr(p)"
                                                                                                   "m1"
                                                                                                   "car(p)")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -7
                                                                                                       "cdr(p)"
                                                                                                       "m2"
                                                                                                       "car(p)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -12
                                                                                                           "cdr(p)"
                                                                                                           "add_mono(m1, car(p))"
                                                                                                           "add_mono(m2, car(p))")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "add_mono"
                                                                                                               5)
                                                                                                              (("1"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "length" 1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF 2)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "length" 2)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (LEMMA "leq_total_preorder") (("3" (ASSERT) NIL NIL)) NIL)
           ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (LEMMA "leq_total_preorder") (("3" (ASSERT) NIL NIL)) NIL)
     ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|add_mono_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|car_const_nth_sortedsimplify_TCC1| 0
  (|car_const_nth_sortedsimplify_TCC1-1| |nil| 3811159204
   ("" (SKEEP)
    (("" (LEMMA "length_sortedsimplify_car_eq")
      (("" (INST?)
        (("" (ASSERT) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|length_sortedsimplify_car_eq| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|car_const_nth_sortedsimplify| SUBTYPE "standard_form_mult_poly.i"
    "below[length[monomial](sortedsimplify(cons[monomial](m2, p)))]")))
 (|car_const_nth_sortedsimplify| 0
  (|car_const_nth_sortedsimplify-1| |nil| 3811159325
   ("" (LEMMA "leq_total_preorder")
    ((""
      (CASE
          "FORALL (n:nat, p: MultPoly, m1, m2: {m: monomial | is_sorted?(cons(m, p))}):
               n = length(p) AND m1`alpha = m2`alpha IMPLIES
                FORALL (i: below(length(sortedsimplify(cons(m1, p))))):
                  nth(sortedsimplify(cons(m1, p)), i)`alpha =
                   nth(sortedsimplify(cons(m2, p)), i)`alpha")
      (("1" (SKEEP)
        (("1" (INST?)
          (("1" (INST -1 "length(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (SKEEP :PREDS? T)
              (("1" (EXPAND "length" -2)
                (("1" (ASSERT)
                  (("1" (LIFT-IF -2)
                    (("1" (SPLIT -2)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sortedsimplify")
                          (("1" (EXPAND "length" -2)
                            (("1" (EXPAND "length" -2)
                              (("1" (ASSERT)
                                (("1" (CASE "NOT i=0")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (REPLACE -1)
                                    (("2" (EXPAND "nth" 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (SKEEP :PREDS? T)
                (("2" (LEMMA "length_sortedsimplify_car_eq")
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (CASE "j=0")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -4)
                            (("1" (EXPAND "sortedsimplify")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -4)
                                  (("1" (LIFT-IF -4)
                                    (("1" (SPLIT -4)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (LIFT-IF 2)
                                            (("2" (SPLIT 2)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "length" -2)
                                                    (("1" (LIFT-IF -2)
                                                      (("1" (SPLIT -2)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND
                                                             "sortedsimplify"
                                                             +)
                                                            (("1" (CASE "i=0")
                                                              (("1"
                                                                (EXPAND "nth"
                                                                        1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "add_mono")
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (EXPAND "nth"
                                                                        2)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (CASE "i=0")
                                                    (("1" (REPLACE -1)
                                                      (("1" (EXPAND "nth" 2)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "nth" 3)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE "cons?(p)")
                          (("1" (EXPAND "sortedsimplify" +)
                            (("1" (ASSERT)
                              (("1" (LIFT-IF 2)
                                (("1" (SPLIT 2)
                                  (("1" (FLATTEN)
                                    (("1" (LIFT-IF 1)
                                      (("1" (SPLIT 1)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "sortedsimplify" -4)
                                              (("1"
                                                (EXPAND "sortedsimplify" -5)
                                                (("1" (CASE "null?(cdr(p))")
                                                  (("1" (EXPAND "length" -8)
                                                    (("1" (EXPAND "length" -8)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (CASE
                                                        "FORALL (M:monomial): M`alpha = car(p)`alpha IMPLIES is_sorted?(cons(M,cdr(p)))")
                                                    (("1"
                                                      (INST-CP -1
                                                       "add_mono(m1, car(p))")
                                                      (("1"
                                                        (INST-CP -1
                                                         "add_mono(m2, car(p))")
                                                        (("1"
                                                          (EXPAND "add_mono" -2
                                                                  1)
                                                          (("1"
                                                            (EXPAND "add_mono"
                                                                    -3 1)
                                                            (("1"
                                                              (INST -9 "cdr(p)"
                                                               "add_mono(m1, car(p))"
                                                               "add_mono(m2, car(p))")
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -10)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "add_mono"
                                                                     -9 1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "add_mono"
                                                                       -9 1)
                                                                      (("1"
                                                                        (INST
                                                                         -9
                                                                         "i")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "m1")
                                                      (("2"
                                                        (LEMMA
                                                         "cdr_of_sorted_is_sorted")
                                                        (("2"
                                                          (INST -1
                                                           "cons(m1, p)")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "cdr_of_sorted_is_sorted")
                                                              (("2"
                                                                (INST -1 "p")
                                                                (("2" (ASSERT)
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "cdr(p) "
                                                                         "M")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "constant_doesnt_matter")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "car(p)"
                                                                               "M"
                                                                               "car(cdr(p))")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "is_sorted?"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (INST
                                                                                     -2
                                                                                     "0")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "nth"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "nth"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (ASSERT)
                                        (("2" (CASE "i=0")
                                          (("1" (EXPAND "nth" 2)
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (EXPAND "nth" 3)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "length" -4) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (SKEEP)
            (("3" (LEMMA "length_sortedsimplify_car_eq")
              (("3" (ASSERT)
                (("3" (INST?)
                  (("3" (ASSERT) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (LEMMA "length_sortedsimplify_car_eq")
            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("4" (ASSERT) NIL NIL) ("5" (PROPAX) NIL NIL))
      NIL))
    NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_sortedsimplify_car_eq| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|not_equal_simplify| 0
  (|not_equal_simplify-1| |nil| 3810977567
   ("" (SKEEP)
    (("" (EXPAND "sortedsimplify" -1)
      (("" (LIFT-IF -1)
        (("" (SPLIT -1)
          (("1" (FLATTEN) NIL NIL)
           ("2" (FLATTEN)
            (("2" (SPLIT -1)
              (("1" (FLATTEN)
                (("1" (LEMMA "car_equal_simplify")
                  (("1" (TYPEPRED "p")
                    (("1" (LEMMA "cdr_of_sorted_is_sorted")
                      (("1" (INST -1 "p")
                        (("1" (ASSERT)
                          (("1" (LEMMA "cdr_of_sorted_is_sorted")
                            (("1" (INST -1 "cdr(p)")
                              (("1" (ASSERT)
                                (("1" (CASE "cdr(cdr(p)) = null")
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "sortedsimplify" -8)
                                      (("1" (EXPAND "add_mono" -8)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (LEMMA "cons_smaller_to_sorted_is_sorted")
                                    (("2"
                                      (INST -1 "cdr(cdr(p))"
                                       "add_mono(car(p),car(cdr(p)))")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "add_mono" -1 1)
                                          (("2"
                                            (LEMMA "constant_doesnt_matter")
                                            (("2" (EXPAND "is_sorted?" -4)
                                              (("2" (INST -4 "0")
                                                (("1" (SPLIT -4)
                                                  (("1" (EXPAND "nth" -1)
                                                    (("1" (EXPAND "nth" -1)
                                                      (("1" (REPLACE -8)
                                                        (("1"
                                                          (INST -2
                                                           "car(cdr(p))"
                                                           "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                           "car(cdr(cdr(p)))")
                                                          (("1" (ASSERT)
                                                            (("1" (HIDE -1)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (INST -5
                                                                   "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "add_mono"
                                                                       -5 1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -6)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -5)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "length" 1)
                                                    (("2" (EXPAND "length" 1)
                                                      (("2" (EXPAND "length" 1)
                                                        (("2" (LIFT-IF 1)
                                                          (("2" (SPLIT 1)
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|car_equal_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|))
   SHOSTAK))
 (|simplify_alpha| 0
  (|simplify_alpha-1| |nil| 3810977571
   (""
    (CASE
        "FORALL (n:nat,p: MultPoly | cons?(p) AND is_sorted?(p)): length(p) = n IMPLIES (FORALL (j: below(length(sortedsimplify(p)))): EXISTS (i: below(length(p))): nth(p, i)`alpha = nth(sortedsimplify(p), j)`alpha)")
    (("1" (SKEEP) (("1" (INST -1 "length(p)" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "length" -2)
              (("2" (SKEEP)
                (("2" (EXPAND "sortedsimplify" 1)
                  (("2" (CASE "cdr(p) = null")
                    (("1" (ASSERT)
                      (("1" (INST 1 "j")
                        (("1" (TYPEPRED "j")
                          (("1" (EXPAND "sortedsimplify" -1)
                            (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (CASE "car(p)`alpha = car(cdr(p))`alpha")
                        (("1" (ASSERT)
                          (("1" (CASE "cdr(cdr(p)) = null")
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "sortedsimplify" 2)
                                (("1" (TYPEPRED "j")
                                  (("1" (EXPAND "sortedsimplify" -1)
                                    (("1" (EXPAND "sortedsimplify" -1)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (EXPAND "length" -1)
                                            (("1" (EXPAND "nth" 2 2)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "add_mono" 2)
                                                  (("1" (INST 2 "0")
                                                    (("1" (EXPAND "nth" 2)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL)
                                                     ("2" (EXPAND "length" 1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "cdr_of_sorted_is_sorted")
                              (("2" (INST -1 "p")
                                (("2" (ASSERT)
                                  (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                    (("2" (INST -1 "cdr(p)")
                                      (("2" (ASSERT)
                                        (("2"
                                          (LEMMA
                                           "cons_smaller_to_sorted_is_sorted")
                                          (("2"
                                            (INST -1 "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "add_mono" -1 1)
                                                (("2" (REPLACE -4)
                                                  (("2"
                                                    (EXPAND "is_sorted?" -3)
                                                    (("2" (INST -3 "0")
                                                      (("1" (SPLIT -3)
                                                        (("1" (EXPAND "nth" -1)
                                                          (("1"
                                                            (EXPAND "nth" -1)
                                                            (("1"
                                                              (LEMMA
                                                               "constant_doesnt_matter")
                                                              (("1"
                                                                (INST -1
                                                                 "car(cdr(p))"
                                                                 "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                 "car(cdr(cdr(p)))")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (HIDE -1)
                                                                      (("1"
                                                                        (INST
                                                                         -4
                                                                         "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "length"
                                                                           -4)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             -5)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST
                                                                                 -4
                                                                                 "j")
                                                                                (("1"
                                                                                  (SKEEP)
                                                                                  (("1"
                                                                                    (INST
                                                                                     3
                                                                                     "i+1")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "nth"
                                                                                       3
                                                                                       1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "nth"
                                                                                         -4
                                                                                         1)
                                                                                        (("1"
                                                                                          (LIFT-IF
                                                                                           -4)
                                                                                          (("1"
                                                                                            (SPLIT
                                                                                             -4)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "add_mono"
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "nth"
                                                                                                     3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "nth"
                                                                                                 4
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (TYPEPRED
                                                                                       "i")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             1)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (TYPEPRED
                                                                                   "j")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "sortedsimplify"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "length" 1)
                                                          (("2"
                                                            (EXPAND "length" 1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "length" 1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "nth" 3 2)
                            (("2" (CASE "j=0")
                              (("1" (ASSERT)
                                (("1" (INST 3 "0")
                                  (("1" (EXPAND "nth" 3)
                                    (("1" (PROPAX) NIL NIL)) NIL)
                                   ("2" (EXPAND "length" 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (INST -1 "cdr(p)")
                                  (("1" (ASSERT)
                                    (("1" (INST -1 "j-1")
                                      (("1" (SKEEP)
                                        (("1" (INST 4 "i+1")
                                          (("1" (EXPAND "nth" 4 1)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length" 1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "j")
                                        (("2" (EXPAND "sortedsimplify" -1)
                                          (("2" (EXPAND "length" -1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (TYPEPRED "p")
                                      (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                        (("2" (INST -1 "p")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|simplify_alpha_reverse| 0
  (|simplify_alpha_reverse-1| |nil| 3810977581
   ("" (LEMMA "leq_total_preorder")
    ((""
      (CASE
          "FORALL (n:nat, p: MultPoly | cons?(p) AND is_sorted?(p)): length(p)=n IMPLIES EXISTS ((m:monomial | m`alpha = car(p)`alpha)): (FORALL (i: below(length(p))): EXISTS (j: below(length(sortedsimplify(cons(m, cdr(p)))))): nth(p, i)`alpha = nth(sortedsimplify(cons(m, cdr(p))), j)`alpha)")
      (("1" (SKEEP :PREDS? T)
        (("1" (INST -3 "length(p)" "p")
          (("1" (SKEEP :PREDS? T)
            (("1" (SKEEP :PREDS? T)
              (("1" (INST?)
                (("1" (SKEEP :PREDS? T)
                  (("1" (LEMMA "length_sortedsimplify_car_eq")
                    (("1" (INST -1 "cdr(p)" "m" "car(p)")
                      (("1" (ASSERT)
                        (("1" (ASSERT)
                          (("1" (CASE "NOT p = cons(car(p), cdr(p))")
                            (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                             ("2" (REPLACE -1 :DIR RL)
                              (("2" (INST 1 "j")
                                (("1" (LEMMA "car_const_nth_sortedsimplify")
                                  (("1" (INST -1 "cdr(p)" "car(p)" "m")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "j")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2"
                                      (LEMMA
                                       "cons_smaller_to_sorted_is_sorted")
                                      (("2" (CASE "null?(cdr(p))")
                                        (("1" (EXPAND "is_sorted?" 1)
                                          (("1" (SKEEP :PREDS? T)
                                            (("1" (EXPAND "length" -4)
                                              (("1" (EXPAND "length" -4)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (INST -1 "cdr(p)" "m")
                                          (("2" (ASSERT)
                                            (("2"
                                              (LEMMA "cdr_of_sorted_is_sorted")
                                              (("2" (INST -1 "p")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (EXPAND "is_sorted?" -8)
                                                    (("2" (INST -8 "0")
                                                      (("2"
                                                        (EXPAND "length" -8)
                                                        (("2"
                                                          (EXPAND "length" -8)
                                                          (("2" (ASSERT)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "nth"
                                                                        -8)
                                                                (("2"
                                                                  (EXPAND "nth"
                                                                          -8)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "constant_doesnt_matter")
                                                                    (("2"
                                                                      (INST -1
                                                                       "car(p)"
                                                                       "m"
                                                                       "car(cdr(p))")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "NOT p = cons(car(p), cdr(p))")
                        (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("3" (LEMMA "cons_smaller_to_sorted_is_sorted")
                        (("3" (LEMMA "cdr_of_sorted_is_sorted")
                          (("3" (INST -1 "p")
                            (("3" (ASSERT)
                              (("3" (INST -2 "cdr(p)" "m")
                                (("3" (ASSERT)
                                  (("3" (SPLIT 1)
                                    (("1" (EXPAND "is_sorted?" 2)
                                      (("1" (SKEEP :PREDS? T)
                                        (("1" (EXPAND "length" -3)
                                          (("1" (EXPAND "length" -3)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "constant_doesnt_matter")
                                      (("2" (EXPAND "is_sorted?" -7)
                                        (("2" (INST -7 "0")
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "length" -7)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "length" -7)
                                                  (("2" (LIFT-IF -7)
                                                    (("2" (SPLIT -7)
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND "is_sorted?"
                                                                  2)
                                                          (("1"
                                                            (SKEEP :PREDS? T)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -6)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -6)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "nth" -1)
                                                              (("2"
                                                                (EXPAND "nth"
                                                                        -1)
                                                                (("2"
                                                                  (INST -2
                                                                   "car(p)" "m"
                                                                   "car(cdr(p))")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (TYPEPRED "p")
              (("1" (EXPAND "length" -) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (CASE "j_1=0")
              (("1" (REPLACE -1)
                (("1" (HIDE -2)
                  (("1" (SKEEP)
                    (("1" (INST 1 "car(p)")
                      (("1" (SKEEP)
                        (("1" (CASE "NOT null?(cdr(p))")
                          (("1" (EXPAND "length" -2)
                            (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (INST 1 "0")
                            (("1" (CASE "not i=0")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (REPLACE -1)
                                (("2" (EXPAND "sortedsimplify" +)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "nth" +)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "sortedsimplify" +)
                              (("2" (ASSERT)
                                (("2" (EXPAND "length" 1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP :PREDS? T)
                (("2" (CASE "null?(cdr(p))")
                  (("1" (EXPAND " length" -5)
                    (("1" (EXPAND " length" -5) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (INST 3 "car(p)")
                    (("2" (SKEEP)
                      (("2" (TYPEPRED "i")
                        (("2" (CASE "i=0")
                          (("1" (INST 3 "0")
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "nth" 3)
                                (("1" (CASE "not cons(car(p), cdr(p)) = p")
                                  (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                                   ("2" (REPLACE -1)
                                    (("2" (LEMMA "simplify_cons")
                                      (("2" (INST?)
                                        (("2" (ASSERT)
                                          (("2" (REWRITE "car_equal_simplify")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "not cons(car(p), cdr(p)) = p")
                              (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                               ("2" (REPLACE -1)
                                (("2" (ASSERT)
                                  (("2" (LEMMA " simplify_cons")
                                    (("2" (INST?)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "length" 1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "simplify_cons")
                            (("2" (INST?)
                              (("1" (ASSERT)
                                (("1" (EXPAND "nth" 4 1)
                                  (("1"
                                    (NAME "sscons"
                                          "sortedsimplify(cons(car(p), cdr(p)))")
                                    (("1" (COPY -1)
                                      (("1" (EXPAND "sortedsimplify" -1)
                                        (("1" (LIFT-IF -1)
                                          (("1" (SPLIT -1)
                                            (("1" (FLATTEN)
                                              (("1" (CASE "null?(cdr(cdr(p)))")
                                                (("1"
                                                  (EXPAND "sortedsimplify" -3)
                                                  (("1" (ASSERT)
                                                    (("1" (INST 4 "0")
                                                      (("1" (REPLACE -4)
                                                        (("1"
                                                          (REPLACE -3 4 :DIR
                                                                   RL)
                                                          (("1"
                                                            (CASE
                                                                "NOT i-1 = 0")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 " length" -6)
                                                                (("1"
                                                                  (EXPAND
                                                                   " length"
                                                                   -6)
                                                                  (("1"
                                                                    (EXPAND
                                                                     " length"
                                                                     -6)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (REPLACE -1)
                                                              (("2"
                                                                (EXPAND "nth"
                                                                        4)
                                                                (("2"
                                                                  (EXPAND
                                                                   "add_mono")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (REPLACE -4)
                                                        (("2"
                                                          (REPLACE -3 :DIR RL)
                                                          (("2"
                                                            (EXPAND "length" 1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (LEMMA
                                                   "cdr_of_sorted_is_sorted")
                                                  (("2" (INST -1 "p")
                                                    (("2" (ASSERT)
                                                      (("2" (INST -9 "cdr(p)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -10)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (SKEEP :PREDS?
                                                                 T)
                                                                (("2"
                                                                  (INST -10
                                                                   "i-1")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -5)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -4 :DIR
                                                                       RL)
                                                                      (("2"
                                                                        (SKEEP
                                                                         :PREDS?
                                                                         T)
                                                                        (("2"
                                                                          (CASE
                                                                              "FORALL (M:monomial): M`alpha = car(cdr(p))`alpha IMPLIES is_sorted?(cons(M, cdr(cdr(p))))")
                                                                          (("1"
                                                                            (INST-CP
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "add_mono(car(p), car(cdr(p)))")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "add_mono"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (INST
                                                                                     5
                                                                                     "j")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -14)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "car_const_nth_sortedsimplify")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "cdr(cdr(p))"
                                                                                           "m"
                                                                                           "add_mono(car(p), car(cdr(p)))")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "add_mono"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "j")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (REPLACE
                                                                                       -9
                                                                                       1)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "length_sortedsimplify_car_eq")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "cdr(cdr(p))"
                                                                                           "add_mono(car(p), car(cdr(p)))"
                                                                                           "m")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "add_mono"
                                                                                               1)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             6)
                                                                            (("2"
                                                                              (SKEEP)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "cdr_of_sorted_is_sorted")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "cdr(p)")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "cons_smaller_to_sorted_is_sorted")
                                                                                      (("2"
                                                                                        (INST
                                                                                         -1
                                                                                         "cdr(cdr(p))"
                                                                                         "M")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "is_sorted?"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -5
                                                                                               "0")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "nth"
                                                                                                         -5)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "nth"
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "constant_doesnt_matter")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               " car(cdr(p))"
                                                                                                               "M"
                                                                                                               "car(cdr(cdr(p)))")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (REPLACE -2 5)
                                                (("2" (REPLACE -1 5 :DIR RL)
                                                  (("2"
                                                    (LEMMA
                                                     "cdr_of_sorted_is_sorted")
                                                    (("2" (INST -1 "p")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (INST -8 "cdr(p)")
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -9)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (SKEEP :PREDS?
                                                                 T)
                                                                (("2"
                                                                  (INST -9
                                                                   "i-1")
                                                                  (("2"
                                                                    (SKEEP
                                                                     :PREDS? T)
                                                                    (("2"
                                                                      (INST 5
                                                                       "j+1")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         5 2)
                                                                        (("1"
                                                                          (CASE
                                                                              "null?(cdr(cdr(p)))")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sortedsimplify"
                                                                             -2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "sortedsimplify"
                                                                                     5)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "not i-1 =0")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             5)
                                                                                            (("2"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "cdr_of_sorted_is_sorted")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "cdr(p)")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -11)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "NOT cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       1)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (CASE
                                                                                          "FORALL (M:monomial): M`alpha = car(cdr(p))`alpha IMPLIES is_sorted?(cons(M, cdr(cdr(p))))")
                                                                                      (("1"
                                                                                        (INST-CP
                                                                                         -1
                                                                                         "car(cdr(p))")
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -1
                                                                                           "m")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "car_const_nth_sortedsimplify")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "cdr(cdr(p))"
                                                                                                   "m"
                                                                                                   "car(cdr(p))")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "is_sorted?"
                                                                                         -5)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -5
                                                                                           "0")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "nth"
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "nth"
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "constant_doesnt_matter")
                                                                                                        (("2"
                                                                                                          (SKEEP)
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "car(cdr(p))"
                                                                                                             "M"
                                                                                                             "car(cdr(cdr(p)))")
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "cons_smaller_to_sorted_is_sorted")
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "cdr(cdr(p))"
                                                                                                                   "M")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (REPLACE
                                                                         -5)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -4 1
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "length_sortedsimplify_car_eq")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "cdr(cdr(p))"
                                                                                 " car(cdr(p))"
                                                                                 "m")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       1)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (LEMMA
                                                                                   "cons_smaller_to_sorted_is_sorted")
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "null?(cdr(cdr(p)))")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "is_sorted?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (SKEEP
                                                                                         :PREDS?
                                                                                         T)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "cdr(cdr(p))"
                                                                                       "m")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "cdr_of_sorted_is_sorted")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "cdr(p)")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "constant_doesnt_matter")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "car(cdr(p))"
                                                                                                   "m"
                                                                                                   "car(cdr(cdr(p)))")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "is_sorted?"
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -4
                                                                                                         "0")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "nth"
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "nth"
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (PROPAX)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (CASE
                                                                                      "NOT cdr(p) = cons(car(cdr(p)), cdr(cdr(p)))")
                                                                                  (("1"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     1)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE "not cons(car(p), cdr(p)) = p")
                                (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (SKEEP)
            (("3" (SKEEP)
              (("3" (HIDE 2)
                (("3" (TYPEPRED "p")
                  (("3" (CASE "null?(cdr(p))")
                    (("1" (EXPAND "is_sorted?" +)
                      (("1" (SKEEP :PREDS? T)
                        (("1" (EXPAND "length" -6)
                          (("1" (EXPAND "length" -6) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "is_sorted?" -)
                      (("2" (INST -2 "0")
                        (("2" (EXPAND "length" -2)
                          (("2" (EXPAND "length" -2)
                            (("2" (ASSERT)
                              (("2" (ASSERT)
                                (("2" (EXPAND "nth")
                                  (("2" (EXPAND "nth")
                                    (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                      (("2" (INST?)
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "constant_doesnt_matter")
                                            (("2"
                                              (INST -1 "car(p)" "m"
                                               "car(cdr(p))")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2" (INST?)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("3" (SKEEP :PREDS? T)
        (("3" (SKEEP :PREDS? T)
          (("3" (HIDE 2)
            (("3" (CASE "null?(cdr(p))")
              (("1" (EXPAND "is_sorted?" +)
                (("1" (SKEEP :PREDS? T)
                  (("1" (EXPAND " length" -10)
                    (("1" (EXPAND " length" -10) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "cdr_of_sorted_is_sorted")
                (("2" (INST -1 "p")
                  (("2" (ASSERT)
                    (("2" (LEMMA "constant_doesnt_matter")
                      (("2" (EXPAND "is_sorted?" -8)
                        (("2" (INST -8 "0")
                          (("2" (EXPAND "length" -8)
                            (("2" (EXPAND "length" -8)
                              (("2" (ASSERT)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "nth" -8)
                                    (("2" (EXPAND "nth" -8)
                                      (("2"
                                        (INST -1 "car(p)" "m" "car(cdr(p))")
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA
                                             "cons_smaller_to_sorted_is_sorted")
                                            (("2" (INST -1 "cdr(p)" "m")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|car_const_nth_sortedsimplify| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_sortedsimplify_car_eq| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|car_equal_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|simplified| 0
  (|simplified-1| |nil| 3810977582
   (""
    (CASE
        "FORALL (n:nat, p: MultPoly | is_sorted?(p)): length(p) = n IMPLIES simplified?(sortedsimplify(p)) = TRUE")
    (("1" (SKEEP) (("1" (INST -1 "length(p)" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT)
                (("1" (EXPAND "sortedsimplify")
                  (("1" (ASSERT)
                    (("1" (EXPAND "simplified?") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "sortedsimplify" 1)
              (("2" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (TYPEPRED "p")
                          (("1" (EXPAND "simplified?" 1)
                            (("1" (EXPAND "length" 1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" 1)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (SPLIT)
                        (("1" (FLATTEN)
                          (("1" (CASE "cdr(cdr(p)) = null")
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "sortedsimplify" 1)
                                (("1" (EXPAND "simplified?" 1)
                                  (("1" (EXPAND "length" 1)
                                    (("1" (EXPAND "length" 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "cdr_of_sorted_is_sorted")
                              (("2" (INST -1 "p")
                                (("2" (ASSERT)
                                  (("2" (LEMMA "cdr_of_sorted_is_sorted")
                                    (("2" (INST -1 "cdr(p)")
                                      (("2" (ASSERT)
                                        (("2"
                                          (LEMMA
                                           "cons_smaller_to_sorted_is_sorted")
                                          (("2"
                                            (INST -1 "cdr(cdr(p))"
                                             "add_mono(car(p),car(cdr(p)))")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "add_mono" -1)
                                                (("2" (REPLACE -4)
                                                  (("2"
                                                    (LEMMA
                                                     "constant_doesnt_matter")
                                                    (("2"
                                                      (EXPAND "is_sorted?" -4)
                                                      (("2" (INST -4 "0")
                                                        (("1"
                                                          (EXPAND "length" -4)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -4)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "nth"
                                                                        -4)
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          -4)
                                                                  (("1"
                                                                    (INST -1
                                                                     "car(cdr(p))"
                                                                     "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                                     "car(cdr(cdr(p)))")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "add_mono"
                                                                         2)
                                                                        (("1"
                                                                          (INST
                                                                           -6
                                                                           "cons((# C := car(cdr(p))`C + car(p)`C, alpha := car(p)`alpha #), cdr(cdr(p)))")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             -6)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "length"
                                                                               -7)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -7)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "length" 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (TYPEPRED "p")
                            (("2" (EXPAND "is_sorted?" -1)
                              (("2" (INST -1 "0")
                                (("1" (EXPAND "length" -1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" -1)
                                      (("1" (EXPAND "nth" -1)
                                        (("1" (EXPAND "nth" -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" -1)
                                              (("1" (LIFT-IF -1)
                                                (("1" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "cdr_of_sorted_is_sorted")
                                                        (("1" (INST -1 "p")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (INST -4
                                                               "cdr(p)")
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -5)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "leq_simplify")
                                                                    (("1"
                                                                      (INST -1
                                                                       "cdr(p)"
                                                                       "car(p)")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "cons_smaller_to_sorted_is_sorted")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "sortedsimplify(cdr(p))"
                                                                             "car(p)")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "simplify_cons")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "cdr(p)")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "sorted_simp_is_sorted")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "cdr(p)")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "cons_smaller_simplify")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "sortedsimplify(cdr(p))"
                                                                                             "car(p)")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "not_equal_simplify")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "cdr(p)"
                                                                                                   "car(p)")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (LEMMA
                                                           "cdr_of_sorted_is_sorted")
                                                          (("2" (INST -1 "p")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (INST -3
                                                                 "cdr(p)")
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -4)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "cons_smaller_simplify")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "sortedsimplify(cdr(p))"
                                                                         "car(p)")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "car_equal_simplify")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "cdr(p)")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "constant_doesnt_matter_last")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "car(p)"
                                                                                 "car(cdr(p))"
                                                                                 "car(sortedsimplify(cdr(p)))")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (LEMMA
                                                                           "simplify_cons")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "cdr(p)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "sorted_simp_is_sorted")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "cdr(p)")
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length" 1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons_smaller_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|not_equal_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sorted_simp_is_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|leq_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|car_equal_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|constant_doesnt_matter_last| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|simplify_Unif| 0
  (|simplify_Unif-1| |nil| 3810977590
   (""
    (CASE
        "FORALL (n:nat, p: MultPoly | is_sorted?(p) AND Unif?(p)): length(p) = n IMPLIES Unif?(sortedsimplify(p))")
    (("1" (SKEEP) (("1" (INST -1 "length(p)" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length")
            (("1" (LIFT-IF -1)
              (("1" (SPLIT -1)
                (("1" (EXPAND "sortedsimplify") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "length" -2)
              (("2" (LIFT-IF -2)
                (("2" (ASSERT)
                  (("2" (SPLIT -2)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "sortedsimplify" 2)
                        (("2" (ASSERT)
                          (("2" (SPLIT 2)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 2)
                                (("1" (FLATTEN)
                                  (("1" (CASE "cdr(cdr(p)) = null")
                                    (("1" (REPLACE -1)
                                      (("1" (EXPAND "sortedsimplify" 1)
                                        (("1" (EXPAND "Unif?" 1)
                                          (("1" (SKEEP)
                                            (("1" (TYPEPRED "i")
                                              (("1" (TYPEPRED "j!1")
                                                (("1" (EXPAND "length" -1)
                                                  (("1" (EXPAND "length" -1)
                                                    (("1" (EXPAND "length" -2)
                                                      (("1"
                                                        (EXPAND "length" -2)
                                                        (("1" (EXPAND "nth" 1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "cdr_of_sorted_is_sorted")
                                      (("2" (INST -1 "p")
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "cdr_of_sorted_is_sorted")
                                            (("2" (INST -1 "cdr(p)")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA
                                                   "cons_smaller_to_sorted_is_sorted")
                                                  (("2"
                                                    (INST -1 "cdr(cdr(p))"
                                                     "add_mono(car(p),car(cdr(p)))")
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "add_mono" -1
                                                                1)
                                                        (("2" (REPLACE -4)
                                                          (("2"
                                                            (LEMMA
                                                             "constant_doesnt_matter")
                                                            (("2"
                                                              (INST -1
                                                               "car(cdr(p))"
                                                               "(# C := car(cdr(p))`C + car(p)`C, alpha := car(cdr(p))`alpha #)"
                                                               "car(cdr(cdr(p)))")
                                                              (("2"
                                                                (EXPAND
                                                                 "is_sorted?"
                                                                 -4)
                                                                (("2"
                                                                  (INST -4 "0")
                                                                  (("1"
                                                                    (SPLIT -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "p")
                                                                                (("1"
                                                                                  (INST
                                                                                   -7
                                                                                   "cons(add_mono(car(p), car(cdr(p))), cdr(cdr(p)))")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -6)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -7)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "Unif?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (SKEEP)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -2)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -2)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "add_mono")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "Unif?"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "i+1"
                                                                                                         "j!1 + 1")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "nth"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "nth"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (LIFT-IF
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (SPLIT
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (FLATTEN)
                                                                                                                    (("1"
                                                                                                                      (LIFT-IF
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (SPLIT
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (FLATTEN)
                                                                                                                            (("2"
                                                                                                                              (EXPAND
                                                                                                                               "nth"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (FLATTEN)
                                                                                                                  (("2"
                                                                                                                    (LIFT-IF
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (SPLIT
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (FLATTEN)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "nth"
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (FLATTEN)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "nth"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (TYPEPRED
                                                                                                             "j!1")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "length"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "length"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("3"
                                                                                                          (TYPEPRED
                                                                                                           "i")
                                                                                                          (("3"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             -1)
                                                                                                            (("3"
                                                                                                              (EXPAND
                                                                                                               "length"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "length"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (INST -2 "cdr(p)")
                                    (("1" (ASSERT)
                                      (("1" (TYPEPRED "p")
                                        (("1" (LEMMA "Unif_cons")
                                          (("1"
                                            (INST -1 "car(p)"
                                             "sortedsimplify(cdr(p))")
                                            (("1" (LEMMA "car_equal_simplify")
                                              (("1" (INST -1 "cdr(p)")
                                                (("1" (REPLACE -1)
                                                  (("1" (EXPAND "Unif?" -4)
                                                    (("1" (INST -4 "0" "1")
                                                      (("1" (EXPAND "nth" -4)
                                                        (("1" (EXPAND "nth" -4)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "length" 1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "length" 1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (EXPAND "length" 1)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (LEMMA
                                                   "cdr_of_sorted_is_sorted")
                                                  (("2" (INST -1 "p")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (LEMMA "simplify_cons")
                                                (("2" (INST -1 "cdr(p)")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "cdr_of_sorted_is_sorted")
                                      (("2" (INST -1 "p")
                                        (("2" (ASSERT)
                                          (("2" (TYPEPRED "p")
                                            (("2" (EXPAND "Unif?" 1)
                                              (("2" (SKEEP)
                                                (("2" (EXPAND "Unif?" -2)
                                                  (("2" (INST -2 "i+1" "j!1+1")
                                                    (("1" (EXPAND "nth" -2)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL)
                                                     ("2" (EXPAND "length" 1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("3" (EXPAND "length" 1)
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|Unif_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|car_equal_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|constant_doesnt_matter| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|add_mono| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_sorted_simp_is_sorted| 0
  (|mv_sorted_simp_is_sorted-1| |nil| 3811846575
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_is_sorted?")
      (("" (REWRITE "sorted_simp_is_sorted")
        (("" (REWRITE "simplify_Unif") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|simplify_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sorted_simp_is_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|max_length_sorted_simplify| 0
  (|max_length_sorted_simplify-1| |nil| 3814221720
   ("" (SKEEP)
    (("" (CASE "null?(p)")
      (("1" (EXPAND "sortedsimplify" 1) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (LEMMA "simplify_alpha_reverse")
        (("2" (LEMMA "max_length_is_nth")
          (("2" (INST-CP -1 "p")
            (("1" (INST -1 "sortedsimplify(p)")
              (("1" (SKEEP*)
                (("1" (LEMMA "simplify_alpha")
                  (("1" (INST -1 "p" "j")
                    (("1" (SKEEP)
                      (("1" (INST -4 "p" "j!1")
                        (("1" (ASSERT)
                          (("1" (SKEEP)
                            (("1" (ASSERT)
                              (("1" (LEMMA "max_length_is_max")
                                (("1" (INST-CP -1 "sortedsimplify(p)" "j!2")
                                  (("1" (ASSERT)
                                    (("1"
                                      (CASE
                                          "  max_length(p) > max_length(sortedsimplify(p))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2"
                                        (CASE
                                            "max_length(p) < max_length(sortedsimplify(p))")
                                        (("1" (REPLACE -5 -1 RL)
                                          (("1" (REPLACE -4 -1 RL)
                                            (("1" (INST -2 "p" "i")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "j!2")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST -2 "p" "0")
                (("1" (SKEEP -2)
                  (("1" (TYPEPRED "j")
                    (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("3" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|simplify_alpha_reverse| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|is_sorted_nth| 0
  (|is_sorted_nth-1| |nil| 3814445210
   ("" (INDUCT "p")
    (("1" (FLATTEN)
      (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (FLATTEN)
      (("2" (EXPAND "is_sorted?" 1)
        (("2" (SKEEP) (("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (SKEEP)
            (("1" (SPLIT -3)
              (("1" (CASE "i=0")
                (("1" (CASE "j=0")
                  (("1" (LEMMA "leq_reflexive")
                    (("1" (EXPAND "reflexive?" -1)
                      (("1" (EXPAND "nth" 1)
                        (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (EXPAND "is_sorted?" -3)
                      (("2" (INST -3 "0")
                        (("2" (ASSERT)
                          (("2" (EXPAND "nth" -3)
                            (("2" (LEMMA "leq_transitive")
                              (("2" (EXPAND "transitive?" -1)
                                (("2" (EXPAND "nth" 2)
                                  (("2" (ASSERT)
                                    (("2" (CASE "j-1=0")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (INST -3 "0" "j-1")
                                        (("2" (ASSERT)
                                          (("2"
                                            (INST -1 "cons1_var"
                                             "nth(cons2_var,0)"
                                             "nth(cons2_var,j-1)")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "j=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (EXPAND "nth" 3)
                    (("2" (ASSERT)
                      (("2" (INST -1 "i-1" "j-1") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (HIDE -2 -3)
                  (("2" (EXPAND "is_sorted?")
                    (("2" (SKEEP)
                      (("2" (INST -2 "k+1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "length " -2 1)
                            (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "is_sorted?" 1)
            (("2" (SKEEP)
              (("2" (INST -1 "k" "1+k") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL)
     ("5" (LEMMA "leq_total_preorder") (("5" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|reflexive?| CONST-DECL "bool" |relations| NIL)
    (|leq_reflexive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|leq_transitive| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_TCC1| 0
  (|allnonzero_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|allnonzero| SUBTYPE "standard_form_mult_poly.p"
    "(list_adt[monomial].cons?)")))
 (|allnonzero_TCC2| 0
  (|allnonzero_TCC2-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (ASSERT) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|allnonzero| TERMINATION
    "standard_form_mult_poly.allnonzero(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|allnonzero_TCC3| 0
  (|allnonzero_TCC3-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (ASSERT) (("" (EXPAND "length" 3 2) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|allnonzero| TERMINATION
    "standard_form_mult_poly.allnonzero(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|allnonzero_cdr| 0
  (|allnonzero_cdr-1| |nil| 3810977601
   ("" (SKEEP)
    (("" (EXPAND "allnonzero?")
      (("" (ASSERT)
        (("" (CASE "cdr(p) = null")
          (("1" (ASSERT) NIL NIL)
           ("2" (ASSERT)
            (("2" (SPLIT -2)
              (("1" (PROPAX) NIL NIL)
               ("2" (SPLIT 3)
                (("1" (SKEEP)
                  (("1" (ASSERT)
                    (("1" (INST 1 "i+1")
                      (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (EXPAND "length" 1)
                        (("2" (CANCEL-ADD 1)
                          (("2" (TYPEPRED "i") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|all_nonzero| 0
  (|all_nonzero-1| |nil| 3810977603
   ("" (INDUCT "p")
    (("1" (EXPAND "allnonzero")
      (("1" (EXPAND "allnonzero?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "allnonzero" 1)
        (("2" (SPLIT 1)
          (("1" (FLATTEN) NIL NIL)
           ("2" (FLATTEN)
            (("2" (EXPAND "allnonzero?" 2)
              (("2" (ASSERT)
                (("2" (SPLIT 2)
                  (("1" (SKEEP)
                    (("1" (CASE "i = 0")
                      (("1" (REPLACE -1)
                        (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (EXPAND "allnonzero?" -2)
                        (("2" (ASSERT)
                          (("2" (SPLIT -2)
                            (("1" (ASSERT)
                              (("1" (TYPEPRED "i")
                                (("1" (EXPAND "length" -1)
                                  (("1" (EXPAND "length" -1)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2" (SPLIT -1)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (INST 1 "i-1")
                                    (("1" (EXPAND "nth" -1)
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (TYPEPRED "i")
                                      (("2" (EXPAND "length" -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_alpha| 0
  (|allnonzero_alpha-1| |nil| 3810977606
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "j=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "nth" 2 1)
                (("1" (EXPAND "allnonzero" 2)
                  (("1" (ASSERT)
                    (("1" (INST 2 "0")
                      (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (EXPAND "allnonzero" 1)
                        (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "nth" 2)
            (("2" (ASSERT)
              (("2" (CASE "cons2_var = null")
                (("1" (REPLACE -1)
                  (("1" (EXPAND "allnonzero" 3)
                    (("1" (ASSERT)
                      (("1" (EXPAND "allnonzero" 3)
                        (("1" (EXPAND "nth" 3 1)
                          (("1" (TYPEPRED "j")
                            (("1" (EXPAND "length" -1)
                              (("1" (EXPAND "length" -1)
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "nth" 4 1)
                    (("2" (INST -1 "j-1")
                      (("2" (ASSERT)
                        (("2" (CASE "cons1_var`C = 0")
                          (("1" (EXPAND "allnonzero" 4)
                            (("1" (ASSERT)
                              (("1" (SKEEP)
                                (("1" (TYPEPRED "k")
                                  (("1" (INST 4 "k")
                                    (("1" (TYPEPRED "j")
                                      (("1" (EXPAND "length" -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (EXPAND "allnonzero" 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "allnonzero" 5)
                            (("2" (ASSERT)
                              (("2" (SKEEP)
                                (("2" (INST 5 "k+1")
                                  (("1" (EXPAND "nth" 5 2)
                                    (("1" (TYPEPRED "j")
                                      (("1" (EXPAND "length" -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "k")
                                    (("2" (EXPAND "allnonzero" 1)
                                      (("2" (EXPAND "length" 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|allnonzero_alpha_reverse| 0
  (|allnonzero_alpha_reverse-1| |nil| 3810977611
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "cons2_var = null")
        (("1" (SKEEP)
          (("1" (TYPEPRED "k")
            (("1" (EXPAND "allnonzero" -1)
              (("1" (LIFT-IF -1)
                (("1" (SPLIT -1)
                  (("1" (FLATTEN)
                    (("1" (EXPAND "allnonzero" -2)
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "length" -1)
                      (("2" (EXPAND "allnonzero" -1)
                        (("2" (ASSERT)
                          (("2" (EXPAND "length" -1)
                            (("2" (EXPAND "nth" 2 3)
                              (("2" (ASSERT)
                                (("2" (EXPAND "allnonzero" 2)
                                  (("2" (INST 2 "0")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 2)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (EXPAND "length" 1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (CASE "allnonzero(cons2_var)=null")
            (("1" (SKEEP)
              (("1" (TYPEPRED "k")
                (("1" (EXPAND "allnonzero" -1)
                  (("1" (LIFT-IF -1)
                    (("1" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "length" -1)
                          (("2" (EXPAND "length" -1)
                            (("2" (ASSERT)
                              (("2" (EXPAND "nth" 3 3)
                                (("2" (EXPAND "allnonzero" 3)
                                  (("2" (INST 3 "0")
                                    (("1" (EXPAND "nth" 3)
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (EXPAND "length" 1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKEEP)
              (("2" (TYPEPRED "k")
                (("2" (EXPAND "allnonzero" -1)
                  (("2" (LIFT-IF -1)
                    (("2" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "allnonzero" 3)
                          (("1" (ASSERT)
                            (("1" (INST -3 "k")
                              (("1" (SKEEP)
                                (("1" (INST 4 "j+1")
                                  (("1" (EXPAND "nth" 4 1)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 4 1)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "length" 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "length" -1)
                          (("2" (EXPAND "allnonzero" 4)
                            (("2" (ASSERT)
                              (("2" (CASE "k=0")
                                (("1" (EXPAND "nth" 4 3)
                                  (("1" (ASSERT)
                                    (("1" (INST 4 "0")
                                      (("1" (EXPAND "nth" 4)
                                        (("1" (PROPAX) NIL NIL)) NIL)
                                       ("2" (EXPAND "length" 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "nth" 5 3)
                                  (("2" (ASSERT)
                                    (("2" (INST -2 "k-1")
                                      (("2" (SKEEP)
                                        (("2" (INST 6 "j+1")
                                          (("1" (EXPAND "nth" 6 1)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "nth" 6 1)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "length" 1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|allnonzero_length| 0
  (|allnonzero_length-1| |nil| 3810977616
   ("" (INDUCT "p")
    (("1" (EXPAND "allnonzero") (("1" (ASSERT) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "allnonzero" 1)
        (("2" (LIFT-IF 1)
          (("2" (SPLIT 1)
            (("1" (FLATTEN)
              (("1" (EXPAND "length" 1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (FLATTEN)
              (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_sorted| 0
  (|allnonzero_sorted-1| |nil| 3810977618
   (""
    (CASE
        "FORALL (p:MultPoly): is_sorted?(p) IMPLIES is_sorted?(allnonzero(p))")
    (("1" (SKEEP)
      (("1" (INST?)
        (("1" (EXPAND "mv_is_sorted?")
          (("1" (FLATTEN)
            (("1" (ASSERT)
              (("1" (EXPAND "Unif?" 1)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (LEMMA "allnonzero_alpha_reverse")
                      (("1" (INST?)
                        (("1" (ASSERT)
                          (("1" (INST-CP -1 "i")
                            (("1" (INST -1 "j")
                              (("1" (SKOLEM -1 "j1")
                                (("1" (SKOLEM -2 "i1")
                                  (("1" (EXPAND "Unif?")
                                    (("1" (FLATTEN)
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -4)
                                          (("1" (EXPAND "allnonzero" 3)
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (INST -1 "i1" "j1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "allnonzero" 2) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "p")
        (("1" (EXPAND "is_sorted?")
          (("1" (ASSERT)
            (("1" (EXPAND "allnonzero") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (LEMMA "cdr_of_sorted_is_sorted")
            (("2" (INST -1 "cons(cons1_var,cons2_var)")
              (("2" (ASSERT)
                (("2" (EXPAND "is_sorted?" 1)
                  (("2" (SKEEP)
                    (("2" (CASE "cons2_var = null")
                      (("1" (TYPEPRED "k")
                        (("1" (LEMMA "allnonzero_length")
                          (("1" (INST -1 "cons(cons1_var,cons2_var)")
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" -1 2)
                                (("1" (EXPAND "length" -1 2)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "k=0")
                        (("1" (REPLACE -1)
                          (("1" (EXPAND "nth" 2)
                            (("1" (EXPAND "nth" 2)
                              (("1" (EXPAND "allnonzero" 2)
                                (("1" (LIFT-IF 2)
                                  (("1" (SPLIT 2)
                                    (("1" (FLATTEN)
                                      (("1"
                                        (CASE "allnonzero(cons2_var) = null")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "allnonzero" -7)
                                            (("1" (EXPAND "length" -7)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "is_sorted?" -4)
                                          (("2" (INST -4 "0")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -4)
                                                (("1" (EXPAND "nth" -1)
                                                  (("1" (EXPAND "nth" -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" 1)
                                                  (("2"
                                                    (EXPAND "allnonzero" -5)
                                                    (("2" (EXPAND "length" -5)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "length" 1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (LEMMA "allnonzero_alpha_reverse")
                                        (("2" (INST -1 "cons2_var")
                                          (("1"
                                            (CASE "allnonzero(cons2_var)=null")
                                            (("1" (EXPAND "allnonzero" -7)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "length" -7)
                                                  (("1" (EXPAND "length" -7)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (INST -1 "0")
                                                (("1" (EXPAND "nth" -1 3)
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (LEMMA
                                                       "is_sorted_implies_monotone")
                                                      (("1"
                                                        (INST -1
                                                         "cons(cons1_var,cons2_var)")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (INST -1 "j+1" "0")
                                                            (("1"
                                                              (EXPAND "nth" -1)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "constant_doesnt_matter_last")
                                                                  (("1"
                                                                    (INST -1
                                                                     "cons1_var"
                                                                     "nth(cons2_var, j)"
                                                                     "car(allnonzero(cons2_var))")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "length"
                                                                      1)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "nth" 3)
                          (("2" (ASSERT)
                            (("2" (EXPAND "allnonzero" 3)
                              (("2" (ASSERT)
                                (("2" (LIFT-IF 3)
                                  (("2" (SPLIT 3)
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "is_sorted?" -3)
                                        (("1" (INST -3 "k")
                                          (("1" (EXPAND "allnonzero" -5)
                                            (("1" (ASSERT)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "nth" -3)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (TYPEPRED "k")
                                            (("2" (EXPAND "allnonzero" -1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (EXPAND "is_sorted?" -2)
                                        (("2" (INST -2 "k-1")
                                          (("2" (EXPAND "allnonzero" -4)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "length" -3)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (ASSERT)
          (("3" (SKEEP)
            (("3" (LEMMA "leq_total_preorder") (("3" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL)
         ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (LEMMA "leq_total_preorder") (("3" (ASSERT) NIL NIL)) NIL)
     ("4" (LEMMA "leq_total_preorder") (("4" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|allnonzero_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|is_sorted_implies_monotone| FORMULA-DECL NIL |sorting| |sorting|)
    (|constant_doesnt_matter_last| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|allnonzero_alpha_reverse| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_simp| 0
  (|allnonzero_simp-1| |nil| 3810977625
   ("" (INDUCT "p")
    (("1" (EXPAND "allnonzero") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (LEMMA "simplify_cdr")
        (("2" (INST -1 "cons(cons1_var,cons2_var)")
          (("2" (ASSERT)
            (("2" (EXPAND "simplified?" 1)
              (("2" (SPLIT 1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 3)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (SKEEP)
                      (("2" (CASE "i=0")
                        (("1" (EXPAND "nth" -2)
                          (("1" (ASSERT)
                            (("1" (EXPAND "allnonzero" -2)
                              (("1" (LIFT-IF -2)
                                (("1" (SPLIT -2)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "simplified?" -5)
                                      (("1" (SPLIT -5)
                                        (("1" (TYPEPRED "i")
                                          (("1" (EXPAND "allnonzero" -1)
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -2)
                                                (("1" (EXPAND "length" -2)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (REPLACE -1)
                                                  (("2" (TYPEPRED "j")
                                                    (("2"
                                                      (EXPAND "allnonzero" -1)
                                                      (("2" (REPLACE -2)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SPLIT -1)
                                            (("1" (INST -1 "0" "j")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "nth" -1)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "j")
                                                (("2" (EXPAND "allnonzero" -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (ASSERT)
                                                (("3" (EXPAND "length" 1)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (PROPAX) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LEMMA "allnonzero_alpha_reverse")
                                      (("2" (INST -1 "cons2_var")
                                        (("1"
                                          (CASE "allnonzero(cons2_var)=null")
                                          (("1" (TYPEPRED "j")
                                            (("1" (EXPAND "allnonzero" -1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "length" -1)
                                                  (("1" (EXPAND "length" -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (INST -1 "j-1")
                                              (("2" (SKEEP)
                                                (("2" (EXPAND "simplified?" -6)
                                                  (("2" (SPLIT -6)
                                                    (("1" (EXPAND "length" -1)
                                                      (("1"
                                                        (LEMMA
                                                         "allnonzero_length")
                                                        (("1"
                                                          (INST -1 "cons2_var")
                                                          (("1"
                                                            (EXPAND "length" -1
                                                                    1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (SPLIT -1)
                                                        (("1"
                                                          (INST -1 "0" "j_1+1")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "nth" 1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "length" 1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (EXPAND "length" 1)
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "j")
                                          (("2" (EXPAND "allnonzero" -1)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "length" -1)
                                                (("2" (EXPAND "length" -1)
                                                  (("2" (LIFT-IF -1)
                                                    (("2" (SPLIT -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (LEMMA
                                                             "allnonzero_length")
                                                            (("2"
                                                              (INST -1
                                                               "cons2_var")
                                                              (("2"
                                                                (EXPAND
                                                                 "length" -1)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "nth" -1)
                          (("2" (ASSERT)
                            (("2" (LIFT-IF -1)
                              (("2" (SPLIT -1)
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "allnonzero" -2)
                                    (("1" (ASSERT)
                                      (("1" (LIFT-IF -2)
                                        (("1" (SPLIT -2)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "simplified?" -5)
                                              (("1" (ASSERT)
                                                (("1" (SPLIT -5)
                                                  (("1" (TYPEPRED "j")
                                                    (("1"
                                                      (EXPAND "allnonzero" -1)
                                                      (("1" (SPLIT -2)
                                                        (("1"
                                                          (EXPAND "length" -2)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (REPLACE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (TYPEPRED "i")
                                                              (("2"
                                                                (EXPAND
                                                                 "allnonzero"
                                                                 -1)
                                                                (("2"
                                                                  (REPLACE -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (SPLIT -1)
                                                      (("1" (INST -1 "0" "i")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "nth" -1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "i")
                                                          (("2"
                                                            (EXPAND
                                                             "allnonzero" -1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (EXPAND "length" 1)
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2"
                                              (LEMMA
                                               "allnonzero_alpha_reverse")
                                              (("2" (INST -1 "cons2_var")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE
                                                        "allnonzero(cons2_var) = null")
                                                    (("1" (TYPEPRED "i")
                                                      (("1"
                                                        (EXPAND "allnonzero"
                                                                -1)
                                                        (("1"
                                                          (EXPAND "length" -1)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (INST -1 "i-1")
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (EXPAND
                                                             "simplified?" -6)
                                                            (("2" (SPLIT -6)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -1)
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -1)
                                                                  (("1"
                                                                    (LIFT-IF
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "i")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "allnonzero"
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "allnonzero"
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (INST -1
                                                                     "j!1+1"
                                                                     "0")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (EXPAND
                                                                       "length"
                                                                       1)
                                                                      (("3"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (TYPEPRED "i")
                                                  (("2" (EXPAND "length" -1)
                                                    (("2"
                                                      (EXPAND "allnonzero" -1)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "allnonzero"
                                                                  -1)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "allnonzero" -1)
                                    (("2" (LIFT-IF -1)
                                      (("2" (SPLIT -1)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "simplified?" -4)
                                            (("1" (SPLIT -4)
                                              (("1" (TYPEPRED "i")
                                                (("1" (EXPAND "allnonzero" -1)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" -1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (SPLIT -1)
                                                  (("1" (INST -1 "i" "j")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth" -1)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "j")
                                                      (("2"
                                                        (EXPAND "allnonzero"
                                                                -1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (TYPEPRED "i")
                                                      (("3"
                                                        (EXPAND "allnonzero"
                                                                -1)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (EXPAND "simplified?" -3)
                                            (("2" (SPLIT -3)
                                              (("1" (TYPEPRED "i")
                                                (("1" (EXPAND "allnonzero" -1)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" -1)
                                                      (("1" (SPLIT -2)
                                                        (("1"
                                                          (EXPAND "length" -2)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (REPLACE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (TYPEPRED "j")
                                                              (("2"
                                                                (EXPAND
                                                                 "allnonzero"
                                                                 -1)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -1)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -2)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (SPLIT -1)
                                                  (("1" (INST -1 "i-1" "j-1")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|allnonzero_alpha_reverse| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|allnonzero_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|simplify_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_lft| 0
  (|allnonzero_lft-1| |nil| 3812886582
   ("" (SKEEP)
    (("" (REWRITE "lft_is_alt")
      (("" (EXPAND "allnonzero?")
        (("" (SPLIT -1)
          (("1" (EXPAND "lft_alt" 1 1)
            (("1" (EXPAND "map") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (EXPAND "lft_alt" 2 1)
              (("2" (EXPAND "map" 2)
                (("2" (ASSERT)
                  (("2" (SPLIT -1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (SPLIT 3)
                      (("1" (SKEEP :PREDS? T)
                        (("1" (EXPAND "lft_alt" -1)
                          (("1" (REWRITE "map_length" -1)
                            (("1" (INST 1 "i")
                              (("1" (EXPAND "lft_alt" -2)
                                (("1" (REWRITE "map_nth_rw")
                                  (("1" (EXPAND " lft_one")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lft_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_max_length| 0
  (|allnonzero_max_length-1| |nil| 3814223318
   ("" (INDUCT "p")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "allnonzero" 1 1)
        (("2" (EXPAND "max_length" 1 3)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT 1)
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (EXPAND "max_length" 2 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "max" 2 1)
                        (("2" (ASSERT)
                          (("2" (LIFT-IF 2)
                            (("2" (SPLIT 2)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|allnonzero_id| 0
  (|allnonzero_id-1| |nil| 3814455718
   ("" (INDUCT "p")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "allnonzero?" -2)
        (("2" (SPLIT -2)
          (("1" (PROPAX) NIL NIL)
           ("2" (EXPAND "allnonzero" 2 1)
            (("2" (LIFT-IF 2)
              (("2" (SPLIT 2)
                (("1" (FLATTEN)
                  (("1" (INST 2 "0")
                    (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (DECOMPOSE-EQUALITY 2)
                    (("2" (EXPAND "allnonzero?" 4)
                      (("2" (SPLIT 4)
                        (("1" (PROPAX) NIL NIL)
                         ("2" (FLATTEN)
                          (("2" (SPLIT 2)
                            (("1" (SKEEP -1)
                              (("1" (INST 4 "i+1")
                                (("1" (EXPAND "nth" 4 1)
                                  (("1" (PROPAX) NIL NIL)) NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "length" 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|minlength_unif| 0
  (|minlength_unif-1| |nil| 3812887372
   ("" (SKEEP)
    (("" (EXPAND "minlength?")
      (("" (ASSERT)
        (("" (EXPAND "Unif?")
          (("" (FLATTEN)
            (("" (ASSERT)
              (("" (SPLIT -1)
                (("1" (SKEEP)
                  (("1" (INST-CP -1 "i")
                    (("1" (INST-CP -1 "j")
                      (("1" (EXPAND "length" +) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|cutting_TCC1| 0
  (|cutting_TCC1-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL NIL
   (|cutting| SUBTYPE "standard_form_mult_poly.l"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|cutting_TCC2| 0
  (|cutting_TCC2-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL NIL
   (|cutting| SUBTYPE "standard_form_mult_poly.l"
    "{l: list[nat] | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (|cutting_TCC3| 0
  (|cutting_TCC3-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "rdc_rac[nat]")
      (("" (INST?)
        (("" (LEMMA "length_append[nat]")
          (("" (INST?)
            (("" (REPLACE -2) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL
   (|cutting| TERMINATION
    "standard_form_mult_poly.cutting(more_list_props[nat].rdc(standard_form_mult_poly.l))"
    "NIL")))
 (|mv_cut_TCC1| 0
  (|mv_cut_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" 2 2)
      (("" (ASSERT) (("" (EXPAND "length_a" 2 2) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|length_a| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|mv_cut| TERMINATION
    "standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|mv_cut_TCC2| 0
  (|mv_cut_TCC2-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "length" 3 2)
      (("" (ASSERT) (("" (EXPAND "length_a" 3 2) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|length_a| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|mv_cut| TERMINATION
    "standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))"
    "NIL")))
 (|last_is_nth_TCC1| 0
  (|last_is_nth_TCC1-1| |nil| 3811667168
   ("" (ASSERT)
    (("" (SKEEP) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|last_is_nth| SUBTYPE
    "(number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), 1)"
    "below[length[nat](l)]")))
 (|last_is_nth| 0
  (|last_is_nth-1| |nil| 3811667961
   (""
    (CASE
        "FORALL (n: nat, l: (cons?[nat])): length(l)=n IMPLIES last(l) = nth(l, length(l) - 1)")
    (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(l)") NIL NIL)) NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (CASE "j=0")
                (("1" (REPLACE -1)
                  (("1" (REPLACE -3)
                    (("1" (ASSERT)
                      (("1" (EXPAND "last")
                        (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "last" 2)
                  (("2" (ASSERT)
                    (("2" (EXPAND "length" 2)
                      (("2" (EXPAND "length" -2)
                        (("2" (INST?)
                          (("1" (ASSERT)
                            (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED " l")
                            (("2" (EXPAND "every" -) (("2" (FLATTEN) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT)
            (("3" (SKEEP)
              (("3" (ASSERT)
                (("3" (EXPAND "length") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|cut_monom_null| 0
  (|cut_monom_null-1| |nil| 3811666581
   (""
    (CASE "FORALL (n: nat, l: list[nat]):
        n = length(l) IMPLIES 
        (cutting(l) = null IFF
         NOT (cons?(l) AND EXISTS (m: posnat): member(m, l)))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m`alpha)" "m`alpha")
        (("1" (ASSERT)
          (("1" (EXPAND "cut_monom") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT -1)
                (("1" (ASSERT)
                  (("1" (EXPAND "cutting") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (EXPAND "cutting" 1)
                (("2" (ASSERT)
                  (("2" (LIFT-IF 1)
                    (("2" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (INST -2 "rdc(l)")
                          (("1" (CASE "j = length[nat](rdc[nat](l))")
                            (("1" (ASSERT)
                              (("1" (REWRITE "last_is_nth" -2)
                                (("1" (FLATTEN)
                                  (("1" (ASSERT)
                                    (("1" (SPLIT 1)
                                      (("1" (FLATTEN)
                                        (("1" (ASSERT)
                                          (("1" (SKEEP)
                                            (("1" (LEMMA "member_nth[nat]")
                                              (("1" (INST -1 "l" "m")
                                                (("1" (ASSERT)
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (CASE "i = length(l) -1")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (TYPEPRED "i")
                                                        (("2"
                                                          (CASE
                                                              "not cons?(rdc(l))")
                                                          (("1" (ASSERT)
                                                            (("1" (INST 3 "m")
                                                              (("1"
                                                                (LEMMA
                                                                 "nth_reverse[nat]")
                                                                (("1"
                                                                  (INST -1 "l"
                                                                   "length(l) -1-i")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "nth"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (MOVE-TERMS
                                                                               -2
                                                                               R
                                                                               1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (LIFT-IF
                                                                                   -1)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (MOVE-TERMS
                                                                                           -1
                                                                                           L
                                                                                           2)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             -3)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "nth_reverse[nat]")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "cdr(reverse(l))"
                                                                                           "i")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "length_reverse[nat]")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "l")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (LIFT-IF
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (SPLIT
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (PROPAX)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (FLATTEN)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (REPLACE
                                                                                                                 -2
                                                                                                                 :DIR
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (LEMMA
                                                                                                                   "nth_member[nat]")
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "reverse(cdr(reverse(l)))"
                                                                                                                     "m"
                                                                                                                     "i")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "rdc"
                                                                                                                         5)
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (TYPEPRED
                                                                                                                       "l")
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "every_reverse[number]")
                                                                                                                        (("2"
                                                                                                                          (INST?)
                                                                                                                          (("2"
                                                                                                                            (ASSERT)
                                                                                                                            (("2"
                                                                                                                              (EXPAND
                                                                                                                               "every"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (LEMMA
                                                                                             "length_reverse[nat]")
                                                                                            (("2"
                                                                                              (INST?)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (TYPEPRED
                                                                                             "l")
                                                                                            (("3"
                                                                                              (LEMMA
                                                                                               "every_reverse[number]")
                                                                                              (("3"
                                                                                                (INST?)
                                                                                                (("3"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2" (INST 2 "m")
                                                              (("2"
                                                                (REWRITE
                                                                 "member_reverse"
                                                                 -5)
                                                                (("2"
                                                                  (EXPAND
                                                                   "member" -5)
                                                                  (("2"
                                                                    (LIFT-IF
                                                                     -5)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -5)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "nth_reverse[nat]")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "l"
                                                                               "0")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "nth"
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "member_reverse"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "rdc")
                                                                                        (("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (FLATTEN)
                                            (("2" (SKEEP)
                                              (("2" (INST 1 "m")
                                                (("2"
                                                  (REWRITE "member_reverse" 1)
                                                  (("2" (EXPAND "member" 1)
                                                    (("2" (ASSERT)
                                                      (("2" (LIFT-IF 1)
                                                        (("2" (SPLIT 1)
                                                          (("1"
                                                            (REWRITE
                                                             "length_reverse"
                                                             -6 :DIR RL)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2"
                                                              (REWRITE
                                                               "member_reverse"
                                                               3)
                                                              (("2"
                                                                (EXPAND "rdc")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "length_reverse[nat]" -3 :DIR RL)
                              (("2" (EXPAND "rdc" +)
                                (("2" (EXPAND "length" -3)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF -3)
                                      (("2" (ASSERT)
                                        (("2" (SPLIT -3)
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2"
                                                (REWRITE "length_reverse[nat]"
                                                 -1 :DIR RL)
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (REWRITE "last_is_nth" 1)
                          (("2" (EXPAND "length" -2)
                            (("2" (ASSERT)
                              (("2" (INST 2 "nth(l, length(l) - 1)")
                                (("2" (LEMMA "nth_member[nat]")
                                  (("2"
                                    (INST -1 "l" "nth(l, length(l)-1)"
                                     "length(l)-1")
                                    NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|every_reverse| FORMULA-DECL NIL |list_lemmas| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nth_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL))
   SHOSTAK))
 (|mv_cut_is_alt| 0
  (|mv_cut_is_alt-1| |nil| 3811671036
   ("" (INDUCT "p")
    (("1" (EXPAND "mv_cut")
      (("1" (EXPAND "mv_cut_alt")
        (("1" (EXPAND "map") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "mv_cut" 1)
        (("2" (LEMMA "cut_monom_null")
          (("2" (INST?)
            (("2" (FLATTEN)
              (("2" (ASSERT)
                (("2" (LIFT-IF 1)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "mv_cut_alt")
                          (("1" (EXPAND "map" +)
                            (("1" (ASSERT)
                              (("1" (DECOMPOSE-EQUALITY 1)
                                (("1" (EXPAND "cut_monom")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (EXPAND "mv_cut_alt")
                          (("2" (EXPAND "map" +)
                            (("2" (DECOMPOSE-EQUALITY 2)
                              (("2" (EXPAND "cut_monom")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cut_monom_null| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|cutting_length| 0
  (|cutting_length-1| |nil| 3810977636
   (""
    (CASE
        "FORALL (l: list[nat], n:nat): length(l) = n IMPLIES length(l) >= length(cutting(l))")
    (("1" (SKEEP) (("1" (INST -1 "l" "length(l)") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF)
              (("1" (SPLIT -1)
                (("1" (EXPAND "cutting" 1) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" 1)
              (("2" (LIFT-IF 1)
                (("2" (ASSERT)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN)
                      (("1" (LEMMA "rdc_rac[nat]")
                        (("1" (INST? -1)
                          (("1" (LEMMA "length_append[nat]")
                            (("1" (INST?)
                              (("1" (REPLACE -2)
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (INST -4 "rdc(l)")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|cutting_nth_TCC1| 0
  (|cutting_nth_TCC1-1| |nil| 3813402958
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (LEMMA "cutting_length")
        (("" (INST -1 "l") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|cutting_nth| SUBTYPE "standard_form_mult_poly.i"
    "below[length[nat](l)]")))
 (|cutting_nth| 0
  (|cutting_nth-1| |nil| 3813403219
   (""
    (CASE "FORALL(n:nat, l: list[nat], i: below(length(cutting(l)))):
        length(l) = n IMPLIES nth(cutting(l), i) = nth(l, i)")
    (("1" (SKEEP) (("1" (INST -1 "length(l)" "l" "i") NIL NIL)) NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (GRIND)
              (("1" (TYPEPRED "i")
                (("1" (LEMMA "cutting_length")
                  (("1" (INST -1 "l") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (EXPAND "cutting" 1 1)
                (("2" (LIFT-IF 1)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (INST -2 "rdc(l)" "i")
                              (("1" (LEMMA "length_rdc[nat]")
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -3 1)
                                      (("1" (LEMMA "nth_rdc[nat]")
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "i")
                                              (("1" (EXPAND "cutting" -1)
                                                (("1" (LEMMA "cutting_length")
                                                  (("1" (INST -1 "rdc(l)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (SKEEP)
              (("3" (TYPEPRED "i")
                (("3" (LEMMA "cutting_length")
                  (("3" (INST -1 "l") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "i")
          (("3" (LEMMA "cutting_length")
            (("3" (INST -1 "l") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth_rdc| FORMULA-DECL NIL |list_lemmas| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_rdc| FORMULA-DECL NIL |list_lemmas| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|cutting_last_TCC1| 0
  (|cutting_last_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|cutting_last| SUBTYPE
    "standard_form_mult_poly.cutting(standard_form_mult_poly.l)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|cutting_last| 0
  (|cutting_last-1| |nil| 3810977639
   (""
    (CASE
        "FORALL (l: list[nat], n:nat): length(l) = n IMPLIES (cutting(l) = null OR last(cutting(l)) /= 0)")
    (("1" (SKEEP)
      (("1" (INST -1 "l" "length(l)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF)
              (("1" (SPLIT -1)
                (("1" (EXPAND "cutting") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" 1)
              (("2" (ASSERT)
                (("2" (LIFT-IF 1)
                  (("2" (ASSERT)
                    (("2" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (INST -2 "rdc(l)")
                          (("1" (LEMMA "rdc_rac[nat]")
                            (("1" (INST? -1)
                              (("1" (LEMMA "length_append[nat]")
                                (("1" (INST?)
                                  (("1" (REPLACE -2)
                                    (("1" (REPLACE -5)
                                      (("1" (EXPAND "length" -1 2)
                                        (("1" (EXPAND "length" -1 2)
                                          (("1" (ASSERT)
                                            (("1" (ASSERT)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (INST -1 "rdc(l)")
                        (("2" (LEMMA "rdc_rac[nat]")
                          (("2" (INST?)
                            (("2" (LEMMA "length_append[nat]")
                              (("2" (INST?)
                                (("2" (REPLACE -2)
                                  (("2" (REPLACE -4)
                                    (("2" (EXPAND "length" -1 2)
                                      (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL))
   SHOSTAK))
 (|cutting_alt_TCC1| 0
  (|cutting_alt_TCC1-1| |nil| 3812889535
   ("" (SKEEP)
    (("" (LEMMA "cutting_length") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|cutting_alt| SUBTYPE
    "((number_fields.-)(list_props[nat].length(standard_form_mult_poly.l), list_props[nat].length(standard_form_mult_poly.cutting(standard_form_mult_poly.l))))"
    "nat")))
 (|cutting_alt| 0
  (|cutting_alt-1| |nil| 3812889535
   (""
    (CASE "FORALL (n:nat, l: list[nat]):
       n = length(l) IMPLIES l = append(cutting(l), (: 0 :) ^ (length(l) - length(cutting(l))))")
    (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(l)") NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT -1)
                (("1" (EXPAND "cutting")
                  (("1" (ASSERT)
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "append")
                        (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" +)
              (("2" (ASSERT)
                (("2" (LIFT-IF 1)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN)
                      (("1" (INST -2 "rdc(l)")
                        (("1" (LEMMA "length_reverse[nat]")
                          (("1" (INST -1 "l")
                            (("1" (EXPAND "length" -1)
                              (("1" (ASSERT)
                                (("1" (LIFT-IF -1)
                                  (("1" (ASSERT)
                                    (("1" (SPLIT -1)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (FLATTEN)
                                        (("2"
                                          (REWRITE "length_reverse" -1 :DIR RL)
                                          (("2" (EXPAND "length" -4)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "rdc" -3 1)
                                                (("2" (LEMMA "rdc_rac[nat]")
                                                  (("2" (INST -1 "l")
                                                    (("2" (EXPAND "rac")
                                                      (("2"
                                                        (LEMMA "last_is_nth")
                                                        (("2" (INST?)
                                                          (("2"
                                                            (REPLACE -1 -2 :DIR
                                                                     RL)
                                                            (("2"
                                                              (REPLACE -4 -2)
                                                              (("2"
                                                                (EXPAND
                                                                 "length" 2 1)
                                                                (("2"
                                                                  (CASE
                                                                      "not length(cdr(l)) >= length(cutting(rdc(l)))")
                                                                  (("1"
                                                                    (LEMMA
                                                                     "cutting_length")
                                                                    (("1"
                                                                      (INST -1
                                                                       "rdc(l)")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "rdc"
                                                                         -1 1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (CASE
                                                                        "length(cdr(l)) = length(cutting(rdc(l)))")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 2
                                                                       :DIR RL)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 -7
                                                                         :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "rdc"
                                                                           -7
                                                                           3)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -5)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "^")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "^")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "append_null_right")
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "append_null_right")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (REWRITE
                                                                       "caret_swap"
                                                                       3)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "append_assoc"
                                                                         3 :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "rdc"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -4)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (EXPAND "^")
                          (("2" (REWRITE "append_null_right") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (ASSERT)
          (("3" (SKEEP)
            (("3" (LEMMA "cutting_length")
              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("4" (ASSERT)
          (("4" (SKEEP)
            (("4" (EXPAND "every")
              (("4" (EXPAND "every") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "cutting_length")
        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (EXPAND "every")
          (("4" (EXPAND "every") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|caret_swap| FORMULA-DECL NIL |list_lemmas| NIL)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|cutting_sum| 0
  (|cutting_sum-1| |nil| 3813918822
   ("" (SKEEP)
    (("" (LEMMA "cutting_alt")
      (("" (INST?)
        (("" (LEMMA "sum_append")
          ((""
            (INST -1 "cutting(l)" "(: 0 :) ^ (length(l) - length(cutting(l)))")
            (("1" (ASSERT)
              (("1" (LEMMA "sum_0")
                (("1" (INST -1 "(length(l) - length(cutting(l)))")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (ASSERT)
                    (("2" (LEMMA "cutting_length")
                      (("2" (INST -1 "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (LEMMA "cutting_length")
                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cutting_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum_append| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum_0| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|mv_cut_length| 0
  (|mv_cut_length-1| |nil| 3813581241
   ("" (INDUCT "p")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "mv_cut" 1 1)
        (("2" (ASSERT)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_cut_C_TCC1| 0
  (|mv_cut_C_TCC1-1| |nil| 3813580263
   ("" (SKEEP)
    (("" (LEMMA "mv_cut_length")
      (("" (INST -1 "p") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|mv_cut_C| SUBTYPE "standard_form_mult_poly.i"
    "below[length[monomial](mv_cut(p))]")))
 (|mv_cut_C| 0
  (|mv_cut_C-1| |nil| 3813581266
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "nth" 1)
            (("1" (ASSERT)
              (("1" (EXPAND "mv_cut" 1)
                (("1" (LIFT-IF 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (INST -1 "i-1")
            (("1" (EXPAND "nth" 2)
              (("1" (EXPAND "mv_cut" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "i")
          (("3" (ASSERT)
            (("3" (LEMMA "mv_cut_length")
              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_cut_alpha| 0
  (|mv_cut_alpha-1| |nil| 3813654594
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "nth" 1)
            (("1" (EXPAND "mv_cut" 1)
              (("1" (ASSERT)
                (("1" (LIFT-IF 1)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (SPLIT 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (LEMMA "cutting_last")
                          (("2" (INST -1 "cons1_var`alpha")
                            (("2" (ASSERT)
                              (("2" (LEMMA "last_is_nth")
                                (("2" (INST?)
                                  (("2" (ASSERT)
                                    (("2"
                                      (INST 1 "last(cutting(cons1_var`alpha))")
                                      (("2" (LEMMA "nth_member[nat]")
                                        (("2" (LEMMA "cutting_nth")
                                          (("2"
                                            (INST -2 "cons1_var`alpha"
                                             "last(cutting(cons1_var`alpha))"
                                             " length(cutting(cons1_var`alpha)) - 1")
                                            (("1" (ASSERT)
                                              (("1"
                                                (INST -1 "cons1_var`alpha"
                                                 "length(cutting(cons1_var`alpha)) - 1")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (HIDE 2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (HIDE 2)
                                                (("2" (SPLIT 1)
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2"
                                                    (LEMMA "cutting_length")
                                                    (("2"
                                                      (INST -1
                                                       "cons1_var`alpha")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "nth" 2)
              (("2" (EXPAND "mv_cut" 2 1)
                (("2" (LIFT-IF 2) (("2" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "i")
          (("3" (LEMMA "mv_cut_length")
            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cutting_last| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|cutting_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|null_cut_cdr| 0
  (|null_cut_cdr-1| |nil| 3813922686
   (""
    (CASE "FORALL (n:nat,l: list[nat]):
       length(l) = n IMPLIES ( cons?(l) AND null?(cutting(l)) IMPLIES null?(cutting(cdr(l))))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(l)" "l") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (LEMMA "last_cdr[nat]")
                        (("1" (INST -1 "l")
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "cutting" -6)
                                (("1" (ASSERT)
                                  (("1" (LEMMA "last_is_nth")
                                    (("1" (INST -1 "l")
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "last_is_nth")
                                          (("1" (INST -1 "cdr(l)")
                                            (("1" (EXPAND "last" -3)
                                              (("1" (ASSERT)
                                                (("1" (INST -5 "rdc(l)")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA "length_rdc[nat]")
                                                      (("1" (INST?)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE
                                                                "rdc[nat](l)=null")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -2)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "rdc_cdr[nat]")
                                                                (("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (LEMMA "last_cdr[nat]")
                            (("2" (INST?)
                              (("2" (EXPAND "last" -1)
                                (("2" (LEMMA "last_is_nth")
                                  (("2" (INST-CP -1 "l")
                                    (("2" (INST -1 "cdr(l)")
                                      (("2" (ASSERT)
                                        (("2" (REPLACE -1)
                                          (("2" (REPLACE -2 -3 RL)
                                            (("2" (REPLACE -1 -3 RL)
                                              (("2" (REPLACE -1 1 RL)
                                                (("2" (EXPAND "cutting" -7)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length_rdc| FORMULA-DECL NIL |list_lemmas| NIL)
    (|rdc_cdr| FORMULA-DECL NIL |list_lemmas| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|last_cdr| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|zero_n_nth_TCC1| 0
  (|zero_n_nth_TCC1-1| |nil| 3813504812
   ("" (INDUCT "n")
    (("1" (SKEEP) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "^" 1)
          (("2" (CASE "i=0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST -1 "i-1")
              (("1" (LEMMA "length_append[nat]")
                (("1" (INST -1 "(: 0 :)" "(: 0 :)^j")
                  (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|zero_n_nth| SUBTYPE "standard_form_mult_poly.i"
    "below[length[real](^[real]((: 0 :), n))]")))
 (|zero_n_nth| 0
  (|zero_n_nth-1| |nil| 3813505348
   ("" (INDUCT " n")
    (("1" (SKEEP) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "^" 1)
            (("1" (LEMMA "nth_append[nat]")
              (("1" (INST -1 "(: 0:)" "(: 0 :)^j" "i")
                (("1" (ASSERT)
                  (("1" (SPLIT -1)
                    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "every" 1)
                  (("2" (EXPAND "every" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "^" 2)
            (("2" (LEMMA "nth_append[nat]")
              (("2" (INST -1 "(: 0:)" "(: 0 :)^j" "i")
                (("1" (ASSERT)
                  (("1" (SPLIT -1)
                    (("1" (REPLACE -1) (("1" (INST -2 "i-1") NIL NIL)) NIL)
                     ("2" (LEMMA "zero_n_nth_TCC1")
                      (("2" (INST -1 "j" "i-1") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "zero_n_nth_TCC1") (("3" (INST?) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zero_n_nth_TCC1| SUBTYPE-TCC NIL |standard_form_mult_poly| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|cutting_cdr| 0
  (|cutting_cdr-1| |nil| 3813570272
   (""
    (CASE " FORALL (n:nat, l1: list[nat]):
      length(l1)=n IMPLIES (  (cons?(cutting(l1)) AND cons?(l1)) IMPLIES
         cutting(cdr(l1)) = cdr(cutting(l1)))")
    (("1" (SKEEP)
      (("1" (INST?) (("1" (ASSERT) (("1" (INST -1 "length(l1)") NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" 1 2)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (GRIND) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "cutting" 1 1)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN)
                                    (("1" (INST -3 "rdc(l1)")
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "length_rdc[nat]")
                                          (("1" (INST?)
                                            (("1" (ASSERT)
                                              (("1"
                                                (CASE
                                                    "NOT ((cons?(cutting(rdc(l1))) AND cons?(rdc(l1))))")
                                                (("1" (SPLIT 1)
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2" (EXPAND "length" -1 1)
                                                    (("2" (ASSERT)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SPLIT -5)
                                                  (("1" (REPLACE -1 1 RL)
                                                    (("1"
                                                      (LEMMA "rdc_cdr[nat]")
                                                      (("1" (INST?)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN) NIL NIL)
                                                   ("3" (GRIND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (EXPAND "last" -1)
                                      (("2" (ASSERT)
                                        (("2" (LIFT-IF -1)
                                          (("2" (SPLIT -1)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (FLATTEN) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "cutting" 2)
                              (("2" (LIFT-IF 2)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (FLATTEN)
                                    (("2" (SPLIT 2)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "last" 3 1)
                                          (("1" (ASSERT)
                                            (("1" (LIFT-IF 3)
                                              (("1" (SPLIT 3)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rdc_cdr| FORMULA-DECL NIL |list_lemmas| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_rdc| FORMULA-DECL NIL |list_lemmas| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL))
   SHOSTAK))
 (|cutting_append_length| 0
  (|cutting_append_length-1| |nil| 3813503552
   (""
    (CASE "FORALL (A:nat, l1, l2: list[nat], n, m: nat):
                     length(l1)=A IMPLIES ( (length(l1) = length(l2) AND
                        append(cutting(l1), (: 0 :) ^ n) =
                         append(cutting(l2), (: 0 :) ^ m))
                       IMPLIES length(cutting(l1)) = length(cutting(l2)))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(l1)" "l1" "l2" "n" "m") (("1" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "A")
        (("1" (SKEEP)
          (("1" (GRIND)
            (("1" (CASE "l1=null")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "cutting" -4 1)
              (("2" (LIFT-IF -4)
                (("2" (SPLIT -4)
                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "cutting" -2 2)
                          (("1" (LIFT-IF -2)
                            (("1" (SPLIT -2)
                              (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT -1)
                                  (("1" (FLATTEN)
                                    (("1" (INST -4 "rdc(l1)" "rdc(l2)" "n" "m")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -4)
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "length_rdc[nat]")
                                              (("1" (EXPAND "cutting" 3)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (LEMMA "length_rdc[nat]")
                                              (("2" (INST-CP -1 "l1")
                                                (("2" (INST -1 "l2")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (LEMMA "length_rdc[nat]")
                                            (("3" (INST?)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2"
                                      (CASE
                                          "length(l2) > length(cutting(rdc(l1)))")
                                      (("1" (LEMMA "nth_append[nat]")
                                        (("1" (ASSERT)
                                          (("1"
                                            (LEMMA "list_extensionality[nat]")
                                            (("1"
                                              (INST -1
                                               "append(cutting(rdc(l1)), (: 0 :) ^ n)"
                                               " append(l2, (: 0 :) ^ m)")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -2)
                                                  (("1" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (LEMMA
                                                         "length_append[nat]")
                                                        (("1"
                                                          (INST-CP -1
                                                           "cutting(rdc(l1))"
                                                           " (: 0 :) ^ n")
                                                          (("1"
                                                            (INST-CP -1 "l2"
                                                             " (: 0 :) ^ m")
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1"
                                                                  (REPLACE -2)
                                                                  (("1"
                                                                    (HIDE -1
                                                                     -2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "length_appendn[nat]")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "(: 0:)"
                                                                           "_")
                                                                          (("1"
                                                                            (INST-CP
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "n")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -2)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST-CP
                                                                                         -5
                                                                                         "cutting(rdc(l1))"
                                                                                         "(: 0 :)^n"
                                                                                         "length(l2)-1")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -5
                                                                                             "l2"
                                                                                             "(: 0 :)^m"
                                                                                             "length(l2)-1")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -4
                                                                                                 "length(l2)-1")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -5
                                                                                                   -4
                                                                                                   LR)
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -6
                                                                                                     -4
                                                                                                     LR)
                                                                                                    (("1"
                                                                                                      (CASE
                                                                                                          "last(l2) = nth(l2,length(l2)-1)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "zero_n_nth")
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -1
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -6
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "last_is_nth")
                                                                                                            (("2"
                                                                                                              (INST?)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               -)
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (LEMMA "cutting_length")
                                          (("2" (INST -1 "rdc(l1)")
                                            (("2" (LEMMA "length_rdc[nat]")
                                              (("2" (INST?)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "cutting" -1 1)
                            (("2" (LIFT-IF -1)
                              (("2" (SPLIT -1)
                                (("1" (FLATTEN)
                                  (("1"
                                    (CASE
                                        "length(l1) > length(cutting(rdc(l2)))")
                                    (("1" (LEMMA "nth_append[nat]")
                                      (("1" (ASSERT)
                                        (("1"
                                          (LEMMA "list_extensionality[nat]")
                                          (("1"
                                            (INST -1
                                             "append(cutting(rdc(l2)), (: 0 :) ^ m)"
                                             " append(l1, (: 0 :) ^ n)")
                                            (("1" (FLATTEN)
                                              (("1" (HIDE -2)
                                                (("1" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1"
                                                      (LEMMA
                                                       "length_append[nat]")
                                                      (("1"
                                                        (INST-CP -1
                                                         "cutting(rdc(l2))"
                                                         " (: 0 :) ^ m")
                                                        (("1"
                                                          (INST-CP -1 "l1"
                                                           " (: 0 :) ^ n")
                                                          (("1" (HIDE -1)
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (REPLACE -2)
                                                                (("1"
                                                                  (HIDE -1 -2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "length_appendn[nat]")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "(: 0:)"
                                                                         "_")
                                                                        (("1"
                                                                          (INST-CP
                                                                           -1
                                                                           "n")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "m")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -2)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (INST-CP
                                                                                       -5
                                                                                       "cutting(rdc(l2))"
                                                                                       "(: 0 :)^m"
                                                                                       "length(l1)-1")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -5
                                                                                           "l1"
                                                                                           "(: 0 :)^n"
                                                                                           "length(l1)-1")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               -4
                                                                                               "length(l1)-1")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -5
                                                                                                 -4
                                                                                                 LR)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -6
                                                                                                   -4
                                                                                                   LR)
                                                                                                  (("1"
                                                                                                    (CASE
                                                                                                        "last(l1) = nth(l1,length(l1)-1)")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "zero_n_nth")
                                                                                                          (("1"
                                                                                                            (INST?)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -6
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "last_is_nth")
                                                                                                        (("2"
                                                                                                          (INST?)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -)
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 3
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         -)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           3
                                                                                           4)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (LEMMA "length_rdc[nat]")
                                        (("2" (LEMMA "cutting_length")
                                          (("2" (INST -1 "rdc(l2)")
                                            (("2" (INST -2 "l2")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "append" -1)
                                      (("2" (ASSERT)
                                        (("2"
                                          (INST -2 "cdr(l1)" "cdr(l2)" "n" "m")
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "length" -3)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "cutting" 4)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length_rdc| FORMULA-DECL NIL |list_lemmas| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|zero_n_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|last_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|max_length_cut| 0
  (|max_length_cut-1| |nil| 3810977647
   ("" (INDUCT "p")
    (("1" (EXPAND "mv_cut") (("1" (ASSERT) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "mv_cut" 1)
        (("2" (LIFT-IF)
          (("2" (SPLIT)
            (("1" (FLATTEN)
              (("1" (EXPAND "max_length" 1)
                (("1" (TYPEPRED "standard_form(cons1_var`alpha)")
                  (("1" (HIDE -1)
                    (("1" (HIDE -1)
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "length(cutting(cons1_var`alpha))< max_length(mv_cut(cons2_var))")
                          (("1" (EXPAND "max" 1 2) (("1" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (EXPAND "max" 2 2)
                            (("2" (ASSERT)
                              (("2" (LEMMA "cutting_length")
                                (("2" (INST -1 "cons1_var`alpha")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (EXPAND "max_length" 2 2)
                (("2" (ASSERT)
                  (("2" (EXPAND "max_length" 2 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "max" 2 2)
                        (("2" (ASSERT)
                          (("2" (LIFT-IF 2)
                            (("2" (SPLIT 2)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_cut_last_nonzero_TCC1| 0
  (|mv_cut_last_nonzero_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL
   (|mv_cut_last_nonzero| SUBTYPE
    "list_props[monomial].nth(standard_form_mult_poly.P, standard_form_mult_poly.j)`alpha"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|mv_cut_last_nonzero| 0
  (|mv_cut_last_nonzero-1| |nil| 3810977649
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (CASE "j=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "nth" -3)
                (("1" (EXPAND "mv_cut" -3)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF -3)
                      (("1" (SPLIT -3)
                        (("1" (FLATTEN)
                          (("1" (LEMMA "cutting_last")
                            (("1" (INST? -1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "mv_cut" 1)
                                  (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (EXPAND "mv_cut" 2)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF 2)
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "cons2_var = null")
            (("1" (EXPAND "nth")
              (("1" (ASSERT)
                (("1" (REPLACE -1)
                  (("1" (EXPAND "mv_cut" 2)
                    (("1" (ASSERT)
                      (("1" (EXPAND "mv_cut" 2)
                        (("1" (ASSERT)
                          (("1" (GRIND)
                            (("1" (EXPAND "nth")
                              (("1" (TYPEPRED "j") (("1" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (INST -1 "j-1")
                (("1" (EXPAND "nth" 3)
                  (("1" (EXPAND "mv_cut" 3)
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth" -2)
                        (("1" (EXPAND "mv_cut" -2) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "j")
                  (("2" (LEMMA "mv_cut_length")
                    (("2" (INST -1 "cons(cons1_var,cons2_var)")
                      (("2" (EXPAND "length" -1 1)
                        (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP) (("5" (ASSERT) (("5" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cutting_last| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|lft_max_0_TCC1| 0
  (|lft_max_0_TCC1-1| |nil| 3810975173 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|lft_max_0| SUBTYPE "0"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.p))}")))
 (|lft_max_0| 0
  (|lft_max_0-1| |nil| 3810977654
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (SKEEP)
        (("" (LEMMA "lft_length_nth")
          (("" (CASE "p=null")
            (("1" (EXPAND "lft" 1)
              (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (INST? -1)
              (("1" (EXPAND "length" -1)
                (("1" (LIFT-IF -1)
                  (("1" (SPLIT -1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "j")
                (("2" (LEMMA "Lft_length")
                  (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK))
 (|lft_minlength| 0
  (|lft_minlength-1| |nil| 3810977656
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (FLATTEN)
        (("" (SKEEP)
          (("" (EXPAND "minlength?" 2)
            (("" (LEMMA "Lft_length")
              (("" (INST -1 "p" "max_length(p)")
                (("" (EXPAND "length" -1)
                  (("" (LIFT-IF -1)
                    (("" (ASSERT)
                      (("" (SPLIT -1)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (HIDE -1)
                              (("2" (SPLIT 3)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (LEMMA "lft_Unif")
                                    (("2" (INST -1 "p")
                                      (("2" (ASSERT)
                                        (("2" (SPLIT 2)
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (LEMMA "lft_n_last")
                                            (("2"
                                              (INST -1 "p" "max_length(p)" "j")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (CASE "max_length(p) = 0")
                                                  (("1" (REPLACE -1)
                                                    (("1" (EXPAND "lft" 1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "length" 1)
                                                          (("1" (ASSERT)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA "lft_length_nth")
                                                      (("2"
                                                        (INST -1 "p"
                                                         "max_length(p)" "j")
                                                        (("2"
                                                          (EXPAND "length" -1)
                                                          (("2" (LIFT-IF -1)
                                                            (("2" (ASSERT)
                                                              (("2" (SPLIT -1)
                                                                (("1" (PROPAX)
                                                                  NIL NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (HIDE -1)
                                                                    (("2"
                                                                      (INST 3
                                                                       "j")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_n_last| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_all_null_TCC1| 0
  (|lft_all_null_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (LEMMA "Lft_length")
      (("" (INST?)
        (("" (SKEEP) (("" (TYPEPRED "j") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|lft_all_null| SUBTYPE "standard_form_mult_poly.j"
    "below[length[monomial](p)]")))
 (|lft_all_null| 0
  (|lft_all_null-1| |nil| 3810977661
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (FLATTEN)
        (("" (EXPAND "minlength?")
          (("" (LEMMA "Lft_length")
            (("" (INST -1 "p" "max_length(p)")
              (("" (EXPAND "length" -1)
                (("" (LIFT-IF -1)
                  (("" (SPLIT -1)
                    (("1" (FLATTEN -1) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE -1)
                        (("2" (ASSERT)
                          (("2" (LEMMA "lft_length_nth")
                            (("2" (INST? -1)
                              (("2" (LEMMA "max_length_is_nth")
                                (("2" (INST -1 "p")
                                  (("2" (EXPAND "length" -1)
                                    (("2" (ASSERT)
                                      (("2" (SKEEP)
                                        (("2" (LIFT-IF -1)
                                          (("2" (ASSERT)
                                            (("2" (SPLIT -1)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -2)
                                                    (("1" (EXPAND "length" -3)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (LEMMA "Lft_length")
                                                          (("1" (INST? -1)
                                                            (("1" (ASSERT)
                                                              (("1" (SPLIT 2)
                                                                (("1" (PROPAX)
                                                                  NIL NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (INST -4
                                                                       "i")
                                                                      (("2"
                                                                        (LIFT-IF
                                                                         -4)
                                                                        (("2"
                                                                          (SPLIT
                                                                           -4)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "max_length_is_nth")
                                                  (("2" (INST? -1)
                                                    (("2" (EXPAND "length" -1)
                                                      (("2" (ASSERT)
                                                        (("2" (SKEEP)
                                                          (("2" (LIFT-IF -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (INST -4 "j!1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (TYPEPRED
                                                                     "j!1")
                                                                    (("2"
                                                                      (LEMMA
                                                                       "Lft_length")
                                                                      (("2"
                                                                        (INST?
                                                                         -1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_mv_cut_TCC1| 0
  (|lft_mv_cut_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|lft_mv_cut| SUBTYPE
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (|lft_mv_cut| 0
  (|lft_mv_cut-1| |nil| 3810977667
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (CASE "mv_cut(p) = null")
        (("1" (REPLACE -1)
          (("1" (EXPAND "lft")
            (("1" (ASSERT)
              (("1" (EXPAND "minlength?") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (LEMMA "max_length_is_nth")
          (("2" (INST -1 "mv_cut(p)")
            (("1" (LEMMA "max_length_is_max")
              (("1"
                (CASE
                    "FORALL(j: below(length(mv_cut(p)))): null?(nth(mv_cut(p),j)`alpha)")
                (("1" (LEMMA "lft_all_null")
                  (("1" (INST -1 "mv_cut(p)")
                    (("1" (ASSERT)
                      (("1" (LEMMA "Lft_length")
                        (("1" (INST? -1)
                          (("1" (SKEEP) (("1" (INST -2 "j") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (SKEEP)
                    (("2" (LEMMA "mv_cut_last_nonzero")
                      (("2" (INST? -1)
                        (("2" (ASSERT)
                          (("2" (INST -1 "j!1")
                            (("2" (HIDE -2)
                              (("2" (SPLIT -1)
                                (("1" (EXPAND "length" -2)
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "lft_max_0")
                                      (("1" (INST? -1)
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "Lft_length")
                                            (("1" (INST? -1)
                                              (("1" (EXPAND "length" -1)
                                                (("1" (LIFT-IF -1)
                                                  (("1" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (HIDE -1)
                                                        (("2"
                                                          (EXPAND "minlength?"
                                                                  4)
                                                          (("2" (ASSERT)
                                                            (("2" (SPLIT 4)
                                                              (("1" (PROPAX)
                                                                NIL NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (SKEEP)
                                                                  (("2"
                                                                    (INST -1
                                                                     "i")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length" -2)
                                  (("2" (LIFT-IF -2)
                                    (("2" (SPLIT -2)
                                      (("1" (FLATTEN)
                                        (("1" (LEMMA "max_length_is_max")
                                          (("1" (INST -1 "mv_cut(p)" "j")
                                            (("1" (EXPAND "length" -1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (LEMMA "lft_minlength")
                                          (("2" (INST -1 "mv_cut(p)")
                                            (("2" (ASSERT)
                                              (("2" (INST 1 "j!1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "mv_cut(p) = null")
              (("1" (PROPAX) NIL NIL)
               ("2" (EXPAND "lft")
                (("2" (EXPAND "length" 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_last_nonzero| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_minlength| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lft_max_0| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lft_all_null| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK))
 (|minlength_cdr_TCC1| 0
  (|minlength_cdr_TCC1-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|minlength_cdr| SUBTYPE
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p)))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(list_adt[monomial].cdr(standard_form_mult_poly.p))))}")))
 (|minlength_cdr| 0
  (|minlength_cdr-1| |nil| 3810977672
   ("" (SKEEP)
    (("" (CASE "cdr(p) = null")
      (("1" (REPLACE -1)
        (("1" (EXPAND "mv_cut")
          (("1" (EXPAND "lft")
            (("1" (ASSERT)
              (("1" (EXPAND "minlength?" 1) (("1" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "lft_mv_cut")
        (("2" (INST -1 "cdr(p)")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_mv_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|minlength_simplify| 0
  (|minlength_simplify-1| |nil| 3810977674
   ("" (SKEEP)
    (("" (EXPAND "minlength?" -3)
      (("" (ASSERT)
        (("" (SPLIT -3)
          (("1" (LEMMA "simplify_cons")
            (("1" (INST -1 "p")
              (("1" (ASSERT)
                (("1" (EXPAND "minlength?" 1)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (SKEEP)
                        (("2" (LEMMA "simplify_Unif")
                          (("2" (INST -1 "p")
                            (("1" (ASSERT)
                              (("1" (LEMMA "simplify_alpha")
                                (("1" (INST -1 "p" "i")
                                  (("1" (SKEEP)
                                    (("1" (INST -4 "i_1")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "Unif?" 1)
                                (("2" (SKEEP)
                                  (("2" (COPY -2)
                                    (("2" (INST -1 "i!1")
                                      (("2" (INST -3 "j")
                                        (("2" (EXPAND "length" 1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLATTEN)
            (("2" (ASSERT)
              (("2" (SPLIT -1)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (HIDE 1)
                      (("1" (SKEEP)
                        (("1" (EXPAND "minlength?" 2)
                          (("1" (LEMMA "simplify_cons")
                            (("1" (INST? -1)
                              (("1" (ASSERT)
                                (("1" (SPLIT 2)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (FLATTEN)
                                    (("2" (SPLIT 2)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (LEMMA "simplify_Unif")
                                        (("2" (INST? -1)
                                          (("2" (ASSERT)
                                            (("2" (SKEEP)
                                              (("2"
                                                (LEMMA
                                                 "simplify_alpha_reverse")
                                                (("2" (INST -1 "p" "j")
                                                  (("2" (SKEEP)
                                                    (("2" (INST 1 "j_1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|simplify_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sortedsimplify| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|simplify_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|simplify_cons| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_alpha_reverse| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_sorted| 0
  (|lft_sorted-1| |nil| 3810977678
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (CASE "cons2_var = null")
          (("1" (REPLACE -1)
            (("1" (EXPAND "lft" 1)
              (("1" (ASSERT)
                (("1" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (EXPAND "lft" 1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "is_sorted?" 1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "lft" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (LEMMA "cdr_of_sorted_is_sorted")
              (("2" (INST -1 "cons(cons1_var,cons2_var)")
                (("2" (ASSERT)
                  (("2" (SPLIT -2)
                    (("1" (EXPAND "lft" 2)
                      (("1" (ASSERT)
                        (("1" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (HIDE 1)
                              (("2" (SPLIT 1)
                                (("1" (FLATTEN)
                                  (("1" (INST -3 "n")
                                    (("1" (LEMMA "Lft_length")
                                      (("1" (INST? -1)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (LIFT-IF -1)
                                            (("1" (SPLIT -1)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (FLATTEN)
                                                (("2" (HIDE -1)
                                                  (("2"
                                                    (LEMMA
                                                     "cons_smaller_to_sorted_is_sorted")
                                                    (("2"
                                                      (INST -1
                                                       "lft(cons2_var)(n)"
                                                       "(# C := cons1_var`C, alpha := append(cons1_var`alpha, (: 0 :)^(n - length(cons1_var`alpha))) #)")
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE 3)
                                                          (("1"
                                                            (EXPAND "lft" 1)
                                                            (("1" (LIFT-IF 1)
                                                              (("1" (SPLIT 1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (HIDE 1)
                                                                    (("2"
                                                                      (SPLIT 1)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "Unif?"
                                                                           -7)
                                                                          (("1"
                                                                            (INST
                                                                             -7
                                                                             "0"
                                                                             "1")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               -7)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "nth"
                                                                                 -7)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -7)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "is_sorted?"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -8
                                                                                       "0")
                                                                                      (("1"
                                                                                        (SPLIT
                                                                                         -8)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "nth"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "append_leq")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "(: 0 :)^(n - length(car(cons2_var)`alpha))"
                                                                                                 "cons1_var"
                                                                                                 "car(cons2_var)")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (TYPEPRED
                                                                                                   "n")
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "max_length_is_max")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "cons(cons1_var,cons2_var)"
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "nth"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "nth"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             1)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("3"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("3"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Unif?"
                                                                           -5)
                                                                          (("2"
                                                                            (INST
                                                                             -5
                                                                             "0"
                                                                             "1")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               -5)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "nth"
                                                                                 -5)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -5)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("3"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("3"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (TYPEPRED "n")
                                                        (("2"
                                                          (EXPAND "max_length"
                                                                  -1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (INST -1 "n")
                                    (("2"
                                      (LEMMA
                                       "cons_smaller_to_sorted_is_sorted")
                                      (("2"
                                        (INST -1 "lft(cons2_var)(n)"
                                         "cons1_var")
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "Lft_length")
                                            (("2" (INST -1 "cons2_var" "n")
                                              (("2" (EXPAND "length" -1)
                                                (("2" (LIFT-IF)
                                                  (("2" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (HIDE -1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "lft" 2)
                                                            (("2" (LIFT-IF 2)
                                                              (("2" (ASSERT)
                                                                (("2" (SPLIT 2)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (HIDE 1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "Unif?"
                                                                         -3)
                                                                        (("2"
                                                                          (INST
                                                                           -3
                                                                           "0"
                                                                           "1")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "nth"
                                                                             -3)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               -3)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -3)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "is_sorted?"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -4
                                                                                       "0")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "nth"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "nth"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             6)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               6)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (EXPAND
                                                                             "length"
                                                                             1)
                                                                            (("3"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "Unif?" 1)
                      (("2" (SKEEP)
                        (("2" (EXPAND "Unif?" -2)
                          (("2" (INST -2 "i+1" "j+1")
                            (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                              NIL)
                             ("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP)
      (("7" (SKEEP)
        (("7" (LEMMA "leq_total_preorder") (("7" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("8" (SKEEP)
      (("8" (LEMMA "leq_total_preorder") (("8" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| |sorting|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|append_leq| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cons_smaller_to_sorted_is_sorted| FORMULA-DECL NIL
     |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_allnonzero| 0
  (|lft_allnonzero-1| |nil| 3810977689
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL)
     ("2" (EXPAND "lft")
      (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)
     ("3" (SKEEP)
      (("3" (SPLIT -1)
        (("1" (SKEEP)
          (("1" (INST -1 "n")
            (("1" (EXPAND "lft" 1)
              (("1" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (HIDE 2)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "allnonzero?" 1)
                          (("1" (SPLIT 1)
                            (("1" (SKEEP)
                              (("1" (CASE "i=0")
                                (("1" (REPLACE -1)
                                  (("1" (EXPAND "nth" -2)
                                    (("1" (EXPAND "allnonzero?" -6)
                                      (("1" (SPLIT -6)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (INST 1 "0")
                                          (("1" (EXPAND "nth" 1)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length" 1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "nth" -1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "allnonzero?" -4)
                                      (("2" (SPLIT -4)
                                        (("1" (ASSERT)
                                          (("1" (TYPEPRED "i")
                                            (("1" (EXPAND "length" -1)
                                              (("1" (EXPAND "length" -1)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SPLIT -1)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (INST 1 "i-1") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "allnonzero?" 2)
                        (("2" (SPLIT 2)
                          (("1" (SKEEP)
                            (("1" (EXPAND "nth" -1)
                              (("1" (LIFT-IF -1)
                                (("1" (SPLIT -1)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "allnonzero?" -4)
                                      (("1" (SPLIT -4)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (INST 1 "0")
                                          (("1" (EXPAND "nth" 1)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length" 1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (EXPAND "allnonzero?" -2)
                                      (("2" (SPLIT -2)
                                        (("1" (TYPEPRED "i")
                                          (("1" (EXPAND "length" -1)
                                            (("1" (EXPAND "length" -1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SPLIT -1)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (INST 1 "i-1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "n")
              (("2" (EXPAND "max_length" -1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND "allnonzero?")
            (("2" (SPLIT 1)
              (("1" (PROPAX) NIL NIL)
               ("2" (FLATTEN)
                (("2" (SPLIT 2)
                  (("1" (SPLIT -2)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (SKEEP)
                      (("2" (INST 1 "i+1")
                        (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|cut_allnonzero| 0
  (|cut_allnonzero-1| |nil| 3814382791
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "allnonzero?")
        (("" (SPLIT -1)
          (("1" (EXPAND "mv_cut" 1) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (SPLIT -1)
              (("1" (PROPAX) NIL NIL)
               ("2" (SPLIT 3)
                (("1" (PROPAX) NIL NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (SKEEP)
                      (("1" (LEMMA "mv_cut_C")
                        (("1" (INST -1 "p" "i")
                          (("1" (ASSERT)
                            (("1" (INST 2 "i") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (TYPEPRED "i")
                            (("2" (LEMMA "mv_cut_length")
                              (("2" (INST -1 "p") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_C| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_cut_allnonzero| 0
  (|lft_cut_allnonzero-1| |nil| 3814382952
   ("" (LEMMA "lft_allnonzero")
    (("" (LEMMA "cut_allnonzero")
      (("" (SKEEP)
        (("" (INST -1 "p") (("" (INST -2 "mv_cut(p)" "n") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|cut_allnonzero| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_allnonzero| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_cut_is_lft_TCC1| 0
  (|lft_cut_is_lft_TCC1-1| |nil| 3812888893
   ("" (SKEEP)
    (("" (EXPAND "cut_monom")
      (("" (LEMMA "cutting_length") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft_cut_is_lft| SUBTYPE
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (|lft_cut_is_lft| 0
  (|lft_cut_is_lft-1| |nil| 3812888894
   ("" (SKEEP)
    (("" (LEMMA "cutting_alt")
      (("" (LEMMA " caret_to_append[nat]")
        (("" (INST -2 "m`alpha")
          (("" (EXPAND "lft_one" 1 2)
            (("" (REPLACE -2 1)
              (("" (ASSERT)
                (("" (REWRITE "length_append")
                  (("1" (ASSERT)
                    (("1" (REWRITE "length_appendn")
                      (("1" (ASSERT)
                        (("1"
                          (INST -1 "(: 0 :)" "n-length(cutting(m`alpha))"
                           " (length(m`alpha) -
                                length(cutting(m`alpha)))")
                          (("1" (ASSERT)
                            (("1" (CASE "n=length(m`alpha)")
                              (("1" (REPLACE -1 :DIR RL)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "^" 1 2)
                                    (("1" (REWRITE "append_null_right")
                                      (("1" (EXPAND "cut_monom")
                                        (("1" (EXPAND "lft_one")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (LEMMA "cutting_length")
                                        (("2" (ASSERT)
                                          (("2" (INST -1 "m`alpha")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (REWRITE "append_assoc" 2)
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (EXPAND "cut_monom")
                                      (("1" (EXPAND "lft_one")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "cutting_length")
                                    (("2" (INST -1 "m`alpha")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (EXPAND "every")
                                    (("3" (EXPAND "every")
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "cutting_length")
                            (("2" (INST -1 "m`alpha") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT)
                            (("3" (LEMMA "cutting_length")
                              (("3" (INST -1 "m`alpha")
                                (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "cutting_length")
                        (("2" (INST -1 "m`alpha") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "cutting_length")
                    (("2" (INST -1 "m`alpha") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cutting_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cutting_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|caret_to_append| FORMULA-DECL NIL |list_lemmas| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|lft_alpha| 0
  (|lft_alpha-1| |nil| 3810977694
   ("" (INDUCT "p")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var = null")
          (("1" (SKEEP)
            (("1" (TYPEPRED "i")
              (("1" (EXPAND "length" -1)
                (("1" (EXPAND "length" -1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "nth" 1)
                      (("1" (EXPAND "lft" 1)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF 1)
                            (("1" (ASSERT)
                              (("1" (SPLIT 1)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "lft" 3)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "nth" 3)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (ASSERT)
              (("2" (INST -1 "n")
                (("1" (CASE "i=0")
                  (("1" (EXPAND "nth" 2)
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth" 3)
                        (("1" (EXPAND "lft" 2)
                          (("1" (LIFT-IF 2)
                            (("1" (SPLIT 2)
                              (("1" (PROPAX) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "lft" 4) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "nth" 3)
                    (("2" (ASSERT)
                      (("2" (EXPAND "nth" 4)
                        (("2" (EXPAND "lft" 4)
                          (("2" (LIFT-IF 4)
                            (("2" (EXPAND "lft" 3)
                              (("2" (LIFT-IF 3)
                                (("2" (INST -1 "i-1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "n")
                  (("2" (EXPAND "max_length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (ASSERT)
            (("4" (TYPEPRED "i")
              (("4" (LEMMA "Lft_length")
                (("4" (INST? -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (TYPEPRED "i")
          (("5" (LEMMA "Lft_length")
            (("5" (INST? -1) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (TYPEPRED "n")
          (("6" (LEMMA "max_length_is_max")
            (("6" (INST -1 "p" "i") (("6" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP)
      (("7" (SKEEP) (("7" (ASSERT) (("7" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|lft_simplify| 0
  (|lft_simplify-1| |nil| 3810977700
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "simplified?" -1)
      (("" (SPLIT -1)
        (("1" (EXPAND "lft" 1)
          (("1" (SPLIT -1)
            (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (ASSERT)
              (("2" (ASSERT)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (EXPAND "simplified?" 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -2)
                            (("1" (LIFT-IF -2)
                              (("1" (SPLIT -2)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "length" 2)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "lft" 2 1)
                                          (("2" (EXPAND "length" 2 1)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "simplified?" 2)
                      (("2" (ASSERT)
                        (("2" (EXPAND "length" -1)
                          (("2" (LIFT-IF -1)
                            (("2" (SPLIT -1)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" 3 1)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "lft" 3 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (SPLIT -1)
            (("1" (EXPAND "simplified?" 3)
              (("1" (ASSERT)
                (("1" (LEMMA "Lft_length")
                  (("1" (INST?)
                    (("1" (SPLIT 3)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (SPLIT 3)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (SKEEP :PREDS? T)
                              (("2" (INST -5 "i" "j")
                                (("2" (ASSERT)
                                  (("2" (ASSERT)
                                    (("2" (FLATTEN)
                                      (("2" (LEMMA "lft_is_alt")
                                        (("2" (INST?)
                                          (("2" (REPLACE -1 -4)
                                            (("2" (EXPAND "lft_alt" -4)
                                              (("2" (REWRITE "map_nth_rw" -4)
                                                (("2" (REWRITE "map_nth_rw" -4)
                                                  (("2" (EXPAND "lft_one" -4)
                                                    (("2" (EXPAND "Unif?")
                                                      (("2" (INST -6 "i" "j")
                                                        (("2" (REPLACE -6)
                                                          (("2"
                                                            (LEMMA
                                                             "append_left_inj[nat]")
                                                            (("2" (INST?)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append_left_inj| FORMULA-DECL NIL |list_lemmas| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|lft_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|lft_cut_alpha_TCC1| 0
  (|lft_cut_alpha_TCC1-1| |nil| 3811666516
   ("" (LEMMA "max_length_cut")
    (("" (SKEEP) (("" (INST -1 "p") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|max_length_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|lft_cut_alpha| SUBTYPE "standard_form_mult_poly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (|lft_cut_alpha| 0
  (|lft_cut_alpha-1| |nil| 3811677695
   ("" (SKEEP :PREDS? T)
    (("" (REWRITE "mv_cut_is_alt")
      (("" (REWRITE "lft_is_alt")
        (("" (EXPAND "lft_alt")
          (("" (EXPAND "mv_cut_alt")
            (("" (LEMMA "map_length[monomial, monomial]")
              (("" (INST -1 "cut_monom" "p")
                ((""
                  (LEMMA
                   "map_length[{m:monomial| n>= length(m`alpha)}, monomial]")
                  (("" (INST -1 "lft_one(n)" "map(cut_monom)(p)")
                    (("" (REPLACE -2 -1)
                      (("" (CASE "length(p) <=1")
                        (("1" (EXPAND "simplified?" +)
                          (("1" (ASSERT)
                            (("1" (SPLIT 1)
                              (("1" (PROPAX) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (SPLIT 3)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (SKEEP :PREDS? T) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "simplified?" 2)
                          (("2" (SPLIT 2)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 3)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (SKEEP :PREDS? T)
                                  (("2"
                                    (LEMMA
                                     "map_nth_rw[{m:monomial | n>=length(m`alpha)}, monomial]")
                                    (("2"
                                      (INST -1 "lft_one(n)" "map(cut_monom)(p)"
                                       "_")
                                      (("2" (INST-CP -1 "i")
                                        (("1" (REPLACE -2)
                                          (("1" (INST -1 "j")
                                            (("1" (REPLACE -1)
                                              (("1"
                                                (LEMMA
                                                 "map_nth_rw[monomial, monomial]")
                                                (("1"
                                                  (INST -1 "cut_monom" "p" "_")
                                                  (("1" (INST-CP -1 "i")
                                                    (("1" (INST -1 "j")
                                                      (("1" (REPLACE -1)
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (REWRITE
                                                             "lft_cut_is_lft")
                                                            (("1"
                                                              (REWRITE
                                                               "lft_cut_is_lft")
                                                              (("1"
                                                                (EXPAND
                                                                 "lft_one" -7)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Unif?")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (SPLIT
                                                                       -11)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "map")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (INST
                                                                         -1 "i"
                                                                         "j")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           -8)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "append_left_inj[nat]")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "simplified?"
                                                                                   -12)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -12)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "map")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "i"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (LEMMA
                                                                                 "max_length_is_max")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "p"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     " map"
                                                                                     4)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "max_length_is_max")
                                                                (("2"
                                                                  (INST -1 "p"
                                                                   "i")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "map " 4)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (LEMMA
                                                               "max_length_is_max")
                                                              (("2"
                                                                (INST -1 "p"
                                                                 "j")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (EXPAND "map"
                                                                          4)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REPLACE -5 1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|append_left_inj| FORMULA-DECL NIL |list_lemmas| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|lft_cut_is_lft| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|lft_cut_alpha_mv_cut| 0
  (|lft_cut_alpha_mv_cut-1| |nil| 3813395064
   ("" (SKEEP :PREDS? T)
    (("" (REWRITE "mv_cut_is_alt")
      (("" (REWRITE "lft_is_alt")
        (("" (EXPAND "lft_alt")
          (("" (EXPAND "mv_cut_alt")
            (("" (LEMMA "map_length[monomial, monomial]")
              (("" (INST -1 "cut_monom" "p")
                ((""
                  (LEMMA
                   "map_length[{m:monomial| n>= length(m`alpha)}, monomial]")
                  (("" (INST -1 "lft_one(n)" "map(cut_monom)(p)")
                    (("" (REPLACE -2 -1)
                      (("" (CASE "length(p) <=1")
                        (("1" (EXPAND "simplified?" +)
                          (("1" (ASSERT)
                            (("1" (SPLIT 1)
                              (("1" (PROPAX) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (SPLIT 3)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (SKEEP :PREDS? T) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "simplified?" 2)
                          (("2" (SPLIT 2)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 3)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (SKEEP :PREDS? T)
                                  (("2"
                                    (LEMMA
                                     "map_nth_rw[{m:monomial | n>=length(m`alpha)}, monomial]")
                                    (("2"
                                      (INST -1 "lft_one(n)" "map(cut_monom)(p)"
                                       "_")
                                      (("2" (INST-CP -1 "i")
                                        (("1" (REPLACE -2)
                                          (("1" (INST -1 "j")
                                            (("1" (REPLACE -1)
                                              (("1"
                                                (LEMMA
                                                 "map_nth_rw[monomial, monomial]")
                                                (("1"
                                                  (INST -1 "cut_monom" "p" "_")
                                                  (("1" (INST-CP -1 "i")
                                                    (("1" (INST -1 "j")
                                                      (("1" (REPLACE -1)
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (LEMMA
                                                             "lft_cut_is_lft")
                                                            (("1"
                                                              (EXPAND
                                                               "cut_monom" -8)
                                                              (("1"
                                                                (EXPAND
                                                                 "lft_one" -8)
                                                                (("1"
                                                                  (LEMMA
                                                                   "cutting_alt")
                                                                  (("1"
                                                                    (INST-CP -1
                                                                     "nth(p,j)`alpha")
                                                                    (("1"
                                                                      (INST-CP
                                                                       -1
                                                                       "nth(p,i)`alpha")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "p")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "Unif?"
                                                                             -2)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -2)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   4)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (INST
                                                                                 -1
                                                                                 "i"
                                                                                 "j")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "simplified?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       -2)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         4)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "i"
                                                                                             "j")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    " nth(p, i)`alpha = nth(p, j)`alpha")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (CASE
                                                                                                      "cutting(nth(p, i)`alpha) = cutting(nth(p, j)`alpha)")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (LEMMA
                                                                                                     "append_list[nat]")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "cutting(nth(p, i)`alpha)"
                                                                                                       " (: 0 :) ^ (n - length(cutting(nth(p, i)`alpha)))"
                                                                                                       "cutting(nth(p, j)`alpha)"
                                                                                                       " (: 0 :) ^ (n - length(cutting(nth(p, j)`alpha)))")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "length_append[nat]")
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "length_appendn[nat]")
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "max_length_is_max")
                                                                                                              (("1"
                                                                                                                (HIDE
                                                                                                                 -9)
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "cutting_append_length")
                                                                                                                  (("1"
                                                                                                                    (INST?)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "map(cut_monom)(p)"
                                                                                                                       "j")
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (REPLACE
                                                                                                                           -9
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "cut_monom"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (GRIND)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("3"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "map(cut_monom)(p)"
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (REPLACE
                                                                                                                         -10
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "cut_monom"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (LEMMA
                                                                                                         "max_length_is_max")
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "map(cut_monom)(p)"
                                                                                                           "j")
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -8
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "cut_monom"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (LEMMA
                                                                                                         "max_length_is_max")
                                                                                                        (("3"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "map(cut_monom)(p)"
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -9
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "cut_monom"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (TYPEPRED "j")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cutting_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting_append_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append_list| FORMULA-DECL NIL |list_lemmas| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|lft_cut_is_lft| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut_alt| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_is_alt| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|minlength_sorted| 0
  (|minlength_sorted-1| |nil| 3810977704
   ("" (SKEEP)
    (("" (EXPAND "mv_sort")
      (("" (TYPEPRED "p")
        (("" (EXPAND "minlength?" -2)
          (("" (SPLIT -2)
            (("1" (LEMMA "lft_all_null")
              (("1" (INST? -1)
                (("1" (ASSERT)
                  (("1" (SPLIT -1)
                    (("1" (LEMMA "bubblesort_works")
                      (("1" (INST? -1)
                        (("1" (FLATTEN)
                          (("1" (HIDE -1)
                            (("1" (LEMMA "permutations_preserve_contents")
                              (("1" (LEMMA "permutations_is_commutative")
                                (("1" (INST? -1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "minlength?" 1)
                                      (("1" (SPLIT 1)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (SPLIT 2)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (SPLIT 2)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (SKEEP)
                                                  (("2" (INST? -2)
                                                    (("1"
                                                      (INST -2
                                                       "lft(p)(max_length(p))")
                                                      (("1" (ASSERT)
                                                        (("1" (SKEEP)
                                                          (("1"
                                                            (EXPAND
                                                             "minlength?" -4)
                                                            (("1" (SPLIT -4)
                                                              (("1"
                                                                (EXPAND
                                                                 "bubblesort"
                                                                 3)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (INST -1
                                                                     "j")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -1)
                                                                      (("1"
                                                                        (HIDE
                                                                         1)
                                                                        (("1"
                                                                          (HIDE
                                                                           -5)
                                                                          (("1"
                                                                            (HIDE
                                                                             4)
                                                                            (("1"
                                                                              (HIDE
                                                                               3)
                                                                              (("1"
                                                                                (HIDE
                                                                                 1)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Unif?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (SKEEP)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -4)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "permutations_preserve_contents")
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "permutations_preserve_contents")
                                                                                              (("1"
                                                                                                (INST?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "lft(p)(max_length(p))")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (SKEEP)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -2
                                                                                                         "bubblesort(lft(p)(max_length(p)))"
                                                                                                         "lft(p)(max_length(p))"
                                                                                                         "j!1")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (SKEEP)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "Unif?"
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "Lft_length")
                                                                                                                  (("1"
                                                                                                                    (INST?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "length"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (LIFT-IF
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (SPLIT
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (FLATTEN)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (FLATTEN)
                                                                                                                            (("2"
                                                                                                                              (HIDE
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                (("2"
                                                                                                                                  (INST
                                                                                                                                   -3
                                                                                                                                   "j!2"
                                                                                                                                   "j!3")
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (LEMMA
                                                                                                           "leq_total_preorder")
                                                                                                          (("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (LEMMA
                                                                                                   "leq_total_preorder")
                                                                                                  (("2"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (SKEEP)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "permutations_preserve_contents")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "lft(p)(max_length(p))"
                                                                                           "bubblesort(lft(p)(max_length(p)))"
                                                                                           "j!1")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (SKEEP)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "j!2")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (LEMMA
                                                                                             "leq_total_preorder")
                                                                                            (("2"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "leq_total_preorder")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "leq_total_preorder")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP) (("2" (INST -1 "j") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (SPLIT -1)
                (("1" (FLATTEN)
                  (("1" (LEMMA "lft_minlength")
                    (("1" (INST? -1)
                      (("1" (ASSERT)
                        (("1" (SKEEP)
                          (("1" (SKEEP)
                            (("1" (SPLIT -1)
                              (("1" (EXPAND "minlength?" -1)
                                (("1" (LEMMA "Lft_length")
                                  (("1" (INST? -1)
                                    (("1" (EXPAND "length" -1)
                                      (("1" (LIFT-IF -1)
                                        (("1" (SPLIT -1)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (FLATTEN)
                                            (("2" (HIDE -1)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT -1)
                                                  (("1"
                                                    (LEMMA "max_length_is_max")
                                                    (("1" (INST -1 "p" "j")
                                                      (("1"
                                                        (EXPAND "length" -1)
                                                        (("1"
                                                          (LEMMA
                                                           "lft_length_nth")
                                                          (("1" (INST? -1)
                                                            (("1" (INST -3 "i")
                                                              (("1"
                                                                (INST -1 "i")
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (TYPEPRED "i")
                                                                (("2"
                                                                  (LEMMA
                                                                   "Lft_length")
                                                                  (("2"
                                                                    (INST? -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (SPLIT -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (HIDE 1)
                                                          (("1" (SKEEP)
                                                            (("1"
                                                              (LEMMA
                                                               "bubblesort_works")
                                                              (("1" (INST? -1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "permutations_preserve_contents")
                                                                      (("1"
                                                                        (INST?
                                                                         -1)
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "bubblesort(lft(p)(max_length(p)))")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "minlength?"
                                                                               5)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 5)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (SPLIT
                                                                                     2)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         2)
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (SPLIT
                                                                                           1)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Unif?")
                                                                                                                (("1"
                                                                                                                  (FLATTEN)
                                                                                                                  (("1"
                                                                                                                    (SKEEP)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (LEMMA
                                                                                                                         "permutations_preserve_contents")
                                                                                                                        (("1"
                                                                                                                          (LEMMA
                                                                                                                           "permutations_preserve_contents")
                                                                                                                          (("1"
                                                                                                                            (LEMMA
                                                                                                                             "permutations_is_commutative")
                                                                                                                            (("1"
                                                                                                                              (INST?
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                (("1"
                                                                                                                                  (INST
                                                                                                                                   -2
                                                                                                                                   "bubblesort(lft(p)(max_length(p)))"
                                                                                                                                   "lft(p)(max_length(p))"
                                                                                                                                   "i!1")
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       -3
                                                                                                                                       "bubblesort(lft(p)(max_length(p)))"
                                                                                                                                       "lft(p)(max_length(p))"
                                                                                                                                       "j!2")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("1"
                                                                                                                                          (SKEEP)
                                                                                                                                          (("1"
                                                                                                                                            (SKEEP)
                                                                                                                                            (("1"
                                                                                                                                              (INST
                                                                                                                                               -5
                                                                                                                                               "j!3"
                                                                                                                                               "j!4")
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (LEMMA
                                                                                                                                         "leq_total_preorder")
                                                                                                                                        (("2"
                                                                                                                                          (PROPAX)
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (LEMMA
                                                                                                                                     "leq_total_preorder")
                                                                                                                                    (("2"
                                                                                                                                      (PROPAX)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (LEMMA
                                                                                                                                 "leq_total_preorder")
                                                                                                                                (("2"
                                                                                                                                  (PROPAX)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (SKEEP)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 1
                                                                                                 "j!2")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "leq_total_preorder")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST 1 "j")
                                (("2" (ASSERT)
                                  (("2" (LEMMA "max_length_Unif")
                                    (("2" (INST? -1)
                                      (("2" (SKEEP)
                                        (("2" (EXPAND "Unif?" -1)
                                          (("2" (INST? -1) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|UnifInd| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_minlength| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_all_null| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|bubblesort_works| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| |sorting|)
    (|bubblesort| CONST-DECL "list[T]" |bubblesort| |sorting|)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|leq_total_preorder| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| |sorting|)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|mv_cut_lft_alpha_TCC1| 0
  (|mv_cut_lft_alpha_TCC2-1| |nil| 3813656973
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (TYPEPRED "n")
        (("" (LEMMA "Lft_length")
          (("" (INST?)
            (("" (ASSERT)
              (("" (LEMMA "max_length_cut")
                (("" (INST?)
                  (("" (ASSERT)
                    (("" (LEMMA "mv_cut_length")
                      (("" (INST -1 "p") (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL))
   NIL
   (|mv_cut_lft_alpha| SUBTYPE "standard_form_mult_poly.i"
    "below[length[monomial](lft(mv_cut(p))(n))]")))
 (|mv_cut_lft_alpha_TCC2| 0
  (|mv_cut_lft_alpha_TCC3-1| |nil| 3813656973
   ("" (SKEEP)
    (("" (TYPEPRED "n")
      (("" (LEMMA "max_length_is_max")
        (("" (INST -1 "mv_cut(p)" "i")
          (("1" (ASSERT)
            (("1" (LEMMA "mv_cut_alpha")
              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (TYPEPRED "i")
            (("2" (LEMMA "mv_cut_length")
              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("3" (LEMMA "mv_cut_length")
            (("3" (INST?) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mv_cut_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|mv_cut_lft_alpha| SUBTYPE
    "((number_fields.-)(standard_form_mult_poly.n, list_props[nat].length(standard_form_mult_poly.cutting(list_props[monomial].nth(standard_form_mult_poly.p, standard_form_mult_poly.i)`alpha))))"
    "nat")))
 (|mv_cut_lft_alpha| 0
  (|mv_cut_lft_alpha-1| |nil| 3813657231
   ("" (SKEEP)
    (("" (LEMMA "mv_cut_alpha")
      (("" (LEMMA " lft_nth_alpha")
        (("" (INST -1 "mv_cut(p)" "n" "i")
          (("1" (ASSERT)
            (("1" (REPLACE -1)
              (("1" (INST -2 "p" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (TYPEPRED "i")
            (("2" (LEMMA "mv_cut_length")
              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_cut_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lft_nth_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|leq_Os| 0
  (|leq_Os-1| |nil| 3813596241
   ("" (INDUCT "m")
    (("1" (SKEEP)
      (("1" (CASE "NOT n=0")
        (("1" (ASSERT) NIL NIL)
         ("2" (REPLACE -1)
          (("2" (EXPAND "leq")
            (("2" (FLATTEN)
              (("2" (ASSERT) (("2" (HIDE 1 3 4 5) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (LEMMA "length_appendn[nat]")
          (("2" (INST -1 "(: 0 :)" "_")
            (("2" (INST-CP -1 "n")
              (("2" (INST-CP -1 "j+2")
                (("2" (ASSERT)
                  (("2" (CASE "NOT n=1+j")
                    (("1" (ASSERT)
                      (("1" (INST-CP -1 "j+1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "leq" 2 1) (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (HIDE -3)
                        (("2" (EXPAND "leq" 1 1)
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (REPLACE -6)
                                (("2" (REPLACE -7)
                                  (("2" (EXPAND "^" 1)
                                    (("2" (EXPAND "append" 1)
                                      (("2" (EXPAND "append" 1)
                                        (("2" (CASE "n=0")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2"
                                            (INST -4 "n-1"
                                             "(# C := m1`C, alpha := ((: 0 :) ^ (n - 1)) #)"
                                             "(# C := m2`C, alpha := ((: 0 :) ^ j) #)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2 3)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|leq_0_all| 0
  (|leq_0_all-1| |nil| 3813924602
   ("" (SKEEP)
    (("" (CASE "sum(m1`alpha) < sum(m2`alpha)")
      (("1" (EXPAND "leq" 1 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("2" (CASE "NOT sum(m1`alpha) >= sum(m2`alpha)")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "sum_0")
          (("2" (INST -1 "n")
            (("2" (LEMMA "sum_0_con")
              (("2" (INST -1 "m2`alpha")
                (("2" (ASSERT)
                  (("2" (SPLIT -1)
                    (("1" (SKEEP)
                      (("1" (LEMMA "leq_Os")
                        (("1" (ASSERT)
                          (("1" (INST -1 "n" "n!1" "m1" "m2")
                            (("1" (ASSERT)
                              (("1" (LEMMA "length_appendn[nat]")
                                (("1" (INST-CP -1 "(: 0 :)" "n")
                                  (("1" (INST-CP -1 "(: 0 :)" "n!1")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "sum_nat")
                      (("2" (INST-CP -1 "m2`alpha") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|sum_0| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum_0_con| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum_nat| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|leq_Os| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|leq_lft_monom_TCC1| 0
  (|leq_lft_monom_TCC1-1| |nil| 3813914695 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL))
   NIL
   (|leq_lft_monom| SUBTYPE
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m1)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (|leq_lft_monom_TCC2| 0
  (|leq_lft_monom_TCC2-1| |nil| 3813914695 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL))
   NIL
   (|leq_lft_monom| SUBTYPE
    "standard_form_mult_poly.cut_monom(standard_form_mult_poly.m2)"
    "{m: standard_form_mult_poly.monomial | reals.>=(standard_form_mult_poly.n, list_props[nat].length(m`alpha))}")))
 (|leq_lft_monom| 0
  (|leq_lft_monom-1| |nil| 3813914802
   (""
    (CASE "FORALL (A:nat,m1, m2: monomial,
                     n: nat
                         | n >=
                            max(length(cut_monom(m1)`alpha),
                                length(cut_monom(m2)`alpha))):
               length(m1`alpha) = A IMPLIES ((leq(m1, m2) AND length(m1`alpha) = length(m2`alpha)) IMPLIES
                leq(lft_one(n)(cut_monom(m1)), lft_one(n)(cut_monom(m2))))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m1`alpha)" "m1" "m2" "n") (("1" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "A")
        (("1" (SKEEP)
          (("1" (REPLACE -1 -3 LR)
            (("1" (EXPAND "length" -)
              (("1" (LIFT-IF -)
                (("1" (SPLIT)
                  (("1" (SPLIT)
                    (("1" (EXPAND "cut_monom" 1)
                      (("1" (EXPAND "cutting " 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "lft_one" 1)
                            (("1" (EXPAND "append" 1)
                              (("1" (EXPAND "length" 1)
                                (("1" (LEMMA "leq_Os")
                                  (("1"
                                    (INST -1 "n" "n"
                                     "(# C := m1`C, alpha := (: 0 :) ^ n #)"
                                     " (# C := m2`C, alpha := (: 0 :) ^ n #)")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2"
              (CASE
                  "length(lft_one(n)(cut_monom(m1))`alpha) = length(lft_one(n)(cut_monom(m2))`alpha)")
              (("1" (EXPAND "leq" -4)
                (("1" (SPLIT -4)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                   ("3" (FLATTEN)
                    (("3" (ASSERT)
                      (("3" (EXPAND "leq" 1 1)
                        (("3" (FLATTEN)
                          (("3" (HIDE 3 4)
                            (("3"
                              (CASE "lft_one(n)(cut_monom(m1))`alpha = null")
                              (("1" (EXPAND "length" -4)
                                (("1" (ASSERT)
                                  (("1" (LIFT-IF -4)
                                    (("1" (SPLIT -4)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2"
                                (CASE "lft_one(n)(cut_monom(m2))`alpha = null")
                                (("1" (EXPAND "length" -4)
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (HIDE 3)
                                  (("2" (EXPAND "lft_one" 3)
                                    (("2" (EXPAND "cut_monom" 3)
                                      (("2" (LEMMA "sum_append")
                                        (("2"
                                          (INST-CP -1 "cutting(m1`alpha)"
                                           " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                          (("1" (REPLACE -2 3)
                                            (("1"
                                              (INST -1 "cutting(m2`alpha)"
                                               " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                              (("1" (REPLACE -1)
                                                (("1" (ASSERT)
                                                  (("1" (LEMMA "sum_0")
                                                    (("1"
                                                      (INST-CP -1
                                                       "(n-length(cutting(m1`alpha)))")
                                                      (("1"
                                                        (INST-CP -1
                                                         "(n-length(cutting(m2`alpha)))")
                                                        (("1" (REPLACE -2)
                                                          (("1" (REPLACE -3)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "cutting_sum")
                                                                (("1"
                                                                  (INST-CP -1
                                                                   "m1`alpha")
                                                                  (("1"
                                                                    (INST -1
                                                                     "m2`alpha")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (HIDE -)
                                                            (("2"
                                                              (TYPEPRED "n")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "cut_monom"
                                                                   -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE -)
                                                        (("2" (TYPEPRED "n")
                                                          (("2"
                                                            (EXPAND "cut_monom"
                                                                    -1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -)
                                                (("2" (TYPEPRED "n")
                                                  (("2" (EXPAND "cut_monom" -1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -)
                                            (("2" (TYPEPRED "n")
                                              (("2" (EXPAND "cut_monom" -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (FLATTEN)
                    (("4" (CASE "car[nat](m2`alpha)=0")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (LEMMA "cut_monom_null")
                        (("2" (INST -1 "m2")
                          (("2" (ASSERT)
                            (("2" (FLATTEN)
                              (("2" (CASE "cut_monom(m2)`alpha=null")
                                (("1" (ASSERT)
                                  (("1" (INST 1 "car[nat](m2`alpha)")
                                    (("1" (LEMMA "nth_member[nat]")
                                      (("1"
                                        (INST -1 "m2`alpha"
                                         "car[nat](m2`alpha)" "0")
                                        (("1" (EXPAND "nth" -1 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (HIDE -1)
                                    (("2" (CASE "n=0")
                                      (("1" (TYPEPRED "n")
                                        (("1" (REVEAL +)
                                          (("1" (EXPAND "leq" 4)
                                            (("1" (FLATTEN)
                                              (("1" (HIDE -7 -6 -5)
                                                (("1" (HIDE 5 6 7)
                                                  (("1" (HIDE 1)
                                                    (("1" (EXPAND "lft_one" 3)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (CASE
                                                              "cut_monom(m1)`alpha = null")
                                                          (("1"
                                                            (CASE
                                                                "cut_monom(m2)`alpha=null")
                                                            (("1" (PROPAX) NIL
                                                              NIL)
                                                             ("2" (REPLACE -1)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("2" (ASSERT)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (CASE
                                            "lft_one(n)(cut_monom(m1))`alpha = null")
                                        (("1" (EXPAND "lft_one" -1)
                                          (("1" (TYPEPRED "n")
                                            (("1"
                                              (CASE
                                                  "NOT cut_monom(m1)`alpha = null")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "append" -2)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (REPLACE -1)
                                                  (("2" (EXPAND "length" -2)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -10)
                                                        (("2" (LIFT-IF -10)
                                                          (("2" (SPLIT -10)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "lft_one" -1)
                                                                (("1"
                                                                  (REPLACE -3)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "append"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "^"
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "append"
                                                                             -1)
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (LIFT-IF
                                                                     -1)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -1)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "leq"
                                                                             6)
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   6)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     7)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       6)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "cutting_sum")
                                                                                          (("1"
                                                                                            (INST-CP
                                                                                             -1
                                                                                             "m1`alpha")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "m2`alpha")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "lft_one"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "sum_append")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "cut_monom"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (INST-CP
                                                                                                           -1
                                                                                                           "cutting(m1`alpha)"
                                                                                                           " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                                                                                          (("1"
                                                                                                            (INST-CP
                                                                                                             -1
                                                                                                             "cutting(m2`alpha)"
                                                                                                             " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (LEMMA
                                                                                                                     "sum_0")
                                                                                                                    (("1"
                                                                                                                      (INST-CP
                                                                                                                       -1
                                                                                                                       "(n - length(cutting(m1`alpha)))")
                                                                                                                      (("1"
                                                                                                                        (INST-CP
                                                                                                                         -1
                                                                                                                         "(n - length(cutting(m2`alpha)))")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (HIDE
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "n")
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "cut_monom")
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (TYPEPRED
                                                                                                                         "n")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "cut_monom")
                                                                                                                          (("2"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (TYPEPRED
                                                                                                               "n")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "cut_monom")
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (TYPEPRED
                                                                                                             "n")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "cut_monom")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "lft_one"
                                                                                         1)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -2)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "append"
                                                                                               1)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "^"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "append"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "cut_monom"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (LEMMA
                                                                                                           "cutting_nth")
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "m2`alpha"
                                                                                                             "0")
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "nth"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (EXPAND
                                                                                                               "cut_monom"
                                                                                                               6)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "length"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "leq" 5)
                                          (("2" (FLATTEN)
                                            (("2" (HIDE 5 6 8)
                                              (("2" (SPLIT 5)
                                                (("1" (LEMMA "cutting_sum")
                                                  (("1" (INST-CP -1 "m1`alpha")
                                                    (("1" (INST -1 "m2`alpha")
                                                      (("1" (REPLACE -1)
                                                        (("1"
                                                          (EXPAND "cut_monom"
                                                                  1)
                                                          (("1" (ASSERT)
                                                            (("1" (REPLACE -2)
                                                              (("1"
                                                                (EXPAND
                                                                 "lft_one" 1)
                                                                (("1"
                                                                  (LEMMA
                                                                   "sum_append")
                                                                  (("1"
                                                                    (INST-CP -1
                                                                     "cutting(m1`alpha)"
                                                                     " (: 0 :) ^ (n - length(cutting(m1`alpha)))")
                                                                    (("1"
                                                                      (INST-CP
                                                                       -1
                                                                       "cutting(m2`alpha)"
                                                                       " (: 0 :) ^ (n - length(cutting(m2`alpha)))")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -3)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "sum_0")
                                                                            (("1"
                                                                              (INST-CP
                                                                               -1
                                                                               "(n - length(cutting(m1`alpha)))")
                                                                              (("1"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "(n - length(cutting(m2`alpha)))")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (TYPEPRED
                                                                                   "n")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "cut_monom")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (TYPEPRED
                                                                                 "n")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "cut_monom")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "cut_monom")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (TYPEPRED
                                                                       "n")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "cut_monom")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL)
                                                 ("3" (ASSERT)
                                                  (("3" (EXPAND "length" -7)
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("4" (ASSERT)
                                                  (("4" (LEMMA "cutting_nth")
                                                    (("4"
                                                      (INST-CP -1 "m1`alpha"
                                                       "0")
                                                      (("1"
                                                        (INST-CP -1 "m2`alpha"
                                                         "0")
                                                        (("1"
                                                          (EXPAND "lft_one" 1)
                                                          (("1"
                                                            (EXPAND "cut_monom"
                                                                    1)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "nth"
                                                                        -2)
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          -3)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "append"
                                                                       1)
                                                                      (("1"
                                                                        (LIFT-IF
                                                                         1)
                                                                        (("1"
                                                                          (SPLIT
                                                                           1)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "cut_monom"
                                                                                 4)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -3
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "^"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "append"
                                                                                       1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -3)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "cut_monom"
                                                                                   5)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "length" 1 1)
                                                          (("2"
                                                            (EXPAND "cut_monom"
                                                                    5)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "length" 1)
                                                        (("2" (LIFT-IF 1)
                                                          (("2" (SPLIT 1)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "lft_one" 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "append" 2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "cut_monom")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "^"
                                                                           2)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "append"
                                                                             2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "cutting_nth")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "m2`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "nth"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("5" (FLATTEN)
                    (("5" (ASSERT)
                      (("5" (EXPAND "leq" 1)
                        (("5" (FLATTEN)
                          (("5" (HIDE 1 2 3)
                            (("5"
                              (CASE
                                  "NOT leq((# C := lft_one(n)(cut_monom(m1))`C,
                                 alpha := cdr(lft_one(n)(cut_monom(m1))`alpha) #),
                              (# C := lft_one(n)(cut_monom(m2))`C,
                                 alpha := cdr(lft_one(n)(cut_monom(m2))`alpha) #))")
                              (("1" (HIDE 2)
                                (("1"
                                  (INST -8
                                   "(# C := m1`C, alpha := cdr(m1`alpha) #)"
                                   " (# C := m2`C, alpha := cdr(m2`alpha) #)"
                                   "n-1")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" -9)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "cut_monom" -8)
                                              (("1" (EXPAND "lft_one" -8)
                                                (("1" (EXPAND "lft_one" 1)
                                                  (("1" (EXPAND "cut_monom" 1)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "cdr_append[nat]")
                                                        (("1"
                                                          (CASE
                                                              "NOT cutting(m1`alpha) = null")
                                                          (("1"
                                                            (CASE
                                                                "NOT cutting(m2`alpha) = null")
                                                            (("1"
                                                              (INST-CP -1
                                                               " (: 0 :) ^
                                                (n - length(cutting(m2`alpha)))"
                                                               "cutting(m2`alpha)")
                                                              (("1"
                                                                (INST-CP -1
                                                                 " (: 0 :) ^
                                                  (n - length(cutting(m1`alpha)))"
                                                                 "cutting(m1`alpha)")
                                                                (("1"
                                                                  (REPLACE -2
                                                                           3)
                                                                  (("1"
                                                                    (REPLACE -3
                                                                             3)
                                                                    (("1"
                                                                      (HIDE -1)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "cutting_cdr")
                                                                        (("1"
                                                                          (INST-CP
                                                                           -1
                                                                           "m1`alpha")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "m2`alpha")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -2
                                                                                 3
                                                                                 RL)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -2
                                                                                   3
                                                                                   LR)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -2
                                                                                     3
                                                                                     RL)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       3)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL)
                                                                 ("3" (ASSERT)
                                                                  (("3"
                                                                    (HIDE 4)
                                                                    (("3"
                                                                      (TYPEPRED
                                                                       "n")
                                                                      (("3"
                                                                        (ASSERT)
                                                                        (("3"
                                                                          (EXPAND
                                                                           "cut_monom"
                                                                           -1)
                                                                          (("3"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL)
                                                               ("3" (HIDE -)
                                                                (("3"
                                                                  (TYPEPRED
                                                                   "n")
                                                                  (("3"
                                                                    (EXPAND
                                                                     "cut_monom"
                                                                     -1)
                                                                    (("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (REPLACE -1 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" 2
                                                                   2)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "append" 2
                                                                     2)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (CASE
                                                                            "n=0")
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "n")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -2
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "max"
                                                                               -1)
                                                                              (("1"
                                                                                (LIFT-IF
                                                                                 -1)
                                                                                (("1"
                                                                                  (SPLIT
                                                                                   -1)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (LIFT-IF
                                                                                         -2)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -2)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (LIFT-IF
                                                                                           -1)
                                                                                          (("2"
                                                                                            (SPLIT
                                                                                             -1)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (LIFT-IF
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (SPLIT
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "cut_monom"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "cut_monom"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "^"
                                                                           3 2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "append"
                                                                               3
                                                                               2)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "append"
                                                                                 3
                                                                                 2)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "cutting(cdr(m2`alpha)) = null")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "append"
                                                                                         -11
                                                                                         2)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "append"
                                                                                             3
                                                                                             1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "cutting_cdr")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "m1`alpha")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "cutting(m2`alpha) = null")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "cutting_sum")
                                                                                          (("1"
                                                                                            (INST-CP
                                                                                             -1
                                                                                             "m1`alpha")
                                                                                            (("1"
                                                                                              (INST-CP
                                                                                               -1
                                                                                               "m2`alpha")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -4
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "sum"
                                                                                                       -7
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "null_cut_cdr")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "m2`alpha")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2" (REPLACE -1)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "append" 1
                                                                   1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "leq_0_all")
                                                                    (("2"
                                                                      (CASE
                                                                          "NOT n=0")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "^" 2
                                                                         1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "append"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "append"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "(# C := m1`C, alpha := cdr(more_list_props[nat].^((: 0 :), n)) #)"
                                                                                 "  (# C := m2`C,
             alpha
               := cdr[nat](append[nat](cutting(m2`alpha),
                             (: 0 :) ^ (n - length[nat](cutting(m2`alpha))))) #)"
                                                                                 "n-1")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "^"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "append"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       3)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "^"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "append"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "length_appendn[nat]")
                                                                                              (("2"
                                                                                                (INST?)
                                                                                                (("2"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "append"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (LIFT-IF
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (SPLIT
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "length"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "^"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "append"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "append"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "length_append[nat]")
                                                                                                                (("2"
                                                                                                                  (INST?)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (LEMMA
                                                                                                                         "length_appendn[nat]")
                                                                                                                        (("1"
                                                                                                                          (INST
                                                                                                                           -1
                                                                                                                           "(: 0 :)"
                                                                                                                           "(n - length(cutting(m2`alpha)))")
                                                                                                                          (("1"
                                                                                                                            (REPLACE
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "length"
                                                                                                                                 2
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (PROPAX)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (TYPEPRED
                                                                                                                             "n")
                                                                                                                            (("2"
                                                                                                                              (EXPAND
                                                                                                                               "cut_monom")
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "n")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "cut_monom")
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (EXPAND
                                                                                       "^"
                                                                                       1
                                                                                       1)
                                                                                      (("3"
                                                                                        (EXPAND
                                                                                         "append"
                                                                                         1
                                                                                         1)
                                                                                        (("3"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           1
                                                                                           1)
                                                                                          (("3"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (TYPEPRED
                                                                                   "n")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "cut_monom")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (LEMMA
                                                                                   "caretzero_every")
                                                                                  (("3"
                                                                                    (INST
                                                                                     -1
                                                                                     "n")
                                                                                    (("3"
                                                                                      (ASSERT)
                                                                                      (("3"
                                                                                        (EXPAND
                                                                                         "^"
                                                                                         1
                                                                                         1)
                                                                                        (("3"
                                                                                          (ASSERT)
                                                                                          (("3"
                                                                                            (EXPAND
                                                                                             "append"
                                                                                             1
                                                                                             1)
                                                                                            (("3"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         1)
                                                                        (("2"
                                                                          (REVEAL
                                                                           +)
                                                                          (("2"
                                                                            (HIDE
                                                                             1
                                                                             2
                                                                             4
                                                                             5
                                                                             6)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "lft_one_length")
                                                                              (("2"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "cut_monom(m1)"
                                                                                 "n")
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -1
                                                                                   "cut_monom(m2)"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -15)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (LIFT-IF
                                                                                           -2)
                                                                                          (("1"
                                                                                            (SPLIT
                                                                                             -2)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (TYPEPRED
                                                                                     " n")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (TYPEPRED
                                                                                   " n")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (TYPEPRED "n")
                                      (("2" (CASE "NOT n=0")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "cut_monom" 2)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "length" -1)
                                                (("1" (LIFT-IF -1)
                                                  (("1" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1" (LIFT-IF -2)
                                                          (("1" (SPLIT -2)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (CASE
                                                                      "m1`alpha=null")
                                                                  (("1"
                                                                    (CASE
                                                                        "m2`alpha=null")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (CASE
                                                                        "m2`alpha=null")
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "cut_monom"
                                                                       -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "cut_monom"
                                                                           -3)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "null_cut_cdr")
                                                                            (("2"
                                                                              (INST-CP
                                                                               -1
                                                                               "m1`alpha")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "m2`alpha")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     4)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max"
                                                                                       4)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "cut_monom"
                                                                     -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "cut_monom"
                                                                         -2)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "null_cut_cdr")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "m1`alpha")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 3
                                                                                 1)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "cutting_cdr")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "m2`alpha")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "cut_monom"
                                                                                         1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               4)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "max")
                                                                                                (("2"
                                                                                                  (LIFT-IF
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (SPLIT
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (FLATTEN)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (LIFT-IF -1)
                                                        (("2" (SPLIT -1)
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "cut_monom")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (HIDE 4)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "cutting_cdr")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "m1`alpha")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "null_cut_cdr")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "m2`alpha")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   3
                                                                                   2)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "max")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "cut_monom"
                                                                   -)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "cut_monom"
                                                                       +)
                                                                      (("2"
                                                                        (HIDE
                                                                         5)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "cutting_cdr")
                                                                          (("2"
                                                                            (INST-CP
                                                                             -1
                                                                             "m1`alpha")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "m2`alpha")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "max"
                                                                                   -3)
                                                                                  (("2"
                                                                                    (LIFT-IF
                                                                                     -3)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       -3)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "max"
                                                                                           4)
                                                                                          (("1"
                                                                                            (LIFT-IF
                                                                                             4)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               4)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (FLATTEN)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "max"
                                                                                             5)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 1)
                                          (("2" (EXPAND "cut_monom")
                                            (("2"
                                              (CASE "cutting(m1`alpha) = null")
                                              (("1"
                                                (CASE "cutting(m2`alpha)=null")
                                                (("1" (REPLACE -1)
                                                  (("1" (REPLACE -2)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "lft_one")
                                                        (("1"
                                                          (EXPAND "length" 1)
                                                          (("1"
                                                            (EXPAND "append" 1)
                                                            (("1" (REVEAL +)
                                                              (("1"
                                                                (HIDE 1 2 4 5 6
                                                                 7)
                                                                (("1"
                                                                  (EXPAND
                                                                   "lft_one" 1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "cut_monom"
                                                                     1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "append"
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "^")
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2)
                                                  (("2"
                                                    (HIDE -4 -5 -6 -7 -8 -9)
                                                    (("2" (HIDE -4 -5 -6)
                                                      (("2" (REPLACE -1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (HIDE -4 -5 -6 -7 -8 -9 -10)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (CASE "n=0")
                                  (("1" (TYPEPRED "n")
                                    (("1" (HIDE 1)
                                      (("1" (REVEAL +)
                                        (("1" (HIDE 1 3 4 5)
                                          (("1" (REPLACE -2)
                                            (("1"
                                              (CASE
                                                  "cut_monom(m1)`alpha = null")
                                              (("1"
                                                (CASE
                                                    "cut_monom(m2)`alpha = null")
                                                (("1" (REPLACE -1)
                                                  (("1" (REPLACE -2)
                                                    (("1" (EXPAND "lft_one" 1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (EXPAND "append" 1)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      1)
                                                              (("1"
                                                                (EXPAND "^" 1)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (HIDE 2)
                                                    (("2"
                                                      (HIDE -4 -5 -6 -7 -8 -9
                                                       -10 -11 -12 -13)
                                                      (("2"
                                                        (EXPAND "length" -2 2)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2"
                                                  (HIDE -4 -5 -6 -7 -8 -9 -10
                                                   -11 -12)
                                                  (("2" (HIDE -4)
                                                    (("2" (HIDE -3)
                                                      (("2"
                                                        (EXPAND "length" -1 1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (CASE
                                          "lft_one(n)(cut_monom(m1))`alpha = null")
                                      (("1" (EXPAND "cut_monom" -1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "lft_one" -1)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "append" -1)
                                                (("1" (LIFT-IF -1)
                                                  (("1" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "length" -2)
                                                          (("1" (EXPAND "^" -2)
                                                            (("1"
                                                              (EXPAND "append"
                                                                      -2)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (CASE
                                              "lft_one(n)(cut_monom(m2))`alpha = null")
                                          (("1" (EXPAND "lft_one" -1)
                                            (("1" (EXPAND "cut_monom" -1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "append" -1)
                                                  (("1" (LIFT-IF -1)
                                                    (("1" (SPLIT -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1" (EXPAND "^" -2)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "append" -2)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (SPLIT 4)
                                              (("1" (LEMMA "cutting_sum")
                                                (("1" (INST-CP -1 "m1`alpha")
                                                  (("1" (INST -1 "m2`alpha")
                                                    (("1" (REPLACE -1)
                                                      (("1" (REPLACE -2)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "lft_one"
                                                                    1)
                                                            (("1"
                                                              (LEMMA
                                                               "sum_append")
                                                              (("1"
                                                                (INST-CP -1
                                                                 "cut_monom(m1)`alpha"
                                                                 "(: 0 :) ^ (n - length(cut_monom(m1)`alpha))")
                                                                (("1"
                                                                  (INST-CP -1
                                                                   "cut_monom(m2)`alpha"
                                                                   "(: 0 :) ^ (n - length(cut_monom(m2)`alpha))")
                                                                  (("1"
                                                                    (REPLACE -2
                                                                             1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -3)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "sum_0")
                                                                          (("1"
                                                                            (INST-CP
                                                                             -1
                                                                             "(n - length(cut_monom(m1)`alpha))")
                                                                            (("1"
                                                                              (INST-CP
                                                                               -1
                                                                               "(n - length(cut_monom(m2)`alpha))")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -3)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "cut_monom")
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   2)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "cut_monom")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "n")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (TYPEPRED
                                                                               "n")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (TYPEPRED
                                                                     "n")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TYPEPRED
                                                                   "n")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "lft_one" 1)
                                                (("2" (EXPAND "append" 1)
                                                  (("2" (LIFT-IF 1)
                                                    (("2" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1" (LIFT-IF 1)
                                                          (("1" (SPLIT 1)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND "^" 1)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND "^" 2
                                                                          1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "append" 2
                                                                     1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "cut_monom"
                                                                         -1)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "cut_monom_null")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "m1")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "cut_monom"
                                                                                 2)
                                                                                (("2"
                                                                                  (INST
                                                                                   1
                                                                                   "car(cut_monom(m2)`alpha)")
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "nth_member[nat]")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       " m1`alpha"
                                                                                       "car(cut_monom(m2)`alpha)"
                                                                                       "0")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "nth"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "cutting_nth")
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "m2`alpha"
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "cut_monom"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "nth"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2" (LIFT-IF 2)
                                                            (("2" (SPLIT 2)
                                                              (("1" (FLATTEN)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "cutting_nth")
                                                                    (("1"
                                                                      (INST -1
                                                                       "m1`alpha"
                                                                       "0")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "cut_monom"
                                                                         1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "nth"
                                                                           -1)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "^"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (LIFT-IF
                                                                                 1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (TYPEPRED
                                                                                           "n")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "cut_monom"
                                                                                             -)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (TYPEPRED
                                                                                           "n")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "cut_monom"
                                                                                             -)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "append"
                                                                                                   2
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "cut_monom_null")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "m2")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           1
                                                                                                           "car(m2`alpha)")
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "nth_member[nat]")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "m2`alpha"
                                                                                                               "car(m2`alpha)"
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "nth"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         1 1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (LIFT-IF
                                                                             1)
                                                                            (("2"
                                                                              (SPLIT
                                                                               1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "cut_monom")
                                                                                  (("1"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "cut_monom")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (HIDE
                                                                         -1)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "cutting_nth")
                                                                          (("2"
                                                                            (INST-CP
                                                                             -1
                                                                             "m1`alpha"
                                                                             "0")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "m2`alpha"
                                                                               "0")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "nth"
                                                                                 -1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (REVEAL +)
                                  (("3" (HIDE 1 3 4 5)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "length" -7)
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (HIDE 2)
                                (("4" (REVEAL +)
                                  (("4" (HIDE 1 3 4 5)
                                    (("4" (ASSERT)
                                      (("4" (EXPAND "length" -7)
                                        (("4" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (LEMMA "lft_one_length")
                  (("2" (INST-CP -1 "cut_monom(m1)" "n")
                    (("1" (INST-CP -1 "cut_monom(m2)" "n")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (SKEEP) (("3" (TYPEPRED "n") (("3" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (SKEEP) (("4" (TYPEPRED "n") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (TYPEPRED "n") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP) (("4" (TYPEPRED "n") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn(0)" |standard_form_mult_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (^ DEF-DECL "list[T]" |more_list_props| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|leq_Os| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|leq_0_all| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_one_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|caretzero_every| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null_cut_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum| DEF-DECL "real" |standard_form_mult_poly| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cut_monom_null| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cutting_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}"
     |real_defs| NIL)
    (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}"
     |real_defs| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|sum_append| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|sum_0| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cutting_sum| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|m1| SKOLEM-CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|m2| SKOLEM-CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|n| SKOLEM-CONST-DECL
     "{n: nat | n >= max(length(cut_monom(m1)`alpha), length(cut_monom(m2)`alpha))}"
     |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|leq_lft_mv_TCC1| 0
  (|leq_lft_mv_TCC1-1| |nil| 3813657726
   ("" (SKEEP)
    (("" (TYPEPRED "j")
      (("" (LEMMA "Lft_length")
        (("" (LEMMA "mv_cut_length")
          (("" (INST -1 "p")
            (("" (INST -2 "mv_cut(p)" "n") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|leq_lft_mv| SUBTYPE "standard_form_mult_poly.j"
    "below[length[monomial](lft(mv_cut(p))(n))]")))
 (|leq_lft_mv| 0
  (|induction_proof| "induction" 3813882429
   ("" (SKEEP)
    (("" (LEMMA "leq_lft_monom")
      (("" (INST -1 "nth(p,i)" "nth(p,j)" "n")
        (("1" (ASSERT)
          (("1" (EXPAND "Unif?" -3)
            (("1" (SPLIT -3)
              (("1" (TYPEPRED "i")
                (("1" (HIDE -3 -4 1)
                  (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (INST -1 "i" "j")
                (("2" (ASSERT)
                  (("2" (LEMMA "mv_cut_alpha")
                    (("2" (LEMMA "lft_nth_alpha")
                      (("2" (INST-CP -2 "p" "i")
                        (("2" (INST -2 "p" "j")
                          (("2" (INST-CP -1 "mv_cut(p)" "n" "i")
                            (("2" (INST-CP -1 "mv_cut(p)" "n" "j")
                              (("2" (HIDE -1)
                                (("2"
                                  (CASE
                                      "lft_one(n)(cut_monom(nth(p, i))) = nth(lft(mv_cut(p))(n), i)")
                                  (("1"
                                    (CASE
                                        "lft_one(n)(cut_monom(nth(p, j))) = nth(lft(mv_cut(p))(n), j)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 2)
                                      (("2" (DECOMPOSE-EQUALITY 1)
                                        (("1" (REPLACE -2 1)
                                          (("1" (EXPAND "lft_one" 1)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "cut_monom" 1)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "cut_monom" 1)
                                          (("2" (LEMMA "lft_nth_C")
                                            (("2" (INST?)
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -1 1 RL)
                                                  (("2" (EXPAND "lft_one" 1)
                                                    (("2" (ASSERT)
                                                      (("2" (LEMMA "mv_cut_C")
                                                        (("2" (INST?) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (HIDE 2)
                                      (("2" (EXPAND "lft_one" 1)
                                        (("2" (EXPAND "cut_monom" 1)
                                          (("2" (ASSERT)
                                            (("2" (DECOMPOSE-EQUALITY 1)
                                              (("1" (LEMMA "lft_nth_C")
                                                (("1" (LEMMA "mv_cut_C")
                                                  (("1" (INST?)
                                                    (("1" (INST?)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "n")
                                                (("2"
                                                  (LEMMA "max_length_is_max")
                                                  (("2"
                                                    (INST -1 "mv_cut(p)" "i")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (LEMMA "mv_cut_length")
                                                      (("2" (INST -1 "p")
                                                        (("2" (ASSERT)
                                                          (("2" (TYPEPRED "i")
                                                            (("2"
                                                              (HIDE -4 -5 -6 -7
                                                               -8 -9 -10)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (TYPEPRED "n")
            (("2" (LEMMA "max_length_is_max")
              (("2" (INST -1 "mv_cut(p)" "_")
                (("1" (INST-CP -1 "i")
                  (("1" (INST -1 "j")
                    (("1" (ASSERT)
                      (("1" (LEMMA "mv_cut_alpha")
                        (("1" (INST-CP -1 "p" "j")
                          (("1" (INST -1 "p" "i")
                            (("1" (ASSERT)
                              (("1" (EXPAND "cut_monom" 1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1)
                                    (("1" (REPLACE -2)
                                      (("1" (EXPAND "max" 1)
                                        (("1" (LIFT-IF 1)
                                          (("1" (SPLIT 1)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "j")
                      (("2" (LEMMA "mv_cut_length")
                        (("2" (INST -1 "p") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "i")
                    (("2" (LEMMA "mv_cut_length")
                      (("2" (INST -1 "p") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "mv_cut_length")
                  (("2" (INST -1 "p")
                    (("2" (ASSERT)
                      (("2" (TYPEPRED "i")
                        (("2" (EXPAND "length" -1)
                          (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq_lft_monom| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lft_nth_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|lft_one| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_cut_C| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_nth_C| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cutting| DEF-DECL "list[nat]" |standard_form_mult_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|max_length_is_max| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_cut_alpha| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cut_monom| CONST-DECL "monomial" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL))
   SHOSTAK)
  (|leq_lft_mv-1| |nil| 3813657870
   ("" (SKEEP)
    (("" (LEMMA "mv_cut_lft_alpha")
      (("" (INST -1 "p" "_" "n")
        (("" (INST-CP -1 "i")
          (("" (INST -1 "j")
            (("" (ASSERT)
              (("" (EXPAND "leq" -3)
                ((""
                  (CASE
                      "length(nth(lft(mv_cut(p))(n), j)`alpha ) = length(nth(lft(mv_cut(p))(n), i)`alpha)")
                  (("1" (SPLIT -4)
                    (("1" (ASSERT)
                      (("1" (EXPAND "Unif?" -5)
                        (("1" (SPLIT -5)
                          (("1" (TYPEPRED "i" "j")
                            (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                           ("2" (INST -1 "i" "j") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (EXPAND "cutting" -)
                          (("2" (EXPAND "append" -)
                            (("2" (ASSERT)
                              (("2" (REPLACE -4)
                                (("2" (REPLACE -5)
                                  (("2" (LEMMA "leq_Os")
                                    (("2"
                                      (INST -1 "n" "n"
                                       "nth(lft(mv_cut(p))(n), i)"
                                       "nth(lft(mv_cut(p))(n), j)")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (FLATTEN)
                      (("3" (EXPAND "leq" 1)
                        (("3" (FLATTEN)
                          (("3" (HIDE 5)
                            (("3" (HIDE 4)
                              (("3" (ASSERT)
                                (("3" (REPLACE -4)
                                  (("3" (REPLACE -5)
                                    (("3" (LEMMA "sum_append_0")
                                      (("3"
                                        (INST-CP -1 "cutting(nth(p, j)`alpha)"
                                         "n - length(cutting(nth(p, j)`alpha))")
                                        (("1"
                                          (INST-CP -1
                                           "cutting(nth(p, i)`alpha)"
                                           "n - length(cutting(nth(p, i)`alpha))")
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "sum_append")
                                              (("1" (LEMMA "cutting_alt")
                                                (("1" (HIDE 1 2)
                                                  (("1" (REPLACE -4)
                                                    (("1" (REPLACE -5)
                                                      (("1" (HIDE -4 -5)
                                                        (("1"
                                                          (INST-CP -1
                                                           "nth(p,i)`alpha")
                                                          (("1"
                                                            (INST -1
                                                             "nth(p,j)`alpha")
                                                            (("1"
                                                              (REPLACE -1 -6)
                                                              (("1"
                                                                (REPLACE -2 -6)
                                                                (("1"
                                                                  (HIDE -1 -2)
                                                                  (("1"
                                                                    (INST-CP -2
                                                                     "cutting(nth(p, i)`alpha)"
                                                                     "(length(nth(p, i)`alpha) -
                                           length(cutting(nth(p, i)`alpha)))")
                                                                    (("1"
                                                                      (INST-CP
                                                                       -2
                                                                       "cutting(nth(p, j)`alpha)"
                                                                       "(length(nth(p, j)`alpha) -
                                               length(cutting(nth(p, j)`alpha)))")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "cutting_length")
                                                                          (("2"
                                                                            (INST?)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (LEMMA
                                                                       "cutting_length")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (TYPEPRED "n")
                                            (("2" (LEMMA "max_length_is_max")
                                              (("2" (INST?)
                                                (("1" (LEMMA "cutting_length")
                                                  (("1" (INST?)
                                                    (("1" (ASSERT)
                                                      (("1" (TYPEPRED "i" "j")
                                                        (("1"
                                                          (HIDE -3 -4 -5 -6)
                                                          (("1" (HIDE 2 3 4 5)
                                                            (("1"
                                                              (HIDE -3 -4 -5)
                                                              (("1"
                                                                (TYPEPRED "n")
                                                                (("1"
                                                                  (LEMMA
                                                                   "max_length_is_max")
                                                                  (("1"
                                                                    (INST -1
                                                                     "mv_cut(p)"
                                                                     "i")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "mv_cut_alpha")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "p"
                                                                           "i")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (LEMMA
                                                                       "mv_cut_length")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (CASE
                                                                          "mv_cut(p)=null")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "mv_cut_length")
                                                                          (("1"
                                                                            (INST?)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -2)
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (TYPEPRED "i")
                                                    (("2"
                                                      (HIDE -2 -3 -4 -5 -6 -7
                                                       -8 -9)
                                                      (("2" (HIDE 2 3 4 5)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2 3 4)
                                          (("2" (HIDE -)
                                            (("2" (TYPEPRED "n")
                                              (("2" (LEMMA "cutting_length")
                                                (("2"
                                                  (LEMMA "max_length_is_max")
                                                  (("2"
                                                    (INST -1 "mv_cut(p)" "j")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA "mv_cut_alpha")
                                                        (("1" (INST?)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "j")
                                                      (("2"
                                                        (LEMMA "mv_cut_length")
                                                        (("2" (INST?)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (CASE "mv_cut(p)=null")
                                                      (("1"
                                                        (LEMMA "mv_cut_length")
                                                        (("1" (INST?)
                                                          (("1" (ASSERT)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (TYPEPRED "n")
                      (("4" (EXPAND "leq" 1 1)
                        (("4" (FLATTEN)
                          (("4" (HIDE 1 2 3 5)
                            (("4" (ASSERT)
                              (("4" (ASSERT)
                                (("4" (SPLIT 1)
                                  (("1" (LEMMA "sum_append_0")
                                    (("1" (REPLACE -9 1)
                                      (("1" (REPLACE -10 1)
                                        (("1" (HIDE -9 -10)
                                          (("1"
                                            (INST-CP -1
                                             "cutting(nth(p, j)`alpha)"
                                             "n - length(cutting(nth(p, j)`alpha))")
                                            (("1"
                                              (INST-CP -1
                                               "cutting(nth(p, i)`alpha)"
                                               "n - length(cutting(nth(p, i)`alpha))")
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "sum_append")
                                                  (("1" (LEMMA "cutting_alt")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA "sum_append")
                                                        (("1"
                                                          (LEMMA "cutting_alt")
                                                          (("1" (REPLACE -4)
                                                            (("1" (REPLACE -5)
                                                              (("1"
                                                                (REPLACE -6)
                                                                (("1"
                                                                  (HIDE -5 -6)
                                                                  (("1"
                                                                    (INST-CP -1
                                                                     "nth(p,i)`alpha")
                                                                    (("1"
                                                                      (INST -1
                                                                       "nth(p,j)`alpha")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 -8)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -2
                                                                           -8)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST-CP
                                                                                 -3
                                                                                 "cutting(nth(p, i)`alpha)"
                                                                                 "(length(nth(p, i)`alpha) -
                                           length(cutting(nth(p, i)`alpha)))")
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -3
                                                                                   "cutting(nth(p, j)`alpha)"
                                                                                   "(length(nth(p, j)`alpha) -
                                               length(cutting(nth(p, j)`alpha)))")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "cutting_length")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (LEMMA
                                                                                   "cutting_length")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "n")
                                                (("2"
                                                  (LEMMA "max_length_is_max")
                                                  (("2" (INST?)
                                                    (("1"
                                                      (LEMMA "cutting_length")
                                                      (("1" (INST?)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (TYPEPRED "i" "j")
                                                            (("1"
                                                              (HIDE -3 -4 -5
                                                               -6)
                                                              (("1"
                                                                (HIDE 2 3 4 5)
                                                                (("1"
                                                                  (LEMMA
                                                                   "max_length_is_max")
                                                                  (("1"
                                                                    (INST -1
                                                                     "mv_cut(p)"
                                                                     "i")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "mv_cut_alpha")
                                                                      (("1"
                                                                        (INST?)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (LEMMA
                                                                       "mv_cut_length")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (LEMMA
                                                                       "mv_cut_length")
                                                                      (("3"
                                                                        (INST
                                                                         -1
                                                                         "p")
                                                                        (("3"
                                                                          (HIDE
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11)
                                                                          (("3"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -)
                                                      (("2" (HIDE 2 3)
                                                        (("2" (TYPEPRED "i")
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (LEMMA "mv_cut_length")
                                                (("2" (LEMMA "mv_cut_alpha")
                                                  (("2" (INST -1 "p" "j")
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "max_length_is_max")
                                                        (("2"
                                                          (INST -1 "mv_cut(p)"
                                                           "j")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE -)
                                                            (("2"
                                                              (LEMMA
                                                               "mv_cut_length")
                                                              (("2" (INST?)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "i")
                                                                    (("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "lft_length_nth")
                                    (("2" (INST -1 "mv_cut(p)" "n" "i")
                                      (("1" (ASSERT)
                                        (("1" (REVEAL +)
                                          (("1" (HIDE 3 4 1)
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "lft_length_nth")
                                                (("1"
                                                  (INST -1 "mv_cut(p)" "n" "j")
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (TYPEPRED "j")
                                                      (("2"
                                                        (LEMMA "mv_cut_length")
                                                        (("2" (INST?)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (HIDE -)
                                                    (("3"
                                                      (LEMMA "mv_cut_length")
                                                      (("3" (INST?)
                                                        (("3" (TYPEPRED "i")
                                                          (("3" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -)
                                        (("2" (TYPEPRED "i")
                                          (("2" (LEMMA "mv_cut_length")
                                            (("2" (INST -1 "p")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE -)
                                        (("3" (LEMMA "mv_cut_length")
                                          (("3" (INST -1 "p")
                                            (("3" (TYPEPRED "i")
                                              (("3" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REVEAL +)
                                    (("3" (HIDE 1 3 4)
                                      (("3" (ASSERT)
                                        (("3" (LEMMA "lft_length_nth")
                                          (("3"
                                            (INST-CP -1 "mv_cut(p)" "n" "i")
                                            (("1"
                                              (INST-CP -1 "mv_cut(p)" "n" "j")
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (LEMMA "mv_cut_length")
                                                (("2" (INST -1 "p")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (HIDE -)
                                                (("3" (LEMMA "mv_cut_length")
                                                  (("3" (INST -1 "p")
                                                    (("3" (TYPEPRED "i")
                                                      (("3" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE -)
                                              (("2" (LEMMA "mv_cut_length")
                                                (("2" (INST -1 "p")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE -)
                                              (("3" (LEMMA "mv_cut_length")
                                                (("3" (INST -1 "p")
                                                  (("3" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("4" (REPLACE -8)
                                    (("4" (REPLACE -9)
                                      (("4" (HIDE -8 -9)
                                        (("4" (EXPAND "append" 1 1)
                                          (("4" (LIFT-IF 1)
                                            (("4" (SPLIT 1)
                                              (("1" (FLATTEN)
                                                (("1" (EXPAND "append" 1 1)
                                                  (("1" (LIFT-IF 1)
                                                    (("1" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1" (EXPAND "^" 1)
                                                          (("1" (ASSERT)
                                                            (("1" (LIFT-IF 1)
                                                              (("1" (SPLIT 1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE 1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "mv_cut_length")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (REVEAL
                                                                               +)
                                                                              (("1"
                                                                                (HIDE
                                                                                 2
                                                                                 4
                                                                                 5)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "lft_length_nth")
                                                                                      (("1"
                                                                                        (INST-CP
                                                                                         -1
                                                                                         "mv_cut(p)"
                                                                                         "n"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -1
                                                                                           "mv_cut(p)"
                                                                                           "n"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -6)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -14
                                                                                                 -15
                                                                                                 -16)
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (LEMMA
                                                                                             "mv_cut_length")
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "i")
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -7
                                                                                                 -8
                                                                                                 -9
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -14
                                                                                                 -15)
                                                                                                (("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           8
                                                                                           -9
                                                                                           -10
                                                                                           -11)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -5)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "i")
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (LIFT-IF 2)
                                                                    (("2"
                                                                      (SPLIT 2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         +)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "append"
                                                                           2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               +)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "cut_monom_null")
                                                                                (("2"
                                                                                  (INST-CP
                                                                                   -1
                                                                                   "nth(p,j)")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "nth(p,i)")
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -2
                                                                                         -4)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "cut_monom"
                                                                                           -)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (INST
                                                                                               2
                                                                                               "car[nat](nth(p, j)`alpha)")
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "nth_member[nat]")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "nth(p,j)`alpha"
                                                                                                   "car[nat](nth(p,j)`alpha)"
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (CASE
                                                                                                      "NOT car[nat](nth[monomial](p, j)`alpha) = 0")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (TYPEPRED
                                                                                                       "car[nat](nth[monomial](p, j)`alpha)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (REPLACE
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (TYPEPRED
                                                                                                         "car[nat](nth(p, i)`alpha)")
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (CASE
                                                                                                                " car[nat](nth(p, i)`alpha) =  car[real](nth(p, i)`alpha)")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (PROPAX)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "^" 2 1)
                                                            (("2" (LIFT-IF 2)
                                                              (("2" (SPLIT 2)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "lft_length_nth")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "mv_cut(p)"
                                                                         "n"
                                                                         "j")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "max_length_is_max")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "mv_cut(p)"
                                                                             "j")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "mv_cut_alpha")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "p"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -4
                                                                                         -6)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (LEMMA
                                                                               "mv_cut_length")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "p")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("3"
                                                                              (HIDE
                                                                               -)
                                                                              (("3"
                                                                                (LEMMA
                                                                                 "mv_cut_length")
                                                                                (("3"
                                                                                  (INST
                                                                                   -1
                                                                                   "p")
                                                                                  (("3"
                                                                                    (TYPEPRED
                                                                                     "i")
                                                                                    (("3"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           -)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "mv_cut_length")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "p")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (HIDE
                                                                           -)
                                                                          (("3"
                                                                            (LEMMA
                                                                             "mv_cut_length")
                                                                            (("3"
                                                                              (INST
                                                                               -1
                                                                               "p")
                                                                              (("3"
                                                                                (TYPEPRED
                                                                                 "j")
                                                                                (("3"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       1 1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "append"
                                                                         2 1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (CASE
                                                                                "car(cutting(nth(p, j)`alpha))=0")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "cutting_nth")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "nth(p,j)`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "nth"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "nth"
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -2
                                                                                           -9)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "car(nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (TYPEPRED
                                                                                                     "car[nat](nth(p, i)`alpha)")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (CASE
                                                                                    "car[nat](cutting(nth(p, j)`alpha)) = car[real](cutting(nth(p, j)`alpha))")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "append" 2 1)
                                                    (("2" (LIFT-IF 2)
                                                      (("2" (SPLIT 2)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (CASE
                                                                " car(nth(p, j)`alpha) = 0")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "car[nat](nth(p, i)`alpha)")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (CASE
                                                                        "car[real](nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (LEMMA
                                                               "cut_monom_null")
                                                              (("2"
                                                                (INST -1
                                                                 "nth(p,j)")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (HIDE -2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "cut_monom"
                                                                         -1 1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (INST
                                                                             1
                                                                             "car(nth(p, j)`alpha)")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "nth_member[nat]")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "nth(p,j)`alpha"
                                                                                 "car(nth(p,j)`alpha)"
                                                                                 "0")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "nth"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (CASE
                                                                                      "car[real](nth[monomial](p, j)`alpha) = car[nat](nth[monomial](p, j)`alpha)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (TYPEPRED
                                                                                           "car[nat](nth[monomial](p, j)`alpha)")
                                                                                          (("1"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE
                                                                                  "car[real](nth[monomial](p, j)`alpha) = car[nat](nth[monomial](p, j)`alpha)")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (TYPEPRED
                                                                                     "car[nat](nth[monomial](p, j)`alpha)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (CASE
                                                                  "car(nth(p, j)`alpha) = car[nat](nth(p, j)`alpha)")
                                                              (("1"
                                                                (TYPEPRED
                                                                 "car[nat](nth(p, j)`alpha)")
                                                                (("1"
                                                                  (CASE
                                                                      "car[nat](nth(p, j)`alpha) = 0 ")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (CASE
                                                                            "car(nth(p, i)`alpha) = car[nat](nth(p, i)`alpha)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "car[nat](nth(p, i)`alpha)")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "cut_monom_null")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "nth(p,j)")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (HIDE
                                                                             -2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "cutting_nth")
                                                                              (("2"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "nth(p,i)`alpha"
                                                                                 "0")
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -1
                                                                                   "nth(p,j)`alpha"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "nth"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "nth"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "nth"
                                                                                           -3
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             -3
                                                                                             2)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -2
                                                                                                 -12
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -3
                                                                                                   -12
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("5" (EXPAND "leq" 1 1)
                      (("5" (FLATTEN)
                        (("5" (HIDE 1 2 3 4) (("5" (POSTPONE) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -)
                    (("2" (LEMMA "lft_length_nth")
                      (("2" (INST -1 "mv_cut(p)" "n" "_")
                        (("1" (INST-CP -1 "j")
                          (("1" (INST -1 "i")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (LEMMA "mv_cut_length")
                              (("2" (INST -1 "p") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "j")
                            (("2" (LEMMA "mv_cut_length")
                              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "mv_cut_length")
                          (("2" (INST -1 "p")
                            (("2" (TYPEPRED "i")
                              (("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|sorted_mv_lift| 0
  (|sorted_mv_lift-1| |nil| 3813653524
   ("" (SKEEP)
    (("" (LEMMA "leq_lft_mv")
      (("" (EXPAND "is_sorted?")
        (("" (SKEEP)
          (("" (INST -2 "k")
            (("1" (INST?)
              (("1" (ASSERT)
                (("1" (LEMMA "Lft_length")
                  (("1" (INST -1 "mv_cut(p)" "n")
                    (("1" (LEMMA "mv_cut_length")
                      (("1" (INST -1 "p") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "n")
                (("2" (LEMMA "max_length_cut")
                  (("2" (INST -1 "p")
                    (("2" (ASSERT)
                      (("2" (LEMMA "Lft_length")
                        (("2" (INST -1 "mv_cut(p)" "n")
                          (("2" (LEMMA "mv_cut_length")
                            (("2" (INST -1 "p") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (LEMMA "mv_cut_length")
                (("3" (LEMMA "Lft_length")
                  (("3" (INST -1 "mv_cut(p)" "n")
                    (("3" (INST -2 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "mv_cut_length")
              (("2" (LEMMA "Lft_length")
                (("2" (INST -1 "mv_cut(p)" "n")
                  (("2" (INST -2 "p") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|leq_lft_mv| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|max_length_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|))
   SHOSTAK))
 (|f_count_le4| 0
  (|f_count_le4-1| |nil| 3813575884
   ("" (SKEEP)
    (("" (EXPAND "false_counter" 1 1)
      (("" (LIFT-IF 1)
        (("" (SPLIT 1)
          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (SPLIT 2)
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|f_count_mv_sort| 0
  (|f_count_mv_sort-1| |nil| 3813652365
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF 3)
          (("" (ASSERT)
            (("" (EXPAND "mv_sort" 3)
              (("" (LIFT-IF 3)
                (("" (EXPAND "mv_standard_form?" 3 1)
                  (("" (EXPAND "mv_is_sorted?")
                    (("" (SPLIT 3)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (LEMMA "bubblesort_is_sorted")
                          (("2" (INST? -1)
                            (("2" (ASSERT)
                              (("2" (SPLIT 2)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (SPLIT 2)
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "sort_of_unif")
                                          (("1" (INST?)
                                            (("1" (EXPAND "mv_sort")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bubblesort_is_sorted| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|sort_of_unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|f_count_simplify| 0
  (|f_count_simplify-1| |nil| 3813652315
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF 3)
          (("" (ASSERT)
            (("" (LEMMA "simplified")
              (("" (INST? -1)
                (("1" (EXPAND "simplify" 3)
                  (("1" (ASSERT)
                    (("1" (LEMMA "sorted_simp_is_sorted")
                      (("1" (EXPAND "mv_is_sorted?")
                        (("1" (INST? -1)
                          (("1" (ASSERT)
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (SPLIT 3)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LEMMA "simplify_Unif")
                                      (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "mv_is_sorted?") (("2" (FLATTEN) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|simplified| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|sorted_simp_is_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|f_count_all_nz| 0
  (|f_count_all_nz-1| |nil| 3813652275
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF)
          (("" (ASSERT)
            (("" (LEMMA "allnonzero_sorted")
              (("" (INST? -1)
                (("" (ASSERT)
                  (("" (LEMMA "allnonzero_simp")
                    (("" (INST? -1)
                      (("" (ASSERT)
                        (("" (LEMMA "all_nonzero")
                          (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|allnonzero_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|all_nonzero| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero_simp| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|mv_standard_form_TCC1| 0
  (|mv_standard_form_TCC1-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF 3)
          (("" (ASSERT)
            (("" (EXPAND "mv_sort" 3)
              (("" (LIFT-IF 3)
                (("" (EXPAND "mv_standard_form?" 3 1)
                  (("" (EXPAND "mv_is_sorted?")
                    (("" (SPLIT 3)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (LEMMA "bubblesort_is_sorted")
                          (("2" (INST? -1)
                            (("2" (ASSERT)
                              (("2" (SPLIT 2)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (SPLIT 2)
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "sort_of_unif")
                                          (("1" (INST?)
                                            (("1" (EXPAND "mv_sort")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bubblesort_is_sorted| FORMULA-DECL NIL |bubblesort| |sorting|)
    (|sort_of_unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|mv_standard_form| TERMINATION
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.mv_sort(standard_form_mult_poly.p))"
    "NIL")))
 (|mv_standard_form_TCC2| 0
  (|mv_standard_form_TCC2-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF 3)
          (("" (ASSERT)
            (("" (LEMMA "simplified")
              (("" (INST? -1)
                (("1" (EXPAND "simplify" 3)
                  (("1" (ASSERT)
                    (("1" (LEMMA "sorted_simp_is_sorted")
                      (("1" (EXPAND "mv_is_sorted?")
                        (("1" (INST? -1)
                          (("1" (ASSERT)
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (SPLIT 3)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LEMMA "simplify_Unif")
                                      (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "mv_is_sorted?") (("2" (FLATTEN) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|simplified| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|sorted_simp_is_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|simplify_Unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   NIL
   (|mv_standard_form| TERMINATION
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.simplify(standard_form_mult_poly.p))"
    "NIL")))
 (|mv_standard_form_TCC3| 0
  (|mv_standard_form_TCC3-1| |nil| 3810975173
   ("" (SKEEP)
    (("" (EXPAND "false_counter")
      (("" (ASSERT)
        (("" (LIFT-IF)
          (("" (ASSERT)
            (("" (LEMMA "allnonzero_sorted")
              (("" (INST? -1)
                (("" (ASSERT)
                  (("" (LEMMA "allnonzero_simp")
                    (("" (INST? -1)
                      (("" (ASSERT)
                        (("" (LEMMA "all_nonzero")
                          (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|allnonzero_sorted| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|all_nonzero| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero_simp| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|mv_standard_form| TERMINATION
    "standard_form_mult_poly.mv_standard_form(standard_form_mult_poly.allnonzero(standard_form_mult_poly.p))"
    "NIL")))
 (|mv_standard_form_TCC4| 0
  (|mv_standard_form_TCC4-1| |nil| 3810975173
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|mv_standard_form| SUBTYPE
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(standard_form_mult_poly.p)))}")))
 (|standard_form_is_standard| 0
  (|standard_form_is_standard-1| |nil| 3810977727
   (""
    (CASE
        "FORALL (n:nat,p: MultPoly): (n<=4 AND false_counter(p) <= n) IMPLIES mv_standard_form?(mv_standard_form(p)) = TRUE")
    (("1" (SKEEP)
      (("1" (INST -1 "false_counter(p)" "p")
        (("1" (ASSERT)
          (("1" (HIDE 2)
            (("1" (LEMMA "f_count_le4") (("1" (INST?) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "false_counter" -2)
            (("1" (LIFT-IF -2)
              (("1" (SPLIT -2)
                (("1" (ASSERT)
                  (("1" (EXPAND "mv_standard_form" 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (NAME "mvp" "mv_standard_form(p)")
              (("2" (REPLACE -1)
                (("2" (EXPAND "mv_standard_form" -1)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF -1)
                      (("2" (SPLIT -1)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (SPLIT -1)
                            (("1" (FLATTEN)
                              (("1" (INST -2 "mv_sort(p)")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "f_count_mv_sort")
                                    (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2" (SPLIT -2)
                                  (("1" (FLATTEN)
                                    (("1" (INST -3 "simplify(p)")
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "f_count_simplify")
                                          (("1" (INST?)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (SPLIT -2)
                                      (("1" (FLATTEN)
                                        (("1" (INST -4 "allnonzero(p)")
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "f_count_all_nz")
                                              (("1" (INST -1 "p")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (REPLACE -2 2 RL)
                                            (("2" (HIDE 1)
                                              (("2"
                                                (LEMMA "lft_cut_alpha_mv_cut")
                                                (("2"
                                                  (EXPAND "mv_standard_form?" 1
                                                          1)
                                                  (("2" (ASSERT)
                                                    (("2" (SPLIT 1)
                                                      (("1" (PROPAX) NIL NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2" (INST?)
                                                            (("1" (ASSERT)
                                                              (("1" (SPLIT 2)
                                                                (("1" (PROPAX)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (LEMMA
                                                                   "lft_mv_cut")
                                                                  (("2" (INST?)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "false_counter"
                                                                         -9)
                                                                        (("1"
                                                                          (CASE
                                                                              "NOT allnonzero?(lft(mv_cut(p))(max_length(mv_cut(p))))")
                                                                          (("1"
                                                                            (HIDE
                                                                             2)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "allnonzero?")
                                                                              (("1"
                                                                                (SPLIT
                                                                                 -3)
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (SPLIT
                                                                                       3)
                                                                                      (("1"
                                                                                        (SKEEP)
                                                                                        (("1"
                                                                                          (INST
                                                                                           1
                                                                                           "i")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "mv_cut_C")
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "lft_nth_C")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -2
                                                                                                 "p"
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "mv_cut(p)"
                                                                                                   "max_length(mv_cut(p))"
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TYPEPRED
                                                                                             "i")
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "Lft_length")
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "mv_cut_length")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "p")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -2
                                                                                                     "mv_cut(p)"
                                                                                                     "(max_length(mv_cut(p)))")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "mv_is_sorted?"
                                                                               -7)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "sorted_mv_lift")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (CASE
                                                                          "NOT null[monomial]=p")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (REPLACE
                                                                         -1 -4
                                                                         RL)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "mv_is_sorted?"
                                                                 -4)
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simplify| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|f_count_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|f_count_all_nz| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|lft_mv_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lft_nth_C| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_C| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|sorted_mv_lift| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|lft_cut_alpha_mv_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|f_count_mv_sort| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|f_count_le4| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_standard_form| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|standard_form_max_length| 0
  (|standard_form_max_length-1| |nil| 3814219729
   (""
    (CASE
        " FORALL (n:nat,p: MultPoly): false_counter(p) <= n IMPLIES  max_length(mv_standard_form(p)) <= max_length(p)")
    (("1" (SKEEP)
      (("1" (INST -1 "false_counter(p)" "p") (("1" (ASSERT) NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "false_counter" -1)
            (("1" (LIFT-IF -1)
              (("1" (SPLIT -1)
                (("1" (EXPAND "mv_standard_form" 1 1) (("1" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "mv_standard_form" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (LEMMA "f_count_mv_sort")
                          (("1" (INST -1 "p")
                            (("1" (ASSERT)
                              (("1" (INST -2 "mv_sort(p)")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "mv_sort_max_length")
                                    (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 1)
                          (("1" (FLATTEN)
                            (("1" (LEMMA "f_count_simplify")
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (INST -3 "simplify(p)")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "simplify" 2 1)
                                        (("1" (EXPAND "mv_is_sorted?" -2)
                                          (("1" (ASSERT)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA
                                                   "max_length_sorted_simplify")
                                                  (("1" (INST -1 "p")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (EXPAND "simplify" -5)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (LEMMA "f_count_all_nz")
                                  (("1" (INST?)
                                    (("1" (ASSERT)
                                      (("1" (INST -4 "allnonzero(p)")
                                        (("1" (ASSERT)
                                          (("1" (ASSERT)
                                            (("1"
                                              (LEMMA "allnonzero_max_length")
                                              (("1" (INST?)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (LEMMA "max_length_cut")
                                    (("2" (LEMMA "lft_length_nth")
                                      (("2" (LEMMA "max_length_is_nth")
                                        (("2"
                                          (INST -1
                                           "lft(mv_cut(p))(max_length(mv_cut(p)))")
                                          (("1" (SKEEP)
                                            (("1"
                                              (INST -2 "mv_cut(p)"
                                               "max_length(mv_cut(p))" "j!1")
                                              (("1" (ASSERT)
                                                (("1" (INST -3 "p")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "j!1")
                                                (("2" (LEMMA "Lft_length")
                                                  (("2" (INST?)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (LEMMA "mv_cut_length")
                                                (("3" (INST?)
                                                  (("3" (ASSERT)
                                                    (("3" (EXPAND "length" -1)
                                                      (("3" (LIFT-IF -1)
                                                        (("3" (SPLIT -1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "mv_standard_form?"
                                                               3)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (LEMMA "Lft_length")
                                              (("2" (INST?)
                                                (("2" (ASSERT)
                                                  (("2" (LEMMA "mv_cut_length")
                                                    (("2" (INST -1 "p")
                                                      (("2" (CASE "null?(p)")
                                                        (("1"
                                                          (EXPAND
                                                           "mv_standard_form?"
                                                           3)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LIFT-IF -1)
                                                                (("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         -2)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|f_count_mv_sort| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mv_sort_max_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_sort| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|f_count_simplify| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_is_sorted?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|max_length_sorted_simplify| FORMULA-DECL NIL |standard_form_mult_poly|
     NIL)
    (|leq| DEF-DECL "bool" |standard_form_mult_poly| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|simplify| CONST-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|f_count_all_nz| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero_max_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|allnonzero| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|lft_length_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|lft| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (|mv_cut| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Lft_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_cut_length| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_cut| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|false_counter| CONST-DECL "nat" |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_standard_form| DEF-DECL "MultPoly" |standard_form_mult_poly| NIL))
   SHOSTAK)))

