(analytic_def
 (con_conv_series 0
  (con_conv_series-1 nil 3807522384
   ("" (skeep)
    (("" (expand "powerseries" 1 1)
      (("" (expand "conv_series?" 1 1) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((powerseries const-decl "sequence[real]" power_series series)
    (conv_series? const-decl "bool" series series))
   shostak))
 (ball_noe 0
  (ball_noe-1 nil 3807522407
   ("" (skeep*)
    (("" (expand "not_one_element?" 1)
      (("" (skeep)
        (("" (case "NOT x=alpha")
          (("1" (inst 2 "alpha")
            (("1" (assert) nil nil)
             ("2" (expand "ball" 1)
              (("2" (assert)
                (("2" (expand "abs" 1 1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "alpha + M/2")
            (("1" (assert) nil nil)
             ("2" (expand "ball" 1)
              (("2" (expand "abs" 1 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ball_dd_0 0
  (ball_dd_0-1 nil 3807546590
   ("" (skeep)
    (("" (expand "deriv_domain?" 1 1)
      (("" (skeep)
        (("" (typepred "x")
          (("" (expand "ball" -1)
            (("" (inst 1 "min(abs(M-x),e)/2")
              (("1" (assert) (("1" (grind) nil nil)) nil)
               ("2" (split 1)
                (("1" (assert)
                  (("1" (expand "min" 1 1)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ball" 1)
                  (("2" (assert)
                    (("2" (expand "min" 1 1)
                      (("2" (lift-if) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (ball_dd 0
  (ball_dd-1 nil 3807522559
   ("" (lemma "ball_dd_0")
    (("" (skeep)
      (("" (inst -1 "M")
        (("" (expand "deriv_domain?")
          (("" (skeep)
            (("" (typepred "x")
              (("" (inst -2 "e" "x-alpha")
                (("1" (skeep)
                  (("1" (inst 1 "y")
                    (("1" (expand "ball" 1)
                      (("1" (assert)
                        (("1" (expand "ball" -1)
                          (("1" (typepred "y")
                            (("1" (expand "ball" -2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ball" 1)
                  (("2" (expand "ball" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ball const-decl "bool" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (y skolem-const-decl "{u: nzreal | ball(0, M)(u - alpha + x)}"
     analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ball_dd_0 formula-decl nil analytic_def nil))
   shostak))
 (ball_open_0 0
  (ball_open_0-1 nil 3807547048
   ("" (skeep)
    (("" (typepred "x")
      (("" (expand "ball" -1)
        (("" (expand "abs" -1)
          (("" (lift-if -1)
            (("" (split -1)
              (("1" (flatten)
                (("1" (inst 1 "(M+x)/2")
                  (("1" (skeep)
                    (("1" (expand "ball" 1)
                      (("1" (assert)
                        (("1" (expand "abs" 1 1)
                          (("1" (lift-if 1)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (inst 2 "(M-x)/2")
                  (("1" (skeep)
                    (("1" (assert)
                      (("1" (expand "ball" 2)
                        (("1" (assert)
                          (("1" (expand "abs" 2 1)
                            (("1" (expand "abs" -2)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ball_open 0
  (ball_open-1 nil 3807548483
   ("" (lemma "ball_open_0")
    (("" (skeep)
      (("" (inst -1 "M" "x-alpha")
        (("1" (skeep)
          (("1" (inst 1 "eps")
            (("1" (skeep)
              (("1" (inst -1 "y-alpha")
                (("1" (assert)
                  (("1" (expand "ball") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "x")
            (("2" (expand "ball") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ball_open_0 formula-decl nil analytic_def nil))
   shostak))
 (ball_con_0 0
  (ball_con_0-1 nil 3807881954
   ("" (skeep)
    (("" (expand "connected?" 1)
      (("" (skeep)
        (("" (typepred "x" "y")
          (("" (expand "ball")
            (("" (assert) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (ball_con 0
  (ball_con-1 nil 3807881977
   ("" (skeep*)
    (("" (lemma "ball_con_0")
      (("" (expand "connected?" 1)
        (("" (inst -1 "M")
          (("" (skeep)
            (("" (expand "connected?" -1)
              (("" (inst -1 "x-alpha" "y-alpha" "z-alpha")
                (("1" (assert)
                  (("1" (expand "ball") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "y")
                  (("2" (expand "ball") (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (typepred "x")
                  (("3" (expand "ball") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball_con_0 formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (y skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (ball const-decl "bool" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (conv_ball 0
  (conv_ball-1 nil 3807548592
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (typepred "x")
            (("1" (inst -2 "x+alpha")
              (("1" (assert) nil nil)
               ("2" (expand "ball") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "x-alpha")
            (("2" (expand "ball")
              (("2" (typepred "x")
                (("2" (expand "ball" -1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (lim_ball_TCC1 0
  (lim_ball_TCC1-1 nil 3807522339 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (ball const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lim_ball subtype
    "(number_fields.-)(analytic_def.x, analytic_def.alpha)"
    "(analytic_def.ball(0, analytic_def.M))")))
 (lim_ball_TCC2 0
  (lim_ball_TCC2-1 nil 3807522339
   ("" (skeep*)
    (("" (lemma "conv_ball")
      (("" (expand "conv_powerseries?" 1 1)
        (("" (skeep)
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (split -1)
                  (("1" (inst -1 "x!1") nil nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conv_ball formula-decl nil analytic_def nil)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (conv_powerseries? const-decl "bool" power_series_conv series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lim_ball subtype "analytic_def.a"
    "(power_series_conv[(analytic_def.ball(0, analytic_def.M))].conv_powerseries?)")))
 (lim_ball_TCC3 0
  (lim_ball_TCC3-1 nil 3807522339
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "ball_noe") (("" (inst -1 "M" "0") nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball_noe formula-decl nil analytic_def nil))
   nil
   (lim_ball assuming
    "series@power_series_conv[(analytic_def.ball(0, analytic_def.M))].power_series_conv"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (lim_ball_TCC4 0
  (lim_ball_TCC4-1 nil 3807522339
   ("" (skeep*)
    (("" (lemma "ball_dd")
      (("" (hide -2) (("" (inst -1 "M" "0") nil nil)) nil)) nil))
    nil)
   ((ball_dd formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lim_ball assuming
    "series@power_series_conv[(analytic_def.ball(0, analytic_def.M))].power_series_conv"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lim_ball_TCC5 0
  (lim_ball_TCC5-1 nil 3807522339
   ("" (skeep*)
    (("" (lemma "ball_open")
      (("" (hide -2) (("" (inst -1 "M" "0" "x!1") nil nil)) nil)) nil))
    nil)
   ((ball_open formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lim_ball assuming
    "series@power_series_conv[(analytic_def.ball(0, analytic_def.M))].power_series_conv"
    "open: ASSUMPTION FORALL (x: power_series_conv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_conv.T_pred(y))")))
 (lim_ball_TCC6 0
  (lim_ball_TCC6-1 nil 3807522339 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lim_ball subtype
    "power_series.powerseries(analytic_def.a)((number_fields.-)(analytic_def.x, analytic_def.alpha))"
    "(convergence_sequences.convergent?)")))
 (lim_ball 0
  (lim_ball-1 nil 3807549368
   ("" (skeep*)
    (("" (expand "Inf_sum" 1 1) (("" (propax) nil nil)) nil)) nil)
   ((Inf_sum const-decl "real" power_series_conv series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (derivable_shift_TCC1 0
  (derivable_shift_TCC1-1 nil 3807522339
   ("" (skeep)
    (("" (lemma "ball_dd_0") (("" (inst -1 "M") nil nil)) nil)) nil)
   ((ball_dd_0 formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_shift assuming
    "analysis@derivatives[(analytic_def.ball(0, analytic_def.M))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_shift_TCC2 0
  (derivable_shift_TCC2-1 nil 3807522339
   ("" (skeep)
    (("" (lemma "ball_noe") (("" (inst -1 "M" "0") nil nil)) nil)) nil)
   ((ball_noe formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_shift assuming
    "analysis@derivatives[(analytic_def.ball(0, analytic_def.M))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_shift_TCC3 0
  (derivable_shift_TCC3-1 nil 3807522339
   ("" (skeep)
    (("" (lemma "ball_dd") (("" (inst -1 "M" "alpha") nil nil)) nil))
    nil)
   ((ball_dd formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_shift assuming
    "analysis@derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_shift_TCC4 0
  (derivable_shift_TCC4-1 nil 3807522339
   ("" (skeep)
    (("" (lemma "ball_noe") (("" (inst -1 "M" "alpha") nil nil)) nil))
    nil)
   ((ball_noe formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_shift assuming
    "analysis@derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_shift 0
  (derivable_shift-1 nil 3807549537
   ("" (skeep*)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "derivable?")
          (("1" (skeep)
            (("1" (typepred "x_1")
              (("1" (inst -2 "x_1-alpha")
                (("1" (expand "restrict")
                  (("1" (expand "derivable?")
                    (("1" (expand "convergent?")
                      (("1" (skeep)
                        (("1" (inst 1 "l")
                          (("1" (expand "convergence")
                            (("1" (expand "convergence")
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "adh" 1 1)
                                    (("1"
                                      (lemma "ball_open")
                                      (("1"
                                        (inst -1 "M" "alpha" "x_1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "min(eps,e)/2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "fullset")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A")
                                                (("2"
                                                  (expand "ball" 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst -3 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "delta")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -5 "x_1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "x_1!1")
                                                      (("2"
                                                        (expand "A" -2)
                                                        (("2"
                                                          (expand
                                                           "ball"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ball") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "derivable?")
          (("2" (skeep)
            (("2" (typepred "x")
              (("2" (inst -2 "x+alpha")
                (("1" (expand "restrict")
                  (("1" (expand "derivable?")
                    (("1" (expand "convergent?")
                      (("1" (skeep)
                        (("1" (inst 1 "l")
                          (("1" (expand "convergence")
                            (("1" (expand "convergence")
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "adh")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "ball_open")
                                        (("1"
                                          (inst -1 "M" "0" "x")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "min(eps,e)/2")
                                              (("1"
                                                (expand "fullset")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "A" 1)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "min(eps, e) / 2 + x")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -3 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "delta")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -5 "x2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A")
                                                (("2"
                                                  (typepred "x2")
                                                  (("2"
                                                    (expand "A")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "ball")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "ball") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (ball_open formula-decl nil analytic_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eps skolem-const-decl "posreal" analytic_def nil)
    (e skolem-const-decl "posreal" analytic_def nil)
    (fullset const-decl "set" sets nil)
    (NQ const-decl "real" derivatives_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (x_1!1 skolem-const-decl "(A(x_1))" analytic_def nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (M skolem-const-decl "posreal" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x_1 skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x2 skolem-const-decl "(A(x))" analytic_def nil)
    (eps skolem-const-decl "posreal" analytic_def nil)
    (e skolem-const-decl "posreal" analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_shift_TCC1 0
  (deriv_shift_TCC1-1 nil 3807522339 ("" (subtype-tcc) nil nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_shift subtype
    "(number_fields.+)(analytic_def.x, analytic_def.alpha)"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (deriv_shift_TCC2 0
  (deriv_shift_TCC2-1 nil 3807522339
   ("" (skeep)
    (("" (lemma "derivable_shift")
      (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((derivable_shift formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_shift subtype
    "LAMBDA (x: (analytic_def.ball(analytic_def.alpha, analytic_def.M))): analytic_def.f((number_fields.-)(x, analytic_def.alpha))"
    "deriv_fun[(ball(alpha, M))]")))
 (deriv_shift 0
  (deriv_shift-1 nil 3807606351
   ("" (skeep*)
    ((""
      (typepred
       "deriv[(ball(0, M))](restrict[real, (ball(0, M)), real](f))(x)")
      (("" (expand "deriv" 1)
        (("" (expand "deriv" 1)
          ((""
            (with-tccs
             (typepred
              "lim(NQ(restrict[real, (ball(0, M)), real](f), x), 0)"))
            (("" (lemma "cv_unique[(A(x))]")
              (("1"
                (inst -1 "0"
                 "(NQ(restrict[real, (ball(0, M)), real](f), x))"
                 "lim(NQ(restrict[real, (ball(0, M)), real](f), x), 0)"
                 "lim(NQ(LAMBDA (x: (ball(alpha, M))): f(x - alpha), alpha + x), 0)")
                (("1" (assert)
                  (("1"
                    (with-tccs
                     (typepred
                      "lim(NQ(LAMBDA (x: (ball(alpha, M))): f(x - alpha), alpha + x),
               0)"))
                    (("1" (hide -2)
                      (("1" (hide -2 -3 2)
                        (("1" (expand "convergence")
                          (("1" (expand "convergence")
                            (("1" (flatten)
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "adh" 1 1)
                                  (("1"
                                    (lemma "ball_open")
                                    (("1"
                                      (inst -1 "M" "0" "x")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "min(eps,e)/2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "fullset")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "A")
                                              (("2"
                                                (inst
                                                 -1
                                                 "(min(eps, e) / 2 + x)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "ball" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst -2 "epsilon")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "delta")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "x2")
                                            (("2"
                                              (inst -6 "x2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A")
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "ball_noe")
                  (("2" (inst -1 "M" "alpha") nil nil)) nil)
                 ("3" (lemma "ball_dd")
                  (("3" (inst -1 "M" "alpha") nil nil)) nil)
                 ("4" (lemma "ball_noe")
                  (("4" (inst -1 "M" "0") nil nil)) nil)
                 ("5" (assert)
                  (("5" (lemma "ball_dd")
                    (("5" (inst -1 "M" "0") nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "ball_noe")
                  (("2" (lemma "ball_noe")
                    (("2" (inst -1 "M" "0") nil nil)) nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (lemma "ball_dd")
                  (("3" (inst -1 "M" "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (cv_unique formula-decl nil lim_of_functions analysis)
    (ball_dd formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (x2 skolem-const-decl "(A(x))" analytic_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fullset const-decl "set" sets nil)
    (e skolem-const-decl "posreal" analytic_def nil)
    (eps skolem-const-decl "posreal" analytic_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ball_open formula-decl nil analytic_def nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (derivable_shift_n 0
  (derivable_shift_n-1 nil 3807882032
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "derivable_n_times?") (("1" (propax) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (split 1)
          (("1" (flatten)
            (("1" (expand "derivable_n_times?" -1)
              (("1" (expand "derivable_n_times?" 1 1)
                (("1" (expand "restrict" -1)
                  (("1" (flatten)
                    (("1" (lemma "derivable_shift")
                      (("1" (inst -1 "alpha" "M" "f")
                        (("1" (assert)
                          (("1" (expand "restrict" -1 1)
                            (("1" (assert)
                              (("1"
                                (inst
                                 -4
                                 "alpha"
                                 "M"
                                 "LAMBDA(x:real): IF ball(0,M)(x) THEN deriv[(ball(0,M))](LAMBDA(x:(ball(0,M))): f(x))(x) ELSE 0 ENDIF")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (expand "restrict" -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "(LAMBDA (x_1: (ball(alpha, M))):
             IF ball(0, M)(x_1 - alpha)
               THEN deriv[(ball(0, M))]
                        (LAMBDA (x: (ball(0, M))): f(x))(x_1 - alpha)
             ELSE 0
             ENDIF) = deriv(LAMBDA (x: (ball(alpha, M))): f(x - alpha))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality 1)
                                                (("2"
                                                  (typepred "x!1")
                                                  (("2"
                                                    (expand "ball")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "deriv_shift")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "alpha"
                                                           "M"
                                                           "f")
                                                          (("2"
                                                            (expand
                                                             "restrict"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1-alpha")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "ball")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "deriv(LAMBDA (s: (ball(0, M))): f(s)) = (LAMBDA (s: (ball(0, M))):
             IF abs(s) < M
               THEN deriv[(ball(0, M))](LAMBDA (x: (ball(0, M))): f(x))(s)
             ELSE 0
             ENDIF)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (expand "ball")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "derivable_n_times?" 1 1)
              (("2" (expand "derivable_n_times?" -1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "restrict" 1 1)
                      (("2" (lemma "derivable_shift")
                        (("2" (inst -1 "alpha" "M" "f")
                          (("2" (assert)
                            (("2" (expand "restrict" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -4
                                   "alpha"
                                   "M"
                                   "Lambda(x:real): IF ball(0,M)(x) THEN deriv(restrict[real, (ball(0, M)), real](f))(x) ELSE 0 ENDIF")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (split -4)
                                          (("1"
                                            (expand "restrict" 1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "restrict" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "(LAMBDA (s_1: (ball(0, M))):
             deriv(LAMBDA (s: (ball(0, M))): f(s))(s_1)) = deriv(LAMBDA (s: (ball(0, M))): f(s))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (case
                                                 "(LAMBDA (x_1: (ball(alpha, M))):
             IF ball(0, M)(x_1 - alpha)
               THEN deriv(restrict[real, (ball(0, M)), real](f))
                         (x_1 - alpha)
             ELSE 0
             ENDIF) = deriv(LAMBDA (x: (ball(alpha, M))): f(x - alpha))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (expand "ball")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "restrict"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "deriv_shift")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "alpha"
                                                                 "M"
                                                                 "f")
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1-alpha")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_shift formula-decl nil analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_shift formula-decl nil analytic_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_shift_n_TCC1 0
  (deriv_shift_n_TCC1-1 nil 3807613054
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "derivable_shift_n")
        (("" (assert)
          (("" (expand "restrict" -2 1) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (derivable_shift_n formula-decl nil analytic_def nil))
   nil
   (deriv_shift_n subtype
    "LAMBDA (x: (analytic_def.ball(0, analytic_def.M))): analytic_def.f(x)"
    "nth_derivatives[(analytic_def.ball(0, analytic_def.M))].nderiv_fun(analytic_def.n)")))
 (deriv_shift_n_TCC2 0
  (deriv_shift_n_TCC2-1 nil 3807613054 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "bool" analytic_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_shift_n subtype
    "(number_fields.+)(analytic_def.x1, analytic_def.alpha)"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (deriv_shift_n_TCC3 0
  (deriv_shift_n_TCC3-1 nil 3807613054
   ("" (skeep*)
    (("" (lemma "derivable_shift_n")
      (("" (inst -1 "alpha" "n" "M" "f") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((derivable_shift_n formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (deriv_shift_n subtype
    "LAMBDA (s: (analytic_def.ball(analytic_def.alpha, analytic_def.M))): analytic_def.f((number_fields.-)(s, analytic_def.alpha))"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv_fun(analytic_def.n)")))
 (deriv_shift_n 0
  (deriv_shift_n-1 nil 3807965255
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (skeep)
          (("1" (expand "nderiv" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nderiv" 1 1)
            (("2" (expand "nderiv" 1 2)
              (("2"
                (inst -1 "alpha" "M"
                 "LAMBDA(x:real): IF ball(0,M)(x) THEN deriv(LAMBDA (x: (ball(0, M))): f(x))(x) ELSE 0 ENDIF")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (inst -1 "x1")
                      (("1" (assert)
                        (("1"
                          (case "deriv(LAMBDA (x: (ball(0, M))): f(x)) =  LAMBDA (x_1: (ball(0, M))):
             deriv(LAMBDA (x: (ball(0, M))): f(x))(x_1)")
                          (("1" (assert)
                            (("1" (replace -1 1)
                              (("1"
                                (replace -2 1)
                                (("1"
                                  (case
                                   " (LAMBDA (s: (ball(alpha, M))):
             IF ball(0, M)(s - alpha)
               THEN deriv(LAMBDA (x: (ball(0, M))): f(x))(s - alpha)
             ELSE 0
             ENDIF) = deriv(LAMBDA (s: (ball(alpha, M))): f(s - alpha))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (expand "ball")
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "deriv_shift")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "alpha"
                                                       "M"
                                                       "f")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (typepred
                                                           "x!1")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x!1-alpha")
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "restrict"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "restrict"
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "derivable_n_times?"
                                                               -5
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -2 -3 -4)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma "derivable_shift")
                                          (("2"
                                            (inst -1 "alpha" "M" "f")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "restrict"
                                                   1
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -2
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (expand
                                           "derivable_n_times?"
                                           -4
                                           1)
                                          (("3"
                                            (expand "restrict")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "derivable_shift")
                                      (("3"
                                        (inst -1 "alpha" "M" "f")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand "restrict")
                                            (("3"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "derivable_n_times?"
                                                   -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4"
                                      (skeep)
                                      (("4"
                                        (expand
                                         "derivable_n_times?"
                                         -4)
                                        (("4"
                                          (expand "restrict" -4)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (decompose-equality 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "derivable_n_times?" -2)
                                  (("1"
                                    (expand "restrict" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "derivable_n_times?" -2)
                                (("2"
                                  (expand "restrict" -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skeep)
                              (("3"
                                (expand "derivable_n_times?" -2)
                                (("3"
                                  (expand "restrict" -2)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2)
                            (("4" (expand "derivable_n_times?" -2)
                              (("4"
                                (expand "restrict")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "restrict")
                        (("2" (expand "derivable_n_times?" -1 1)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (case
                                 "(LAMBDA (s: (ball(0, M))):
             deriv(LAMBDA (x: (ball(0, M))): f(x))(s)) =deriv(LAMBDA (s: (ball(0, M))): f(s))")
                                (("1" (assert) nil nil)
                                 ("2" (decompose-equality 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "derivable_n_times?" -2)
                    (("2" (expand "restrict" -2)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "derivable_shift_n")
            (("3" (inst -1 "alpha" "n" "M" "f")
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "x1")
            (("4" (expand "ball") (("4" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (assert)
      (("5" (hide 2)
        (("5" (skeep*)
          (("5" (lemma "derivable_shift_n")
            (("5" (assert)
              (("5" (expand "restrict" -2) (("5" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (derivable_shift_n formula-decl nil analytic_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (deriv_shift formula-decl nil analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_shift formula-decl nil analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (M skolem-const-decl "posreal" analytic_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ball const-decl "bool" analytic_def nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_n_subtype_TCC1 0
  (derivable_n_subtype_TCC1-1 nil 3807968208
   ("" (skeep)
    (("" (lemma "ball_dd") (("" (inst -1 "M2" "alpha") nil nil)) nil))
    nil)
   ((ball_dd formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_n_subtype assuming
    "analysis@nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M2))].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_n_subtype_TCC2 0
  (derivable_n_subtype_TCC2-1 nil 3807968208
   ("" (skeep)
    (("" (lemma "ball_noe") (("" (inst -1 "M2" "alpha") nil nil)) nil))
    nil)
   ((ball_noe formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_n_subtype assuming
    "analysis@nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M2))].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_n_subtype 0
  (derivable_n_subtype-1 nil 3807968414
   ("" (induct "n")
    (("1" (skeep) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "restrict")
          (("2" (expand "derivable_n_times?" -3)
            (("2" (expand "derivable_n_times?" 1 1)
              (("2" (assert)
                (("2" (flatten)
                  (("2"
                    (lemma
                     "derivable_subtype[ (ball(alpha, M2)),  (ball(alpha,M1))]")
                    (("1"
                      (inst -1 "(LAMBDA (s: (ball(alpha, M2))): f(s))")
                      (("1" (assert)
                        (("1" (lemma "ball_dd")
                          (("1" (inst -1 "M1" "alpha")
                            (("1" (lemma "ball_noe")
                              (("1"
                                (inst -1 "M1" "alpha")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "restrict" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -4
                                         "M1"
                                         "M2"
                                         "alpha"
                                         "LAMBDA(x:real): IF ball(alpha,M2)(x) THEN deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(x) ELSE 0 ENDIF")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "(LAMBDA (s_1: (ball(alpha, M2))):
             deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(s_1)) = deriv(LAMBDA (s: (ball(alpha, M2))): f(s))")
                                            (("1"
                                              (replace -1 -5 lr)
                                              (("1"
                                                (case
                                                 "(LAMBDA (s_1: (ball(alpha, M1))):
              IF ball(alpha, M2)(s_1)
                THEN deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(s_1)
              ELSE 0
              ENDIF) = deriv(LAMBDA (s: (ball(alpha, M1))): f(s))")
                                                (("1"
                                                  (replace -1 -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "x!1")
                                                      (("2"
                                                        (expand "ball")
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "deriv_subtype[ (ball(alpha, M2)),  (ball(alpha,M1))]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(LAMBDA (s: (ball(alpha, M2))): f(s))")
                                                                  (("1"
                                                                    (assert
                                                                     :flush?
                                                                     T)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "restrict"
                                                                         -1)
                                                                        (("1"
                                                                          (assert
                                                                           :flush?
                                                                           T)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "del_neigh_all?"
                                                                         1)
                                                                        (("2"
                                                                          (lemma
                                                                           "ball_open")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "M1"
                                                                               "alpha"
                                                                               "a")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "eps")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "xx")
                                                                                      (("2"
                                                                                        (assert
                                                                                         :flush?
                                                                                         T)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert
                                                                 :flush?
                                                                 T)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "ball_noe")
                      (("2" (inst -1 "M2" "alpha") nil nil)) nil)
                     ("3" (lemma "ball_dd")
                      (("3" (inst -1 "M2" "alpha") nil nil)) nil)
                     ("4" (skeep)
                      (("4" (typepred "x")
                        (("4" (hide -2 -3 -4 -5)
                          (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "ball_noe") (("3" (inst -1 "M1" "alpha") nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "ball_dd") (("4" (inst -1 "M1" "alpha") nil nil))
          nil))
        nil))
      nil)
     ("5" (assert)
      (("5" (hide 2)
        (("5" (skeep)
          (("5" (lemma "ball_noe")
            (("5" (inst -1 "M2" "alpha") nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep)
        (("6" (lemma "ball_dd") (("6" (inst -1 "M2" "alpha") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (ball_dd formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ball_open formula-decl nil analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ball const-decl "bool" analytic_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (deriv_n_subtype_TCC1 0
  (deriv_n_subtype_TCC1-1 nil 3807971538 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_n_subtype subtype "analytic_def.x"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M2))")))
 (deriv_n_subtype_TCC2 0
  (deriv_n_subtype_TCC2-1 nil 3807971538
   ("" (skeep*)
    (("" (lemma "derivable_n_subtype")
      (("" (inst -1 "M1" "M2" "alpha" "f" "n") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((derivable_n_subtype formula-decl nil analytic_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (deriv_n_subtype subtype
    "restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M1)), real].restrict(analytic_def.f)"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M1))].nderiv_fun(analytic_def.n)")))
 (deriv_n_subtype 0
  (deriv_n_subtype-1 nil 3807971584
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nderiv" 1)
            (("2" (expand "restrict")
              (("2"
                (lemma
                 "deriv_subtype_dd[ (ball(alpha, M2)), (ball(alpha, M1))]")
                (("1" (inst -1 "LAMBDA (s: (ball(alpha, M2))): f(s)")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "restrict" -1)
                        (("1"
                          (inst -2 "M1" "M2" "alpha"
                           "LAMBDA(x:real): IF ball(alpha,M2)(x) THEN deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(x) ELSE 0 ENDIF")
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     " deriv(LAMBDA (s: (ball(alpha, M1))): f(s)) =  (LAMBDA (s_1: (ball(alpha, M1))):
              IF ball(alpha, M2)(s_1)
                THEN deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(s_1)
              ELSE 0
              ENDIF)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 -2 rl)
                                        (("1"
                                          (replace -2 1 rl)
                                          (("1"
                                            (case
                                             "deriv(LAMBDA (s: (ball(alpha, M2))): f(s)) = (LAMBDA (s_1: (ball(alpha, M2))):
              deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(s_1))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -5)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "derivable_n_times?"
                                                   -5)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (expand
                                                   "derivable_n_times?"
                                                   -5)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "derivable_n_times?"
                                               -5)
                                              (("4" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (expand "ball")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst -1 "x!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand
                                             "derivable_n_times?"
                                             -5)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand
                                           "derivable_n_times?"
                                           -4)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (lemma
                                                 "derivable_n_subtype")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "M1"
                                                   "M2"
                                                   "alpha"
                                                   "f"
                                                   "1")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "derivable_n_times?"
                                                       -1)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "restrict"
                                                           -1)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "derivable_n_times?"
                                                               1
                                                               1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (expand
                                         "derivable_n_times?"
                                         -5)
                                        (("3" (flatten) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (assert)
                                      (("4"
                                        (lemma "derivable_n_subtype")
                                        (("4"
                                          (inst
                                           -1
                                           "M1"
                                           "M2"
                                           "alpha"
                                           "f"
                                           "1")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (expand
                                               "derivable_n_times?")
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -1)
                                                    (("4"
                                                      (expand
                                                       "restrict"
                                                       -1)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "derivable_n_times?" -3)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "deriv(LAMBDA (s: (ball(alpha, M2))): f(s)) = (LAMBDA (s_1: (ball(alpha, M2))):
             deriv(LAMBDA (s: (ball(alpha, M2))): f(s))(s_1))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (decompose-equality 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (expand "derivable_n_times?" -4)
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "derivable_n_times?" -3)
                          (("2" (propax) nil nil)) nil))
                        nil)
                       ("3" (expand "derivable_n_times?" -3)
                        (("3" (flatten)
                          (("3" (assert)
                            (("3" (lemma "ball_dd")
                              (("3" (inst -1 "M1" "alpha") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (assert)
                        (("4" (lemma "ball_noe")
                          (("4" (inst -1 "M1" "alpha") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "ball_noe")
                  (("2" (inst -1 "M2" "alpha") nil nil)) nil)
                 ("3" (assert)
                  (("3" (lemma "ball_dd")
                    (("3" (inst -1 "M2" "alpha") nil nil)) nil))
                  nil)
                 ("4" (assert)
                  (("4" (skeep)
                    (("4" (typepred "x!1")
                      (("4" (hide -2 -3 -4)
                        (("4" (hide 2) (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "ball_noe")
            (("3" (inst -1 "M1" "alpha") nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "ball_dd")
          (("4" (skeep) (("4" (inst -1 "M1" "alpha") nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (assert)
      (("5" (hide 2)
        (("5" (skeep)
          (("5" (skeep)
            (("5" (lemma "derivable_n_subtype")
              (("5" (inst -1 "M1" "M2" "alpha" "f" "n")
                (("5" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep)
        (("6" (skeep)
          (("6" (lemma "ball_noe")
            (("6" (inst -1 "M2" "alpha") nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep)
        (("7" (skeep)
          (("7" (lemma "ball_dd")
            (("7" (inst -1 "M2" "alpha") nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (skeep)
        (("8" (skeep)
          (("8" (typepred "x")
            (("8" (expand "ball") (("8" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("9" (hide 2)
      (("9" (skeep)
        (("9" (lemma "ball_noe") (("9" (inst -1 "M2" "alpha") nil nil))
          nil))
        nil))
      nil)
     ("10" (assert)
      (("10" (hide 2)
        (("10" (skeep)
          (("10" (lemma "ball_dd")
            (("10" (inst -1 "M2" "alpha") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (derivable_n_subtype formula-decl nil analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (ball_dd formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ball const-decl "bool" analytic_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (analytic_parts?_TCC1 0
  (analytic_parts?_TCC1-1 nil 3807522339 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (conv_series? const-decl "bool" series series)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (analytic_parts? subtype
    "power_series.powerseq(analytic_def.a, (number_fields.-)(analytic_def.x, analytic_def.alpha))"
    "(series.conv_series?)")))
 (analytic?_TCC1 0
  (analytic?_TCC1-1 nil 3810358003 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (analytic? subtype "analytic_def.i" "below[length[real](f(x))]")))
 (analytic_der 0
  (analytic_der-1 nil 3807550411
   ("" (skeep)
    (("" (lemma "Inf_sum_derivable_n_times[(ball(0,M))]")
      (("1" (expand "Inf_sum" -1 1)
        (("1" (typepred "M")
          (("1" (expand "analytic_rad?" -3)
            (("1" (skeep)
              (("1" (inst -4 "a" "n")
                (("1" (assert)
                  (("1" (split -4)
                    (("1" (assert)
                      (("1" (lemma "derivable_shift_n")
                        (("1" (inst -1 "alpha" "n" "M" "_")
                          (("1" (inst -1 "LAMBDA(x:real): f(x+alpha)")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "restrict" 1 1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "restrict" 1 1)
                                        (("2"
                                          (case
                                           " (LAMBDA (s: (ball(0, M))): f(s + alpha)) = (LAMBDA (x: (ball(0, M))) -> real:
                           limit(powerseries(a)(x)))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (typepred "x!1")
                                                (("1"
                                                  (inst -5 "alpha+x!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "ball"
                                                       -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -4 "alpha+x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "ball")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (hide 2)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (typepred "x")
                                                  (("3"
                                                    (expand "ball" -1)
                                                    (("3"
                                                      (inst
                                                       -5
                                                       "alpha+x")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "conv_powerseries?" 1 1)
                      (("2" (skeep 1)
                        (("2" (typepred "x")
                          (("2" (expand "ball" -1)
                            (("2" (inst -4 "x+alpha")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (typepred "x")
            (("2" (expand "ball")
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma "ball_open")
          (("3" (skeep) (("3" (inst -1 "M" "0" "x") nil nil)) nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (lemma "ball_noe") (("4" (inst -1 "M" "0") nil nil))
          nil))
        nil)
       ("5" (assert)
        (("5" (lemma "ball_con") (("5" (inst -1 "M" "0") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_rad? const-decl "bool" analytic_def nil)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Inf_sum_derivable_n_times formula-decl nil power_series_deriv
     series)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (conv_powerseries? const-decl "bool" power_series_conv series)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (restrict const-decl "R" restrict nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (powerseries const-decl "sequence[real]" power_series series)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M skolem-const-decl "(analytic_rad?(alpha, f))" analytic_def nil)
    (a skolem-const-decl "sequence[real]" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "(ball(0, M))" analytic_def nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_shift_n formula-decl nil analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (Inf_sum const-decl "real" power_series_conv series)
    (ball_open formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (ball_con formula-decl nil analytic_def nil))
   shostak))
 (analytic_cont 0
  (analytic_cont-1 nil 3810366517
   ("" (skeep)
    (("" (lemma "derivable_cont_fun[(ball(alpha,M))]")
      (("1" (lemma "analytic_der")
        (("1" (inst?)
          (("1" (inst -1 "1")
            (("1" (expand "derivable_n_times?" -1)
              (("1" (flatten)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "ball_noe") (("2" (inst -1 "M" "alpha") nil nil))
        nil)
       ("3" (lemma "ball_dd") (("3" (inst -1 "M" "alpha") nil nil))
        nil))
      nil))
    nil)
   ((analytic_rad? const-decl "bool" analytic_def nil)
    (ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_cont_fun formula-decl nil derivatives analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (analytic_der formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (ball_dd formula-decl nil analytic_def nil))
   shostak))
 (analytic_term_TCC1 0
  (analytic_term_TCC1-1 nil 3807612442 ("" (subtype-tcc) nil nil)
   ((powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ball const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (analytic_term subtype "analytic_def.alpha"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (analytic_term_TCC2 0
  (analytic_term_TCC2-1 nil 3807612442
   ("" (skeep)
    (("" (lemma "analytic_der")
      (("" (assert)
        (("" (skeep)
          (("" (inst -1 "alpha" "f" "M" "n")
            (("" (assert)
              (("" (expand "analytic_rad?")
                (("" (expand "analytic_parts?" -1)
                  (("" (inst 1 "a")
                    (("" (assert)
                      (("" (skeep)
                        (("" (inst -1 "x")
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (assert)
                                ((""
                                  (expand "inf_sum" -2)
                                  ((""
                                    (expand "powerseries" 1 1)
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_der formula-decl nil analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (inf_sum const-decl "real" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (sequence type-eq-decl nil sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (analytic_term subtype
    "restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M)), real].restrict(analytic_def.f)"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv_fun(analytic_def.n)")))
 (analytic_term 0
  (analytic_term-1 nil 3807612685
   ("" (skeep*)
    (("" (lemma "Taylor_expansion[(ball(0,M))]")
      (("1" (inst -1 "a" "LAMBDA(x:(ball(0,M))): f(x+alpha)" "n")
        (("1" (assert)
          (("1" (expand "analytic_parts?" -2)
            (("1" (split -1)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (replace -2 1)
                    (("1" (expand "restrict" 1 1)
                      (("1" (lemma "deriv_shift_n")
                        (("1"
                          (inst -1 "alpha" "n" "M"
                           "LAMBDA(x:real): f(x+alpha)")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (inst -1 "0")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "restrict" 1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "conv_powerseries?" 1 1)
                (("2" (skeep)
                  (("2" (typepred "x")
                    (("2" (inst -2 "x+alpha")
                      (("1" (assert) nil nil)
                       ("2" (expand "ball" -1) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (decompose-equality 1)
                  (("1" (inst -1 "x!1+alpha")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "Inf_sum" 1)
                          (("1" (expand "inf_sum" -2)
                            (("1" (expand "powerseries" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "x!1")
                      (("2" (expand "ball") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep 1)
                    (("2" (lemma "ball_open")
                      (("2" (inst -1 "M" "0" "x") nil nil)) nil))
                    nil)
                   ("3" (lemma "ball_dd_0")
                    (("3" (inst -1 "M") nil nil)) nil)
                   ("4" (lemma "ball_noe")
                    (("4" (inst -1 "M" "0") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "x")
          (("2" (expand "ball")
            (("2" (assert)
              (("2" (hide 2)
                (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma "ball_open")
            (("3" (inst -1 "M" "0" "x") nil nil)) nil))
          nil))
        nil)
       ("4" (lemma "ball_noe") (("4" (inst -1 "M" "0") nil nil)) nil)
       ("5" (lemma "ball_con") (("5" (inst -1 "M" "0") nil nil)) nil)
       ("6" (assert)
        (("6" (inst 1 "0")
          (("6" (expand "ball" 1)
            (("6" (typepred "M")
              (("6" (hide 2) (("6" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Taylor_expansion formula-decl nil taylor_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (restrict const-decl "R" restrict nil)
    (deriv_shift_n formula-decl nil analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "(ball(0, M))" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (conv_powerseries? const-decl "bool" power_series_conv series)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (Inf_sum const-decl "real" power_series_conv series)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (x!1 skolem-const-decl "(ball(0, M))" analytic_def nil)
    (ball_open formula-decl nil analytic_def nil)
    (ball_dd_0 formula-decl nil analytic_def nil)
    (ball_noe formula-decl nil analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ball_con formula-decl nil analytic_def nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (analytic_term_unique 0
  (analytic_term_unique-1 nil 3807967303
   ("" (skeep)
    (("" (lemma "analytic_term")
      (("" (inst-cp -1 "f" "alpha" "M1" "a1")
        (("" (inst -1 "f" "alpha" "M2" "a2")
          (("" (assert)
            (("" (decompose-equality 1)
              (("" (inst -1 "x!1")
                (("" (inst -2 "x!1")
                  (("" (assert)
                    ((""
                      (case " nderiv[(ball(alpha, M2))]
           (x!1, restrict[real, (ball(alpha, M2)), real](f))(alpha) =  nderiv[(ball(alpha, M1))]
           (x!1, restrict[real, (ball(alpha, M1)), real](f))(alpha)")
                      (("1" (assert)
                        (("1" (replace -1 -2)
                          (("1" (replace -2 -3 rl)
                            (("1" (div-by -3 "factorial(x!1)") nil
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "restrict" 1)
                          (("2" (lemma "deriv_n_subtype")
                            (("2" (inst -1 "M1" "M2" "alpha" "x!1" "f")
                              (("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst -1 "alpha")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "deriv_n_subtype")
                                    (("2"
                                      (inst
                                       -1
                                       "M2"
                                       "M1"
                                       "alpha"
                                       "x!1"
                                       "f")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (inst -1 "alpha")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "restrict")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "analytic_der")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "alpha"
                                                   "f"
                                                   "M1"
                                                   "x!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3 4 5)
                                                    (("2"
                                                      (expand
                                                       "analytic_parts?"
                                                       -3)
                                                      (("2"
                                                        (expand
                                                         "analytic_rad?"
                                                         1)
                                                        (("2"
                                                          (inst 1 "a1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "inf_sum"
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "powerseries"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "restrict" 1)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (lemma "analytic_der")
                                        (("3"
                                          (inst
                                           -1
                                           "alpha"
                                           "f"
                                           "M2"
                                           "x!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "restrict")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (expand
                                               "analytic_rad?"
                                               1)
                                              (("2"
                                                (inst 1 "a2")
                                                (("2"
                                                  (expand
                                                   "analytic_parts?"
                                                   -4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -4 "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "inf_sum"
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "powerseries"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_term formula-decl nil analytic_def nil)
    (restrict const-decl "R" restrict nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (analytic_der formula-decl nil analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_n_subtype formula-decl nil analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inf_rad?_TCC1 0
  (inf_rad?_TCC1-1 nil 3807522339 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (conv_series? const-decl "bool" series series)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (inf_rad? subtype
    "power_series.powerseq(analytic_def.a, (number_fields.-)(analytic_def.x, analytic_def.alpha))"
    "(series.conv_series?)")))
 (max_rad_0 0
  (max_rad_0-1 nil 3807978172
   ("" (skeep)
    (("" (name "c" "glb({xx:posreal | NOT analytic_rad?(0,f)(xx)})")
      (("1" (inst 2 "c")
        (("1" (expand "max_rad?")
          (("1" (typepred "c")
            (("1" (split 2)
              (("1" (expand "analytic_rad?" 1 1)
                (("1" (typepred "f")
                  (("1" (expand "analytic?" -1)
                    (("1" (skeep)
                      (("1" (inst 1 "a")
                        (("1" (skeep)
                          (("1" (typepred "x")
                            (("1" (case "x=0")
                              (("1"
                                (expand "analytic_parts?" -3)
                                (("1"
                                  (inst -3 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "powerseries")
                                      (("1"
                                        (expand "inf_sum")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case "x>0")
                                      (("1"
                                        (expand "abs" -3)
                                        (("1"
                                          (expand
                                           "greatest_lower_bound?"
                                           -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "lower_bound?"
                                               -4)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "x<0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "x>0")
                                (("1"
                                  (expand "greatest_lower_bound?" -4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "lower_bound?" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "(x+c)/2")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "extend" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "analytic_rad?"
                                                 -1)
                                                (("2"
                                                  (expand "abs" -3)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "a!1=a")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -2 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "analytic_term_unique")
                                                          (("2"
                                                            (expand
                                                             "analytic_parts?"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "inf_sum")
                                                                      (("1"
                                                                        (expand
                                                                         "powerseries")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "0"
                                                                     "M"
                                                                     "(x+c)/2"
                                                                     "a"
                                                                     "a!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "analytic_parts?"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "inf_sum"
                                                                             2)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_1")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "powerseries"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case "x<0")
                                    (("1"
                                      (expand "abs" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "greatest_lower_bound?"
                                           -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "lower_bound?"
                                               -4)
                                              (("1"
                                                (inst -4 "(c-x)/2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "extend" 1)
                                                  (("2"
                                                    (expand
                                                     "analytic_rad?"
                                                     -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "a!1=a")
                                                        (("1"
                                                          (inst -2 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "analytic_term_unique")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "0"
                                                             "M"
                                                             "(c-x)/2"
                                                             "a"
                                                             "a!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "analytic_parts?"
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x_1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "inf_sum"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "powerseries"
                                                                             -2
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "greatest_lower_bound?" -2)
                  (("2" (flatten)
                    (("2" (inst -3 "M1")
                      (("2" (assert)
                        (("2" (expand "lower_bound?" 2 1)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (typepred "s")
                                (("2"
                                  (expand "extend" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "analytic_rad?" 1 1)
                                          (("1"
                                            (expand
                                             "analytic_parts?"
                                             -3)
                                            (("1"
                                              (inst 1 "a")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inf_sum"
                                                           -4)
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "c")
            (("2" (typepred "f")
              (("2" (expand "analytic?" -1)
                (("2" (skeep)
                  (("2" (case "c=0")
                    (("1" (expand "greatest_lower_bound?" -3)
                      (("1" (flatten)
                        (("1" (inst -4 "M")
                          (("1" (assert)
                            (("1" (expand "lower_bound?" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "s")
                                  (("1"
                                    (expand "extend")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "analytic_rad?" 1)
                                          (("1"
                                            (inst 1 "a")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "analytic_parts?"
                                                 -4)
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inf_sum"
                                                           -5)
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "NOT c<0")
                        (("1" (assert) nil nil)
                         ("2" (expand "greatest_lower_bound?" -3)
                          (("2" (flatten)
                            (("2" (inst -4 "M")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "lower_bound?" 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "s")
                                      (("2"
                                        (expand "extend" -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "analytic_rad?"
                                               1)
                                              (("1"
                                                (inst 1 "a")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "analytic_parts?"
                                                     -4)
                                                    (("1"
                                                      (inst -4 "x")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "inf_sum")
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "powerseries"
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "greatest_lower_bound?" 1)
          (("2" (split 1)
            (("1"
              (typepred "(glb(extend[real, posreal, bool, FALSE]
                           ({xx: posreal | NOT analytic_rad?(0, f)(xx)})))")
              (("1" (expand "greatest_lower_bound?" -1)
                (("1" (flatten)
                  (("1" (hide -2)
                    (("1" (expand "lower_bound?")
                      (("1" (skeep)
                        (("1" (inst -1 "s")
                          (("1" (expand "extend" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (typepred "(glb(extend[real, posreal, bool, FALSE]
                           ({xx: posreal | NOT analytic_rad?(0, f)(xx)})))")
              (("1" (skeep 1)
                (("1" (expand "greatest_lower_bound?" -1)
                  (("1" (flatten)
                    (("1" (inst -2 "y")
                      (("1" (assert)
                        (("1" (expand "lower_bound?")
                          (("1" (skeep)
                            (("1" (inst -2 "s")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "s")
                                  (("1"
                                    (expand "extend" -1)
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split 1)
                (("1" (expand "nonempty?" 1)
                  (("1" (expand "empty?" -1)
                    (("1" (expand "inf_rad?" 2)
                      (("1" (typepred "f")
                        (("1" (expand "analytic?" -1)
                          (("1" (skeep -1)
                            (("1" (inst 2 "a")
                              (("1"
                                (skeep)
                                (("1"
                                  (skeep 2)
                                  (("1"
                                    (inst -2 "abs(x)+1")
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (expand "extend" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "analytic_rad?"
                                                   -3)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case "a!1=a")
                                                      (("1"
                                                        (inst -4 "x")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "inf_sum"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "powerseries"
                                                                   -5)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "analytic_term_unique")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "0"
                                                           "abs(x)+1"
                                                           "M"
                                                           "a!1"
                                                           "a")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "analytic_parts?"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "x_1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "inf_sum"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "powerseries"
                                                                           -4)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "bounded_below?" 1)
                  (("2" (inst 1 "-1")
                    (("2" (expand "lower_bound?" 1)
                      (("2" (skeep)
                        (("2" (typepred "s")
                          (("2" (expand "extend" -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (split 1)
        (("1" (expand "nonempty?" 1)
          (("1" (expand "empty?" -1)
            (("1" (expand "inf_rad?" 1)
              (("1" (typepred "f")
                (("1" (expand "analytic?" -1)
                  (("1" (skeep -1)
                    (("1" (inst 1 "a")
                      (("1" (skeep)
                        (("1" (inst -2 "abs(x)+1")
                          (("1" (expand "member" 1)
                            (("1" (expand "extend" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "analytic_rad?" -3)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "a!1=a")
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inf_sum"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "powerseries"
                                                         -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "analytic_term_unique")
                                              (("2"
                                                (inst
                                                 -1
                                                 "f"
                                                 "0"
                                                 "abs(x)+1"
                                                 "M"
                                                 "a!1"
                                                 "a")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "analytic_parts?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "x_1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "inf_sum"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "powerseries"
                                                                 -4)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "bounded_below?" 1)
          (("2" (inst 1 "-1")
            (("2" (expand "lower_bound?" 1)
              (("2" (skeep)
                (("2" (typepred "s")
                  (("2" (expand "extend" -1)
                    (("2" (split -1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(0, f)(xx)}))" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx) < s}" analytic_def nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(0, f)(xx)}))" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx) < s}" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (max_rad? const-decl "bool" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "{xx: real | abs(xx) < c}" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (analytic_term_unique formula-decl nil analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (c skolem-const-decl "{x |
   greatest_lower_bound?(x,
                         extend[real, posreal, bool, FALSE]
                             ({xx: posreal | NOT analytic_rad?(0, f)(xx)}))}"
       analytic_def nil)
    (f skolem-const-decl "(analytic?(0))" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(0, f)(xx)}))" analytic_def nil)
    (inf_rad? const-decl "bool" analytic_def nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (member const-decl "bool" sets nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (empty? const-decl "bool" sets nil)
    (s skolem-const-decl
     "({xx: posreal | NOT analytic_rad?(0, f)(xx)})" analytic_def nil))
   shostak))
 (max_rad 0
  (max_rad-1 nil 3807978385
   ("" (skeep)
    ((""
      (name "c" "glb({xx:posreal | NOT analytic_rad?(alpha,f)(xx)})")
      (("1" (inst 2 "c")
        (("1" (expand "max_rad?")
          (("1" (typepred "c")
            (("1" (split 2)
              (("1" (expand "analytic_rad?" 1 1)
                (("1" (typepred "f")
                  (("1" (expand "analytic?" -1)
                    (("1" (skeep)
                      (("1" (inst 1 "a")
                        (("1" (skeep)
                          (("1" (typepred "x")
                            (("1" (case "x=alpha")
                              (("1"
                                (expand "analytic_parts?" -3)
                                (("1"
                                  (inst -3 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "powerseries")
                                      (("1"
                                        (expand "inf_sum")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case "x>alpha")
                                      (("1"
                                        (expand "abs" -3)
                                        (("1"
                                          (expand
                                           "greatest_lower_bound?"
                                           -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "lower_bound?"
                                               -4)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "x<alpha")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "x>alpha")
                                (("1"
                                  (expand "greatest_lower_bound?" -4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "lower_bound?" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "(x-alpha+c)/2")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "extend" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "analytic_rad?"
                                                 -1)
                                                (("2"
                                                  (expand "abs" -3)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "a!1=a")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -2 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "analytic_term_unique")
                                                          (("2"
                                                            (expand
                                                             "analytic_parts?"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "inf_sum")
                                                                      (("1"
                                                                        (expand
                                                                         "powerseries")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "alpha"
                                                                     "M"
                                                                     "(x-alpha+c)/2"
                                                                     "a"
                                                                     "a!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "analytic_parts?"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "inf_sum"
                                                                             2)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_1")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "powerseries"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case "x<alpha")
                                    (("1"
                                      (expand "abs" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "greatest_lower_bound?"
                                           -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "lower_bound?"
                                               -4)
                                              (("1"
                                                (inst
                                                 -4
                                                 "(c-(x-alpha))/2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "extend" 1)
                                                  (("2"
                                                    (expand
                                                     "analytic_rad?"
                                                     -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "a!1=a")
                                                        (("1"
                                                          (inst -2 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "analytic_term_unique")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "alpha"
                                                             "M"
                                                             "(c-(x-alpha))/2"
                                                             "a"
                                                             "a!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "analytic_parts?"
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x_1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "inf_sum"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "powerseries"
                                                                             -2
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "greatest_lower_bound?" -2)
                  (("2" (flatten)
                    (("2" (inst -3 "M1")
                      (("2" (assert)
                        (("2" (expand "lower_bound?" 2 1)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (typepred "s")
                                (("2"
                                  (expand "extend" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "analytic_rad?" 1 1)
                                          (("1"
                                            (expand
                                             "analytic_parts?"
                                             -3)
                                            (("1"
                                              (inst 1 "a")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inf_sum"
                                                           -4)
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "c")
            (("2" (typepred "f")
              (("2" (expand "analytic?" -1)
                (("2" (skeep)
                  (("2" (case "c=0")
                    (("1" (expand "greatest_lower_bound?" -3)
                      (("1" (flatten)
                        (("1" (inst -4 "M")
                          (("1" (assert)
                            (("1" (expand "lower_bound?" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "s")
                                  (("1"
                                    (expand "extend")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "analytic_rad?" 1)
                                          (("1"
                                            (inst 1 "a")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "analytic_parts?"
                                                 -4)
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "inf_sum"
                                                           -5)
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "NOT c<0")
                        (("1" (assert) nil nil)
                         ("2" (expand "greatest_lower_bound?" -3)
                          (("2" (flatten)
                            (("2" (inst -4 "M")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "lower_bound?" 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "s")
                                      (("2"
                                        (expand "extend" -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "analytic_rad?"
                                               1)
                                              (("1"
                                                (inst 1 "a")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "analytic_parts?"
                                                     -4)
                                                    (("1"
                                                      (inst -4 "x")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "inf_sum")
                                                          (("1"
                                                            (expand
                                                             "powerseries"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "powerseries"
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "greatest_lower_bound?" 1)
          (("2" (split 1)
            (("1"
              (typepred "(glb(extend[real, posreal, bool, FALSE]
                                 ({xx: posreal | NOT analytic_rad?(alpha, f)(xx)})))")
              (("1" (expand "greatest_lower_bound?" -1)
                (("1" (flatten)
                  (("1" (hide -2)
                    (("1" (expand "lower_bound?")
                      (("1" (skeep)
                        (("1" (inst -1 "s")
                          (("1" (expand "extend" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (typepred "(glb(extend[real, posreal, bool, FALSE]
                                 ({xx: posreal | NOT analytic_rad?(alpha, f)(xx)})))")
              (("1" (skeep 1)
                (("1" (expand "greatest_lower_bound?" -1)
                  (("1" (flatten)
                    (("1" (inst -2 "y")
                      (("1" (assert)
                        (("1" (expand "lower_bound?")
                          (("1" (skeep)
                            (("1" (inst -2 "s")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "s")
                                  (("1"
                                    (expand "extend" -1)
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split 1)
                (("1" (expand "nonempty?" 1)
                  (("1" (expand "empty?" -1)
                    (("1" (expand "inf_rad?" 2)
                      (("1" (typepred "f")
                        (("1" (expand "analytic?" -1)
                          (("1" (skeep -1)
                            (("1" (inst 2 "a")
                              (("1"
                                (skeep)
                                (("1"
                                  (skeep 2)
                                  (("1"
                                    (inst -2 "abs(x-alpha)+1")
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (expand "extend" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "analytic_rad?"
                                                   -3)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case "a!1=a")
                                                      (("1"
                                                        (inst -4 "x")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "inf_sum"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "powerseries"
                                                                   -5)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "analytic_term_unique")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "alpha"
                                                           "abs(x-alpha)+1"
                                                           "M"
                                                           "a!1"
                                                           "a")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "analytic_parts?"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "x_1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "inf_sum"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "powerseries"
                                                                           -4)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "bounded_below?" 1)
                  (("2" (inst 1 "-1")
                    (("2" (expand "lower_bound?" 1)
                      (("2" (skeep)
                        (("2" (typepred "s")
                          (("2" (expand "extend" -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (split 1)
        (("1" (expand "nonempty?" 1)
          (("1" (expand "empty?" -1)
            (("1" (expand "inf_rad?" 1)
              (("1" (typepred "f")
                (("1" (expand "analytic?" -1)
                  (("1" (skeep -1)
                    (("1" (inst 1 "a")
                      (("1" (skeep)
                        (("1" (inst -2 "abs(x-alpha)+1")
                          (("1" (expand "member" 1)
                            (("1" (expand "extend" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "analytic_rad?" -3)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "a!1=a")
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "inf_sum"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "powerseries"
                                                         -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "analytic_term_unique")
                                              (("2"
                                                (inst
                                                 -1
                                                 "f"
                                                 "alpha"
                                                 "abs(x-alpha)+1"
                                                 "M"
                                                 "a!1"
                                                 "a")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "analytic_parts?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "x_1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "inf_sum"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "powerseries"
                                                                 -4)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "bounded_below?" 1)
          (("2" (inst 1 "-1")
            (("2" (expand "lower_bound?" 1)
              (("2" (skeep)
                (("2" (typepred "s")
                  (("2" (expand "extend" -1)
                    (("2" (split -1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(alpha, f)(xx)}))" analytic_def
     nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < s}"
     analytic_def nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(alpha, f)(xx)}))" analytic_def
     nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < s}"
     analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (max_rad? const-decl "bool" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < c}"
     analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (analytic_term_unique formula-decl nil analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c skolem-const-decl "{x |
   greatest_lower_bound?(x,
                         extend[real, posreal, bool, FALSE]
                             ({xx: posreal |
                                 NOT analytic_rad?(alpha, f)(xx)}))}"
       analytic_def nil)
    (f skolem-const-decl "(analytic?(alpha))" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (s skolem-const-decl "(extend[real, posreal, bool, FALSE]
     ({xx: posreal | NOT analytic_rad?(alpha, f)(xx)}))" analytic_def
     nil)
    (inf_rad? const-decl "bool" analytic_def nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (member const-decl "bool" sets nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (empty? const-decl "bool" sets nil)
    (s skolem-const-decl
     "({xx: posreal | NOT analytic_rad?(alpha, f)(xx)})" analytic_def
     nil))
   shostak))
 (analytic_absolute_conv 0
  (analytic_absolute_conv-1 nil 3808477893
   ("" (skeep)
    (("" (lemma "powerseries_conv_point")
      (("" (expand "analytic_parts?" -2)
        (("" (skeep)
          (("" (inst -2 "x")
            (("1" (flatten)
              (("1" (typepred "x")
                (("1" (expand "ball" -1)
                  (("1" (reveal -)
                    (("1" (lemma "ball_open")
                      (("1" (inst -1 "M" "alpha" "x")
                        (("1" (case "x>=alpha")
                          (("1" (skeep)
                            (("1" (inst -2 "x+(eps/2)")
                              (("1"
                                (assert)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (expand "ball" -1)
                                    (("1"
                                      (inst -3 "x+eps/2")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -6
                                             "a"
                                             "x-alpha"
                                             "(eps / 2) - alpha + x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (hide -3 -6)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "x-(eps/2)")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "eps")
                                        (("2"
                                          (reveal -)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "NOT x<alpha")
                              (("1" (assert) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -2 "x-(eps/2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (expand "ball" -1)
                                        (("1"
                                          (inst -3 "x-eps/2")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -6
                                                 "a"
                                                 "x-alpha"
                                                 "-(eps / 2) - alpha + x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (hide -6 -7)
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (hide -5)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "x")
              (("2" (expand "ball") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerseries_conv_point formula-decl nil power_series series)
    (ball_open formula-decl nil analytic_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eps skolem-const-decl "posreal" analytic_def nil)
    (^ const-decl "real" exponentiation nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eps skolem-const-decl "posreal" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "(ball(alpha, M))" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (pos_series_bound_TCC1 0
  (pos_series_bound_TCC1-1 nil 3808480413
   ("" (skeep)
    (("" (expand "conv_series?" 1)
      (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((conv_series? const-decl "bool" series series)) nil
   (pos_series_bound subtype "analytic_def.a"
    "(series.conv_series?)")))
 (pos_series_bound 0
  (pos_series_bound-1 nil 3808481179
   ("" (skeep)
    (("" (lemma " increasing_bounded_convergence")
      (("" (inst -1 "series(a)")
        (("1" (assert)
          (("1" (expand "inf_sum" 1 1)
            (("1" (lemma "limit_def")
              (("1" (inst -1 "limit(series(a))" "series(a)")
                (("1" (flatten)
                  (("1" (lemma "unique_limit")
                    (("1"
                      (inst -1 "limit(series(a))" "sup(series(a))"
                       "series(a)")
                      (("1" (assert)
                        (("1" (split -3)
                          (("1" (assert)
                            (("1" (replace -2 1)
                              (("1"
                                (typepred "sup(series(a))")
                                (("1"
                                  (expand "sup" 1)
                                  (("1"
                                    (typepred "lub(Im(series(a)))")
                                    (("1"
                                      (expand "least_upper_bound?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "upper_bound?" -1)
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst
                                               -1
                                               "sigma(0, i, a)")
                                              (("1"
                                                (expand "Im" 1)
                                                (("1"
                                                  (inst 1 "i")
                                                  (("1"
                                                    (expand
                                                     "series"
                                                     1
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "cauchy_bounded")
                                      (("2"
                                        (lemma " convergence_cauchy")
                                        (("2"
                                          (inst -2 "series(a)")
                                          (("2"
                                            (inst -1 "series(a)")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "bounded_above?")
                                                      (("2"
                                                        (skeep -2)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "a_1")
                                                          (("2"
                                                            (expand
                                                             "upper_bound?"
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "s")
                                                                (("2"
                                                                  (expand
                                                                   "Im"
                                                                   -1)
                                                                  (("2"
                                                                    (skeep
                                                                     -)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "increasing?" 1)
                            (("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "series" 1)
                                  (("2"
                                    (case "x=y")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (lemma " sigma_split")
                                      (("2"
                                        (inst -1 "a" "y" "0" "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma " convergence_cauchy")
                          (("2" (lemma "cauchy_bounded")
                            (("2" (inst -2 "series(a)")
                              (("2"
                                (inst -1 "series(a)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma " convergence_cauchy")
          (("2" (lemma "cauchy_bounded")
            (("2" (inst -2 "series(a)")
              (("2" (inst -1 "series(a)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (limit_def formula-decl nil convergence_sequences analysis)
    (sup const-decl "real" real_fun_supinf analysis)
    (cauchy_bounded formula-decl nil convergence_sequences analysis)
    (convergence_cauchy formula-decl nil convergence_sequences
     analysis)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (Im const-decl "setof[real]" real_fun_props reals)
    (setof type-eq-decl nil defined_types nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nonempty_image application-judgement "(nonempty?[real])"
     real_fun_supinf analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (unique_limit formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (sequence type-eq-decl nil sequences nil)
    (series const-decl "sequence[real]" series series)
    (a skolem-const-decl
     "{aa: sequence[real] | FORALL (i: nat): aa(i) >= 0}" analytic_def
     nil))
   shostak))
 (inf_sum_nn 0
  (inf_sum_nn-1 nil 3808519931
   ("" (skeep)
    (("" (lemma "pos_series_bound")
      (("" (inst?)
        (("" (inst -1 "f" "alpha" "M")
          (("" (assert)
            (("" (inst -1 "0")
              (("" (expand "sigma" -1)
                (("" (assert)
                  (("" (typepred "a")
                    (("" (inst -1 "0") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pos_series_bound formula-decl nil analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (convlf_TCC1 0
  (convlf_TCC1-1 nil 3808235383 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (convlf subtype "(number_fields.-)(analytic_def.m, analytic_def.i)"
    "nat")))
 (convlfsh_TCC1 0
  (convlfsh_TCC1-1 nil 3808236747 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (convlfsh subtype
    "(number_fields.-)((number_fields.-)(analytic_def.m, analytic_def.i), analytic_def.sh)"
    "nat")))
 (convl_convlfsh_0 0
  (convl_convlfsh_0-1 nil 3808236855
   ("" (skeep)
    (("" (expand "convlf")
      (("" (expand "convlfsh" 1) (("" (decompose-equality 1) nil nil))
        nil))
      nil))
    nil)
   ((convlf const-decl "real" analytic_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (m skolem-const-decl "nat" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (convlfsh const-decl "real" analytic_def nil))
   shostak))
 (convl_convlfsh_ 0
  (convl_convlfsh_-1 nil 3808236997
   ("" (skeep) (("" (expand "convlfsh" 1) (("" (propax) nil nil)) nil))
    nil)
   ((convlfsh const-decl "real" analytic_def nil)) shostak))
 (sig_convl_front_TCC1 0
  (sig_convl_front_TCC1-1 nil 3808238585 ("" (subtype-tcc) nil nil) nil
   nil
   (sig_convl_front subtype
    "(number_fields.-)(analytic_def.m, analytic_def.i)" "nat")))
 (sig_convl_front 0
  (sig_convl_front-1 nil 3808239078
   ("" (skeep)
    (("" (lemma "sigma_first")
      (("" (inst?)
        (("" (assert)
          (("" (replace -1)
            (("" (assert)
              (("" (expand "convlf" 1 1) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_first formula-decl nil sigma reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (convlf const-decl "real" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sig_sig_convl_TCC1 0
  (sig_sig_convl_TCC1-1 nil 3808240855 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (sig_sig_convl subtype "analytic_def.k"
    "{i: integers.int | booleans.OR(((number_fields.-)(analytic_def.x, analytic_def.alpha)) /= 0, reals.>=(i, 0))}")))
 (sig_sig_convl_TCC2 0
  (sig_sig_convl_TCC2-1 nil 3808330959 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sig_sig_convl subtype
    "(number_fields.-)(analytic_def.k, analytic_def.i)" "nat")))
 (sig_sig_convl 0
  (sig_sig_convl-1 nil 3808240889
   ("" (skeep)
    (("" (lemma "sigma_sum")
      ((""
        (case "(LAMBDA (k: nat) -> real:
                     sigma(i, k, convlf(k, a, b)) * (x - alpha) ^ k) = (LAMBDA(k:nat) -> real:  IF i<=k THEN a(i) * b(k - i) * (x-alpha)^k ELSE 0 ENDIF + sigma(i+1, k, convlf(k, a, b)) * (x-alpha) ^ k) ")
        (("1" (replace -1 1)
          (("1" (lemma "sigma_scal")
            (("1"
              (inst -1 "LAMBDA (k: nat):
                    IF i <= k THEN b(k - i) * (x - alpha) ^ k ELSE 0 ENDIF"
               "a(i)" "t" "i")
              (("1" (replace -1 1 rl)
                (("1"
                  (inst -3 "(LAMBDA (i_1: nat):
                     a(i) *
                      IF i <= i_1 THEN b(i_1 - i) * (x - alpha) ^ i_1
                      ELSE 0
                      ENDIF)" " (LAMBDA (k: nat) -> real:
                      sigma(i + 1, k, convlf(k, a, b)) * (x - alpha) ^ k)"
                   "t" "i")
                  (("1" (replace -3 1 lr)
                    (("1"
                      (case " (LAMBDA (i_1: nat):
               a(i) *
                IF i <= i_1 THEN b(i_1 - i) * (x - alpha) ^ i_1
                ELSE 0
                ENDIF
                + sigma(i + 1, i_1, convlf(i_1, a, b)) * (x - alpha) ^ i_1) = (LAMBDA (k: nat) -> real:
               IF i <= k THEN a(i) * b(k - i) * (x - alpha) ^ k
               ELSE 0
               ENDIF
                + sigma(i + 1, k, convlf(k, a, b)) * (x - alpha) ^ k)")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality 1)
                          (("1" (assert)
                            (("1" (case "i<=x!1")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (skeep 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality 1)
            (("1" (case "i<x!1")
              (("1" (lemma "sig_convl_front")
                (("1" (inst -1 "a" "b" "x!1" "i")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (case "i=x!1")
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (expand "sigma" 2)
                        (("1" (assert)
                          (("1" (expand "sigma" 2)
                            (("1" (assert)
                              (("1"
                                (expand "convlf" 2 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "sigma") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_sum formula-decl nil sigma reals)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "nat" analytic_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sig_convl_front formula-decl nil analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_scal formula-decl nil sigma reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sequence type-eq-decl nil sequences nil)
    (convlf const-decl "real" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   shostak))
 (sig_sig_convl_gen 0
  (sig_sig_convl_gen-1 nil 3808331640
   ("" (skeep)
    (("" (lemma "sigma_sum")
      ((""
        (case "(LAMBDA (k: nat) -> real:
                            sigma(j, k, convlf(k, a, b)) * (x - alpha) ^ k) = (LAMBDA(k:nat) -> real:  IF j<=k THEN a(j) * b(k - j) * (x-alpha)^k ELSE 0 ENDIF + sigma(j+1, k, convlf(k, a, b)) * (x-alpha) ^ k) ")
        (("1" (replace -1 1)
          (("1" (lemma "sigma_scal")
            (("1"
              (inst -1 "LAMBDA (k: nat):
                        IF j <= k THEN b(k - j) * (x - alpha) ^ k ELSE 0 ENDIF"
               "a(j)" "t" "i")
              (("1" (replace -1 1 rl)
                (("1"
                  (inst -3 "(LAMBDA (i: nat):
                           a(j) *
                            IF j <= i THEN b(i - j) * (x - alpha) ^ i
                            ELSE 0
                            ENDIF)" " (LAMBDA (k: nat) -> real:
                            sigma(j + 1, k, convlf(k, a, b)) * (x - alpha) ^ k)"
                   "t" "i")
                  (("1"
                    (case " (LAMBDA (i_1: nat):
                            a(i) *
                             IF i <= i_1 THEN b(i_1 - i) * (x - alpha) ^ i_1
                             ELSE 0
                             ENDIF
                             + sigma(i + 1, i_1, convlf(i_1, a, b)) * (x - alpha) ^ i_1) = (LAMBDA (k: nat) -> real:
                            IF i <= k THEN a(i) * b(k - i) * (x - alpha) ^ k
                            ELSE 0
                            ENDIF
                             + sigma(i + 1, k, convlf(k, a, b)) * (x - alpha) ^ k)")
                    (("1" (assert)
                      (("1" (replace -4 1 lr)
                        (("1"
                          (case "  (LAMBDA (k: nat) -> real:
               IF j <= k THEN a(j) * b(k - j) * (x - alpha) ^ k
               ELSE 0
               ENDIF
                + sigma(1 + j, k, convlf(k, a, b)) * (x - alpha) ^ k) =  (LAMBDA (i_1: nat):
               a(j) *
                IF j <= i_1 THEN b(i_1 - j) * (x - alpha) ^ i_1
                ELSE 0
                ENDIF
                + sigma(1 + j, i_1, convlf(i_1, a, b)) * (x - alpha) ^ i_1)")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (decompose-equality 1)
                              (("1"
                                (case "j<=x!1")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (skeep 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (decompose-equality 1)
                        (("1" (case "i<x!1")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (case "i=x!1")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skeep) (("3" (assert) nil nil)) nil))
                    nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (skeep) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality 1)
            (("1" (case "j<x!1")
              (("1" (lemma "sig_convl_front")
                (("1" (inst -1 "a" "b" "x!1" "j")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (case "j=x!1")
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (expand "sigma" 2)
                        (("1" (assert)
                          (("1" (expand "sigma" 2)
                            (("1" (assert)
                              (("1"
                                (expand "convlf" 2 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "sigma") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_sum formula-decl nil sigma reals)
    (x!1 skolem-const-decl "nat" analytic_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sig_convl_front formula-decl nil analytic_def nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_scal formula-decl nil sigma reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sequence type-eq-decl nil sequences nil)
    (convlf const-decl "real" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   shostak))
 (sig_sig_ab_init_TCC1 0
  (sig_sig_ab_init_TCC1-1 nil 3808335127 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sig_sig_ab_init subtype
    "(number_fields.-)(analytic_def.k, analytic_def.j)" "nat")))
 (sig_sig_ab_init 0
  (sig_sig_ab_init-1 nil 3808333303
   (""
    (case "(FORALL (alpha: real,
                                                  a: sequence[real] ,
                                                  b: sequence[real],
                                                  x: real, t: nat,
                                                  i: below(t+1), j: below(t+1),y:nat):
                                    	      t-j = y IMPLIES
                                            sigma(i, t,
                                                  LAMBDA (k: nat):
                                                    sigma(j, k, convlf(k, a, b)) * (x - alpha) ^ k)
                                             =
                                             sigma(j, t,
                                                   LAMBDA (j: nat):
                                                     a(j) *
                                                      sigma(i, t,
                                                            LAMBDA (k: nat):
                                                              IF j <= k THEN b(k - j) * (x - alpha) ^ k
                                                              ELSE 0
                                                              ENDIF)))")
    (("1" (skeep)
      (("1" (inst -1 "alpha" "a" "b" "x" "t" "i" "j" "t-j") nil nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "y")
          (("1" (skeep)
            (("1" (assert)
              (("1" (case "NOT j=t")
                (("1" (assert) nil nil)
                 ("2" (replace -1)
                  (("2" (expand "sigma" 1 3)
                    (("2" (expand "sigma" 1 3)
                      (("2"
                        (case " sigma(i, t,
                                                   LAMBDA (k: nat):
                                                     sigma(t, k, convlf(k, a, b)) * (x - alpha) ^ k) =  sigma(t, t,
                                                   LAMBDA (k: nat):
                                                     sigma(t, k, convlf(k, a, b)) * (x - alpha) ^ k)")
                        (("1" (replace -1 1 lr)
                          (("1" (expand "sigma" 1 1)
                            (("1" (expand "sigma" 1 1)
                              (("1"
                                (expand "convlf" 1 1)
                                (("1"
                                  (lemma "sigma_scal")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (k: nat):
                                              IF t <= k THEN b(k - t) * (x - alpha) ^ k ELSE 0 ENDIF"
                                     "a(t)"
                                     "t"
                                     "i")
                                    (("1"
                                      (replace -1 1 rl)
                                      (("1"
                                        (lemma "sigma_scal")
                                        (("1"
                                          (expand "sigma" 1 1)
                                          (("1"
                                            (expand "sigma" 1 1)
                                            (("1"
                                              (lemma
                                               "sigma_shift_fun_eq")
                                              (("1"
                                                (expand "sigma" 1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "i")
                                                    (("1"
                                                      (lemma
                                                       "sigma_restrict_eq_0")
                                                      (("1"
                                                        (hide -5)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (i: nat):
                                       a(t) *
                                        IF t <= i THEN b(i - t) * (x - alpha) ^ i ELSE 0 ENDIF"
                                                           "t-1"
                                                           "i")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "sigma" 1 3)
                            (("2" (expand "sigma" 1 3)
                              (("2"
                                (expand "sigma" 1 3)
                                (("2"
                                  (expand "sigma" 1 3)
                                  (("2"
                                    (expand "sigma" 1 1)
                                    (("2"
                                      (expand "sigma" 1 3)
                                      (("2"
                                        (expand "sigma" 1 3)
                                        (("2"
                                          (lemma "sigma_restrict_eq_0")
                                          (("2"
                                            (inst
                                             -1
                                             "LAMBDA (k: nat):
                                  sigma(t, k, convlf(k, a, b)) * (x - alpha) ^ k"
                                             "t-1"
                                             "i")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "i_1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "sigma"
                                                       1
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (assert)
                (("2" (lemma "sig_sig_convl_gen")
                  (("2" (inst -1 "alpha" "a" "b" "x" "t" "i" "j")
                    (("2" (replace -1 1)
                      (("2" (lemma "sigma_first")
                        (("2"
                          (inst -1 " LAMBDA (j: nat):
                           a(j) *
                            sigma(i, t,
                                  LAMBDA (k: nat):
                                    IF j <= k THEN b(k - j) * (x - alpha) ^ k
                                    ELSE 0
                                    ENDIF)" "t" "j")
                          (("1" (assert)
                            (("1" (replace -1 1 lr)
                              (("1"
                                (assert)
                                (("1"
                                  (case "j+1 <= t")
                                  (("1"
                                    (inst
                                     -4
                                     "alpha"
                                     "a"
                                     "b"
                                     "x"
                                     "t"
                                     "i"
                                     "j+1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (case "NOT 1+j>t")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "sigma" 2 3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (assert) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_shift_fun_eq formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (t skolem-const-decl "nat" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sig_sig_convl_gen formula-decl nil analytic_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (sigma_first formula-decl nil sigma reals)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convlf const-decl "real" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   shostak))
 (sig_a_pull_conv2_TCC1 0
  (sig_a_pull_conv2_TCC1-1 nil 3810358003 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sig_a_pull_conv2 subtype
    "(number_fields.-)(analytic_def.m, analytic_def.k)" "nat")))
 (sig_a_pull_conv2_TCC2 0
  (sig_a_pull_conv2_TCC2-1 nil 3810358003 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (sig_a_pull_conv2 subtype "analytic_def.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(analytic_def.x, analytic_def.alpha)) /= 0, reals.>=(i, 0))}")))
 (sig_a_pull_conv2 0
  (sig_a_pull_conv2-1 nil 3810358098
   ("" (lemma "sig_sig_ab_init")
    (("" (skeep)
      (("" (inst -1 "alpha" "a" "b" "x" "j" "i" "i") nil nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sig_sig_ab_init formula-decl nil analytic_def nil))
   shostak))
 (sig_a_pull_conv 0
  (sig_a_pull_conv-1 nil 3809244678
   ("" (lemma "sig_a_pull_conv2") (("" (postpone) nil nil)) nil)
   ((sig_a_pull_conv2 formula-decl nil analytic_def nil)) shostak))
 (b_flip_TCC1 0
  (b_flip_TCC1-1 nil 3808387635 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (b_flip subtype "(number_fields.-)(analytic_def.k, analytic_def.j)"
    "nat")))
 (b_flip_TCC2 0
  (b_flip_TCC3-1 nil 3808387635 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (b_flip subtype "analytic_def.j"
    "{i: integers.int | booleans.OR(((number_fields.-)(analytic_def.x, analytic_def.alpha)) /= 0, reals.>=(i, 0))}")))
 (b_flip 0
  (b_flip-1 nil 3808387708
   ("" (skeep)
    (("" (typepred "i" "j")
      (("" (lemma "sigma_split")
        ((""
          (inst -1 " LAMBDA (k: nat):
                IF j <= k THEN b(k - j) * (x - alpha) ^ k ELSE 0 ENDIF"
           "t" "i" "j-1")
          (("1" (assert)
            (("1" (replace -1 1)
              (("1" (lemma "sigma_restrict_eq_0")
                (("1"
                  (inst -1 " LAMBDA (k: nat):
                  IF j <= k THEN b(k - j) * (x - alpha) ^ k ELSE 0 ENDIF"
                   "j-1" "i")
                  (("1" (assert)
                    (("1" (replace -1 1)
                      (("1" (assert)
                        (("1" (hide -2)
                          (("1" (lemma " sigma_shift_fun_eq")
                            (("1" (lemma "sigma_shift")
                              (("1"
                                (inst
                                 -1
                                 " (LAMBDA (k: nat):
                    IF j <= k THEN b(k - j) * (x - alpha) ^ k ELSE 0 ENDIF)"
                                 "t-j"
                                 "0"
                                 "j")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "sigma_scal")
                                      (("1"
                                        (inst
                                         -1
                                         "LAMBDA (k: nat): b(k) * (x - alpha) ^ k"
                                         " (x - alpha) ^ j"
                                         "t-j"
                                         "0")
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 " sigma_shift_fun_eq")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "LAMBDA (n: nat): b(n) * (x - alpha) ^ (n + j)"
                                                   " LAMBDA (i: nat): (x - alpha) ^ j * (b(i) * (x - alpha) ^ i)"
                                                   "t-j"
                                                   "t-j"
                                                   "0"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (lemma
                                                               " expt_plus_aux")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i_1"
                                                                 "j"
                                                                 "x-alpha")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "NOT x-alpha=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (grind)
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 1)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           2)
                                                                                          (("2"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "below(1 + t)" analytic_def nil)
    (t skolem-const-decl "nat" analytic_def nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_shift formula-decl nil sigma_nat reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_scal formula-decl nil sigma reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_plus_aux formula-decl nil exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x skolem-const-decl "real" analytic_def nil)
    (sigma_shift_fun_eq formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_split formula-decl nil sigma reals))
   shostak))
 (arrange_terms_a_TCC1 0
  (arrange_terms_a_TCC1-1 nil 3808398960 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (arrange_terms_a subtype "analytic_def.j"
    "{i: integers.int | booleans.OR(((number_fields.-)(analytic_def.x, analytic_def.alpha)) /= 0, reals.>=(i, 0))}")))
 (arrange_terms_a 0
  (arrange_terms_a-1 nil 3808397613
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (expand "prod_seq" 1 1)
        (("1" (expand "powerseries" 1 1)
          (("1" (expand "powerseq" 1 1)
            (("1" (expand "sig_convl" 1 1)
              (("1" (expand "series" 1 1)
                (("1" (lemma "sig_sig_ab_init")
                  (("1" (inst -1 "alpha" "a" "b" "x" "x!1" "0" "0")
                    (("1" (replace -1 1 lr)
                      (("1" (lemma "sigma_restrict_eq")
                        (("1"
                          (inst -1 " (LAMBDA (j: nat):
                       IF j <= x!1 THEN series(powerseq(b, x - alpha))(x!1 - j) * a(j) * (x - alpha) ^ j
                       ELSE 0
                       ENDIF)" " (LAMBDA (j: nat):
                        a(j) *
                         sigma(0, x!1,
                               LAMBDA (k: nat):
                                 IF j <= k THEN b(k - j) * (x - alpha) ^ k
                                 ELSE 0
                                 ENDIF))" "x!1" "0")
                          (("1" (assert)
                            (("1" (expand "restrict" 1)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (case "x!2>x!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 3)
                                      (("2"
                                        (lemma "b_flip")
                                        (("2"
                                          (inst
                                           -1
                                           "b"
                                           "x"
                                           "alpha"
                                           "x!1"
                                           "x!2"
                                           "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "series" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "powerseq"
                                                   2
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep) (("2" (assert) nil nil)) nil)
                           ("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (prod_seq const-decl "sequence[real]" analytic_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (sig_convl const-decl "real" analytic_def nil)
    (sig_sig_ab_init formula-decl nil analytic_def nil)
    (x!1 skolem-const-decl "nat" analytic_def nil)
    (restrict const-decl "[T -> real]" sigma reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b_flip formula-decl nil analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_restrict_eq formula-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (arrange_terms_diff_TCC1 0
  (arrange_terms_diff_TCC1-1 nil 3808400017 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (arrange_terms_diff subtype
    "(number_fields.+)((number_fields.-)((number_fields.+)(analytic_def.n, analytic_def.m), analytic_def.j), 1)"
    "nat")))
 (arrange_terms_diff_TCC2 0
  (arrange_terms_diff_TCC2-1 nil 3808400017
   ("" (skeep*)
    (("" (lemma "end_series_conv")
      (("" (expand "series" -1 2)
        (("" (expand "series" 1 1)
          (("" (lemma "conv_series_shift")
            (("" (inst -1 "m-j+1" "powerseq(b,x - alpha)")
              (("1" (assert)
                (("1" (expand "series" -1 2)
                  (("1" (assert)
                    (("1" (typepred "b")
                      (("1" (expand "analytic_parts?" -1)
                        (("1" (inst -1 "x")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "powerseries" -1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "x")
                            (("2" (expand "min" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2 2 3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((end_series_conv formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (m skolem-const-decl "nat" analytic_def nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (conv_series_shift formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (arrange_terms_diff subtype
    "series.series(LAMBDA (n: naturalnumbers.nat): power_series.powerseq(analytic_def.b, (number_fields.-)(analytic_def.x, analytic_def.alpha))((number_fields.+)((number_fields.-)((number_fields.+)(n, analytic_def.m), analytic_def.j), 1)))"
    "(convergence_sequences.convergent?)")))
 (arrange_terms_diff 0
  (arrange_terms_diff-1 nil 3808400657
   ("" (skeep)
    (("" (lemma "arrange_terms_a")
      (("" (inst?)
        (("" (replace -1 1)
          (("" (decompose-equality 1)
            (("1" (lemma " limit_series_shift")
              (("1" (lemma "sigma_shift_fun_eq")
                (("1"
                  (inst -1 "( LAMBDA (j: nat):
                  IF j <= x!1
                    THEN series(powerseq(b, x - alpha))(x!1 - j) * a(j) *
                          (x - alpha) ^ j
                  ELSE 0
                  ENDIF)" "( LAMBDA (j: nat):
                   IF j <= x!1
                     THEN a(j) * f2(x) * (x - alpha) ^ j -
                           a(j) *
                            limit(series(LAMBDA
                                         (n: nat):
                                         powerseq(b, x - alpha)(1+n - j + x!1)))
                            * (x - alpha) ^ j
                   ELSE 0
                   ENDIF)" "x!1" "x!1" "0" "0")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (skeep)
                        (("1"
                          (inst -1 "powerseq(b, x - alpha)" "x!1-i+1")
                          (("1" (split -1)
                            (("1" (assert)
                              (("1"
                                (expand "series" 1 1)
                                (("1"
                                  (case
                                   "NOT sigma(0, x!1 - i, powerseq(b, x - alpha)) = limit(series(powerseq(b, x - alpha))) -  limit(series(LAMBDA (n:nat): powerseq(b, x - alpha)(1 + n - i + x!1)))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (replace -1 1 lr)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           " limit(series(powerseq(b, x - alpha))) = f2(x)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (typepred "b")
                                            (("2"
                                              (expand
                                               "analytic_parts?"
                                               -1)
                                              (("2"
                                                (inst -1 "x")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "inf_sum"
                                                     -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (hide -2 -3 2 3)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "b")
                              (("2"
                                (expand "analytic_parts?" -1)
                                (("2"
                                  (inst -1 "x")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "powerseries" -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "x")
                                    (("2"
                                      (hide -2 2 3)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "arrange_terms_diff_TCC2")
                      (("2" (skeep)
                        (("2"
                          (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b"
                           "x" "x!1" "j")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil)
                   ("4" (skeep) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (hide 2)
                (("2" (lemma "arrange_terms_diff_TCC2")
                  (("2"
                    (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x"
                     "m" "j")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skeep) (("3" (assert) nil nil)) nil)
             ("4" (skeep) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arrange_terms_a formula-decl nil analytic_def nil)
    (limit_series_shift formula-decl nil series series)
    (x!1 skolem-const-decl "nat" analytic_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (inf_sum const-decl "real" series series)
    (arrange_terms_diff_TCC2 subtype-tcc nil analytic_def nil)
    (sigma_shift_fun_eq formula-decl nil sigma reals)
    (limit const-decl "real" convergence_sequences analysis)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (arrange_terms_diff_split 0
  (arrange_terms_diff_split-1 nil 3808426020
   ("" (lemma "arrange_terms_diff")
    (("" (skeep)
      (("" (inst?)
        (("" (replace -1)
          (("" (lemma "sigma_sum")
            (("" (hide -2)
              (("" (decompose-equality 1)
                (("1" (expand "-" 1)
                  (("1" (expand "powerseq" 1)
                    (("1" (expand "series" 1 2)
                      (("1" (lemma "sigma_scal")
                        (("1"
                          (inst -1
                           " (LAMBDA (k: nat) -> real: a(k) * (x - alpha) ^ k)"
                           "f2(x)" "x!1" "0")
                          (("1" (hide -2)
                            (("1" (lemma "sigma_minus")
                              (("1"
                                (replace -2 1 rl)
                                (("1"
                                  (inst
                                   -1
                                   " LAMBDA (i: nat): f2(x) * (a(i) * (x - alpha) ^ i)"
                                   " LAMBDA (j: nat):
                    IF j <= x!1
                      THEN a(j) *
                            limit(series(LAMBDA
                                         (n: nat):
                                         b(1 + n - j + x!1)
                                         *
                                         (x - alpha) ^ (1 + n - j + x!1)))
                            * (x - alpha) ^ j
                    ELSE 0
                    ENDIF"
                                   "x!1"
                                   "0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "sigma_shift_fun_eq")
                                          (("1"
                                            (inst
                                             -1
                                             "LAMBDA (i_1: nat):
                     f2(x) * (a(i_1) * (x - alpha) ^ i_1) -
                      IF i_1 <= x!1
                        THEN a(i_1) *
                              limit(series(LAMBDA
                                           (n: nat):
                                           b(1 + n - i_1 + x!1)
                                           *
                                           (x - alpha) ^ (1 + n - i_1 + x!1)))
                              * (x - alpha) ^ i_1
                      ELSE 0
                      ENDIF"
                                             "LAMBDA (j: nat):
                    IF j <= x!1
                      THEN a(j) * f2(x) * (x - alpha) ^ j -
                            a(j) *
                             limit(series(LAMBDA
                                          (n: nat):
                                          b(1 + n - j + x!1)
                                          *
                                          (x - alpha) ^ (1 + n - j + x!1)))
                             * (x - alpha) ^ j
                    ELSE 0
                    ENDIF"
                                             "x!1"
                                             "x!1"
                                             "0"
                                             "0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "arrange_terms_diff_TCC2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "f1"
                                                       "f2"
                                                       "alpha"
                                                       "M1"
                                                       "M2"
                                                       "a"
                                                       "b"
                                                       "x"
                                                       "x!1"
                                                       "i_1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "powerseq"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (skeep 1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (skeep)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "arrange_terms_diff_TCC2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "f1"
                                             "f2"
                                             "alpha"
                                             "M1"
                                             "M2"
                                             "a"
                                             "b"
                                             "x"
                                             "x!1"
                                             "j")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "powerseq" -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "arrange_terms_diff_TCC2")
                    (("2" (skeep)
                      (("2"
                        (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b"
                         "x" "m" "j")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_minus formula-decl nil sigma reals)
    (x!1 skolem-const-decl "nat" analytic_def nil)
    (sigma_shift_fun_eq formula-decl nil sigma reals)
    (arrange_terms_diff_TCC2 subtype-tcc nil analytic_def nil)
    (sigma_scal formula-decl nil sigma reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (limit const-decl "real" convergence_sequences analysis)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_sum formula-decl nil sigma reals)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (arrange_terms_diff formula-decl nil analytic_def nil))
   nil))
 (conv_prod_first 0
  (conv_prod_first-1 nil 3808414142
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (inst 1 "f1(x)*f2(x)")
        (("" (lemma "cnv_seq_scal")
          ((""
            (inst -1 "f2(x)" "f1(x)" "LAMBDA (m: nat):
                    series(powerseq(a, x - alpha))(m)")
            (("" (assert)
              (("" (expand "*" -1)
                (("" (typepred "a")
                  (("" (expand "analytic_parts?" -1)
                    (("" (inst -1 "x")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (expand "powerseries" -1)
                            (("1" (lemma "limit_def")
                              (("1"
                                (expand "inf_sum" -3)
                                (("1"
                                  (inst
                                   -1
                                   "f1(x)"
                                   "series(powerseq(a, x - alpha))")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "series(powerseq(a, x - alpha)) = (LAMBDA (m: nat): series(powerseq(a, x - alpha))(m))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (decompose-equality 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x")
                        (("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" convergence_sequences analysis)
    (cnv_seq_scal formula-decl nil convergence_ops analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inf_sum const-decl "real" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (lim_prod_first_TCC1 0
  (lim_prod_first_TCC1-1 nil 3808412268
   ("" (lemma "conv_prod_first") (("" (propax) nil nil)) nil)
   ((conv_prod_first formula-decl nil analytic_def nil)) nil
   (lim_prod_first subtype
    "LAMBDA (m: naturalnumbers.nat): number_fields.*(series.series(power_series.powerseq(analytic_def.a, (number_fields.-)(analytic_def.x, analytic_def.alpha)))(m), analytic_def.f2(analytic_def.x))"
    "(convergence_sequences.convergent?)")))
 (lim_prod_first 0
  (lim_prod_first-1 nil 3808412383
   ("" (skeep)
    (("" (lemma "limit_def")
      ((""
        (inst -1 "f1(x)*f2(x)"
         "LAMBDA (m: nat): series(powerseq(a, x - alpha))(m) * f2(x)")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (lemma "cnv_seq_scal")
              (("1"
                (inst -1 "f2(x)" "f1(x)" "LAMBDA (m: nat):
                      series(powerseq(a, x - alpha))(m)")
                (("1" (assert)
                  (("1" (expand "*" -1)
                    (("1" (typepred "a")
                      (("1" (expand "analytic_parts?" -1)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (expand "powerseries" -1)
                                (("1"
                                  (lemma "limit_def")
                                  (("1"
                                    (expand "inf_sum" -3)
                                    (("1"
                                      (inst
                                       -1
                                       "f1(x)"
                                       "series(powerseq(a, x - alpha))")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "series(powerseq(a, x - alpha)) = (LAMBDA (m: nat): series(powerseq(a, x - alpha))(m))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "x")
                            (("2" (hide 2 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "lim_prod_first_TCC1")
          (("2" (inst?) (("2" (inst -1 "b") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((limit_def formula-decl nil convergence_sequences analysis)
    (lim_prod_first_TCC1 subtype-tcc nil analytic_def nil)
    (cnv_seq_scal formula-decl nil convergence_ops analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inf_sum const-decl "real" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f1 skolem-const-decl "[real -> real]" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (a skolem-const-decl
     "{aa: sequence[real] | analytic_parts?(alpha, f1)(M1, aa)}"
     analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (max_below_TCC1 0
  (max_below_TCC1-1 nil 3808484267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil))
   nil
   (max_below subtype "real_defs.abs(analytic_def.f(0))"
    "{c: real_types.nnreal | FORALL (i: naturalnumbers.below((number_fields.+)(analytic_def.m, 1))): reals.>=(c, real_defs.abs(analytic_def.f(i)))}")))
 (max_below_TCC2 0
  (max_below_TCC2-1 nil 3808484267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (max_below subtype "(number_fields.-)(analytic_def.m, 1)" "nat")))
 (max_below_TCC3 0
  (max_below_TCC3-1 nil 3808484267 ("" (termination-tcc) nil nil) nil
   nil
   (max_below termination
    "analytic_def.max_below((number_fields.-)(analytic_def.m, 1))"
    "nil")))
 (max_below_TCC4 0
  (max_below_TCC4-1 nil 3808484267
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(m-1)(f)")
        (("1" (assert)
          (("1" (inst -2 "i") (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (max_below subtype
    "real_defs.max(real_defs.abs(analytic_def.f(analytic_def.m)), analytic_def.max_below((number_fields.-)(analytic_def.m, 1))(analytic_def.f))"
    "{c: real_types.nnreal | FORALL (i: naturalnumbers.below((number_fields.+)(analytic_def.m, 1))): reals.>=(c, real_defs.abs(analytic_def.f(i)))}")))
 (tail_b_conv 0
  (tail_b_conv-1 nil 3808485123
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (typepred "b")
        (("" (lemma "limit_series_shift")
          (("" (inst -1 "powerseq(b,x-alpha)" "_")
            (("" (inst 1 "0")
              (("" (expand "convergence" 1 1)
                (("" (skeep)
                  ((""
                    (case "convergent?(LAMBDA(k:nat): limit(series(powerseq(b,x-alpha))) - sigma(0,k,powerseq(b,x-alpha)))")
                    (("1" (reveal +)
                      (("1" (hide 2)
                        (("1" (expand "convergent?" -1)
                          (("1" (skeep)
                            (("1" (inst 1 "l")
                              (("1"
                                (expand "convergence")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "epsilon!1")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "n+j")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "1-j+i")
                                            (("1"
                                              (inst -2 "1-j+i-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (typepred "b")
                                                      (("1"
                                                        (expand
                                                         "analytic_parts?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "powerseries"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "x")
                                                            (("2"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "convergent_diff")
                        (("2"
                          (inst -1 "LAMBDA (k: nat):
                    limit(series(powerseq(b, x - alpha)))"
                           "(LAMBDA (k: nat): sigma(0, k, powerseq(b, x - alpha)))")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (expand "-" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "convergent_const")
                                    (("2"
                                      (inst
                                       -1
                                       "limit(series(powerseq(b, x - alpha)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "const_fun" -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "b")
                                          (("2"
                                            (expand
                                             "analytic_parts?"
                                             -1)
                                            (("2"
                                              (inst -1 "x")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "powerseries"
                                                     -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x")
                                                (("2"
                                                  (hide -2 -3 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "b")
                                  (("3"
                                    (expand "analytic_parts?" -1)
                                    (("3"
                                      (inst -1 "x")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "powerseries" -1)
                                            (("1"
                                              (expand "series" -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x")
                                        (("2"
                                          (hide -2 -3 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "b")
                              (("2"
                                (expand "analytic_parts?" -1)
                                (("2"
                                  (inst -1 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "powerseries" -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "x")
                                    (("2"
                                      (hide -2 -3 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (typepred "b")
                        (("3" (expand "analytic_parts?" -1)
                          (("3" (inst -1 "x")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "powerseries" -1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "x")
                              (("2"
                                (hide -2 -3 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" convergence_sequences analysis)
    (limit_series_shift formula-decl nil series series)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (convergent_const formula-decl nil convergence_ops analysis)
    (convergent_diff formula-decl nil convergence_ops analysis)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (limit const-decl "real" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (convergence const-decl "bool" convergence_sequences analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tail_b_lim_TCC1 0
  (tail_b_lim_TCC1-1 nil 3808486507
   ("" (lemma "tail_b_conv") (("" (propax) nil nil)) nil)
   ((tail_b_conv formula-decl nil analytic_def nil)) nil
   (tail_b_lim subtype
    "LAMBDA (m: naturalnumbers.nat): IF reals.<=(analytic_def.j, m) THEN convergence_sequences.limit(series.series(LAMBDA (n: naturalnumbers.nat): power_series.powerseq(analytic_def.b, (number_fields.-)(analytic_def.x, analytic_def.alpha))((number_fields.+)((number_fields.-)((number_fields.+)(n, m), analytic_def.j), 1)))) ELSE 0 ENDIF"
    "(convergence_sequences.convergent?)")))
 (tail_b_lim 0
  (tail_b_lim-1 nil 3808488524
   ("" (skeep)
    (("" (lemma "limit_diff")
      (("" (lemma "limit_series_shift")
        (("" (inst -1 "powerseq(b,x-alpha)" "_")
          (("" (lemma "limit_def")
            ((""
              (inst -1 "0" "(LAMBDA (m: nat):
                IF j <= m
                  THEN limit(series(LAMBDA (n: nat):
                                      powerseq(b, x - alpha)(n + m - j + 1)))
                ELSE 0
                ENDIF)")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (lemma " cnv_seq_diff")
                    (("1" (hide -3)
                      (("1"
                        (inst -1
                         " limit(series(powerseq(b, x - alpha)))"
                         " limit(series(powerseq(b, x - alpha)))"
                         "Lambda(k:nat):  limit(series(powerseq(b, x - alpha)))"
                         "Lambda(k:nat):  sigma(0, k , powerseq(b, x - alpha))")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (expand "-" -1)
                              (("1"
                                (expand "convergence")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "epsilon")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "n+j")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "i-j+1")
                                            (("1"
                                              (case "j<=i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -4)
                                                  (("1"
                                                    (inst -3 "i-j")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "b")
                                                    (("2"
                                                      (expand
                                                       "analytic_parts?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "powerseries"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x")
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             2
                                                             3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "cnv_seq_const")
                              (("2"
                                (inst
                                 -1
                                 " limit(series(powerseq(b, x - alpha)))")
                                (("2"
                                  (expand "const_fun" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma " limit_def")
                              (("3"
                                (inst
                                 -1
                                 " limit(series(powerseq(b, x - alpha)))"
                                 "LAMBDA (k: nat): sigma(0, k, powerseq(b, x - alpha))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "series" 1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "b")
                                    (("2"
                                      (expand "analytic_parts?" -1)
                                      (("2"
                                        (inst -1 "x")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "powerseries" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "series" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x")
                                          (("2"
                                            (hide 2 3 4 -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "b")
                            (("2" (expand "analytic_parts?" -1)
                              (("2"
                                (inst -1 "x")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "powerseries" -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -1)
                                  (("2"
                                    (typepred "x")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -)
                  (("2" (lemma "tail_b_conv")
                    (("2" (inst?)
                      (("2" (inst -1 "f1" "a") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep)
                  (("3" (hide -)
                    (("3" (lemma "conv_series_shift")
                      (("3" (inst -1 "1+m-j" "powerseq(b,x-alpha)")
                        (("1" (assert)
                          (("1" (typepred "b")
                            (("1" (expand "analytic_parts?" -1)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "powerseries" -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "j")
                            (("2" (typepred "m")
                              (("2"
                                (reveal -)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((limit_diff formula-decl nil convergence_ops analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (series const-decl "sequence[real]" series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cnv_seq_const formula-decl nil convergence_ops analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (cnv_seq_diff formula-decl nil convergence_ops analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (tail_b_conv formula-decl nil analytic_def nil)
    (conv_series_shift formula-decl nil series series)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (m skolem-const-decl "nat" analytic_def nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (limit_series_shift formula-decl nil series series)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conv_prod_second 0
  (conv_prod_second-4 nil 3808510867
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (inst 1 "0")
        (("" (expand "convergence" 1 1)
          (("" (skeep)
            (("" (lemma "tail_b_lim")
              (("" (lemma "analytic_absolute_conv")
                (("" (inst -1 "f1" "alpha" "M1" "a")
                  (("" (assert)
                    (("" (expand "absolutely_convergent_series?" -1)
                      (("" (lemma "pos_series_bound")
                        ((""
                          (inst -1 "f1" "alpha" "M1"
                           "abs(powerseq(a, x - alpha))")
                          (("1" (assert)
                            (("1" (inst -2 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -3
                                   "f1"
                                   "f2"
                                   "alpha"
                                   "M1"
                                   "M2"
                                   "a"
                                   "b"
                                   "x"
                                   "0")
                                  (("1"
                                    (lemma "limit_def")
                                    (("1"
                                      (inst
                                       -1
                                       "0"
                                       "LAMBDA (m: nat):
                                                              IF 0 <= m
                                                                THEN limit(series(LAMBDA (n: nat):
                                                                                    powerseq(b, x - alpha)(1 + m + n - 0)))
                                                              ELSE 0
                                                              ENDIF")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (name
                                             "infs1"
                                             "(inf_sum(abs(powerseq(a, x - alpha)))+1)")
                                            (("1"
                                              (inst
                                               -2
                                               "epsilon/ (3*infs1)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "series_limit_0")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs(powerseq(a, x - alpha))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "limit_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "abs(powerseq(a, x - alpha))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "convergence"
                                                               -1)
                                                              (("1"
                                                                (name
                                                                 "maxy"
                                                                 "max_below(n_1)((LAMBDA(i:nat): IF i<=n_1 THEN (limit(series(LAMBDA (n: nat):
                                                                                                                                                                    powerseq(b, x - alpha)(1 + i + n))))  ELSE 0 ENDIF)) +1")
                                                                (("1"
                                                                  (name
                                                                   "n_1p1"
                                                                   "n_1+1")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "epsilon/(2*n_1p1 * maxy)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (lemma
                                                                             "sigma_split")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "triangle")
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "n+n_1")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sigma_split")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           " LAMBDA (j: nat):
                                                                                                                                  IF j <= i
                                                                                                                                    THEN a(j) *
                                                                                                                                          limit(series(LAMBDA
                                                                                                                                                       (n: nat):
                                                                                                                                                       powerseq
                                                                                                                                                       (b, x - alpha)(1 + i + n - j)))
                                                                                                                                          * (x - alpha) ^ j
                                                                                                                                  ELSE 0
                                                                                                                                  ENDIF"
                                                                                           "i"
                                                                                           "0"
                                                                                           "i-n_1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "triangle")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "sigma(0, i - n_1,
                                                                                                                                              LAMBDA (j: nat):
                                                                                                                                                IF j <= i
                                                                                                                                                  THEN a(j) *
                                                                                                                                                        limit(series(LAMBDA
                                                                                                                                                                     (n: nat):
                                                                                                                                                                     powerseq
                                                                                                                                                                     (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                        * (x - alpha) ^ j
                                                                                                                                                ELSE 0
                                                                                                                                                ENDIF)"
                                                                                                     "sigma(1 - n_1 + i, i,
                                                                                                                                               LAMBDA (j: nat):
                                                                                                                                                 IF j <= i
                                                                                                                                                   THEN a(j) *
                                                                                                                                                         limit(series(LAMBDA
                                                                                                                                                                      (n: nat):
                                                                                                                                                                      powerseq
                                                                                                                                                                      (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                         * (x - alpha) ^ j
                                                                                                                                                 ELSE 0
                                                                                                                                                 ENDIF)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "abs(sigma(0, i - n_1,
                                                                                                                                                                                                LAMBDA (j: nat):
                                                                                                                                                                                                  IF j <= i
                                                                                                                                                                                                    THEN a(j) *
                                                                                                                                                                                                          limit(series(LAMBDA
                                                                                                                                                                                                                       (n: nat):
                                                                                                                                                                                                                       powerseq
                                                                                                                                                                                                                       (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                          * (x - alpha) ^ j
                                                                                                                                                                                                  ELSE 0
                                                                                                                                                                                                  ENDIF))
                                                                                                                                                                                       +
                                                                                                                                                                                       abs(sigma(1 - n_1 + i, i,
                                                                                                                                                                                                 LAMBDA (j: nat):
                                                                                                                                                                                                   IF j <= i
                                                                                                                                                                                                     THEN a(j) *
                                                                                                                                                                                                           limit(series(LAMBDA
                                                                                                                                                                                                                        (n: nat):
                                                                                                                                                                                                                        powerseq
                                                                                                                                                                                                                        (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                           * (x - alpha) ^ j
                                                                                                                                                                                                   ELSE 0
                                                                                                                                                                                                   ENDIF)) < epsilon")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "abs(sigma(0, i - n_1,
                                                                                                                                                                                                             LAMBDA (j: nat):
                                                                                                                                                                                                               IF j <= i
                                                                                                                                                                                                                 THEN a(j) *
                                                                                                                                                                                                                       limit(series(LAMBDA
                                                                                                                                                                                                                                    (n: nat):
                                                                                                                                                                                                                                    powerseq
                                                                                                                                                                                                                                    (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                       * (x - alpha) ^ j
                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                               ENDIF)) < epsilon/2")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "abs(sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                            LAMBDA (j: nat):
                                                                                                                                                                                                                              IF j <= i
                                                                                                                                                                                                                                THEN a(j) *
                                                                                                                                                                                                                                      limit(series(LAMBDA
                                                                                                                                                                                                                                                   (n: nat):
                                                                                                                                                                                                                                                   powerseq
                                                                                                                                                                                                                                                   (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                                      * (x - alpha) ^ j
                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                              ENDIF)) < epsilon/2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "sigma_abs")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "LAMBDA (j: nat):
                                                                                                                                                    IF j <= i
                                                                                                                                                      THEN a(j) *
                                                                                                                                                            limit(series(LAMBDA
                                                                                                                                                                         (n: nat):
                                                                                                                                                                         powerseq
                                                                                                                                                                         (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                            * (x - alpha) ^ j
                                                                                                                                                    ELSE 0
                                                                                                                                                    ENDIF"
                                                                                                                       "i"
                                                                                                                       "1-n_1+i")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "sigma(1 - n_1 + i, i,
                                                                                                                                                                                  LAMBDA (n_1: nat):
                                                                                                                                                                                    abs(IF n_1 <= i
                                                                                                                                                                                          THEN a(n_1) *
                                                                                                                                                                                                limit(series(LAMBDA
                                                                                                                                                                                                             (n: nat):
                                                                                                                                                                                                             powerseq
                                                                                                                                                                                                             (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                                                                                * (x - alpha) ^ n_1
                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                        ENDIF)) < epsilon/2")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sigma_eq")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 " LAMBDA (n_1: nat):
                                                                                                                                                                    abs(IF n_1 <= i
                                                                                                                                                                          THEN a(n_1) *
                                                                                                                                                                                limit(series(LAMBDA
                                                                                                                                                                                             (n: nat):
                                                                                                                                                                                             powerseq
                                                                                                                                                                                             (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                                                                * (x - alpha) ^ n_1
                                                                                                                                                                        ELSE 0
                                                                                                                                                                        ENDIF)"
                                                                                                                                 " LAMBDA (n_1: nat):
                                                                                                                                                                    IF n_1 <= i
                                                                                                                                                                          THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                               abs( limit(series(LAMBDA
                                                                                                                                                                                             (n: nat):
                                                                                                                                                                                             powerseq
                                                                                                                                                                                             (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                        ELSE 0
                                                                                                                                                                        ENDIF"
                                                                                                                                 "i"
                                                                                                                                 "1-n_1+i")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       " sigma(1 - n_1 + i, i,
                                                                                                                                                                                       LAMBDA (n_1: nat):
                                                                                                                                                                                         IF n_1 <= i
                                                                                                                                                                                           THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                                                 abs(limit(series(LAMBDA
                                                                                                                                                                                                                  (n: nat):
                                                                                                                                                                                                                  powerseq
                                                                                                                                                                                                                  (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                         ENDIF) < epsilon/2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "sigma_le")
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -9
                                                                                                                                             -10
                                                                                                                                             -11
                                                                                                                                             -12)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   " LAMBDA (n_1: nat):
                                                                                                                                                                                                  IF n_1 <= i
                                                                                                                                                                                                    THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                                                          abs(limit(series(LAMBDA
                                                                                                                                                                                                                           (n: nat):
                                                                                                                                                                                                                           powerseq
                                                                                                                                                                                                                           (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                                                  ELSE 0
                                                                                                                                                                                                  ENDIF"
                                                                                                                                                   " LAMBDA (n_1: nat):
                                                                                                                                                                                                 maxy * (IF n_1 <= i
                                                                                                                                                                                                    THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                  ELSE 0
                                                                                                                                                                                                  ENDIF)"
                                                                                                                                                   "i"
                                                                                                                                                   "1-n_1+i")
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                     LAMBDA (n_1: nat):
                                                                                                                                                                                                                       maxy *
                                                                                                                                                                                                                        (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                         ENDIF)) < epsilon/2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "sigma_scal")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "LAMBDA (n_1: nat):
                                                                                                                                                                                                                                 (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                                  ELSE 0
                                                                                                                                                                                                                                  ENDIF)"
                                                                                                                                                             " maxy"
                                                                                                                                                             "i"
                                                                                                                                                             "1-n_1+i")
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -3
                                                                                                                                                                 -4)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma_le")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         " LAMBDA (n_1: nat):
                                                                                                                                                                                       (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                        ENDIF)"
                                                                                                                                                                         "LAMBDA(n_1:nat):  epsilon / (2 * (maxy * n_1p1))"
                                                                                                                                                                         "i"
                                                                                                                                                                         "1-n_1+i")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (split
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (mult-by
                                                                                                                                                                               -1
                                                                                                                                                                               "maxy")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "sigma(1 - n_1 + i, i,
                                                                                                                                                                                                             LAMBDA (n_1: nat): epsilon / (2 * (maxy * n_1p1)))
                                                                                                                                                                                                        * maxy < epsilon/2")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "sigma_const")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "i"
                                                                                                                                                                                         "1-n_1+i"
                                                                                                                                                                                         " epsilon / (2 * (maxy * n_1p1))")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "NOT  n_1 * (epsilon / (2 * (maxy * n_1p1))) * maxy =  n_1 * (epsilon / (2 * n_1p1)) ")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (reveal
                                                                                                                                                                                                   -)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (div-by
                                                                                                                                                                                                       1
                                                                                                                                                                                                       "n_1")
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (reveal
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "n!1")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (typepred
                                                                                                                                                                                       "n_1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "i")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -6
                                                                                                                                                                                           "n!1")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -6)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "abs_abs")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "abs"
                                                                                                                                                                                                 -2
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "powerseq(a, x - alpha)(n!1)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "powerseq"
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "n")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "n_1!1<=i")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (typepred
                                                                                                                                                               " max_below(n_1)
                ((LAMBDA (i: nat):
                    IF i <= n_1
                      THEN (limit(series(LAMBDA
                                         (n: nat):
                                         powerseq
                                         (b, x - alpha)(1 + i + n))))
                    ELSE 0
                    ENDIF))")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   " abs(a(n_1!1) * (x - alpha) ^ n_1!1)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -7)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -4)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -2
                                                                                                                                                                             "i-n_1!1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "abs_mult")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "a(n_1!1)"
                                                                                                                                                                                   "(x - alpha) ^ n_1!1")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (reveal
                                                                                                                                                                                           -)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             " abs((limit(series(LAMBDA (n: nat):
                           powerseq(b, x - alpha)(1 + n - n_1!1 + i))))) <= maxy ")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (mult-by
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "abs(a(n_1!1))*abs((x - alpha) ^ n_1!1)")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skeep)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         -)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "b")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "tail_series_conv")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "i!1+1"
                                                                                                                                                                               " powerseq(b, x - alpha)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "analytic_parts?"
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -2
                                                                                                                                                                                   "x")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "powerseries"
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "x")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "b")
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "tail_series_conv")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "1-n_1!1+i"
                                                                                                                                                               " powerseq(b, x - alpha)")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "analytic_parts?"
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -2
                                                                                                                                                                   "x")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "powerseries"
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -2
                                                                                                                                                                       2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "n_1!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "i")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (reveal
                                                                                                                                                                       -)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (skeep
                                                                                                                                                     1)
                                                                                                                                                    (("3"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "n_1!1<=i")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "abs_mult")
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -11
                                                                                                                                                 -12)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "a(n_1!1) * (x - alpha) ^ n_1!1"
                                                                                                                                                     "(limit(series(LAMBDA (n: nat):
                                                                                                                                       powerseq(b, x - alpha)(1 + n - n_1!1 + i))))")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (skeep)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -8
                                                                                                                                       -9
                                                                                                                                       0)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -4
                                                                                                                                         -5)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -3
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "tail_series_conv")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "i-n_1!1+1"
                                                                                                                                               " powerseq(b, x - alpha)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "b")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "analytic_parts?"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x")
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "powerseries"
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           -3
                                                                                                                                                           -4
                                                                                                                                                           -5)
                                                                                                                                                          (("2"
                                                                                                                                                            (typepred
                                                                                                                                                             "x")
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -3
                                                                                                                                                               -4)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 2
                                                                                                                                                                 3)
                                                                                                                                                                (("2"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("3"
                                                                                                                                    (skeep)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -4
                                                                                                                               -5
                                                                                                                               -6
                                                                                                                               -7
                                                                                                                               -8)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -2
                                                                                                                                 -3)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "tail_series_conv")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "i-j+1"
                                                                                                                                     " powerseq(b, x - alpha)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "b")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "analytic_parts?"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "x")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "powerseries"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               -)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x")
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   2
                                                                                                                                                   3)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (skeep)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "sigma_abs")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         " (LAMBDA (j: nat):
                                                                                          IF j <= i
                                                                                            THEN a(j) *
                                                                                                  limit(series(LAMBDA
                                                                                                               (n: nat):
                                                                                                               powerseq
                                                                                                               (b, x - alpha)(1 + n - j + i)))
                                                                                                  * (x - alpha) ^ j
                                                                                          ELSE 0
                                                                                          ENDIF)"
                                                                                                                         "i-n_1"
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           " sigma(0, i - n_1,
                                                                                                          LAMBDA (n_1: nat):
                                                                                                            abs(IF n_1 <= i
                                                                                                                  THEN a(n_1) *
                                                                                                                        limit(series(LAMBDA
                                                                                                                                     (n: nat):
                                                                                                                                     powerseq
                                                                                                                                     (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                        * (x - alpha) ^ n_1
                                                                                                                ELSE 0
                                                                                                                ENDIF)) < epsilon/2")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "sigma_le")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   " LAMBDA (n_1: nat):
                                                                                                  IF n_1 <= i
                                                                                                    THEN abs(a(n_1) *
                                                                                                              limit(series(LAMBDA
                                                                                                                           (n: nat):
                                                                                                                           powerseq
                                                                                                                           (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                              * (x - alpha) ^ n_1)
                                                                                                  ELSE abs(0)
                                                                                                  ENDIF"
                                                                                                                                   " LAMBDA (n_1: nat):
                                                                                                epsilon / (3 * infs1) *( IF n_1 <= i
                                                                                                    THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                  ELSE 0
                                                                                                  ENDIF)"
                                                                                                                                   "i-n_1"
                                                                                                                                   "0")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "sigma(0, i - n_1,
                                                                                                             LAMBDA (n_1: nat):
                                                                                                               epsilon / (3 * infs1) *
                                                                                                                (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                 ELSE 0
                                                                                                                 ENDIF)) < epsilon/2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "sigma_scal")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "LAMBDA (n_1: nat):
                                                                                                                     (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                      ELSE 0
                                                                                                                      ENDIF)"
                                                                                                                                             "epsilon / (3 * infs1)"
                                                                                                                                             "i-n_1"
                                                                                                                                             "0")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -8
                                                                                                                                                   "i-n_1")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -4)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             " LAMBDA (n_1: nat):
                                                 (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                  ELSE 0
                                                  ENDIF)"
                                                                                                                                                             "abs(powerseq(a, x - alpha))"
                                                                                                                                                             "i-n_1"
                                                                                                                                                             "0")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1
                                                                                                                                                                   -7
                                                                                                                                                                   rl)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -3
                                                                                                                                                                       -4
                                                                                                                                                                       -5)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "NOT  epsilon / (3 * infs1) *
                                           sigma(0, i - n_1,
                                                 LAMBDA (n_1: nat):
                                                   (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                    ELSE 0
                                                    ENDIF)) <=  epsilon / (3 * infs1) * infs1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (mult-by
                                                                                                                                                                             -4
                                                                                                                                                                             "  epsilon / (3 * infs1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case
                                                                                                                                                                                 "inf_sum(abs(powerseq(a, x - alpha))) * (epsilon / (3 * infs1)) <= epsilon/3")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   1
                                                                                                                                                                                   "(3*infs1)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "(inf_sum(abs(powerseq(a, x - alpha)))) = infs1-1")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             2
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 " 3 * ((epsilon / (3 * infs1)) * infs1)>0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     " 3 * ((epsilon / (3 * infs1)) * infs1 * infs1) = 3 * (epsilon / 3 * infs1)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       2)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (div-by
                                                                                                                                                                                                         1
                                                                                                                                                                                                         "3")
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (div-by
                                                                                                                                                                                                     1
                                                                                                                                                                                                     "3")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (mult-by
                                                                                                                                                                                                         1
                                                                                                                                                                                                         "(3 * infs1)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             2)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (div-by
                                                                                                                                                                                                               1
                                                                                                                                                                                                               "3")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                   "epsilon / (3 * infs1)>0")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (mult-by
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     "infs1*infs1")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (mult-by
                                                                                                                                                                                                                     1
                                                                                                                                                                                                                     "3*infs1")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                      (reveal
                                                                                                                                                                                                                       -)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -12
                                                                                                                                                                                                                         1
                                                                                                                                                                                                                         rl)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                               -)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "inf_sum_nn")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   "LAMBDA(x:real): 0"
                                                                                                                                                                                                                                   "alpha"
                                                                                                                                                                                                                                   "1"
                                                                                                                                                                                                                                   "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         2
                                                                                                                                                                                                                                         3
                                                                                                                                                                                                                                         4)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (case
                                                                                                                                                                                                           "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "inf_sum_nn")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "LAMBDA(x:real): 0"
                                                                                                                                                                                                               "alpha"
                                                                                                                                                                                                               "1"
                                                                                                                                                                                                               "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                     2
                                                                                                                                                                                                                     3
                                                                                                                                                                                                                     4
                                                                                                                                                                                                                     5)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2
                                                                                                                                                                                       3
                                                                                                                                                                                       4
                                                                                                                                                                                       5)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "inf_sum_nn")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -1
                                                                                                                                                                                             "LAMBDA(x:real): 0"
                                                                                                                                                                                             "alpha"
                                                                                                                                                                                             "1"
                                                                                                                                                                                             "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skeep)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (mult-by
                                                                                                                                                                               1
                                                                                                                                                                               "(3 * infs1)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (reveal
                                                                                                                                                                                 -)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2
                                                                                                                                                                                     3
                                                                                                                                                                                     4
                                                                                                                                                                                     5)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "inf_sum_nn")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           "LAMBDA(x:real): 0"
                                                                                                                                                                                           "alpha"
                                                                                                                                                                                           "1"
                                                                                                                                                                                           "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (skeep)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             " sigma(0, i - n_1,
            LAMBDA (n_1: nat):
              (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
               ELSE 0
               ENDIF)) <= infs1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (mult-by
                                                                                                                                                                                 -1
                                                                                                                                                                                 " epsilon / (3 * infs1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -4
                                                                                                                                                                                   -5
                                                                                                                                                                                   -6
                                                                                                                                                                                   -7
                                                                                                                                                                                   -8)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (case
                                                                                                                                                                                     " infs1 * (epsilon / (3 * infs1)) < epsilon/2")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "NOT  (3*infs1) * (epsilon / (3 * infs1)) =   epsilon ")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (div-by
                                                                                                                                                                                               1
                                                                                                                                                                                               "3")
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   1
                                                                                                                                                                                   "3*infs1")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         3
                                                                                                                                                                                         4)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "inf_sum_nn")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -1
                                                                                                                                                                                             "LAMBDA(x:real): 0"
                                                                                                                                                                                             "alpha"
                                                                                                                                                                                             "1"
                                                                                                                                                                                             "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skeep)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 2
                                                                                                                                                                                                 3)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "powerseq"
                                                                                                                                                                       1
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "abs"
                                                                                                                                                                           1
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (case
                                                                                                                                               "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 -)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   3)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "inf_sum_nn")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "LAMBDA(x:real): 0"
                                                                                                                                                       "alpha"
                                                                                                                                                       "1"
                                                                                                                                                       "abs(powerseq(a, x - alpha))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (case
                                                                                                                                         "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2
                                                                                                                                             3)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "inf_sum_nn")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "LAMBDA(x:real): 0"
                                                                                                                                                 "alpha"
                                                                                                                                                 "1"
                                                                                                                                                 "abs(powerseq(a, x - alpha))")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "n_1!1<=i")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -7
                                                                                                                                                 -8)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "abs_mult")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "a(n_1!1) * (x - alpha) ^ n_1!1"
                                                                                                                                                     "limit(series(LAMBDA (n: nat):
                                                            powerseq(b, x - alpha)(1 + n - n_1!1 + i)))")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           " abs(limit(series(LAMBDA (n: nat):
                                                            powerseq(b, x - alpha)(1 + n - n_1!1 + i)))) <= epsilon / (3 * infs1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (mult-by
                                                                                                                                                               -1
                                                                                                                                                               " abs(a(n_1!1) * (x - alpha) ^ n_1!1)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -5
                                                                                                                                                               "i-n_1!1")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "inf_sum_nn")
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "LAMBDA(x:real): 0"
                                                                                                                                             "alpha"
                                                                                                                                             "1"
                                                                                                                                             "abs(powerseq(a, x - alpha))")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               2
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (hide
                                                                                                                                     -)
                                                                                                                                    (("3"
                                                                                                                                      (skeep)
                                                                                                                                      (("3"
                                                                                                                                        (hide
                                                                                                                                         -)
                                                                                                                                        (("3"
                                                                                                                                          (lemma
                                                                                                                                           "tail_series_conv")
                                                                                                                                          (("3"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "i-n_1!1+1"
                                                                                                                                             "powerseq(b, x - alpha)")
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "b")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "analytic_parts?"
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "x")
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "powerseries"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x")
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         2
                                                                                                                                                         3)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   -)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("4"
                                                                                                                                    (assert)
                                                                                                                                    (("4"
                                                                                                                                      (skeep)
                                                                                                                                      (("4"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "tail_series_conv")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "i-j+1"
                                                                                                                                     " powerseq(b, x - alpha)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "b")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "analytic_parts?"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "powerseries"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x")
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (skeep)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("3"
                                                                                                              (skeep)
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "tail_series_conv")
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "i-j+1"
                                                                                                                   " powerseq(b, x - alpha)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "b")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "analytic_parts?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "powerseries"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "x")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("4"
                                                                                                            (skeep)
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "tail_series_conv")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "i-j+1"
                                                                                                               " powerseq(b, x - alpha)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "b")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "analytic_parts?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "x")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "powerseries")
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "x")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             2
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skeep)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "tail_series_conv")
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i-j+1"
                                                                                                     " powerseq(b, x - alpha)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "b")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "analytic_parts?"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "powerseries"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (lemma
                                                                         "tail_series_conv")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "1+i"
                                                                           " powerseq(b, x - alpha)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "b")
                                                                              (("2"
                                                                                (expand
                                                                                 "analytic_parts?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "powerseries"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x")
                                                                                    (("2"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (mult-by
                                                         1
                                                         "(3*infs1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         1
                                                         "(3*infs1)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "inf_sum_nn")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "LAMBDA(x:real): 0"
                                                       "alpha"
                                                       "1"
                                                       "abs(powerseq(a, x - alpha))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (case
                                                   "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "inf_sum_nn")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "LAMBDA(x:real): 0"
                                                         "alpha"
                                                         "1"
                                                         "abs(powerseq(a, x - alpha))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "conv_series?"
                                                 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -)
                                          (("2"
                                            (lemma "tail_series_conv")
                                            (("2"
                                              (lemma "tail_b_conv")
                                              (("2"
                                                (inst
                                                 -1
                                                 "f1"
                                                 "f2"
                                                 "alpha"
                                                 "M1"
                                                 "M2"
                                                 "a"
                                                 "b"
                                                 "x"
                                                 "0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (hide -)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (lemma
                                               "tail_series_conv")
                                              (("3"
                                                (inst
                                                 -1
                                                 "1+m"
                                                 " powerseq(b, x - alpha)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (typepred "b")
                                                    (("3"
                                                      (expand
                                                       "analytic_parts?"
                                                       -1)
                                                      (("3"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "powerseries"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x")
                                                          (("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "x")
                                    (("2"
                                      (expand "ball" 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -)
                              (("2"
                                (skeep)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (tail_b_lim formula-decl nil analytic_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (absolutely_convergent_series? const-decl "boolean" power_series
     series)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl
     "{aa: sequence[real] | analytic_parts?(alpha, f1)(M1, aa)}"
     analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (f1 skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (abs const-decl "sequence[real]" series series)
    (ball const-decl "bool" analytic_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (series const-decl "sequence[real]" series series)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (limit const-decl "real" convergence_sequences analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (infs1 skolem-const-decl "real" analytic_def nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (epsilon skolem-const-decl "posreal" analytic_def nil)
    (series_limit_0 formula-decl nil series series)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (inf_sum_nn formula-decl nil analytic_def nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (sigma_le formula-decl nil sigma reals)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (n_1 skolem-const-decl "nat" analytic_def nil)
    (abs_mult formula-decl nil real_props nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (tail_series_conv formula-decl nil series series)
    (sigma_scal formula-decl nil sigma reals)
    (abs_abs formula-decl nil real_props nil)
    (subrange type-eq-decl nil integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sigma_const formula-decl nil sigma reals)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (sigma_abs formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_split formula-decl nil sigma reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max_below def-decl
     "{c: nnreal | FORALL (i: below(m + 1)): c >= abs(f(i))}"
     analytic_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (inf_sum const-decl "real" series series)
    (conv_series? const-decl "bool" series series)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (tail_b_conv formula-decl nil analytic_def nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (pos_series_bound formula-decl nil analytic_def nil)
    (analytic_absolute_conv formula-decl nil analytic_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (conv_prod_second-3 nil 3808509573
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (inst 1 "0")
        (("" (expand "convergence" 1 1)
          (("" (skeep)
            (("" (lemma "tail_b_lim")
              (("" (lemma "analytic_absolute_conv")
                (("" (inst -1 "f1" "alpha" "M1" "a")
                  (("" (assert)
                    (("" (expand "absolutely_convergent_series?" -1)
                      (("" (lemma "pos_series_bound")
                        ((""
                          (inst -1 "f1" "alpha" "M1"
                           "abs(series(powerseq(a, x - alpha)))")
                          (("1" (assert)
                            (("1" (inst -2 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -3
                                   "f1"
                                   "f2"
                                   "alpha"
                                   "M1"
                                   "M2"
                                   "a"
                                   "b"
                                   "x"
                                   "0")
                                  (("1"
                                    (lemma "limit_def")
                                    (("1"
                                      (inst
                                       -1
                                       "0"
                                       "LAMBDA (m: nat):
                                            IF 0 <= m
                                              THEN limit(series(LAMBDA (n: nat):
                                                                  powerseq(b, x - alpha)(1 + m + n - 0)))
                                            ELSE 0
                                            ENDIF")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (case
                                             "inf_sum(abs(powerseq(a, x - alpha)))>0")
                                            (("1"
                                              (inst
                                               -2
                                               "epsilon/ (2*inf_sum(abs(powerseq(a, x - alpha))))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "series_limit_0")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs(powerseq(a, x - alpha))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "limit_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "abs(powerseq(a, x - alpha))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "convergence"
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "max_below(n_1)((LAMBDA(i:nat): IF i<=n_1 THEN (limit(series(LAMBDA (n: nat):
                                                                                                                 powerseq(b, x - alpha)(1 + i + n))))  ELSE 0 ENDIF)) > 0 ")
                                                                (("1"
                                                                  (name
                                                                   "n_1p1"
                                                                   "n_1+1")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "epsilon/(2*n_1p1 *  max_below(n_1)
                                                                                     ((LAMBDA (i: nat):
                                                                                         IF i <= n_1
                                                                                           THEN (limit(series(LAMBDA
                                                                                                              (n: nat):
                                                                                                              powerseq
                                                                                                              (b, x - alpha)(1 + i + n))))
                                                                                         ELSE 0
                                                                                         ENDIF)))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "n_1!1+n_1")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   " LAMBDA (j: nat):
                                                                                  IF j <= i
                                                                                    THEN a(j) *
                                                                                          limit(series(LAMBDA
                                                                                                       (n: nat):
                                                                                                       powerseq
                                                                                                       (b, x - alpha)(1 + i + n - j)))
                                                                                          * (x - alpha) ^ j
                                                                                  ELSE 0
                                                                                  ENDIF"
                                                                                   "i"
                                                                                   "0"
                                                                                   "i-n_1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "triangle")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "sigma(0, i - n_1,
                                                                                        LAMBDA (j: nat):
                                                                                          IF j <= i
                                                                                            THEN a(j) *
                                                                                                  limit(series(LAMBDA
                                                                                                               (n: nat):
                                                                                                               powerseq
                                                                                                               (b, x - alpha)(1 + n - j + i)))
                                                                                                  * (x - alpha) ^ j
                                                                                          ELSE 0
                                                                                          ENDIF)"
                                                                                             "sigma(1 - n_1 + i, i,
                                                                                         LAMBDA (j: nat):
                                                                                           IF j <= i
                                                                                             THEN a(j) *
                                                                                                   limit(series(LAMBDA
                                                                                                                (n: nat):
                                                                                                                powerseq
                                                                                                                (b, x - alpha)(1 + n - j + i)))
                                                                                                   * (x - alpha) ^ j
                                                                                           ELSE 0
                                                                                           ENDIF)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "abs(sigma(0, i - n_1,
                                                                                                                     LAMBDA (j: nat):
                                                                                                                       IF j <= i
                                                                                                                         THEN a(j) *
                                                                                                                               limit(series(LAMBDA
                                                                                                                                            (n: nat):
                                                                                                                                            powerseq
                                                                                                                                            (b, x - alpha)(1 + n - j + i)))
                                                                                                                               * (x - alpha) ^ j
                                                                                                                       ELSE 0
                                                                                                                       ENDIF))
                                                                                                            +
                                                                                                            abs(sigma(1 - n_1 + i, i,
                                                                                                                      LAMBDA (j: nat):
                                                                                                                        IF j <= i
                                                                                                                          THEN a(j) *
                                                                                                                                limit(series(LAMBDA
                                                                                                                                             (n: nat):
                                                                                                                                             powerseq
                                                                                                                                             (b, x - alpha)(1 + n - j + i)))
                                                                                                                                * (x - alpha) ^ j
                                                                                                                        ELSE 0
                                                                                                                        ENDIF)) < epsilon")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "abs(sigma(0, i - n_1,
                                                                                                                            LAMBDA (j: nat):
                                                                                                                              IF j <= i
                                                                                                                                THEN a(j) *
                                                                                                                                      limit(series(LAMBDA
                                                                                                                                                   (n: nat):
                                                                                                                                                   powerseq
                                                                                                                                                   (b, x - alpha)(1 + n - j + i)))
                                                                                                                                      * (x - alpha) ^ j
                                                                                                                              ELSE 0
                                                                                                                              ENDIF)) < epsilon/2")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "abs(sigma(1 - n_1 + i, i,
                                                                                                                                     LAMBDA (j: nat):
                                                                                                                                       IF j <= i
                                                                                                                                         THEN a(j) *
                                                                                                                                               limit(series(LAMBDA
                                                                                                                                                            (n: nat):
                                                                                                                                                            powerseq
                                                                                                                                                            (b, x - alpha)(1 + n - j + i)))
                                                                                                                                               * (x - alpha) ^ j
                                                                                                                                       ELSE 0
                                                                                                                                       ENDIF)) < epsilon/2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sigma_abs")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "LAMBDA (j: nat):
                                                                      IF j <= i
                                                                        THEN a(j) *
                                                                              limit(series(LAMBDA
                                                                                           (n: nat):
                                                                                           powerseq
                                                                                           (b, x - alpha)(1 + n - j + i)))
                                                                              * (x - alpha) ^ j
                                                                      ELSE 0
                                                                      ENDIF"
                                                                                                               "i"
                                                                                                               "1-n_1+i")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "sigma(1 - n_1 + i, i,
                                                                               LAMBDA (n_1: nat):
                                                                                 abs(IF n_1 <= i
                                                                                       THEN a(n_1) *
                                                                                             limit(series(LAMBDA
                                                                                                          (n: nat):
                                                                                                          powerseq
                                                                                                          (b, x - alpha)(1 + n - n_1 + i)))
                                                                                             * (x - alpha) ^ n_1
                                                                                     ELSE 0
                                                                                     ENDIF)) < epsilon/2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "sigma_eq")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         " LAMBDA (n_1: nat):
                                                                          abs(IF n_1 <= i
                                                                                THEN a(n_1) *
                                                                                      limit(series(LAMBDA
                                                                                                   (n: nat):
                                                                                                   powerseq
                                                                                                   (b, x - alpha)(1 + n - n_1 + i)))
                                                                                      * (x - alpha) ^ n_1
                                                                              ELSE 0
                                                                              ENDIF)"
                                                                                                                         " LAMBDA (n_1: nat):
                                                                          IF n_1 <= i
                                                                                THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                     abs( limit(series(LAMBDA
                                                                                                   (n: nat):
                                                                                                   powerseq
                                                                                                   (b, x - alpha)(1 + n - n_1 + i))))
                                                                              ELSE 0
                                                                              ENDIF"
                                                                                                                         "i"
                                                                                                                         "1-n_1+i")
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               " sigma(1 - n_1 + i, i,
                                                                                 LAMBDA (n_1: nat):
                                                                                   IF n_1 <= i
                                                                                     THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                           abs(limit(series(LAMBDA
                                                                                                            (n: nat):
                                                                                                            powerseq
                                                                                                            (b, x - alpha)(1 + n - n_1 + i))))
                                                                                   ELSE 0
                                                                                   ENDIF) < epsilon/2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "sigma_le")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -9
                                                                                                                                     -10
                                                                                                                                     -11
                                                                                                                                     -12)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (name
                                                                                                                                           "maxy"
                                                                                                                                           "   max_below(n_1)
                                                                                              ((LAMBDA (i: nat):
                                                                                                  IF i <= n_1
                                                                                                    THEN (limit(series
                                                                                                                (LAMBDA
                                                                                                                 (n: nat):
                                                                                                                 powerseq
                                                                                                                 (b, x - alpha)(1 + i + n))))
                                                                                                  ELSE 0
                                                                                                  ENDIF))")
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               " LAMBDA (n_1: nat):
                                                                                      IF n_1 <= i
                                                                                        THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                              abs(limit(series(LAMBDA
                                                                                                               (n: nat):
                                                                                                               powerseq
                                                                                                               (b, x - alpha)(1 + n - n_1 + i))))
                                                                                      ELSE 0
                                                                                      ENDIF"
                                                                                                                                               " LAMBDA (n_1: nat):
                                                                                     maxy * (IF n_1 <= i
                                                                                        THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                      ELSE 0
                                                                                      ENDIF)"
                                                                                                                                               "i"
                                                                                                                                               "1-n_1+i")
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "sigma(1 - n_1 + i, i,
                                                                                             LAMBDA (n_1: nat):
                                                                                               maxy *
                                                                                                (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                 ELSE 0
                                                                                                 ENDIF)) < epsilon/2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_scal")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (n_1: nat):
                                                                                                   (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                    ELSE 0
                                                                                                    ENDIF)"
                                                                                                                                                         " maxy"
                                                                                                                                                         "i"
                                                                                                                                                         "1-n_1+i")
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -3
                                                                                                                                                             -4)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_le")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     " LAMBDA (n_1: nat):
                                                         (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                          ELSE 0
                                                          ENDIF)"
                                                                                                                                                                     "LAMBDA(n_1:nat):  epsilon / (2 * (maxy * n_1p1))"
                                                                                                                                                                     "i"
                                                                                                                                                                     "1-n_1+i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (mult-by
                                                                                                                                                                           -1
                                                                                                                                                                           "maxy")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "sigma(1 - n_1 + i, i,
                                                             LAMBDA (n_1: nat): epsilon / (2 * (maxy * n_1p1)))
                                                        * maxy < epsilon/2")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "sigma_const")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "i"
                                                                                                                                                                                     "1-n_1+i"
                                                                                                                                                                                     " epsilon / (2 * (maxy * n_1p1))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "NOT  n_1 * (epsilon / (2 * (maxy * n_1p1))) * maxy =  n_1 * (epsilon / (2 * n_1p1)) ")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (reveal
                                                                                                                                                                                               -)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (div-by
                                                                                                                                                                                           -1
                                                                                                                                                                                           "maxy")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (mult-by
                                                                                                                                                                                                 1
                                                                                                                                                                                                 "maxy")
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (case
                                                                                                                                                                                 "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (div-by
                                                                                                                                                                                       -2
                                                                                                                                                                                       "maxy")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   1
                                                                                                                                                                                   "maxy")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "n")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "n_1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "i")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -6
                                                                                                                                                                                       "n")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split
                                                                                                                                                                                         -6)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "abs_abs")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "abs"
                                                                                                                                                                                             -2
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "powerseq(a, x - alpha)(n)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 -2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "powerseq"
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "n")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (div-by
                                                                                                                                                                           -1
                                                                                                                                                                           "maxy")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT (2 * (maxy * n_1p1)) / maxy   = 2*n_1p1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (mult-by
                                                                                                                                                                                 1
                                                                                                                                                                                 "maxy")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "n_1!2<=i")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (typepred
                                                                                                                                                           "maxy")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "i-n_1!2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (mult-by
                                                                                                                                                                 -1
                                                                                                                                                                 " abs(a(n_1!2) * (x - alpha) ^ n_1!2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "b")
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "tail_series_conv")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "i-n_1!2+1"
                                                                                                                                                           " powerseq(b, x - alpha)")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "analytic_parts?"
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -2
                                                                                                                                                               "x")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "powerseries"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "x")
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -2
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "n_1!2")
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "i")
                                                                                                                                                                (("2"
                                                                                                                                                                  (reveal
                                                                                                                                                                   -)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (skeep
                                                                                                                                                 1)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "n_1!2<=i")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "abs_mult")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -6
                                                                                                                                         -7
                                                                                                                                         -8
                                                                                                                                         -9
                                                                                                                                         -10
                                                                                                                                         -11
                                                                                                                                         -12)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "a(n_1!2) * (x - alpha) ^ n_1!2"
                                                                                                                                           "(limit(series(LAMBDA (n: nat):
                           powerseq(b, x - alpha)(1 + n - n_1!2 + i))))")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -8
                                                                                                                               -9
                                                                                                                               0)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -4
                                                                                                                                 -5)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "tail_series_conv")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "i-n_1!2+1"
                                                                                                                                       " powerseq(b, x - alpha)")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "b")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "analytic_parts?"
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "powerseries"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -3
                                                                                                                                                   -4
                                                                                                                                                   -5)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x")
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -3
                                                                                                                                                       -4)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         2
                                                                                                                                                         3)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (skeep)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -4
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -7
                                                                                                                       -8)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "tail_series_conv")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "i-j+1"
                                                                                                                             " powerseq(b, x - alpha)")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "b")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "analytic_parts?"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "x")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "powerseries"
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       -)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x")
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "sigma_abs")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 " (LAMBDA (j: nat):
                  IF j <= i
                    THEN a(j) *
                          limit(series(LAMBDA
                                       (n: nat):
                                       powerseq
                                       (b, x - alpha)(1 + n - j + i)))
                          * (x - alpha) ^ j
                  ELSE 0
                  ENDIF)"
                                                                                                                 "i-n_1"
                                                                                                                 "0")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   " sigma(0, i - n_1,
             LAMBDA (n_1: nat):
               abs(IF n_1 <= i
                     THEN a(n_1) *
                           limit(series(LAMBDA
                                        (n: nat):
                                        powerseq
                                        (b, x - alpha)(1 + n - n_1 + i)))
                           * (x - alpha) ^ n_1
                   ELSE 0
                   ENDIF)) < epsilon/2")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "sigma_le")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           " LAMBDA (n_1: nat):
              IF n_1 <= i
                THEN abs(a(n_1) *
                          limit(series(LAMBDA
                                       (n: nat):
                                       powerseq
                                       (b, x - alpha)(1 + n - n_1 + i)))
                          * (x - alpha) ^ n_1)
              ELSE abs(0)
              ENDIF"
                                                                                                                           " LAMBDA (n_1: nat):
            epsilon / (2 * inf_sum(abs(powerseq(a, x - alpha)))) *( IF n_1 <= i
                THEN abs(a(n_1) * (x - alpha) ^ n_1)  
              ELSE 0
              ENDIF)"
                                                                                                                           "i-n_1"
                                                                                                                           "0")
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "sigma(0, i - n_1,
             LAMBDA (n_1: nat):
               epsilon / (2 * inf_sum(abs(powerseq(a, x - alpha)))) *
                (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                 ELSE 0
                 ENDIF)) < epsilon/2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "sigma_scal")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "LAMBDA (n_1: nat):
               (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                ELSE 0
                ENDIF)"
                                                                                                                                     "epsilon / (2 * inf_sum(abs(powerseq(a, x - alpha))))"
                                                                                                                                     "i-n_1"
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "i-n_1")
                                                                                                                                            (("1"
                                                                                                                                              (postpone)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (postpone)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (postpone)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (postpone)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (postpone)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (postpone)
                                                nil
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (conv_prod_second-2 nil 3808492003
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (inst 1 "0")
        (("" (expand "convergence" 1 1)
          (("" (skeep)
            (("" (lemma "tail_b_lim")
              (("" (lemma "analytic_absolute_conv")
                (("" (inst -1 "f1" "alpha" "M1" "a")
                  (("" (assert)
                    (("" (expand "absolutely_convergent_series?" -1)
                      (("" (lemma "pos_series_bound")
                        ((""
                          (inst -1 "f1" "alpha" "M1"
                           "abs(series(powerseq(a, x - alpha)))")
                          (("1" (assert)
                            (("1" (inst -2 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -3
                                   "f1"
                                   "f2"
                                   "alpha"
                                   "M1"
                                   "M2"
                                   "a"
                                   "b"
                                   "x"
                                   "0")
                                  (("1"
                                    (lemma "limit_def")
                                    (("1"
                                      (inst
                                       -1
                                       "0"
                                       "LAMBDA (m: nat):
                                      IF 0 <= m
                                        THEN limit(series(LAMBDA (n: nat):
                                                            powerseq(b, x - alpha)(1 + m + n - 0)))
                                      ELSE 0
                                      ENDIF")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (case
                                             "inf_sum(abs(powerseq(a, x - alpha)))>0")
                                            (("1"
                                              (inst
                                               -2
                                               "epsilon/ (2*inf_sum(abs(powerseq(a, x - alpha))))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "series_limit_0")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs(powerseq(a, x - alpha))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "limit_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "abs(powerseq(a, x - alpha))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "convergence"
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "max_below(n_1)((LAMBDA(i:nat): IF i<=n_1 THEN (limit(series(LAMBDA (n: nat):
                                                                                                powerseq(b, x - alpha)(1 + i + n))))  ELSE 0 ENDIF)) > 0 ")
                                                                (("1"
                                                                  (name
                                                                   "n_1p1"
                                                                   "n_1+1")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "epsilon/(2*n_1p1 *  max_below(n_1)
                                                                       ((LAMBDA (i: nat):
                                                                           IF i <= n_1
                                                                             THEN (limit(series(LAMBDA
                                                                                                (n: nat):
                                                                                                powerseq
                                                                                                (b, x - alpha)(1 + i + n))))
                                                                           ELSE 0
                                                                           ENDIF)))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "max(n_1!1,n_1)")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   " LAMBDA (j: nat):
                                                                  IF j <= i
                                                                    THEN a(j) *
                                                                          limit(series(LAMBDA
                                                                                       (n: nat):
                                                                                       powerseq
                                                                                       (b, x - alpha)(1 + i + n - j)))
                                                                          * (x - alpha) ^ j
                                                                  ELSE 0
                                                                  ENDIF"
                                                                                   "i"
                                                                                   "0"
                                                                                   "i-n_1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "triangle")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "sigma(0, i - n_1,
                                                                      LAMBDA (j: nat):
                                                                        IF j <= i
                                                                          THEN a(j) *
                                                                                limit(series(LAMBDA
                                                                                             (n: nat):
                                                                                             powerseq
                                                                                             (b, x - alpha)(1 + n - j + i)))
                                                                                * (x - alpha) ^ j
                                                                        ELSE 0
                                                                        ENDIF)"
                                                                                             "sigma(1 - n_1 + i, i,
                                                                       LAMBDA (j: nat):
                                                                         IF j <= i
                                                                           THEN a(j) *
                                                                                 limit(series(LAMBDA
                                                                                              (n: nat):
                                                                                              powerseq
                                                                                              (b, x - alpha)(1 + n - j + i)))
                                                                                 * (x - alpha) ^ j
                                                                         ELSE 0
                                                                         ENDIF)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "abs(sigma(0, i - n_1,
                                                                                            LAMBDA (j: nat):
                                                                                              IF j <= i
                                                                                                THEN a(j) *
                                                                                                      limit(series(LAMBDA
                                                                                                                   (n: nat):
                                                                                                                   powerseq
                                                                                                                   (b, x - alpha)(1 + n - j + i)))
                                                                                                      * (x - alpha) ^ j
                                                                                              ELSE 0
                                                                                              ENDIF))
                                                                                   +
                                                                                   abs(sigma(1 - n_1 + i, i,
                                                                                             LAMBDA (j: nat):
                                                                                               IF j <= i
                                                                                                 THEN a(j) *
                                                                                                       limit(series(LAMBDA
                                                                                                                    (n: nat):
                                                                                                                    powerseq
                                                                                                                    (b, x - alpha)(1 + n - j + i)))
                                                                                                       * (x - alpha) ^ j
                                                                                               ELSE 0
                                                                                               ENDIF)) < epsilon")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "abs(sigma(0, i - n_1,
                                                                                                 LAMBDA (j: nat):
                                                                                                   IF j <= i
                                                                                                     THEN a(j) *
                                                                                                           limit(series(LAMBDA
                                                                                                                        (n: nat):
                                                                                                                        powerseq
                                                                                                                        (b, x - alpha)(1 + n - j + i)))
                                                                                                           * (x - alpha) ^ j
                                                                                                   ELSE 0
                                                                                                   ENDIF)) < epsilon/2")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "abs(sigma(1 - n_1 + i, i,
                                                                                                        LAMBDA (j: nat):
                                                                                                          IF j <= i
                                                                                                            THEN a(j) *
                                                                                                                  limit(series(LAMBDA
                                                                                                                               (n: nat):
                                                                                                                               powerseq
                                                                                                                               (b, x - alpha)(1 + n - j + i)))
                                                                                                                  * (x - alpha) ^ j
                                                                                                          ELSE 0
                                                                                                          ENDIF)) < epsilon/2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sigma_abs")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "LAMBDA (j: nat):
                                            IF j <= i
                                              THEN a(j) *
                                                    limit(series(LAMBDA
                                                                 (n: nat):
                                                                 powerseq
                                                                 (b, x - alpha)(1 + n - j + i)))
                                                    * (x - alpha) ^ j
                                            ELSE 0
                                            ENDIF"
                                                                                                               "i"
                                                                                                               "1-n_1+i")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "sigma(1 - n_1 + i, i,
                                              LAMBDA (n_1: nat):
                                                abs(IF n_1 <= i
                                                      THEN a(n_1) *
                                                            limit(series(LAMBDA
                                                                         (n: nat):
                                                                         powerseq
                                                                         (b, x - alpha)(1 + n - n_1 + i)))
                                                            * (x - alpha) ^ n_1
                                                    ELSE 0
                                                    ENDIF)) < epsilon/2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "sigma_eq")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         " LAMBDA (n_1: nat):
                                            abs(IF n_1 <= i
                                                  THEN a(n_1) *
                                                        limit(series(LAMBDA
                                                                     (n: nat):
                                                                     powerseq
                                                                     (b, x - alpha)(1 + n - n_1 + i)))
                                                        * (x - alpha) ^ n_1
                                                ELSE 0
                                                ENDIF)"
                                                                                                                         " LAMBDA (n_1: nat):
                                            IF n_1 <= i
                                                  THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                       abs( limit(series(LAMBDA
                                                                     (n: nat):
                                                                     powerseq
                                                                     (b, x - alpha)(1 + n - n_1 + i))))

                                                ELSE 0
                                                ENDIF"
                                                                                                                         "i"
                                                                                                                         "1-n_1+i")
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               " sigma(1 - n_1 + i, i,
                                               LAMBDA (n_1: nat):
                                                 IF n_1 <= i
                                                   THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                         abs(limit(series(LAMBDA
                                                                          (n: nat):
                                                                          powerseq
                                                                          (b, x - alpha)(1 + n - n_1 + i))))
                                                 ELSE 0
                                                 ENDIF) < epsilon/2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "sigma_le")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -9
                                                                                                                                     -10
                                                                                                                                     -11
                                                                                                                                     -12)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (name
                                                                                                                                           "maxy"
                                                                                                                                           "   max_below(n_1)
                                                          ((LAMBDA (i: nat):
                                                              IF i <= n_1
                                                                THEN (limit(series
                                                                            (LAMBDA
                                                                             (n: nat):
                                                                             powerseq
                                                                             (b, x - alpha)(1 + i + n))))
                                                              ELSE 0
                                                              ENDIF))")
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               " LAMBDA (n_1: nat):
                                                  IF n_1 <= i
                                                    THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                          abs(limit(series(LAMBDA
                                                                           (n: nat):
                                                                           powerseq
                                                                           (b, x - alpha)(1 + n - n_1 + i))))
                                                  ELSE 0
                                                  ENDIF"
                                                                                                                                               " LAMBDA (n_1: nat):
                                                 maxy * (IF n_1 <= i
                                                    THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                  ELSE 0
                                                  ENDIF)"
                                                                                                                                               "i"
                                                                                                                                               "1-n_1+i")
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "sigma(1 - n_1 + i, i,
                                                     LAMBDA (n_1: nat):
                                                       maxy *
                                                        (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                         ELSE 0
                                                         ENDIF)) < epsilon/2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_scal")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (n_1: nat):

                                                         (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                          ELSE 0
                                                          ENDIF)"
                                                                                                                                                         " maxy"
                                                                                                                                                         "i"
                                                                                                                                                         "1-n_1+i")
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -3
                                                                                                                                                             -4)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_le")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     " LAMBDA (n_1: nat):
               (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                ELSE 0
                ENDIF)"
                                                                                                                                                                     "LAMBDA(n_1:nat):  epsilon / (2 * (maxy * n_1p1))"
                                                                                                                                                                     "i"
                                                                                                                                                                     "1-n_1+i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (mult-by
                                                                                                                                                                           -1
                                                                                                                                                                           "maxy")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "sigma(1 - n_1 + i, i,
             LAMBDA (n_1: nat): epsilon / (2 * (maxy * n_1p1)))
        * maxy < epsilon/2")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "sigma_const")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "i"
                                                                                                                                                                                     "1-n_1+i"
                                                                                                                                                                                     " epsilon / (2 * (maxy * n_1p1))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "NOT  n_1 * (epsilon / (2 * (maxy * n_1p1))) * maxy =  n_1 * (epsilon / (2 * n_1p1)) ")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (reveal
                                                                                                                                                                                               -)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (div-by
                                                                                                                                                                                           -1
                                                                                                                                                                                           "maxy")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (mult-by
                                                                                                                                                                                                 1
                                                                                                                                                                                                 "maxy")
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (case
                                                                                                                                                                                 "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (div-by
                                                                                                                                                                                       -2
                                                                                                                                                                                       "maxy")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT (2 * (maxy * n_1p1)) = 0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "NOT (2 * (maxy * n_1p1)) / maxy  = 2*n_1p1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   1
                                                                                                                                                                                   "maxy")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "n")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "n_1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "i")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -6
                                                                                                                                                                                       "n")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split
                                                                                                                                                                                         -6)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "abs_abs")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "abs"
                                                                                                                                                                                             -2
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "powerseq(a, x - alpha)(n)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 -2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "powerseq"
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "n")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               -8
                                                                                                                                                                                               -9)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (postpone)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (postpone)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (postpone)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (postpone)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (postpone)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (postpone)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (postpone)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (postpone)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (postpone)
                                                nil
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (conv_prod_second-1 nil 3808477076
   ("" (skeep)
    (("" (expand "convergent?" 1)
      (("" (inst 1 "0")
        (("" (expand "convergence" 1 1)
          (("" (skeep)
            (("" (lemma "tail_b_lim")
              (("" (lemma "analytic_absolute_conv")
                (("" (inst -1 "f1" "alpha" "M1" "a")
                  (("" (assert)
                    (("" (expand "absolutely_convergent_series?" -1)
                      (("" (lemma "pos_series_bound")
                        ((""
                          (inst -1 "f1" "alpha" "M1"
                           "abs(powerseq(a, x - alpha))")
                          (("1" (assert)
                            (("1" (inst -2 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -3
                                   "f1"
                                   "f2"
                                   "alpha"
                                   "M1"
                                   "M2"
                                   "a"
                                   "b"
                                   "x"
                                   "0")
                                  (("1"
                                    (lemma "limit_def")
                                    (("1"
                                      (inst
                                       -1
                                       "0"
                                       "LAMBDA (m: nat):
              IF 0 <= m
                THEN limit(series(LAMBDA (n: nat):
                                    powerseq(b, x - alpha)(1 + m + n - 0)))
              ELSE 0
              ENDIF")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (case
                                             "inf_sum(abs(powerseq(a, x - alpha)))>0")
                                            (("1"
                                              (inst
                                               -2
                                               "epsilon/ inf_sum(abs(powerseq(a, x - alpha)))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "series_limit_0")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs(powerseq(a, x - alpha))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "limit_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "abs(powerseq(a, x - alpha))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "convergence"
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "max_below(n_1)((LAMBDA(i:nat): IF i<=n_1 THEN (limit(series(LAMBDA (n: nat):
                            powerseq(b, x - alpha)(1 + i + n))))  ELSE 0 ENDIF)) > 0 ")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "epsilon/(2* max_below(n_1)
               ((LAMBDA (i: nat):
                   IF i <= n_1
                     THEN (limit(series(LAMBDA
                                        (n: nat):
                                        powerseq
                                        (b, x - alpha)(1 + i + n))))
                   ELSE 0
                   ENDIF)))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (postpone)
                                                nil
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lim_prod_second_TCC1 0
  (lim_prod_second_TCC1-1 nil 3808413906
   ("" (skeep)
    (("" (lemma "conv_prod_second") (("" (inst?) nil nil)) nil)) nil)
   ((conv_prod_second formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lim_prod_second subtype
    "LAMBDA (m: naturalnumbers.nat): sigma[nat].sigma(0, m, LAMBDA (j: naturalnumbers.nat): IF reals.<=(j, m) THEN number_fields.*(number_fields.*(analytic_def.a(j), exponentiation.^(((number_fields.-)(analytic_def.x, analytic_def.alpha)), j)), convergence_sequences.limit(series.series(LAMBDA (n: naturalnumbers.nat): power_series.powerseq(analytic_def.b, (number_fields.-)(analytic_def.x, analytic_def.alpha))((number_fields.+)((number_fields.-)((number_fields.+)(n, m), j), 1))))) ELSE 0 ENDIF)"
    "(convergence_sequences.convergent?)")))
 (lim_prod_second 0
  (lim_prod_second-1 nil 3808520509
   ("" (skeep)
    (("" (lemma "limit_def")
      ((""
        (inst -1 "0" "LAMBDA (m: nat):
              sigma(0, m,
                    LAMBDA (j: nat):
                      IF j <= m
                        THEN a(j) * (x - alpha) ^ j *
                              limit(series
                                    (LAMBDA
                                     (n: nat):
                                     powerseq
                                     (b, x - alpha)(n + m - j + 1)))
                      ELSE 0
                      ENDIF)")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "convergence" 1 1)
              (("1" (skeep)
                (("1" (lemma "tail_b_lim")
                  (("1" (lemma "analytic_absolute_conv")
                    (("1" (inst -1 "f1" "alpha" "M1" "a")
                      (("1" (assert)
                        (("1"
                          (expand "absolutely_convergent_series?" -1)
                          (("1" (lemma "pos_series_bound")
                            (("1"
                              (inst -1 "f1" "alpha" "M1"
                               "abs(powerseq(a, x - alpha))")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -2 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -3
                                       "f1"
                                       "f2"
                                       "alpha"
                                       "M1"
                                       "M2"
                                       "a"
                                       "b"
                                       "x"
                                       "0")
                                      (("1"
                                        (lemma "limit_def")
                                        (("1"
                                          (inst
                                           -1
                                           "0"
                                           "LAMBDA (m: nat):
                                                                    IF 0 <= m
                                                                      THEN limit(series(LAMBDA (n: nat):
                                                                                          powerseq(b, x - alpha)(1 + m + n - 0)))
                                                                    ELSE 0
                                                                    ENDIF")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "convergence" -1)
                                              (("1"
                                                (name
                                                 "infs1"
                                                 "(inf_sum(abs(powerseq(a, x - alpha)))+1)")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "epsilon/ (3*infs1)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "series_limit_0")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "abs(powerseq(a, x - alpha))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "limit_def")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "0"
                                                               "abs(powerseq(a, x - alpha))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "convergence"
                                                                   -1)
                                                                  (("1"
                                                                    (name
                                                                     "maxy"
                                                                     "max_below(n_1)((LAMBDA(i:nat): IF i<=n_1 THEN (limit(series(LAMBDA (n: nat):
                                                                                                                                                                                     powerseq(b, x - alpha)(1 + i + n))))  ELSE 0 ENDIF)) +1")
                                                                    (("1"
                                                                      (name
                                                                       "n_1p1"
                                                                       "n_1+1")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "epsilon/(2*n_1p1 * maxy)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "triangle")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "n+n_1")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sigma_split")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               " LAMBDA (j: nat):
                                                                                                                                                IF j <= i
                                                                                                                                                  THEN a(j) *
                                                                                                                                                        limit(series(LAMBDA
                                                                                                                                                                     (n: nat):
                                                                                                                                                                     powerseq
                                                                                                                                                                     (b, x - alpha)(1 + i + n - j)))
                                                                                                                                                        * (x - alpha) ^ j
                                                                                                                                                ELSE 0
                                                                                                                                                ENDIF"
                                                                                               "i"
                                                                                               "0"
                                                                                               "i-n_1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "triangle")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "sigma(0, i - n_1,
                                                                                                                                                              LAMBDA (j: nat):
                                                                                                                                                                IF j <= i
                                                                                                                                                                  THEN a(j) *
                                                                                                                                                                        limit(series(LAMBDA
                                                                                                                                                                                     (n: nat):
                                                                                                                                                                                     powerseq
                                                                                                                                                                                     (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                        * (x - alpha) ^ j
                                                                                                                                                                ELSE 0
                                                                                                                                                                ENDIF)"
                                                                                                         "sigma(1 - n_1 + i, i,
                                                                                                                                                               LAMBDA (j: nat):
                                                                                                                                                                 IF j <= i
                                                                                                                                                                   THEN a(j) *
                                                                                                                                                                         limit(series(LAMBDA
                                                                                                                                                                                      (n: nat):
                                                                                                                                                                                      powerseq
                                                                                                                                                                                      (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                         * (x - alpha) ^ j
                                                                                                                                                                 ELSE 0
                                                                                                                                                                 ENDIF)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "abs(sigma(0, i - n_1,
                                                                                                                                                                                                                       LAMBDA (j: nat):
                                                                                                                                                                                                                         IF j <= i
                                                                                                                                                                                                                           THEN a(j) *
                                                                                                                                                                                                                                 limit(series(LAMBDA
                                                                                                                                                                                                                                              (n: nat):
                                                                                                                                                                                                                                              powerseq
                                                                                                                                                                                                                                              (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                                 * (x - alpha) ^ j
                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                         ENDIF))
                                                                                                                                                                                                              +
                                                                                                                                                                                                              abs(sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                        LAMBDA (j: nat):
                                                                                                                                                                                                                          IF j <= i
                                                                                                                                                                                                                            THEN a(j) *
                                                                                                                                                                                                                                  limit(series(LAMBDA
                                                                                                                                                                                                                                               (n: nat):
                                                                                                                                                                                                                                               powerseq
                                                                                                                                                                                                                                               (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                                  * (x - alpha) ^ j
                                                                                                                                                                                                                          ELSE 0
                                                                                                                                                                                                                          ENDIF)) < epsilon")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "abs(sigma(0, i - n_1,
                                                                                                                                                                                                                                      LAMBDA (j: nat):
                                                                                                                                                                                                                                        IF j <= i
                                                                                                                                                                                                                                          THEN a(j) *
                                                                                                                                                                                                                                                limit(series(LAMBDA
                                                                                                                                                                                                                                                             (n: nat):
                                                                                                                                                                                                                                                             powerseq
                                                                                                                                                                                                                                                             (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                                                * (x - alpha) ^ j
                                                                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                                                                        ENDIF)) < epsilon/2")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "abs(sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                                                       LAMBDA (j: nat):
                                                                                                                                                                                                                                                         IF j <= i
                                                                                                                                                                                                                                                           THEN a(j) *
                                                                                                                                                                                                                                                                 limit(series(LAMBDA
                                                                                                                                                                                                                                                                              (n: nat):
                                                                                                                                                                                                                                                                              powerseq
                                                                                                                                                                                                                                                                              (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                                                                                                 * (x - alpha) ^ j
                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                         ENDIF)) < epsilon/2")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "sigma_abs")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "LAMBDA (j: nat):
                                                                                                                                                                            IF j <= i
                                                                                                                                                                              THEN a(j) *
                                                                                                                                                                                    limit(series(LAMBDA
                                                                                                                                                                                                 (n: nat):
                                                                                                                                                                                                 powerseq
                                                                                                                                                                                                 (b, x - alpha)(1 + n - j + i)))
                                                                                                                                                                                    * (x - alpha) ^ j
                                                                                                                                                                            ELSE 0
                                                                                                                                                                            ENDIF"
                                                                                                                           "i"
                                                                                                                           "1-n_1+i")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                 LAMBDA (n_1: nat):
                                                                                                                                                                                                                   abs(IF n_1 <= i
                                                                                                                                                                                                                         THEN a(n_1) *
                                                                                                                                                                                                                               limit(series(LAMBDA
                                                                                                                                                                                                                                            (n: nat):
                                                                                                                                                                                                                                            powerseq
                                                                                                                                                                                                                                            (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                                                                                                               * (x - alpha) ^ n_1
                                                                                                                                                                                                                       ELSE 0
                                                                                                                                                                                                                       ENDIF)) < epsilon/2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "sigma_eq")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     " LAMBDA (n_1: nat):
                                                                                                                                                                                                abs(IF n_1 <= i
                                                                                                                                                                                                      THEN a(n_1) *
                                                                                                                                                                                                            limit(series(LAMBDA
                                                                                                                                                                                                                         (n: nat):
                                                                                                                                                                                                                         powerseq
                                                                                                                                                                                                                         (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                                                                                            * (x - alpha) ^ n_1
                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                    ENDIF)"
                                                                                                                                     " LAMBDA (n_1: nat):
                                                                                                                                                                                                IF n_1 <= i
                                                                                                                                                                                                      THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                                                           abs( limit(series(LAMBDA
                                                                                                                                                                                                                         (n: nat):
                                                                                                                                                                                                                         powerseq
                                                                                                                                                                                                                         (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                    ENDIF"
                                                                                                                                     "i"
                                                                                                                                     "1-n_1+i")
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           " sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                       LAMBDA (n_1: nat):
                                                                                                                                                                                                                         IF n_1 <= i
                                                                                                                                                                                                                           THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                                                                                 abs(limit(series(LAMBDA
                                                                                                                                                                                                                                                  (n: nat):
                                                                                                                                                                                                                                                  powerseq
                                                                                                                                                                                                                                                  (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                         ENDIF) < epsilon/2")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sigma_le")
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -11
                                                                                                                                                 -12)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -3)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       " LAMBDA (n_1: nat):
                                                                                                                                                                                                                                    IF n_1 <= i
                                                                                                                                                                                                                                      THEN abs(a(n_1) * (x - alpha) ^ n_1) *
                                                                                                                                                                                                                                            abs(limit(series(LAMBDA
                                                                                                                                                                                                                                                             (n: nat):
                                                                                                                                                                                                                                                             powerseq
                                                                                                                                                                                                                                                             (b, x - alpha)(1 + n - n_1 + i))))
                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                    ENDIF"
                                                                                                                                                       " LAMBDA (n_1: nat):
                                                                                                                                                                                                                                   maxy * (IF n_1 <= i
                                                                                                                                                                                                                                      THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                    ENDIF)"
                                                                                                                                                       "i"
                                                                                                                                                       "1-n_1+i")
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                                                           LAMBDA (n_1: nat):
                                                                                                                                                                                                                                                             maxy *
                                                                                                                                                                                                                                                              (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                                                                               ENDIF)) < epsilon/2")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "sigma_scal")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "LAMBDA (n_1: nat):
                                                                                                                                                                                                                                                                         (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                                                                          ELSE 0
                                                                                                                                                                                                                                                                          ENDIF)"
                                                                                                                                                                 " maxy"
                                                                                                                                                                 "i"
                                                                                                                                                                 "1-n_1+i")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     -3
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "sigma_le")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             " LAMBDA (n_1: nat):
                                                                                                                                                                                                                               (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                                                                                                ELSE 0
                                                                                                                                                                                                                                ENDIF)"
                                                                                                                                                                             "LAMBDA(n_1:nat):  epsilon / (2 * (maxy * n_1p1))"
                                                                                                                                                                             "i"
                                                                                                                                                                             "1-n_1+i")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   -1
                                                                                                                                                                                   "maxy")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "sigma(1 - n_1 + i, i,
                                                                                                                                                                                                                                                       LAMBDA (n_1: nat): epsilon / (2 * (maxy * n_1p1)))
                                                                                                                                                                                                                                                  * maxy < epsilon/2")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma_const")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -1
                                                                                                                                                                                             "i"
                                                                                                                                                                                             "1-n_1+i"
                                                                                                                                                                                             " epsilon / (2 * (maxy * n_1p1))")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "NOT  n_1 * (epsilon / (2 * (maxy * n_1p1))) * maxy =  n_1 * (epsilon / (2 * n_1p1)) ")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (reveal
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (div-by
                                                                                                                                                                                                           1
                                                                                                                                                                                                           "n_1")
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (reveal
                                                                                                                                                                                                           -)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skeep)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "n!1")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "n_1")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (typepred
                                                                                                                                                                                             "i")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -6
                                                                                                                                                                                               "n!1")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -6)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "abs_abs")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "abs"
                                                                                                                                                                                                     -2
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "powerseq(a, x - alpha)(n!1)")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         -2)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "powerseq"
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "n")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "n_1!1<=i")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   " max_below(n_1)
                                                        ((LAMBDA (i: nat):
                                                            IF i <= n_1
                                                              THEN (limit(series(LAMBDA
                                                                                 (n: nat):
                                                                                 powerseq
                                                                                 (b, x - alpha)(1 + i + n))))
                                                            ELSE 0
                                                            ENDIF))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (mult-by
                                                                                                                                                                       -1
                                                                                                                                                                       " abs(a(n_1!1) * (x - alpha) ^ n_1!1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -7)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -6)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -4)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -2
                                                                                                                                                                                 "i-n_1!1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "abs_mult")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -1
                                                                                                                                                                                       "a(n_1!1)"
                                                                                                                                                                                       "(x - alpha) ^ n_1!1")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (reveal
                                                                                                                                                                                               -)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 " abs((limit(series(LAMBDA (n: nat):
                                                                     powerseq(b, x - alpha)(1 + n - n_1!1 + i))))) <= maxy ")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (mult-by
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     "abs(a(n_1!1))*abs((x - alpha) ^ n_1!1)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             -)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "b")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "tail_series_conv")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "i!1+1"
                                                                                                                                                                                   " powerseq(b, x - alpha)")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "analytic_parts?"
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -2
                                                                                                                                                                                       "x")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "powerseries"
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "x")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -2
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "b")
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "tail_series_conv")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "1-n_1!1+i"
                                                                                                                                                                   " powerseq(b, x - alpha)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "analytic_parts?"
                                                                                                                                                                     -2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -2
                                                                                                                                                                       "x")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "powerseries"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "x")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -2
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "n_1!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "i")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (reveal
                                                                                                                                                                           -)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (skeep
                                                                                                                                                         1)
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "n_1!1<=i")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "abs_mult")
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -2
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -5
                                                                                                                                                     -6
                                                                                                                                                     -7
                                                                                                                                                     -8
                                                                                                                                                     -9
                                                                                                                                                     -10
                                                                                                                                                     -11
                                                                                                                                                     -12)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "a(n_1!1) * (x - alpha) ^ n_1!1"
                                                                                                                                                         "(limit(series(LAMBDA (n: nat):
                                                                                                                                                                         powerseq(b, x - alpha)(1 + n - n_1!1 + i))))")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -8
                                                                                                                                           -9
                                                                                                                                           0)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -4
                                                                                                                                             -5)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -3
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "tail_series_conv")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "i-n_1!1+1"
                                                                                                                                                   " powerseq(b, x - alpha)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (typepred
                                                                                                                                                       "b")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "analytic_parts?"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x")
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "powerseries"
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -3
                                                                                                                                                               -4
                                                                                                                                                               -5)
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "x")
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -3
                                                                                                                                                                   -4)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2
                                                                                                                                                                     3)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("3"
                                                                                                                                        (skeep)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -6
                                                                                                                                   -7
                                                                                                                                   -8)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "tail_series_conv")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i-j+1"
                                                                                                                                         " powerseq(b, x - alpha)")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "b")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "analytic_parts?"
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "x")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "powerseries"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x")
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       2
                                                                                                                                                       3)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("3"
                                                                                                                              (skeep)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "sigma_abs")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             " (LAMBDA (j: nat):
                                                                                                                IF j <= i
                                                                                                                  THEN a(j) *
                                                                                                                        limit(series(LAMBDA
                                                                                                                                     (n: nat):
                                                                                                                                     powerseq
                                                                                                                                     (b, x - alpha)(1 + n - j + i)))
                                                                                                                        * (x - alpha) ^ j
                                                                                                                ELSE 0
                                                                                                                ENDIF)"
                                                                                                                             "i-n_1"
                                                                                                                             "0")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               " sigma(0, i - n_1,
                                                                                                                                       LAMBDA (n_1: nat):
                                                                                                                                         abs(IF n_1 <= i
                                                                                                                                               THEN a(n_1) *
                                                                                                                                                     limit(series(LAMBDA
                                                                                                                                                                  (n: nat):
                                                                                                                                                                  powerseq
                                                                                                                                                                  (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                                     * (x - alpha) ^ n_1
                                                                                                                                             ELSE 0
                                                                                                                                             ENDIF)) < epsilon/2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sigma_le")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       " LAMBDA (n_1: nat):
                                                                                                                            IF n_1 <= i
                                                                                                                              THEN abs(a(n_1) *
                                                                                                                                        limit(series(LAMBDA
                                                                                                                                                     (n: nat):
                                                                                                                                                     powerseq
                                                                                                                                                     (b, x - alpha)(1 + n - n_1 + i)))
                                                                                                                                        * (x - alpha) ^ n_1)
                                                                                                                            ELSE abs(0)
                                                                                                                            ENDIF"
                                                                                                                                       " LAMBDA (n_1: nat):
                                                                                                                          epsilon / (3 * infs1) *( IF n_1 <= i
                                                                                                                              THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                            ELSE 0
                                                                                                                            ENDIF)"
                                                                                                                                       "i-n_1"
                                                                                                                                       "0")
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "sigma(0, i - n_1,
                                                                                                                                                LAMBDA (n_1: nat):
                                                                                                                                                  epsilon / (3 * infs1) *
                                                                                                                                                   (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                    ELSE 0
                                                                                                                                                    ENDIF)) < epsilon/2")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sigma_scal")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "LAMBDA (n_1: nat):
                                                                                                                                                     (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                                                                                      ELSE 0
                                                                                                                                                      ENDIF)"
                                                                                                                                                 "epsilon / (3 * infs1)"
                                                                                                                                                 "i-n_1"
                                                                                                                                                 "0")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -8
                                                                                                                                                       "i-n_1")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "sigma_eq")
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 " LAMBDA (n_1: nat):
                                                                                   (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                    ELSE 0
                                                                                    ENDIF)"
                                                                                                                                                                 "abs(powerseq(a, x - alpha))"
                                                                                                                                                                 "i-n_1"
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       -7
                                                                                                                                                                       rl)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -3
                                                                                                                                                                           -4
                                                                                                                                                                           -5)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT  epsilon / (3 * infs1) *
                                                                               sigma(0, i - n_1,
                                                                                     LAMBDA (n_1: nat):
                                                                                       (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                                                        ELSE 0
                                                                                        ENDIF)) <=  epsilon / (3 * infs1) * infs1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (mult-by
                                                                                                                                                                                 -4
                                                                                                                                                                                 "  epsilon / (3 * infs1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -3)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "inf_sum(abs(powerseq(a, x - alpha))) * (epsilon / (3 * infs1)) <= epsilon/3")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (mult-by
                                                                                                                                                                                       1
                                                                                                                                                                                       "(3*infs1)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "(inf_sum(abs(powerseq(a, x - alpha)))) = infs1-1")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 2
                                                                                                                                                                                                 3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     " 3 * ((epsilon / (3 * infs1)) * infs1)>0")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (case
                                                                                                                                                                                                         " 3 * ((epsilon / (3 * infs1)) * infs1 * infs1) = 3 * (epsilon / 3 * infs1)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           2)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (div-by
                                                                                                                                                                                                             1
                                                                                                                                                                                                             "3")
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (div-by
                                                                                                                                                                                                         1
                                                                                                                                                                                                         "3")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (mult-by
                                                                                                                                                                                                             1
                                                                                                                                                                                                             "(3 * infs1)")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (div-by
                                                                                                                                                                                                                   1
                                                                                                                                                                                                                   "3")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "epsilon / (3 * infs1)>0")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (mult-by
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         "infs1*infs1")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (mult-by
                                                                                                                                                                                                                         1
                                                                                                                                                                                                                         "3*infs1")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (reveal
                                                                                                                                                                                                                           -)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -12
                                                                                                                                                                                                                             1
                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                   -)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                     "inf_sum_nn")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                       "LAMBDA(x:real): 0"
                                                                                                                                                                                                                                       "alpha"
                                                                                                                                                                                                                                       "1"
                                                                                                                                                                                                                                       "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                                             2
                                                                                                                                                                                                                                             3
                                                                                                                                                                                                                                             4)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (case
                                                                                                                                                                                                               "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "inf_sum_nn")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "LAMBDA(x:real): 0"
                                                                                                                                                                                                                   "alpha"
                                                                                                                                                                                                                   "1"
                                                                                                                                                                                                                   "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                       -)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                         2
                                                                                                                                                                                                                         3
                                                                                                                                                                                                                         4
                                                                                                                                                                                                                         5)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           2
                                                                                                                                                                                           3
                                                                                                                                                                                           4
                                                                                                                                                                                           5)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "inf_sum_nn")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "LAMBDA(x:real): 0"
                                                                                                                                                                                                 "alpha"
                                                                                                                                                                                                 "1"
                                                                                                                                                                                                 "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (mult-by
                                                                                                                                                                                   1
                                                                                                                                                                                   "(3 * infs1)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (reveal
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2
                                                                                                                                                                                         3
                                                                                                                                                                                         4
                                                                                                                                                                                         5)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "inf_sum_nn")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "LAMBDA(x:real): 0"
                                                                                                                                                                                               "alpha"
                                                                                                                                                                                               "1"
                                                                                                                                                                                               "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 " sigma(0, i - n_1,
                                                  LAMBDA (n_1: nat):
                                                    (IF n_1 <= i THEN abs(a(n_1) * (x - alpha) ^ n_1)
                                                     ELSE 0
                                                     ENDIF)) <= infs1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (mult-by
                                                                                                                                                                                     -1
                                                                                                                                                                                     " epsilon / (3 * infs1)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -4
                                                                                                                                                                                       -5
                                                                                                                                                                                       -6
                                                                                                                                                                                       -7
                                                                                                                                                                                       -8)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         " infs1 * (epsilon / (3 * infs1)) < epsilon/2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "NOT  (3*infs1) * (epsilon / (3 * infs1)) =   epsilon ")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (div-by
                                                                                                                                                                                                   1
                                                                                                                                                                                                   "3")
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (mult-by
                                                                                                                                                                                       1
                                                                                                                                                                                       "3*infs1")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             3
                                                                                                                                                                                             4)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "inf_sum_nn")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "LAMBDA(x:real): 0"
                                                                                                                                                                                                 "alpha"
                                                                                                                                                                                                 "1"
                                                                                                                                                                                                 "abs(powerseq(a, x - alpha))")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     2
                                                                                                                                                                                                     3)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (skeep)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "powerseq"
                                                                                                                                                                           1
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "abs"
                                                                                                                                                                               1
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (case
                                                                                                                                                   "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     -)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       3)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "inf_sum_nn")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "LAMBDA(x:real): 0"
                                                                                                                                                           "alpha"
                                                                                                                                                           "1"
                                                                                                                                                           "abs(powerseq(a, x - alpha))")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (case
                                                                                                                                             "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               -)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 2
                                                                                                                                                 3)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "inf_sum_nn")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "LAMBDA(x:real): 0"
                                                                                                                                                     "alpha"
                                                                                                                                                     "1"
                                                                                                                                                     "abs(powerseq(a, x - alpha))")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skeep)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "n_1!1<=i")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -7
                                                                                                                                                     -8)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "abs_mult")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "a(n_1!1) * (x - alpha) ^ n_1!1"
                                                                                                                                                         "limit(series(LAMBDA (n: nat):
                                                                                            powerseq(b, x - alpha)(1 + n - n_1!1 + i)))")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               " abs(limit(series(LAMBDA (n: nat):
                                                                                            powerseq(b, x - alpha)(1 + n - n_1!1 + i)))) <= epsilon / (3 * infs1)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   " abs(a(n_1!1) * (x - alpha) ^ n_1!1)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -5
                                                                                                                                                                   "i-n_1!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         -)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "inf_sum_nn")
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "LAMBDA(x:real): 0"
                                                                                                                                                 "alpha"
                                                                                                                                                 "1"
                                                                                                                                                 "abs(powerseq(a, x - alpha))")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   2
                                                                                                                                                   3)
                                                                                                                                                  (("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide
                                                                                                                                         -)
                                                                                                                                        (("3"
                                                                                                                                          (skeep)
                                                                                                                                          (("3"
                                                                                                                                            (hide
                                                                                                                                             -)
                                                                                                                                            (("3"
                                                                                                                                              (lemma
                                                                                                                                               "tail_series_conv")
                                                                                                                                              (("3"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "i-n_1!1+1"
                                                                                                                                                 "powerseq(b, x - alpha)")
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "b")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "analytic_parts?"
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "x")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "powerseries"
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "x")
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             2
                                                                                                                                                             3)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (reveal
                                                                                                                                                       -)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (assert)
                                                                                                                                        (("4"
                                                                                                                                          (skeep)
                                                                                                                                          (("4"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "tail_series_conv")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i-j+1"
                                                                                                                                         " powerseq(b, x - alpha)")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "b")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "analytic_parts?"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "powerseries"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x")
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("3"
                                                                                                                                (skeep)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     "tail_series_conv")
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "i-j+1"
                                                                                                                       " powerseq(b, x - alpha)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "b")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "analytic_parts?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "powerseries"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("4"
                                                                                                                (skeep)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "tail_series_conv")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "i-j+1"
                                                                                                                   " powerseq(b, x - alpha)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "b")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "analytic_parts?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "powerseries")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "x")
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skeep)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "tail_series_conv")
                                                                                                    (("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "i-j+1"
                                                                                                         " powerseq(b, x - alpha)")
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "b")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "analytic_parts?"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "x")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "powerseries"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     3)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2
                                                                       3)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (lemma
                                                                             "tail_series_conv")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "1+i"
                                                                               " powerseq(b, x - alpha)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "b")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "analytic_parts?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "powerseries"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (case
                                                       "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "(3*infs1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (mult-by
                                                             1
                                                             "(3*infs1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "inf_sum_nn")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "LAMBDA(x:real): 0"
                                                           "alpha"
                                                           "1"
                                                           "abs(powerseq(a, x - alpha))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (case
                                                       "(inf_sum(abs(powerseq(a, x - alpha)))) >= 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "inf_sum_nn")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "LAMBDA(x:real): 0"
                                                             "alpha"
                                                             "1"
                                                             "abs(powerseq(a, x - alpha))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "conv_series?"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (hide -)
                                              (("2"
                                                (lemma
                                                 "tail_series_conv")
                                                (("2"
                                                  (lemma "tail_b_conv")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "f1"
                                                     "f2"
                                                     "alpha"
                                                     "M1"
                                                     "M2"
                                                     "a"
                                                     "b"
                                                     "x"
                                                     "0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (hide -)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (lemma
                                                   "tail_series_conv")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "1+m"
                                                     " powerseq(b, x - alpha)")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (typepred "b")
                                                        (("3"
                                                          (expand
                                                           "analytic_parts?"
                                                           -1)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "powerseries"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 -2)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "x")
                                        (("2"
                                          (expand "ball" 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "conv_prod_second")
            (("2" (assert)
              (("2" (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x")
                nil nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "tail_series_conv")
              (("3" (inst -1 "m-j+1" " powerseq(b, x - alpha)")
                (("1" (assert)
                  (("1" (typepred "b")
                    (("1" (expand "analytic_parts?" -1)
                      (("1" (inst -1 "x")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "powerseries" -1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "x")
                          (("2" (hide 2 3) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((limit_def formula-decl nil convergence_sequences analysis)
    (m skolem-const-decl "nat" analytic_def nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (conv_prod_second formula-decl nil analytic_def nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (tail_b_lim formula-decl nil analytic_def nil)
    (absolutely_convergent_series? const-decl "boolean" power_series
     series)
    (abs const-decl "sequence[real]" series series)
    (ball const-decl "bool" analytic_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (infs1 skolem-const-decl "real" analytic_def nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (epsilon skolem-const-decl "posreal" analytic_def nil)
    (series_limit_0 formula-decl nil series series)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (i skolem-const-decl "nat" analytic_def nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (inf_sum_nn formula-decl nil analytic_def nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (sigma_le formula-decl nil sigma reals)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (n_1 skolem-const-decl "nat" analytic_def nil)
    (abs_mult formula-decl nil real_props nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (tail_series_conv formula-decl nil series series)
    (sigma_scal formula-decl nil sigma reals)
    (abs_abs formula-decl nil real_props nil)
    (subrange type-eq-decl nil integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sigma_const formula-decl nil sigma reals)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (n_1!1 skolem-const-decl "nat" analytic_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (sigma_abs formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_split formula-decl nil sigma reals)
    (max_below def-decl
     "{c: nnreal | FORALL (i: below(m + 1)): c >= abs(f(i))}"
     analytic_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (inf_sum const-decl "real" series series)
    (conv_series? const-decl "bool" series series)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (tail_b_conv formula-decl nil analytic_def nil)
    (pos_series_bound formula-decl nil analytic_def nil)
    (analytic_absolute_conv formula-decl nil analytic_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "[real -> real]" analytic_def nil)
    (a skolem-const-decl
     "{aa: sequence[real] | analytic_parts?(alpha, f1)(M1, aa)}"
     analytic_def nil)
    (limit const-decl "real" convergence_sequences analysis)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (init_prod_analytic_conv 0
  (init_prod_analytic_conv-1 nil 3808475899
   ("" (skeep)
    (("" (lemma "arrange_terms_diff_split")
      (("" (inst?)
        (("" (inst -1 "f1" "f2" "a" "b")
          (("" (expand "prod_seq" -1)
            (("" (replace -1 1)
              (("" (lemma "convergent_diff")
                ((""
                  (inst -1 "(LAMBDA (m: nat):
                     series(powerseq(a, x - alpha))(m) * f2(x))"
                   "LAMBDA (m: nat):
                     sigma(0, m,
                           LAMBDA (j: nat):
                             IF j <= m
                               THEN a(j)
                                    *
                                    limit
                                    (series
                                     (LAMBDA
                                      (n: nat):
                                      powerseq
                                      (b, x - alpha)(1 + m + n - j)))
                                    *
                                    (x - alpha) ^ j
                             ELSE 0
                             ENDIF)")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "conv_prod_first")
                        (("1" (lemma "conv_prod_second")
                          (("1"
                            (inst -2 "f1" "f2" "alpha" "M1" "M2" "a"
                             "b" "x")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -1
                                 "f1"
                                 "f2"
                                 "alpha"
                                 "M1"
                                 "M2"
                                 "a"
                                 "b"
                                 "x")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (skeep)
                          (("2" (assert)
                            (("2" (lemma "conv_series_shift")
                              (("2"
                                (inst -1 "1-j+m" "powerseq(b,x-alpha)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "b")
                                    (("2"
                                      (expand "analytic_parts?" -1)
                                      (("2"
                                        (inst -1 "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "powerseries"
                                                 -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x")
                                          (("2"
                                            (hide 2 3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arrange_terms_diff_split formula-decl nil analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (limit const-decl "real" convergence_sequences analysis)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (conv_prod_second formula-decl nil analytic_def nil)
    (conv_prod_first formula-decl nil analytic_def nil)
    (conv_series_shift formula-decl nil series series)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergent_diff formula-decl nil convergence_ops analysis)
    (prod_seq const-decl "sequence[real]" analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (init_prod_analytic_inf_sum_TCC1 0
  (init_prod_analytic_inf_sum_TCC1-1 nil 3808475802
   ("" (lemma "init_prod_analytic_conv")
    (("" (skeep)
      (("" (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x")
        (("" (expand "conv_series?" 1)
          (("" (expand "powerseries" -1) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (conv_series? const-decl "bool" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_prod_analytic_conv formula-decl nil analytic_def nil))
   nil
   (init_prod_analytic_inf_sum subtype
    "power_series.powerseq(analytic_def.sig_convl(analytic_def.a, analytic_def.b), (number_fields.-)(analytic_def.x, analytic_def.alpha))"
    "(series.conv_series?)")))
 (init_prod_analytic_inf_sum 0
  (init_prod_analytic_inf_sum-1 nil 3808476326
   ("" (skeep)
    (("" (lemma "arrange_terms_diff_split")
      (("" (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x")
        (("" (expand "prod_seq" -1)
          (("" (expand "powerseries" -1)
            (("" (expand "inf_sum" 1 1)
              (("" (replace -1 1)
                (("" (lemma " limit_diff ")
                  ((""
                    (inst -1
                     "(LAMBDA (m: nat): series(powerseq(a, x - alpha))(m) * f2(x))"
                     "(LAMBDA (m: nat):
                sigma(0, m,
                      LAMBDA (j: nat):
                        IF j <= m
                          THEN a(j) *
                                limit(series
                                      (LAMBDA
                                       (n: nat):
                                       powerseq
                                       (b, x - alpha)(1 + m + n - j)))
                                * (x - alpha) ^ j
                        ELSE 0
                        ENDIF))")
                    (("1" (replace -1 1)
                      (("1" (lemma "lim_prod_first")
                        (("1" (lemma "lim_prod_second")
                          (("1"
                            (inst -1 "f1" "f2" "alpha" "M1" "M2" "a"
                             "b" "x")
                            (("1"
                              (inst -2 "f1" "f2" "alpha" "M1" "M2" "a"
                               "b" "x")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (expand "*" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "conv_prod_second")
                      (("2"
                        (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b"
                         "x")
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (hide -1)
                        (("3" (lemma "conv_series_shift")
                          (("3" (skeep)
                            (("3"
                              (inst -1 "1+m-j" "powerseq(b,x-alpha)")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "b")
                                  (("1"
                                    (expand "analytic_parts?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "powerseries" -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x")
                                        (("2"
                                          (hide 2 3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2)
                      (("4" (skeep)
                        (("4" (skeep) (("4" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("5" (hide 2)
                      (("5" (lemma "conv_prod_first")
                        (("5"
                          (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b"
                           "x")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arrange_terms_diff_split formula-decl nil analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (prod_seq const-decl "sequence[real]" analytic_def nil)
    (inf_sum const-decl "real" series series)
    (limit_diff formula-decl nil convergence_ops analysis)
    (conv_prod_first formula-decl nil analytic_def nil)
    (conv_series_shift formula-decl nil series series)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "nat" analytic_def nil)
    (m skolem-const-decl "nat" analytic_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (conv_prod_second formula-decl nil analytic_def nil)
    (lim_prod_second formula-decl nil analytic_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (lim_prod_first formula-decl nil analytic_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (limit const-decl "real" convergence_sequences analysis)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (b skolem-const-decl
     "{bb: sequence[real] | analytic_parts?(alpha, f2)(M2, bb)}"
     analytic_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f1 skolem-const-decl "[real -> real]" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (a skolem-const-decl
     "{aa: sequence[real] | analytic_parts?(alpha, f1)(M1, aa)}"
     analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (f2 skolem-const-decl "[real -> real]" analytic_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (prod_analytic 0
  (prod_analytic-1 nil 3808425758
   ("" (skeep)
    (("" (lemma "arrange_terms_diff_split")
      (("" (expand "analytic_parts?" 1)
        (("" (skeep)
          (("" (lemma "init_prod_analytic_conv")
            (("" (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x")
              (("" (lemma "init_prod_analytic_inf_sum")
                (("" (inst -1 "f1" "f2" "alpha" "M1" "M2" "a" "b" "x")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arrange_terms_diff_split formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (init_prod_analytic_inf_sum formula-decl nil analytic_def nil)
    (init_prod_analytic_conv formula-decl nil analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_analytic 0
  (sum_analytic-1 nil 3808523363
   ("" (skeep*)
    (("" (expand "analytic_parts?" 1 1)
      (("" (skeep)
        (("" (typepred "a" "b")
          (("" (expand "analytic_parts?" -)
            (("" (inst -1 "x")
              (("1" (inst -2 "x")
                (("1" (flatten)
                  (("1" (lemma "series_sum_convergence")
                    (("1" (expand "powerseries")
                      (("1"
                        (inst -1 "powerseq(a, x - alpha)"
                         "powerseq(b, x - alpha)" "_" "_")
                        (("1" (expand "convergent?" -2)
                          (("1" (expand "convergent?" -4)
                            (("1" (skeep)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "l" "l!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "+")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "convergent?" 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst 1 "l!1+l")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "powerseq" 1)
                                                  (("1"
                                                    (expand
                                                     "powerseq"
                                                     -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "inf_sum_of_sum")
                                              (("2"
                                                (expand "powerseq" 1)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: nat) -> real:
                 a(k) * (x - alpha) ^ k"
                                                   "LAMBDA (k: nat) -> real:
                 b(k) * (x - alpha) ^ k")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "powerseq"
                                                           -4)
                                                          (("1"
                                                            (expand
                                                             "powerseq"
                                                             -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   -1
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "+"
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "convergent?"
                                                         1)
                                                        (("2"
                                                          (inst 1 "l")
                                                          (("2"
                                                            (expand
                                                             "powerseq"
                                                             -)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "convergent?"
                                                           1)
                                                          (("3"
                                                            (inst
                                                             1
                                                             "l!1")
                                                            (("3"
                                                              (expand
                                                               "powerseq"
                                                               -)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "x")
                    (("2" (hide -2 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (hide 2)
                  (("2" (typepred "x") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "{xx: real | abs(xx - alpha) < min(M1, M2)}"
     analytic_def nil)
    (M2 skolem-const-decl "posreal" analytic_def nil)
    (M1 skolem-const-decl "posreal" analytic_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (inf_sum_of_sum formula-decl nil series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (series_sum_convergence formula-decl nil series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (scal_analytic 0
  (scal_analytic-1 nil 3808524014
   ("" (skeep)
    (("" (lemma "scal_series_conv")
      (("" (typepred "a")
        (("" (expand "analytic_parts?")
          (("" (skeep)
            (("" (inst -1 "x")
              (("" (flatten)
                (("" (expand "powerseries" -1)
                  (("" (inst -3 "powerseq(a, x - alpha)" "c")
                    (("" (assert)
                      (("" (expand "powerseries" 1 1)
                        (("" (expand "powerseq" 1 1)
                          (("" (expand "series" 1 1)
                            (("" (expand "*" -3)
                              ((""
                                (expand "series" -3)
                                ((""
                                  (expand "powerseq" -3)
                                  ((""
                                    (case
                                     "(LAMBDA (x_1: nat) -> real:
                    c *
                     sigma(0, x_1,
                           LAMBDA (k: nat) -> real: a(k) * (x - alpha) ^ k) ) = (LAMBDA (n: nat) -> real:
                    sigma(0, n,
                          LAMBDA (k: nat) -> real:
                            (c * a)(k) * (x - alpha) ^ k))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "powerseq" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "inf_sum" 1 1)
                                            (("1"
                                              (lemma "limit_scal")
                                              (("1"
                                                (inst
                                                 -1
                                                 "c"
                                                 "(series(powerseq( a, x - alpha)))")
                                                (("1"
                                                  (expand "*" -1)
                                                  (("1"
                                                    (expand
                                                     "powerseq"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "powerseq"
                                                       1
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "series"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "series"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "inf_sum"
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "series"
                                                                             -4)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("2"
                                        (lemma "sigma_scal")
                                        (("2"
                                          (inst
                                           -1
                                           " LAMBDA (k: nat) -> real: a(k) * (x - alpha) ^ k"
                                           "c"
                                           "x!1"
                                           "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1 1 rl)
                                              (("2"
                                                (expand "*" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scal_series_conv formula-decl nil series series)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_scal formula-decl nil sigma reals)
    (limit_scal formula-decl nil convergence_ops analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil))
   shostak))
 (analytic_prod_fun 0
  (analytic_prod_fun-1 nil 3808525284
   ("" (lemma "prod_analytic")
    (("" (skeep)
      (("" (expand "analytic?" -2)
        (("" (expand "analytic?" -3)
          (("" (skeep -2)
            (("" (skeep -3)
              (("" (expand "analytic?" 1 1)
                (("" (inst -1 "f" "g" "alpha" "M" "M!1" "a" "a!1")
                  (("" (assert)
                    (("" (inst 1 "min(M,M!1)" "sig_convl(a, a!1)") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a skolem-const-decl "sequence[real]" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (a!1 skolem-const-decl "sequence[real]" analytic_def nil)
    (M!1 skolem-const-decl "posreal" analytic_def nil)
    (g skolem-const-decl "[real -> real]" analytic_def nil)
    (sig_convl const-decl "real" analytic_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (analytic? const-decl "bool" analytic_def nil)
    (prod_analytic formula-decl nil analytic_def nil))
   shostak))
 (analytic_const 0
  (analytic_const-1 nil 3810358430
   ("" (skeep)
    (("" (expand "analytic?" 1 1)
      (("" (inst 1 "1" "LAMBDA(i:nat): IF i=0 THEN c ELSE 0 ENDIF")
        (("" (expand "analytic_parts?" 1 1)
          (("" (skeep)
            ((""
              (case "convergence(powerseries(LAMBDA (i: nat):
                                       IF i = 0 THEN c ELSE 0 ENDIF)
                                    (x_1 - alpha), c)")
              (("1" (split 1)
                (("1" (expand "convergent?" 1 1)
                  (("1" (inst 1 "c") nil nil)) nil)
                 ("2" (lemma "limit_def")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1" (expand "inf_sum" 1 1)
                        (("1" (assert)
                          (("1" (expand "powerseries" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "convergent?" 1)
                        (("2" (inst 1 "c") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "convergence" 1 1)
                  (("2" (skeep)
                    (("2" (inst 1 "2")
                      (("2" (skeep)
                        (("2" (expand "powerseries" 1 1)
                          (("2" (expand "powerseq" 1 1)
                            (("2" (assert)
                              (("2"
                                (lemma "sigma_first")
                                (("2"
                                  (expand "series" 1 1)
                                  (("2"
                                    (inst
                                     -1
                                     " LAMBDA (k: nat) -> real:
                      IF k = 0 THEN c ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                     "i_1"
                                     "0")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "sigma_zero")
                                            (("2"
                                              (lemma "sigma_shift")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -1
                                                   " LAMBDA (k: nat) -> real:
                      IF k = 0 THEN c ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                                   "i_1-1"
                                                   "0"
                                                   "1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (case
                                                         " (LAMBDA (n: nat): 0 * (x_1 - alpha) ^ (1 + n)) = (LAMBDA(i:nat): 0)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "i_1-1"
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (limit_def formula-decl nil convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (x_1 skolem-const-decl "{xx: real | abs(xx - alpha) < 1}"
     analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (c skolem-const-decl "real" analytic_def nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (series const-decl "sequence[real]" series series)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_shift formula-decl nil sigma_nat reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_zero formula-decl nil sigma reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_first formula-decl nil sigma reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (analytic_sum_fun 0
  (analytic_sum_fun-1 nil 3808525623
   ("" (lemma "sum_analytic")
    (("" (skeep)
      (("" (expand "analytic?" -2)
        (("" (expand "analytic?" -3)
          (("" (skeep)
            (("" (skeep)
              (("" (inst -1 "f" "g" "alpha" "M" "M!1" "a" "a!1")
                (("" (expand "analytic?" 1)
                  (("" (inst 1 "min(M,M!1)" "a+a!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (g skolem-const-decl "[real -> real]" analytic_def nil)
    (M!1 skolem-const-decl "posreal" analytic_def nil)
    (a!1 skolem-const-decl "sequence[real]" analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (a skolem-const-decl "sequence[real]" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (sum_analytic formula-decl nil analytic_def nil))
   shostak))
 (analytic_scal_fun 0
  (analytic_scal_fun-1 nil 3808525688
   ("" (skeep)
    (("" (lemma "scal_analytic")
      (("" (expand "analytic?")
        (("" (skeep)
          (("" (inst -1 "f" "alpha" "M" "a" "c")
            (("" (inst 1 "M" "c*a") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((scal_analytic formula-decl nil analytic_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (a skolem-const-decl "sequence[real]" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil))
   shostak))
 (analytic_pow_fun 0
  (analytic_pow_fun-1 nil 3810358193
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "^")
        (("1" (expand "^" 1 1)
          (("1" (expand "expt" 1 1)
            (("1" (rewrite "analytic_const") nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "f ^ (j + 1) = f * f ^ (j)")
          (("1" (replace -1)
            (("1" (lemma "analytic_prod_fun")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (inst -2 "alpha" "f") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "^" 1)
            (("2" (decompose-equality 1)
              (("2" (assert)
                (("2" (expand "*" 1)
                  (("2" (expand "^" 1)
                    (("2" (expand "expt" 1 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (analytic_prod_fun formula-decl nil analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (analytic_const formula-decl nil analytic_def nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (analytic? const-decl "bool" analytic_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (analytic_pow_fun_scal 0
  (analytic_pow_fun_scal-1 nil 3814517330
   ("" (skeep)
    (("" (lemma "analytic_scal_fun")
      (("" (lemma "analytic_pow_fun")
        (("" (inst -1 "alpha" "f" "n")
          (("" (inst -2 "alpha" "LAMBDA(x:real): f(x)^n" "c")
            (("" (assert)
              (("" (case "f^n = (LAMBDA(x:real): f(x)^n)")
                (("1" (assert) nil nil)
                 ("2" (decompose-equality 1)
                  (("2" (expand "^" 1 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_scal_fun formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (analytic_pow_fun formula-decl nil analytic_def nil))
   shostak))
 (analytic_pos_ball 0
  (analytic_pos_ball-1 nil 3810367648
   ("" (skeep)
    (("" (expand "analytic?" -1)
      (("" (lemma "analytic_cont")
        (("" (skeep)
          (("" (inst -1 "alpha" "f" "M")
            (("1" (assert)
              (("1" (lemma "posball[(ball(alpha,M))]")
                (("1" (inst -1 "alpha" "f")
                  (("1" (assert)
                    (("1" (expand "restrict")
                      (("1" (assert)
                        (("1" (expand "continuous?" -2)
                          (("1" (inst -2 "alpha")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "min(delta,M)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "ball" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "analytic_rad?" 1)
              (("2" (expand "analytic_parts?" -1)
                (("2" (inst 1 "a")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -1 "x")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "inf_sum" -2 1)
                                (("2"
                                  (expand "powerseries" 1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "R" restrict nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "real" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "bool" analytic_def nil)
    (posball formula-decl nil continuous_ball_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (analytic_cont formula-decl nil analytic_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (analytic_neg_ball 0
  (analytic_neg_ball-1 nil 3810368406
   ("" (skeep*)
    (("" (lemma "analytic_cont")
      (("" (expand "analytic?" -2)
        (("" (skeep)
          (("" (lemma "negball[(ball(alpha,M))]")
            (("" (inst -1 "alpha" "f")
              (("1" (assert)
                (("1" (expand "restrict")
                  (("1" (assert)
                    (("1" (inst -2 "alpha" "f" "M")
                      (("1" (assert)
                        (("1" (expand "continuous?" -2)
                          (("1" (inst -2 "alpha")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "min(delta,M)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x")
                                      (("1" (assert) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_cont formula-decl nil analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (restrict const-decl "R" restrict nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "real" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (inf_sum const-decl "real" series series)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (^ const-decl "real" exponentiation nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (continuous? const-decl "bool" continuous_functions analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sequence type-eq-decl nil sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negball formula-decl nil continuous_ball_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (analytic? const-decl "bool" analytic_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (nz_seq_TCC1 0
  (nz_seq_TCC1-1 nil 3810370135
   (""
    (inst 1 "LAMBDA(alpha:real,M:posreal,f: {ff: [real -> real] |
                           NOT EXISTS (delta: posreal):
                                 FORALL (x: real):
                                   (abs(x - alpha) < delta AND x /= alpha) IMPLIES
                                    ff(x) /= 0}): LAMBDA(k:nat): choose({rr:real | (abs(rr - alpha) < min(1/(k+1) ,M) AND rr /= alpha) AND f(rr)=0})")
    (("" (skeep)
      (("" (typepred "f")
        (("" (expand "nonempty?" 2)
          (("" (expand "empty?" -1)
            (("" (inst 1 "min(1/(1+k),M)")
              (("" (skeep)
                (("" (inst -3 "x")
                  (("" (assert)
                    (("" (expand "member" 2) (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil
   (nz_seq existence ""
    "[d: [alpha: reals.real, posreal, {ff: [reals.real -> reals.real] | (booleans.NOT)(EXISTS (delta: real_types.posreal): FORALL (x: reals.real): booleans.IMPLIES((booleans.AND(reals.<(real_defs.abs((number_fields.-)(x, alpha)), delta), x /= alpha)), ff(x) /= 0))}] -> [k: naturalnumbers.nat -> {rr: reals.real | booleans.AND(rr /= d`1, booleans.AND(reals.<(real_defs.abs((number_fields.-)(rr, d`1)), real_defs.min(number_fields./(1, ((number_fields.+)(1, k))), d`2)), d`3(rr) = 0))}]]")))
 (lowest_nz_der_TCC1 0
  (lowest_nz_der_TCC1-1 nil 3810393681 ("" (subtype-tcc) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ball const-decl "bool" analytic_def nil))
   nil
   (lowest_nz_der subtype "analytic_def.alpha"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (lowest_nz_der_TCC2 0
  (lowest_nz_der_TCC2-1 nil 3810393681
   ("" (skeep*)
    (("" (lemma "analytic_der") (("" (inst?) nil nil)) nil)) nil)
   ((analytic_der formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lowest_nz_der subtype
    "restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M)), real].restrict(analytic_def.f)"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv_fun(analytic_def.n)")))
 (lowest_nz_der 0
  (lowest_nz_der-1 nil 3810393789
   ("" (skeep)
    (("" (typepred "M")
      (("" (expand "analytic_rad?" -3)
        (("" (skeep)
          (("" (case "a = LAMBDA(i:nat): 0")
            (("1" (inst 1 "M")
              (("1" (skeep)
                (("1" (inst -4 "x")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -5 1)
                        (("1" (lemma "limit_def")
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (expand "convergence" 1 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "1")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "powerseries" 1)
                                              (("1"
                                                (expand "powerseq" 1)
                                                (("1"
                                                  (expand "series" 1)
                                                  (("1"
                                                    (case
                                                     "(LAMBDA (k: nat) -> real: a(k) * (x - alpha) ^ k) = (LAMBDA(k:nat): 0)")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_zero")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (decompose-equality 1)
              (("2" (lemma "analytic_term")
                (("2" (inst?)
                  (("2" (inst -1 "a")
                    (("2" (split -1)
                      (("1" (inst -1 "x!1")
                        (("1" (inst 3 "x!1") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (expand "analytic_parts?" 1 1)
                        (("2" (skeep)
                          (("2" (inst -3 "x")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "powerseries" -4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "inf_sum" 1 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic_rad? const-decl "bool" analytic_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (analytic_term formula-decl nil analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M skolem-const-decl "(analytic_rad?(alpha, f))" analytic_def nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (x skolem-const-decl "real" analytic_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (powerseries const-decl "sequence[real]" power_series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma def-decl "real" sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sigma_zero formula-decl nil sigma reals)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (lowdn_TCC1 0
  (lowdn_TCC1-1 nil 3810396663 ("" (subtype-tcc) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ball const-decl "bool" analytic_def nil))
   nil
   (lowdn subtype "analytic_def.alpha"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (lowdn_TCC2 0
  (lowdn_TCC2-1 nil 3810396663
   ("" (skeep) (("" (lemma "analytic_der") (("" (inst?) nil nil)) nil))
    nil)
   ((analytic_der formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lowdn subtype
    "restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M)), real].restrict(analytic_def.f)"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv_fun(analytic_def.n)")))
 (lowdn_TCC3 0
  (lowdn_TCC3-1 nil 3810396663
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (lemma "lowest_nz_der")
          (("" (inst -1 "alpha" "f" "M")
            (("" (split -1)
              (("1" (typepred "f")
                (("1" (skeep)
                  (("1" (inst -1 "n")
                    (("1" (expand "member" 3) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "f") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (lowest_nz_der formula-decl nil analytic_def nil)
    (member const-decl "bool" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lowdn subtype
    "{n: naturalnumbers.nat | nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv(n, restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M)), real].restrict(analytic_def.f))(analytic_def.alpha) /= 0}"
    "(sets[nat].nonempty?)")))
 (lowdn_seq_TCC1 0
  (lowdn_seq_TCC1-1 nil 3810400963 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball const-decl "bool" analytic_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lowdn_seq subtype "analytic_def.r"
    "(analytic_def.ball(analytic_def.alpha, analytic_def.M))")))
 (lowdn_seq_TCC2 0
  (lowdn_seq_TCC2-1 nil 3810400963
   ("" (skeep*)
    (("" (lemma "analytic_der") (("" (inst?) nil nil)) nil)) nil)
   ((analytic_der formula-decl nil analytic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lowdn const-decl "nat" analytic_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (lowdn_seq subtype
    "restrict[real, (analytic_def.ball(analytic_def.alpha, analytic_def.M)), real].restrict(analytic_def.f)"
    "nth_derivatives[(analytic_def.ball(analytic_def.alpha, analytic_def.M))].nderiv_fun(analytic_def.lowdn(analytic_def.alpha, analytic_def.f, analytic_def.M))")))
 (lowdn_seq_TCC3 0
  (lowdn_seq_TCC3-1 nil 3810400963
   (""
    (inst 1 "LAMBDA(alpha:real,f:{ff: [real -> real] |
                                 ff(alpha) = 0 AND (NOT EXISTS (delta: posreal):
                                        FORALL (x: real):
                                          abs(x - alpha) < delta IMPLIES ff(x) = 0)
                                  AND
                                  (NOT EXISTS (delta: posreal):
                                         FORALL (x: real):
                                           (abs(x - alpha) < delta AND x /= alpha) IMPLIES
                                            ff(x) /= 0)}, M:(analytic_rad?(alpha, f))): LAMBDA(k:nat): choose({r: real |
                                 abs(r - alpha) < min(1 / (1 + k), M) AND
                                  nderiv[(ball(alpha, M))]
                                      (lowdn(alpha, f,M),
                                       restrict[real, (ball(alpha, M)), real](f))
                                      (r)
                                   = 0})")
    (("1" (skeep)
      (("1" (expand "nonempty?" 1 1)
        (("1" (expand "empty?" -1)
          (("1" (typepred "lowdn(alpha, f, M)")
            (("1" (expand "lowdn" -1)
              (("1"
                (with-tccs
                 (typepred "min({n: nat |
                                 nderiv[(ball(alpha, M))]
                                     (n, restrict[real, (ball(alpha, M)), real](f))(alpha)
                                  /= 0})"))
                (("1" (lemma "Taylors[(ball(alpha,M))]")
                  (("1" (case "lowdn(alpha,f,M)=0")
                    (("1" (expand "lowdn" -1)
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "nderiv" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "restrict" -3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst -1 "alpha" "nz_seq(alpha,M,f)(k)" "f"
                       "lowdn(alpha,f,M)-1")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (skeep)
                            (("1" (assert)
                              (("1"
                                (inst -4 "c")
                                (("1"
                                  (expand "member" 3)
                                  (("1"
                                    (typepred "c")
                                    (("1"
                                      (expand "ball" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred
                                           "nz_seq(alpha,M,f)(k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (hide -9 -10)
                                                (("1"
                                                  (hide -8)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "restrict"
                                                   -8)
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "sigma(0, lowdn(alpha, f, M) - 1,
                                                   LAMBDA (nn:nat):
                                                     IF nn > lowdn(alpha, f, M) - 1 THEN 0
                                                     ELSIF nn = 0 THEN f(alpha)
                                                     ELSE nderiv(nn, LAMBDA (s: (ball(alpha, M))): f(s))(alpha) *
                                                           (nz_seq(alpha, M, f)(k) - alpha) ^ nn
                                                           / factorial(nn)
                                                     ENDIF) = 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "restrict"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "(nz_seq(alpha,M, f)(k) - alpha) ^ lowdn(alpha, f, M)
                                                  / factorial(lowdn(alpha, f, M)) /= 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (mult-by
                                                                           -1
                                                                           "factorial(lowdn(alpha, f, M))")
                                                                          (("2"
                                                                            (case
                                                                             "NOT (nz_seq(alpha,M, f)(k) - alpha) ^ lowdn(alpha, f, M) = 0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (case
                                                                                 "nz_seq(alpha,M, f)(k) - alpha = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   " nzreal_expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -9)
                                                          (("2"
                                                            (lemma
                                                             "sigma_restrict_eq_0[nat]")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (case
                                                                       "i=0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (with-tccs
                                                                           (case
                                                                            " nderiv(i, LAMBDA (s: (ball(alpha, M))): f(s))(alpha)=0"))
                                                                          (("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (inst
                                                                               -9
                                                                               "i")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "lowdn"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "restrict")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "ball_noe")
                                                                  (("2"
                                                                    (hide
                                                                     -7
                                                                     -8)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "M"
                                                                       "alpha")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (lemma
                                                                   "ball_dd")
                                                                  (("3"
                                                                    (hide
                                                                     -7
                                                                     -8)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "M"
                                                                       "alpha")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 -)
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (lemma
                                                                     "analytic_der")
                                                                    (("4"
                                                                      (inst?)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "nn")
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (expand
                                                                               "restrict")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (lemma
                                                             "ball_dd")
                                                            (("3"
                                                              (lemma
                                                               "ball_noe")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "M"
                                                                 "alpha")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          (("4"
                                                            (hide -)
                                                            (("4"
                                                              (skeep)
                                                              (("4"
                                                                (lemma
                                                                 "ball_dd")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "M"
                                                                   "alpha")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (skeep)
                                                          (("5"
                                                            (lemma
                                                             "analytic_der")
                                                            (("5"
                                                              (inst?)
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (hide
                                                                   -7
                                                                   -8
                                                                   -9)
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     "nn")
                                                                    (("5"
                                                                      (assert)
                                                                      (("5"
                                                                        (expand
                                                                         "restrict")
                                                                        (("5"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "restrict")
                              (("2"
                                (lemma "analytic_der")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -1
                                       "f"
                                       "M"
                                       "lowdn(alpha,f,M)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "restrict")
                        (("2" (assert) nil nil)) nil)
                       ("3" (expand "ball" 1)
                        (("3" (assert)
                          (("3" (typepred "nz_seq(alpha,M,f)(k)")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "ball_noe")
                    (("2" (inst -1 "M" "alpha") nil nil)) nil)
                   ("3" (assert)
                    (("3" (lemma "ball_con")
                      (("3" (inst -1 "M" "alpha") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (lemma "ball_noe") (("2" (inst -1 "M" "alpha") nil nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "ball_dd") (("3" (inst -1 "M" "alpha") nil nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "analytic_der") (("4" (inst?) nil nil)) nil)) nil)
     ("5" (skeep) (("5" (expand "ball" 1) (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (Taylors formula-decl nil taylors analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (f skolem-const-decl "{ff: [real -> real] |
   ff(alpha) = 0 AND
    (NOT EXISTS (delta: posreal):
           FORALL (x: real): abs(x - alpha) < delta IMPLIES ff(x) = 0)
     AND
     (NOT EXISTS (delta: posreal):
            FORALL (x: real):
              (abs(x - alpha) < delta AND x /= alpha) IMPLIES ff(x) /= 0)}"
     analytic_def nil)
    (M skolem-const-decl "(analytic_rad?(alpha, f))" analytic_def nil)
    (nz_seq const-decl "{rr: real |
   rr /= alpha AND abs(rr - alpha) < min(1 / (1 + k), M) AND f(rr) = 0}"
     analytic_def nil)
    (k skolem-const-decl "nat" analytic_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (ball_noe formula-decl nil analytic_def nil)
    (ball_dd formula-decl nil analytic_def nil)
    (analytic_der formula-decl nil analytic_def nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_expt judgement-tcc nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (between type-eq-decl nil taylors analysis)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ball_con formula-decl nil analytic_def nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (restrict const-decl "R" restrict nil)
    (lowdn const-decl "nat" analytic_def nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (ball const-decl "bool" analytic_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil
   (lowdn_seq existence ""
    "[d: [alpha: reals.real, f: {ff: [reals.real -> reals.real] | booleans.AND(ff(alpha) = 0, booleans.AND(((booleans.NOT)(EXISTS (delta: real_types.posreal): FORALL (x: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, alpha)), delta), ff(x) = 0))), ((booleans.NOT)(EXISTS (delta: real_types.posreal): FORALL (x: reals.real): booleans.IMPLIES((booleans.AND(reals.<(real_defs.abs((number_fields.-)(x, alpha)), delta), x /= alpha)), ff(x) /= 0)))))}, (analytic_def.analytic_rad?(alpha, f))] -> [k: naturalnumbers.nat -> {r: reals.real | booleans.AND(reals.<(real_defs.abs((number_fields.-)(r, d`1)), real_defs.min(number_fields./(1, ((number_fields.+)(1, k))), d`3)), nth_derivatives[(analytic_def.ball(d`1, d`3))].nderiv(analytic_def.lowdn(d`1, d`2, d`3), restrict[real, (analytic_def.ball(d`1, d`3)), real].restrict(d`2))(r) = 0)}]]")))
 (analytic_zero_ball 0
  (analytic_zero_ball-1 nil 3810469747
   ("" (skeep)
    (("" (expand "analytic?" -1)
      (("" (skeep)
        ((""
          (with-tccs
           (case "nderiv[(ball(alpha,M))](lowdn(alpha,f,M),f)(alpha) =0"))
          (("1" (assert)
            (("1" (expand "lowdn" -1 1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "continuity_limit[(ball(alpha,M))]")
            (("2"
              (inst -1 " nderiv[(ball(alpha, M))]
              (lowdn(alpha, f, M), restrict[real, (ball(alpha, M)), real](f))"
               "alpha" "lowdn_seq(alpha,f,M)")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (expand "o" -1)
                    (("1" (assert)
                      (("1" (expand "convergence" -1)
                        (("1"
                          (case "abs(nderiv[(ball(alpha, M))]
                       (lowdn(alpha, f, M), restrict[real, (ball(alpha, M)), real](f))
                       (alpha)) =0")
                          (("1" (assert) nil nil)
                           ("2"
                            (inst -1 " abs(nderiv[(ball(alpha, M))]
                        (lowdn(alpha, f, M),
                         restrict[real, (ball(alpha, M)), real](f))
                        (alpha))")
                            (("1" (skeep)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (inst -1 "n+1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "lowdn_seq(alpha, f, M)(1 + n)")
                                        (("1"
                                          (expand "restrict")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3 4)
                    (("2" (hide -1 -2)
                      (("2" (expand "convergence" 1 1)
                        (("2" (skeep)
                          (("2" (inst 1 "ceiling(1/epsilon)")
                            (("2" (skeep)
                              (("2"
                                (typepred "lowdn_seq(alpha, f, M)(i)")
                                (("2"
                                  (case "1/(i+1)<epsilon")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -1 -2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (case "NOT i>= 1/epsilon")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (case
                                               "NOT 1/i <= epsilon")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-by 1 "i")
                                                  (("1"
                                                    (mult-by
                                                     -1
                                                     "epsilon")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (case
                                                     "1/(1+i) <= 1/i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "1+i >= i")
                                                      (("1"
                                                        (div-by
                                                         -1
                                                         "1+i")
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "i")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2 3 4)
                    (("3" (expand "restrict" 1 1)
                      (("3"
                        (lemma "derivable_continuous[(ball(alpha,M))]")
                        (("3" (inst?)
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (lemma "analytic_der")
                                (("1"
                                  (inst -1 "alpha" "f" "M" "_")
                                  (("1"
                                    (inst -1 "lowdn(alpha,f,M)+1")
                                    (("1"
                                      (expand "restrict" -1)
                                      (("1"
                                        (lemma
                                         "nderiv_derivable_eqv[(ball(alpha,M))]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -2)
                                                  (("1"
                                                    (inst -2 "alpha")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "analytic_der")
                            (("2" (inst?)
                              (("2"
                                (inst -1 "f " "M" "lowdn(alpha,f,M)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "restrict")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 3 4)
                (("2" (skeep)
                  (("2" (typepred "lowdn_seq(alpha, f, M)(x1)")
                    (("2" (expand "ball") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2 3 4)
                (("3" (assert)
                  (("3" (reveal +)
                    (("3" (assert)
                      (("3" (split 4)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (hide 2 3)
              (("3" (lemma "analytic_der") (("3" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((analytic? const-decl "bool" analytic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "bool" analytic_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (lowdn const-decl "nat" analytic_def nil)
    (restrict const-decl "R" restrict nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (powerseries const-decl "sequence[real]" power_series series)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (inf_sum const-decl "real" series series)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lowdn_seq const-decl "{r: real |
   abs(r - alpha) < min(1 / (1 + k), M) AND
    nderiv[(ball(alpha, M))]
        (lowdn(alpha, f, M), restrict[real, (ball(alpha, M)), real](f))(r)
     = 0}" analytic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma def-decl "real" sigma reals)
    (n skolem-const-decl "nat" analytic_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "T3" function_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (derivable? const-decl "bool" derivatives analysis)
    (nderiv_derivable_eqv formula-decl nil nth_derivatives analysis)
    (analytic_der formula-decl nil analytic_def nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (continuity_limit formula-decl nil continuity_props analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (analytic_zero_right 0
  (analytic_zero_right-1 nil 3810543377
   ("" (lemma "analytic_zero_ball")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (skeep)
              (("1" (expand "analytic?" -2)
                (("1" (skeep*)
                  (("1" (inst 2 "min(delta,M)")
                    (("1" (hide 1)
                      (("1" (skeep)
                        (("1" (inst 2 "min(delta,M)")
                          (("1" (skeep)
                            (("1" (inst-cp -1 "x+alpha")
                              (("1"
                                (inst-cp -1 "x!1+alpha")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "x" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (expand "abs" -5 1)
                                          (("1"
                                            (expand "abs" -5 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "intermediate1[(ball(alpha,M))]")
                                                (("1"
                                                  (case
                                                   "alpha+x = alpha + x!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "alpha +x < alpha+ x!1")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "alpha+x"
                                                       "alpha+x!1"
                                                       "f"
                                                       "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "restrict"
                                                           -2)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "c")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "analytic_cont")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "analytic_rad?"
                                                             1)
                                                            (("2"
                                                              (reveal
                                                               -)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "a")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4)
                                                                    (("2"
                                                                      (expand
                                                                       "analytic_parts?"
                                                                       -6)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "x!2")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "inf_sum"
                                                                               -7)
                                                                              (("2"
                                                                                (expand
                                                                                 "powerseries"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "alpha+ x > alpha+x!1")
                                                      (("1"
                                                        (lemma
                                                         "analytic_cont")
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (lemma
                                                             "intermediate2[(ball(alpha,M))]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "alpha+x!1"
                                                               "alpha+x"
                                                               "f"
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "restrict")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (reveal
                                                                         -)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "c")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "analytic_cont")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -8
                                                                       -9
                                                                       -10)
                                                                      (("2"
                                                                        (hide
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (expand
                                                                           "analytic_rad?"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "analytic_parts?"
                                                                             -7)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "a")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -7
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "inf_sum"
                                                                                     -7)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "powerseries"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "powerseries"
                                                                                               -7)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "ball_con")
                                                  (("2"
                                                    (hide
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "M"
                                                       "alpha")
                                                      (("2"
                                                        (expand
                                                         "connected?"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "delta")
                  (("2" (skeep)
                    (("2" (inst -1 "x+alpha")
                      (("2" (assert)
                        (("2" (typepred "x")
                          (("2" (expand "abs" 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ball_con formula-decl nil analytic_def nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (/= const-decl "boolean" notequal nil)
    (intermediate2 formula-decl nil continuous_functions_props
     analysis)
    (alpha skolem-const-decl "real" analytic_def nil)
    (M skolem-const-decl "posreal" analytic_def nil)
    (x skolem-const-decl "posreal" analytic_def nil)
    (x!1 skolem-const-decl "posreal" analytic_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (f skolem-const-decl "[real -> real]" analytic_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (analytic_rad? const-decl "bool" analytic_def nil)
    (analytic_parts? const-decl "bool" analytic_def nil)
    (inf_sum const-decl "real" series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (analytic_cont formula-decl nil analytic_def nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ball const-decl "bool" analytic_def nil)
    (intermediate1 formula-decl nil continuous_functions_props
     analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (analytic? const-decl "bool" analytic_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (analytic_zero_ball formula-decl nil analytic_def nil))
   shostak)))

