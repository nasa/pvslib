(|polar|
 (|abs_def| 0
  (|abs_def-1| |nil| 3455850889 ("" (GRIND) NIL NIL)
   ((|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|abs_def2| 0
  (|abs_def2-1| |nil| 3472820584
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (EXPAND "sq_abs") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL))
   SHOSTAK))
 (|abs_real| 0
  (|abs_real-1| NIL 3930901574
   ("" (SKEEP)
    (("" (EXPAND "abs" 1 1)
      (("" (EXPAND "sq_abs")
        (("" (ASSERT) (("" (REWRITE "sqrt_sq_abs") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "nnreal" |polar| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL))
   SHOSTAK))
 (|abs_nzcomplex| 0
  (|abs_nzcomplex-1| |nil| 3455850866
   ("" (SKOSIMP) (("" (EXPAND "abs") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|abs| CONST-DECL "nnreal" |polar| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL))
   NIL (|abs_nzcomplex| SUBTYPE "polar.abs(polar.n0z)" "posreal")))
 (|abs_nz_iff_nz| 0
  (|abs_nz_iff_nz-1| |nil| 3455850929
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (REWRITE "abs_def")
          (("1" (GRIND :REWRITES "complex_ext") NIL NIL)) NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (TYPEPRED "abs(z!1)")
          (("2" (EXPAND ">=")
            (("2" (EXPAND "<=")
              (("2" (SPLIT)
                (("1" (GRIND :REWRITES "complex_ext") NIL NIL)
                 ("2" (REWRITE "abs_def")
                  (("2" (HIDE 2)
                    (("2"
                      (LEMMA "sqrt_eq_0" ("nnx" "sq(Im(z!1)) + sq(Re(z!1))"))
                      (("2" (SPLIT)
                        (("1" (HIDE -2)
                          (("1" (REWRITE "sq_plus_eq_0")
                            (("1" (GRIND :REWRITES "complex_ext") NIL NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sq_plus_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL))
   SHOSTAK))
 (|abs_is_0| 0
  (|abs_is_0-1| |nil| 3455851637
   ("" (SKOSIMP)
    (("" (LEMMA "abs_nz_iff_nz" ("z" "z!1")) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|abs_nz_iff_nz| FORMULA-DECL NIL |polar| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|abs_neg| 0
  (|abs_neg-1| |nil| 3455851750 ("" (GRIND) NIL NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL) NIL
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|abs_mult| 0
  (|abs_mult-1| |nil| 3455851754
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "abs_def")
          (("" (REWRITE "sqrt_times" 1 :DIR RL)
            (("" (REWRITE "sqrt_eq") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt_eq| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL))
   SHOSTAK))
 (|abs_inv| 0
  (|abs_inv-4| "" 3790337183
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "sqrt_lem")
          (("1" (REWRITE "sq_rew")
            (("1" (REWRITE "sq_div")
              (("1" (REWRITE "div_cancel3")
                (("1" (EXPAND "sq_abs")
                  (("1" (REWRITE "sq_div")
                    (("1" (REWRITE "sq_div")
                      (("1" (REWRITE "sq_times")
                        (("1" (ASSERT)
                          (("1"
                            (NAME "DRL" "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                            (("1" (REPLACE -1)
                              (("1" (GRIND-REALS)
                                (("1" (NAME-REPLACE "XX" "sq(Re(n0z!1))")
                                  (("1" (NAME-REPLACE "YY" "sq(Im(n0z!1))")
                                    (("1" (EXPAND "sq")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (FLATTEN)
                          (("2" (REWRITE "sq_plus_eq_0")
                            (("2" (USE "nzcomplex_nz")
                              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (FLATTEN)
                        (("2" (REWRITE "sq_plus_eq_0")
                          (("2" (USE "nzcomplex_nz")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (FLATTEN)
                  (("2" (LEMMA "sqrt_eq_0")
                    (("2" (INST -1 "sq(Im(n0z!1)) + sq(Re(n0z!1))")
                      (("2" (SPLIT -1)
                        (("1" (HIDE -2)
                          (("1" (REWRITE "sq_plus_eq_0")
                            (("1" (FLATTEN)
                              (("1" (USE "nzcomplex_nz")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2) (("2" (FIELD) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|abs_inv-3| |nil| 3721315300
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "sqrt_lem")
          (("1" (REWRITE "sq_rew")
            (("1" (REWRITE "sq_div")
              (("1" (REWRITE "div_cancel3")
                (("1" (EXPAND "sq_abs")
                  (("1" (REWRITE "sq_div")
                    (("1" (REWRITE "sq_div")
                      (("1" (REWRITE "sq_times")
                        (("1" (REWRITE "sq_times")
                          (("1" (ASSERT)
                            (("1"
                              (NAME "DRL" "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                              (("1" (REPLACE -1)
                                (("1" (GRIND-REALS)
                                  (("1" (NAME-REPLACE "XX" "sq(Re(n0z!1))")
                                    (("1" (NAME-REPLACE "YY" "sq(Im(n0z!1))")
                                      (("1" (EXPAND "sq")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (FLATTEN)
                          (("2" (REWRITE "sq_plus_eq_0")
                            (("2" (USE "nzcomplex_nz")
                              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (FLATTEN)
                        (("2" (REWRITE "sq_plus_eq_0")
                          (("2" (USE "nzcomplex_nz")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (FLATTEN)
                  (("2" (LEMMA "sqrt_eq_0")
                    (("2" (INST -1 "sq(Im(n0z!1)) + sq(Re(n0z!1))")
                      (("2" (SPLIT -1)
                        (("1" (HIDE -2)
                          (("1" (REWRITE "sq_plus_eq_0")
                            (("1" (FLATTEN)
                              (("1" (USE "nzcomplex_nz")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2) (("2" (FIELD) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|sqrt_lem| FORMULA-DECL NIL |sqrt| |reals|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sq_times| FORMULA-DECL NIL |sq| |reals|)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (|sq_plus_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL))
   NIL)
  (|abs_inv-2| |nil| 3721315251
   ("" (AUTO-REWRITE "nzcomplex_ext")
    (("" (SKOSIMP)
      (("" (REWRITE "abs_def")
        (("" (REWRITE "abs_def")
          (("" (REWRITE "sqrt_lem")
            (("1" (REWRITE "sq_rew")
              (("1" (REWRITE "sq_div")
                (("1" (REWRITE "div_cancel3")
                  (("1" (EXPAND "sq_abs")
                    (("1" (TYPEPRED "n0z!1")
                      (("1" (REWRITE "sq_div")
                        (("1" (REWRITE "sq_div")
                          (("1" (REWRITE "sq_times")
                            (("1" (REWRITE "sq_times")
                              (("1" (ASSERT)
                                (("1"
                                  (NAME "DRL"
                                        "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                                  (("1" (REPLACE -1)
                                    (("1" (ASSERT)
                                      (("1" (NAME-REPLACE "XX" "sq(Re(n0z!1))")
                                        (("1"
                                          (NAME-REPLACE "YY" "sq(Im(n0z!1))")
                                          (("1" (HIDE -2)
                                            (("1" (EXPAND "sq")
                                              (("1" (ASSERT)
                                                NIL)))))))))))))))))))))
                           ("2" (EXPAND "/=")
                            (("2" (REWRITE "sq_plus_eq_0")
                              (("2" (FLATTEN) (("2" (ASSERT) NIL)))))))))
                         ("2" (EXPAND "/=")
                          (("2" (HIDE 1)
                            (("2" (REWRITE "sq_plus_eq_0")
                              (("2" (FLATTEN)
                                (("2" (ASSERT) NIL)))))))))))))))))
                 ("2" (EXPAND "/=")
                  (("2" (HIDE 1)
                    (("2"
                      (LEMMA "sqrt_eq_0"
                       ("nnx" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                      (("2" (SPLIT)
                        (("1" (HIDE -2)
                          (("1" (REWRITE "sq_plus_eq_0")
                            (("1" (FLATTEN)
                              (("1" (TYPEPRED "n0z!1")
                                (("1" (SPLIT)
                                  (("1" (ASSERT) NIL)
                                   ("2" (ASSERT) NIL)))))))))))
                         ("2" (PROPAX) NIL)))))))))))))
             ("2" (HIDE 2)
              (("2"
                (LEMMA "posreal_div_posreal_is_posreal"
                 ("px" "1" "py" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))"))
                (("1" (ASSERT) NIL)
                 ("2" (HIDE 2)
                  (("2" (REWRITE "sqrt_pos")
                    (("2" (HIDE 2)
                      (("2" (TYPEPRED "n0z!1")
                        (("2" (SPLIT)
                          (("1" (ASSERT)
                            (("1" (LEMMA "sq_nz_pos" ("nz" "Re(n0z!1)"))
                              (("1" (ASSERT) NIL)))))
                           ("2" (LEMMA "sq_nz_pos" ("nz" "Im(n0z!1)"))
                            (("1" (ASSERT) NIL)
                             ("2" (PROPAX) NIL))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|abs_inv-1| |nil| 3455851970
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "sqrt_lem")
          (("1" (REWRITE "sq_rew")
            (("1" (REWRITE "sq_div")
              (("1" (REWRITE "div_cancel3")
                (("1" (EXPAND "sq_abs")
                  (("1" (TYPEPRED "n0z!1")
                    (("1" (REWRITE "sq_div")
                      (("1" (REWRITE "sq_div")
                        (("1" (REWRITE "sq_times")
                          (("1" (REWRITE "sq_times")
                            (("1" (ASSERT)
                              (("1"
                                (NAME "DRL"
                                      "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (NAME-REPLACE "XX" "sq(Re(n0z!1))")
                                      (("1" (NAME-REPLACE "YY" "sq(Im(n0z!1))")
                                        (("1" (HIDE -2)
                                          (("1" (EXPAND "sq")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "/=")
                          (("2" (REWRITE "sq_plus_eq_0")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "/=")
                        (("2" (HIDE 1)
                          (("2" (REWRITE "sq_plus_eq_0")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "/=")
                (("2" (HIDE 1)
                  (("2"
                    (LEMMA "sqrt_eq_0" ("nnx" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                    (("2" (SPLIT)
                      (("1" (HIDE -2)
                        (("1" (REWRITE "sq_plus_eq_0")
                          (("1" (FLATTEN)
                            (("1" (TYPEPRED "n0z!1")
                              (("1" (SPLIT)
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2"
              (LEMMA "posreal_div_posreal_is_posreal"
               ("px" "1" "py" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))"))
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "sqrt_pos")
                  (("2" (HIDE 2)
                    (("2" (TYPEPRED "n0z!1")
                      (("2" (SPLIT)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sq_nz_pos" ("nz" "Re(n0z!1)"))
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (LEMMA "sq_nz_pos" ("nz" "Im(n0z!1)"))
                          (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|div_nzcomplex2| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_lem| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_plus_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_times| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|sq_nz_pos| JUDGEMENT-TCC NIL |sq| |reals|))
   SHOSTAK))
 (|abs_div| 0
  (|abs_div-1| |nil| 3455853159
   ("" (SKOSIMP)
    (("" (LEMMA "abs_inv" ("n0z" "n0z!1"))
      (("" (LEMMA "abs_mult" ("z1" "z!1" "z2" "1/n0z!1"))
        (("" (REPLACE -2)
          (("" (HIDE -2)
            (("" (REPLACE -1 1 RL)
              (("" (HIDE -1)
                (("" (EXPAND "abs")
                  (("" (REWRITE "sqrt_eq")
                    (("" (EXPAND "sq_abs")
                      (("" (EXPAND "sq") (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|sqrt_eq| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL))
   SHOSTAK))
 (|abs_triangle| 0
  (|abs_triangle-1| |nil| 3455853469
   ("" (SKOSIMP)
    (("" (EXPAND "abs")
      (("" (REWRITE "sq_le" 1 :DIR RL)
        (("" (ASSERT)
          (("" (REWRITE "sq_plus")
            (("" (REWRITE "sqrt_times" 1 :DIR RL)
              (("" (EXPAND "sq_abs")
                (("" (ASSERT)
                  (("" (REWRITE "sq_plus")
                    (("" (REWRITE "sq_plus")
                      (("" (ASSERT)
                        ((""
                          (CASE
                              "Im(z1!1) * Im(z2!1)+Re(z1!1) * Re(z2!1) <=sqrt(sq(Im(z1!1)) * sq(Im(z2!1)) + sq(Im(z1!1)) * sq(Re(z2!1)) +
               (sq(Im(z2!1)) * sq(Re(z1!1)) + sq(Re(z1!1)) * sq(Re(z2!1))))")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (REWRITE "sq_times" 1 :DIR RL)
                              (("2" (REWRITE "sq_times" 1 :DIR RL)
                                (("2" (REWRITE "sq_times" 1 :DIR RL)
                                  (("2" (REWRITE "sq_times" 1 :DIR RL)
                                    (("2" (REWRITE "sq_le" 1 :DIR RL)
                                      (("2" (REWRITE "sq_plus")
                                        (("2" (ASSERT)
                                          (("2"
                                            (CASE
                                                "2*(Im(z1!1) * Im(z2!1) * Re(z1!1) * Re(z2!1)) <= sq(Im(z1!1) * Re(z2!1)) +
        sq(Im(z2!1) * Re(z1!1))")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (LEMMA "sq_minus"
                                                 ("a" "Im(z1!1) * Re(z2!1)" "b"
                                                  "Im(z2!1) * Re(z1!1)"))
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_add1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add1| FORMULA-DECL NIL |complex_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_times| FORMULA-DECL NIL |sq| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq_minus| FORMULA-DECL NIL |sq| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sq_plus| FORMULA-DECL NIL |sq| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sq_le| FORMULA-DECL NIL |sq| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL))
   SHOSTAK))
 (|abs_triangle_minus| 0
  (|abs_triangle_minus-1| |nil| 3722708010
   ("" (SKEEP)
    (("" (LEMMA "abs_triangle")
      (("" (INST - "z2" "z1-z2") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_triangle| FORMULA-DECL NIL |polar| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL) NIL
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL))
   SHOSTAK))
 (|abs_abs| 0
  (|abs_abs-1| |nil| 3455851919
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (EXPAND "abs" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   SHOSTAK))
 (|abs_i| 0
  (|abs_i-1| |nil| 3455851913 ("" (GRIND) NIL NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL))
   SHOSTAK))
 (|abs_div2_TCC1| 0
  (|abs_div2_TCC1-1| |nil| 3722877977 ("" (SUBTYPE-TCC) NIL NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL)) NIL
   (|abs_div2| SUBTYPE "complex_types.complex_(polar.nzx, 0)" "nzcomplex")))
 (|abs_div2| 0
  (|abs_div2-1| |nil| 3455991712
   ("" (SKEEP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "sq_eq" 1 :DIR RL)
          (("" (ASSERT)
            (("" (REWRITE "sq_div")
              (("1" (REWRITE "sq_div")
                (("1" (REWRITE "sq_div")
                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                 ("2" (GRIND) NIL NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_abs| FORMULA-DECL NIL |sq| |reals|)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|))
   SHOSTAK))
 (|abs_div3| 0
  (|abs_div3-1| |nil| 3455991811
   ("" (SKOSIMP)
    (("" (REWRITE "abs_def")
      (("" (REWRITE "abs_def")
        (("" (REWRITE "sq_eq" 1 :DIR RL)
          (("1" (ASSERT)
            (("1" (REWRITE "sq_div")
              (("1" (REWRITE "sq_div")
                (("1" (TYPEPRED "sq_abs(n0z!1)")
                  (("1" (NAME "SQ" "sq_abs(n0z!1)")
                    (("1" (EXPAND "sq_abs")
                      (("1" (REPLACE -1)
                        (("1" (REWRITE "sq_times")
                          (("1" (REWRITE "sq_times")
                            (("1" (LEMMA "sqrt_pos" ("px" "SQ"))
                              (("1" (REWRITE "sq_div" 1)
                                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "sq_abs(n0z!1)")
              (("2" (ASSERT)
                (("2" (EXPAND "sq_abs")
                  (("2"
                    (LEMMA "sqrt_pos" ("px" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                    (("1"
                      (LEMMA "both_sides_div_pos_le1"
                       ("pz" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))" "x" "0" "y"
                        "abs(x!1)"))
                      (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|sq_times| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq_abs| FORMULA-DECL NIL |sq| |reals|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|arg_TCC1| 0
  (|arg_TCC1-1| |nil| 3455854430 ("" (SUBTYPE-TCC) NIL NIL)
   ((|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL (|arg| SUBTYPE "0" "gt_npi_le_pi")))
 (|arg_TCC2| 0
  (|arg_TCC2-1| |nil| 3455854430 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|arg| SUBTYPE "Im(polar.z)"
    "{z_1: reals.real | booleans.=>(Re(polar.z) = 0, z_1 /= 0)}")))
 (|arg_TCC3| 0
  (|arg_TCC3-1| |nil| 3455854430
   ("" (SKOSIMP)
    (("" (ASSERT)
      (("" (LEMMA "atan2_0_2pi" ("x" "Re(z!1)" "y" "Im(z!1)"))
        (("" (ASSERT)
          (("" (CASE-REPLACE "Re(z!1) < 0")
            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|atan2_0_2pi| FORMULA-DECL NIL |atan2| |trig|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL))
   NIL
   (|arg| SUBTYPE
    "(number_fields.-)(atan2.atan2(Re(polar.z), Im(polar.z)), number_fields.*(2, pi_def.pi))"
    "gt_npi_le_pi")))
 (|arg_TCC4| 0
  (|arg_TCC4-1| |nil| 3455854430 ("" (GRIND :REWRITES "complex_ext") NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL))
   NIL
   (|arg| SUBTYPE "Im(polar.z)"
    "{z_1: reals.real | booleans.=>(Re(polar.z) = 0, z_1 /= 0)}")))
 (|arg_TCC5| 0
  (|arg_TCC5-1| |nil| 3721931863
   ("" (SKEEP)
    (("" (REWRITE "complex_ext")
      (("" (LEMMA "atan2_0_2pi" ("x" "Re(z)" "y" "Im(z)"))
        (("" (ASSERT)
          (("" (CASE-REPLACE "Im(z)=0")
            (("1" (ASSERT)
              (("1" (FLATTEN)
                (("1" (CASE-REPLACE "Re(z) >= 0")
                  (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (CASE-REPLACE "Re(z) >= 0")
                  (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|atan2_0_2pi| FORMULA-DECL NIL |atan2| |trig|))
   NIL (|arg| SUBTYPE "atan2.atan2(Re(polar.z), Im(polar.z))" "gt_npi_le_pi")))
 (|arg_is_0_nz| 0
  (|arg_is_0_nz-2| |nil| 3721232107
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (LEMMA "atan2_0_2pi" ("x" "Re(n0z!1)" "y" "Im(n0z!1)"))
        (("" (CASE-REPLACE "Im(n0z!1) =0")
          (("1" (ASSERT)
            (("1" (USE "nzcomplex_nz")
              (("1" (ASSERT)
                (("1" (FLATTEN)
                  (("1" (CASE-REPLACE "Re(n0z!1) >= 0")
                    (("1" (ASSERT)
                      (("1" (EXPAND "atan2") (("1" (REWRITE "atan_0") NIL NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (FLATTEN)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "atan2")
                            (("2" (REWRITE "atan_0") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (CASE-REPLACE "Im(n0z!1) < 0")
              (("1" (FLATTEN)
                (("1" (CASE-REPLACE "Re(n0z!1) >= 0")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (FLATTEN)
                  (("2" (CASE-REPLACE "Re(n0z!1) >= 0")
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "atan2")
                          (("1" (EXPAND ">=" -1)
                            (("1" (EXPAND "<=" -1)
                              (("1" (SPLIT)
                                (("1" (ASSERT)
                                  (("1" (LEMMA "atan_strict_increasing")
                                    (("1" (EXPAND "strict_increasing?")
                                      (("1"
                                        (INST - "0" "Im(n0z!1) / Re(n0z!1)")
                                        (("1"
                                          (LEMMA
                                           "posreal_div_posreal_is_posreal"
                                           ("px" "Im(n0z!1)" "py" "Re(n0z!1)"))
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|atan2_0_2pi| FORMULA-DECL NIL |atan2| |trig|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   NIL)
  (|arg_is_0_nz-1| |nil| 3455855531
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (EXPAND "Re" 1 2)
        (("" (EXPAND "Im" 1 2)
          (("" (LEMMA "atan2_0_2pi" ("x" "Re(n0z!1)" "y" "Im(n0z!1)"))
            (("" (CASE-REPLACE "Im(n0z!1) =0")
              (("1" (ASSERT)
                (("1" (TYPEPRED "n0z!1")
                  (("1" (ASSERT)
                    (("1" (FLATTEN)
                      (("1" (CASE-REPLACE "Re(n0z!1) >= 0")
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (EXPAND "atan2")
                              (("1" (REWRITE "atan_0")
                                (("1" (EXPAND "Re")
                                  (("1" (EXPAND "Im") (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (FLATTEN)
                            (("2" (HIDE -2)
                              (("2" (EXPAND "atan2")
                                (("2" (REWRITE "atan_0")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "Im")
                                      (("2" (EXPAND "Re")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (CASE-REPLACE "Im(n0z!1) < 0")
                  (("1" (FLATTEN)
                    (("1" (CASE-REPLACE "Re(n0z!1) >= 0")
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (EXPAND "Im")
                            (("1" (EXPAND "Re") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "Re")
                          (("2" (EXPAND "Im")
                            (("2" (ASSERT)
                              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (CASE-REPLACE "Re(n0z!1) >= 0")
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (EXPAND "atan2")
                              (("1" (EXPAND ">=" -1)
                                (("1" (EXPAND "<=" -1)
                                  (("1" (SPLIT)
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "atan_strict_increasing")
                                        (("1" (EXPAND "strict_increasing?")
                                          (("1"
                                            (INST - "0"
                                             "Im(n0z!1) / Re(n0z!1)")
                                            (("1"
                                              (LEMMA
                                               "posreal_div_posreal_is_posreal"
                                               ("px" "Im(n0z!1)" "py"
                                                "Re(n0z!1)"))
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "atan_0")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "Im")
                                                      (("1" (EXPAND "Re")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (EXPAND "Re")
                                        (("2" (EXPAND "Im")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "Re")
                            (("2" (EXPAND "Im")
                              (("2" (ASSERT)
                                (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|atan2_0_2pi| FORMULA-DECL NIL |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|arg_is_0| 0
  (|arg_is_0-1| |nil| 3455856156
   ("" (SKOSIMP)
    (("" (CASE-REPLACE "z!1=complex_(0,0)")
      (("1" (EXPAND "arg") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (REWRITE "complex_ext")
        (("2" (LEMMA "arg_is_0_nz" ("n0z" "z!1"))
          (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (HIDE 2) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|arg_is_0_nz| FORMULA-DECL NIL |polar| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|arg_is_pi2| 0
  (|arg_is_pi2-2| |nil| 3721232361
   ("" (SKOSIMP)
    (("" (TYPEPRED "arg(z!1)")
      (("" (EXPAND "arg")
        (("" (REWRITE "complex_ext")
          (("" (CASE-REPLACE "Re(z!1)=0")
            (("1" (CASE-REPLACE "Im(z!1)>0")
              (("1" (ASSERT)
                (("1" (EXPAND "atan2") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
               ("2" (ASSERT)
                (("2" (CASE-REPLACE "Im(z!1)=0")
                  (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (CASE-REPLACE "Im(z!1) < 0")
                (("1" (ASSERT) NIL NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "atan2")
                    (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                      (("2" (ASSERT)
                        (("2" (CASE-REPLACE "Re(z!1) > 0")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL)
  (|arg_is_pi2-1| |nil| 3455856760
   ("" (SKOSIMP)
    (("" (TYPEPRED "arg(z!1)")
      (("" (EXPAND "arg")
        (("" (CASE-REPLACE "Re(z!1)=0")
          (("1" (CASE-REPLACE "Im(z!1)>0")
            (("1" (ASSERT)
              (("1" (EXPAND "atan2") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT)
              (("2" (CASE-REPLACE "Im(z!1)=0")
                (("1" (ASSERT) NIL NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "atan2") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (CASE-REPLACE "Im(z!1) < 0")
              (("1" (ASSERT)
                (("1" (EXPAND "atan2")
                  (("1" (ASSERT)
                    (("1" (CASE-REPLACE "Re(z!1)>0")
                      (("1" (ASSERT)
                        (("1" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                          (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                          (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "atan2")
                  (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                    (("2" (EXPAND "abs")
                      (("2" (ASSERT)
                        (("2" (CASE-REPLACE "Re(z!1) > 0")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (ASSERT)
                            (("2" (CASE-REPLACE "atan(Im(z!1) / Re(z!1)) < 0")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK))
 (|arg_is_pi| 0
  (|arg_is_pi-2| |nil| 3721232384
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (CASE-REPLACE "Im(z!1)=0")
          (("1" (ASSERT)
            (("1" (CASE-REPLACE "Re(z!1)=0")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "atan2")
                  (("2" (ASSERT)
                    (("2" (CASE-REPLACE "Re(z!1) > 0")
                      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "atan2")
              (("2" (CASE-REPLACE "Re(z!1)=0")
                (("1" (ASSERT)
                  (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (ASSERT)
                  (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                    (("2" (LIFT-IF -4)
                      (("2" (ASSERT)
                        (("2" (PROP)
                          (("2" (LEMMA "atan_strict_increasing")
                            (("2" (EXPAND "strict_increasing?")
                              (("2" (INST - "Im(z!1) / Re(z!1)" "0")
                                (("2" (REWRITE "atan_0")
                                  (("2"
                                    (LEMMA "both_sides_div_neg_lt1"
                                     ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|both_sides_div_neg_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   NIL)
  (|arg_is_pi-1| |nil| 3455857439
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (CASE-REPLACE "Im(z!1)=0")
        (("1" (ASSERT)
          (("1" (CASE-REPLACE "Re(z!1)=0")
            (("1" (ASSERT) NIL NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "atan2")
                (("2" (ASSERT)
                  (("2" (CASE-REPLACE "Re(z!1) > 0")
                    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "atan2")
            (("2" (CASE-REPLACE "Re(z!1)=0")
              (("1" (ASSERT) (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                  (("2" (LIFT-IF -4)
                    (("2" (ASSERT)
                      (("2" (PROP)
                        (("2" (LEMMA "atan_strict_increasing")
                          (("2" (EXPAND "strict_increasing?")
                            (("2" (INST - "Im(z!1) / Re(z!1)" "0")
                              (("2" (REWRITE "atan_0")
                                (("2"
                                  (LEMMA "both_sides_div_neg_lt1"
                                   ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|))
   SHOSTAK))
 (|arg_is_mpi2| 0
  (|arg_is_mpi2-2| |nil| 3721232415
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (CASE-REPLACE "Re(z!1)=0")
          (("1" (CASE-REPLACE "Im(z!1)<0")
            (("1" (ASSERT)
              (("1" (EXPAND "atan2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "atan2")
                (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "atan2")
              (("2" (LIFT-IF)
                (("2" (ASSERT)
                  (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                    (("2" (NAME-REPLACE "DRL" "atan(Im(z!1) / Re(z!1))")
                      (("2" (CASE-REPLACE "DRL<0")
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   NIL)
  (|arg_is_mpi2-1| |nil| 3455857932
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (CASE-REPLACE "Re(z!1)=0")
        (("1" (CASE-REPLACE "Im(z!1)<0")
          (("1" (ASSERT) (("1" (EXPAND "atan2") (("1" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "atan2")
              (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "atan2")
            (("2" (LIFT-IF)
              (("2" (ASSERT)
                (("2" (TYPEPRED "atan(Im(z!1) / Re(z!1))")
                  (("2" (EXPAND "abs")
                    (("2" (NAME-REPLACE "DRL" "atan(Im(z!1) / Re(z!1))")
                      (("2" (CASE-REPLACE "DRL<0")
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|))
   SHOSTAK))
 (|arg_lt_0| 0
  (|arg_lt_0-2| |nil| 3721232440
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (CASE-REPLACE "Im(z!1) < 0")
          (("1" (ASSERT) NIL NIL)
           ("2" (ASSERT)
            (("2" (LIFT-IF)
              (("2" (ASSERT)
                (("2" (CASE-REPLACE "Im(z!1)=0")
                  (("1" (EXPAND "atan2")
                    (("1" (CASE-REPLACE "Re(z!1) = 0")
                      (("1" (ASSERT)
                        (("1" (LIFT-IF)
                          (("1" (ASSERT)
                            (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACE 1 -1)
                    (("2" (EXPAND "atan2")
                      (("2" (LIFT-IF)
                        (("2" (ASSERT)
                          (("2" (CASE-REPLACE "Re(z!1)>0")
                            (("1" (LEMMA "atan_strict_increasing")
                              (("1" (EXPAND "strict_increasing?")
                                (("1" (INST - "0" "Im(z!1) / Re(z!1)")
                                  (("1" (REWRITE "atan_0")
                                    (("1"
                                      (LEMMA "posreal_div_posreal_is_posreal"
                                       ("px" "Im(z!1)" "py" "Re(z!1)"))
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE-REPLACE "Re(z!1)=0")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (> CONST-DECL "bool" |reals| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   NIL)
  (|arg_lt_0-1| |nil| 3455858132
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (CASE-REPLACE "Im(z!1) < 0")
        (("1" (ASSERT)
          (("1" (LEMMA "atan2_ge_0_lt_2pi" ("x" "Re(z!1)" "y" "Im(z!1)"))
            (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (LIFT-IF)
            (("2" (ASSERT)
              (("2" (CASE-REPLACE "Im(z!1)=0")
                (("1" (EXPAND "atan2")
                  (("1" (CASE-REPLACE "Re(z!1) = 0")
                    (("1" (ASSERT)
                      (("1" (REWRITE "atan_0")
                        (("1" (ASSERT)
                          (("1" (LIFT-IF)
                            (("1" (ASSERT)
                              (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACE 1 -1)
                  (("2" (EXPAND "atan2")
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (CASE-REPLACE "Re(z!1)>0")
                          (("1" (LEMMA "atan_strict_increasing")
                            (("1" (EXPAND "strict_increasing?")
                              (("1" (INST - "0" "Im(z!1) / Re(z!1)")
                                (("1" (REWRITE "atan_0")
                                  (("1"
                                    (LEMMA "posreal_div_posreal_is_posreal"
                                     ("px" "Im(z!1)" "py" "Re(z!1)"))
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE-REPLACE "Re(z!1)=0")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (ASSERT)
                              (("2"
                                (LEMMA "both_sides_div_neg_lt1"
                                 ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                (("2" (ASSERT)
                                  (("2" (LEMMA "atan_strict_increasing")
                                    (("2" (EXPAND "strict_increasing?")
                                      (("2" (INST - "Im(z!1) / Re(z!1)" "0")
                                        (("2" (REWRITE "atan_0")
                                          (("2" (SPLIT)
                                            (("1"
                                              (TYPEPRED
                                               "atan(Im(z!1) / Re(z!1))")
                                              (("1" (EXPAND "abs")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|))
   SHOSTAK))
 (|arg_p_lt_pi| 0
  (|arg_p_lt_pi-1| |nil| 3455862135
   ("" (SKOSIMP)
    (("" (LEMMA "arg_lt_0" ("z" "z!1"))
      (("" (LEMMA "arg_is_0" ("z" "z!1"))
        (("" (LEMMA "arg_is_pi" ("z" "z!1"))
          (("" (LEMMA "trichotomy" ("x" "arg(z!1)"))
            (("" (SPLIT)
              (("1" (ASSERT)
                (("1" (TYPEPRED "arg(z!1)")
                  (("1" (EXPAND "<=" -2)
                    (("1" (SPLIT)
                      (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|arg_lt_0| FORMULA-DECL NIL |polar| NIL)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|arg_is_0| FORMULA-DECL NIL |polar| NIL))
   SHOSTAK))
 (|arg_gt_0| 0
  (|arg_gt_0-1| |nil| 3455860679
   ("" (SKOSIMP)
    (("" (LEMMA "arg_lt_0" ("z" "z!1"))
      (("" (LEMMA "arg_is_0" ("z" "z!1"))
        (("" (LEMMA "trichotomy" ("x" "arg(z!1)"))
          (("" (SPLIT)
            (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
             ("3" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|arg_lt_0| FORMULA-DECL NIL |polar| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|arg_is_0| FORMULA-DECL NIL |polar| NIL))
   SHOSTAK))
 (|arg_div_abs_TCC1| 0
  (|arg_div_abs_TCC1-1| |nil| 3722877977
   ("" (SUBTYPE-TCC)
    (("" (REWRITE "sqrt_eq_0")
      (("" (LEMMA "sqrt_eq_0")
        (("" (INST -1 "Im(n0x!1) * Im(n0x!1) + Re(n0x!1) * Re(n0x!1)")
          (("" (SPLIT)
            (("1" (GRIND-REALS)
              (("1" (CASE "Im(n0x!1)=0 AND Re(n0x!1)=0")
                (("1" (DECOMPOSE-EQUALITY) NIL NIL)
                 ("2" (LEMMA "sq_plus_eq_0")
                  (("2" (INST -1 "Im(n0x!1)" "Re(n0x!1)")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sq_plus_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|))
   NIL
   (|arg_div_abs| SUBTYPE "complex_types.complex_(polar.abs(polar.n0x), 0)"
    "nzcomplex")))
 (|arg_div_abs| 0
  (|arg_div_abs-2| |nil| 3721232507
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (REWRITE "abs_def")
          (("" (CASE-REPLACE "Re(n0x!1)=0")
            (("1" (REWRITE "sq_0")
              (("1" (ASSERT)
                (("1" (USE "nzcomplex_nz")
                  (("1" (ASSERT)
                    (("1" (REWRITE "sqrt_sq_abs") (("1" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (LEMMA "sq_nz_pos" ("nz" "Re(n0x!1)"))
                (("2" (LEMMA "sqrt_pos" ("px" "sq(Im(n0x!1)) + sq(Re(n0x!1))"))
                  (("1" (NAME "DIV" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))")
                    (("1" (REPLACE -1)
                      (("1" (CASE-REPLACE "Im(n0x!1) < 0")
                        (("1"
                          (LEMMA "both_sides_div_pos_lt1"
                           ("pz" "DIV" "x" "Im(n0x!1)" "y" "0"))
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "atan2_cancel_pos"
                               ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz" "1/DIV"))
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (LEMMA "posreal_div_posreal_is_posreal"
                                 ("px" "1" "py" "DIV"))
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE-REPLACE "Im(n0x!1)=0")
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA "atan2_cancel_pos"
                                 ("x" "Re(n0x!1)" "y" "0" "pz" "1/DIV"))
                                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                 ("2"
                                  (LEMMA "posreal_div_posreal_is_posreal"
                                   ("px" "1" "py" "DIV"))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2"
                              (LEMMA "posreal_div_posreal_is_posreal"
                               ("px" "1" "py" "DIV"))
                              (("2"
                                (LEMMA "both_sides_div_pos_lt1"
                                 ("pz" "DIV" "y" "Im(n0x!1)" "x" "0"))
                                (("2" (ASSERT)
                                  (("2"
                                    (LEMMA "atan2_cancel_pos"
                                     ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz"
                                      "1/DIV"))
                                    (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|abs_def| FORMULA-DECL NIL |polar| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|atan2_cancel_pos| FORMULA-DECL NIL |atan2| |trig|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|sq_nz_pos| JUDGEMENT-TCC NIL |sq| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|div_nzcomplex1| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL))
   NIL)
  (|arg_div_abs-1| |nil| 3455860780
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "abs_def")
        (("" (CASE-REPLACE "Re(n0x!1)=0")
          (("1" (REWRITE "sq_0")
            (("1" (ASSERT)
              (("1" (TYPEPRED "n0x!1")
                (("1" (ASSERT)
                  (("1" (REWRITE "sqrt_sq_abs") (("1" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (LEMMA "sq_nz_pos" ("nz" "Re(n0x!1)"))
              (("2" (LEMMA "sqrt_pos" ("px" "sq(Im(n0x!1)) + sq(Re(n0x!1))"))
                (("1" (NAME "DIV" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))")
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (CASE-REPLACE "Im(n0x!1) < 0")
                        (("1"
                          (LEMMA "both_sides_div_pos_lt1"
                           ("pz" "DIV" "x" "Im(n0x!1)" "y" "0"))
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "atan2_cancel_pos"
                               ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz" "1/DIV"))
                              (("1" (ASSERT) NIL NIL)
                               ("2" (ASSERT)
                                (("2"
                                  (LEMMA "posreal_div_posreal_is_posreal"
                                   ("px" "1" "py" "DIV"))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE-REPLACE "Im(n0x!1)=0")
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA "atan2_cancel_pos"
                                 ("x" "Re(n0x!1)" "y" "0" "pz" "1/DIV"))
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2"
                                    (LEMMA "posreal_div_posreal_is_posreal"
                                     ("px" "1" "py" "DIV"))
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2"
                              (LEMMA "posreal_div_posreal_is_posreal"
                               ("px" "1" "py" "DIV"))
                              (("2"
                                (LEMMA "both_sides_div_pos_lt1"
                                 ("pz" "DIV" "y" "Im(n0x!1)" "x" "0"))
                                (("2" (ASSERT)
                                  (("2"
                                    (LEMMA "atan2_cancel_pos"
                                     ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz"
                                      "1/DIV"))
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|div_nzcomplex3| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_nz_pos| JUDGEMENT-TCC NIL |sq| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|Re_div3| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div3| FORMULA-DECL NIL |complex_types| NIL)
    (|atan2_cancel_pos| FORMULA-DECL NIL |atan2| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|Re_cos_abs1| 0
  (|Re_cos_abs1-3| "" 3790337194
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "abs_def")
        (("" (CASE-REPLACE "Re(n0x!1) = 0")
          (("1" (REWRITE "sq_0")
            (("1" (ASSERT)
              (("1" (LEMMA "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (SPLIT)
                  (("1" (EXPAND "atan2") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (REPLACE -1)
                    (("2" (REWRITE "sq_0")
                      (("2" (REWRITE "sqrt_0") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "sqrt_sq_neg")
                    (("3" (CASE-REPLACE "Im(n0x!1) = -1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "atan2")
                          (("1" (ASSERT)
                            (("1" (LEMMA "cos_neg" ("a" "pi/2"))
                              (("1" (REWRITE "cos_pi2")
                                (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2"
              (LEMMA "sq_eq"
               ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
              (("2" (FLATTEN)
                (("2" (SPLIT -2)
                  (("1" (REWRITE "sq_sqrt" -1)
                    (("1" (HIDE -2 -3)
                      (("1" (REWRITE "sq_1")
                        (("1"
                          (LEMMA "cos_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "cos_period"
                               ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                              (("1" (REPLACE -1 2 RL)
                                (("1" (HIDE -1)
                                  (("1"
                                    (CASE-REPLACE
                                     "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                    (("1" (HIDE -1)
                                      (("1" (CASE-REPLACE "Re(n0x!1) > 0")
                                        (("1" (REWRITE "sqrt_div" -2)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (EXPAND "/=")
                                            (("2" (REWRITE "sq_eq_0") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REWRITE "sqrt_div" -1)
                                            (("1" (REWRITE "div_div1")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (EXPAND "/=")
                                              (("2" (REWRITE "sq_eq_0") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 3)
                                      (("2" (REWRITE "sq_div" 1)
                                        (("2"
                                          (LEMMA "add_div"
                                           ("x" "1" "n0x" "1" "y"
                                            "sq(Im(n0x!1))" "n0y"
                                            "sq(Re(n0x!1))"))
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (REWRITE "cross_mult") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (ASSERT)
                                      (("3" (EXPAND "/=")
                                        (("3" (REWRITE "sq_eq_0") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|Re_cos_abs1-2| |nil| 3721234609
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (REWRITE "abs_def")
          (("" (CASE-REPLACE "Re(n0x!1) = 0")
            (("1" (REWRITE "sq_0")
              (("1" (ASSERT)
                (("1" (LEMMA "trichotomy" ("x" "Im(n0x!1)"))
                  (("1" (SPLIT)
                    (("1" (EXPAND "atan2") (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (REPLACE -1)
                      (("2" (REWRITE "sq_0")
                        (("2" (REWRITE "sqrt_0") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("3" (REWRITE "sqrt_sq_neg")
                      (("3" (CASE-REPLACE "Im(n0x!1) = -1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "atan2")
                            (("1" (ASSERT)
                              (("1" (LEMMA "cos_neg" ("a" "pi/2"))
                                (("1" (REWRITE "cos_pi2")
                                  (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2"
                (LEMMA "sq_eq"
                 ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
                (("2" (FLATTEN)
                  (("2" (SPLIT -2)
                    (("1" (REWRITE "sq_sqrt" -1)
                      (("1" (HIDE -2 -3)
                        (("1" (REWRITE "sq_1")
                          (("1"
                            (LEMMA "cos_atan2"
                             ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA "cos_period"
                                 ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                                (("1" (REPLACE -1 2 RL)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (CASE-REPLACE
                                       "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                      (("1" (HIDE -1)
                                        (("1" (CASE-REPLACE "Re(n0x!1) > 0")
                                          (("1" (REWRITE "sqrt_div" -2)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (EXPAND "/=")
                                              (("2" (REWRITE "sq_eq_0") NIL
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (REWRITE "sqrt_div" -1)
                                              (("1" (REWRITE "div_div1")
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (EXPAND "/=")
                                                (("2" (REWRITE "sq_eq_0") NIL
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -1 3)
                                        (("2" (REWRITE "sq_div" 1)
                                          (("2"
                                            (LEMMA "add_div"
                                             ("x" "1" "n0x" "1" "y"
                                              "sq(Im(n0x!1))" "n0y"
                                              "sq(Re(n0x!1))"))
                                            (("2" (REPLACE -1)
                                              (("2" (HIDE -1)
                                                (("2" (REWRITE "cross_mult")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (ASSERT)
                                        (("3" (EXPAND "/=")
                                          (("3" (REWRITE "sq_eq_0") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_sq_neg| FORMULA-DECL NIL |sqrt| |reals|)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|cos_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|cos_period| FORMULA-DECL NIL |sincos| |trig|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_div1| FORMULA-DECL NIL |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|abs_def| FORMULA-DECL NIL |polar| NIL))
   NIL)
  (|Re_cos_abs1-1| |nil| 3455859132
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "abs_def")
        (("" (CASE-REPLACE "Re(n0x!1) = 0")
          (("1" (REWRITE "sq_0")
            (("1" (ASSERT)
              (("1" (LEMMA "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (SPLIT)
                  (("1" (EXPAND "atan2")
                    (("1" (ASSERT) (("1" (REWRITE "cos_pi2") NIL NIL)) NIL))
                    NIL)
                   ("2" (REPLACE -1)
                    (("2" (REWRITE "sq_0")
                      (("2" (REWRITE "sqrt_0") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "sqrt_sq_neg")
                    (("3" (CASE-REPLACE "Im(n0x!1) = -1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "atan2")
                          (("1" (ASSERT)
                            (("1" (LEMMA "cos_neg" ("a" "pi/2"))
                              (("1" (REWRITE "cos_pi2")
                                (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2"
              (LEMMA "sq_eq"
               ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
              (("2" (FLATTEN)
                (("2" (SPLIT -2)
                  (("1" (REWRITE "sq_sqrt" -1)
                    (("1" (HIDE -2 -3)
                      (("1" (REWRITE "sq_1")
                        (("1"
                          (LEMMA "cos_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "cos_period"
                               ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                              (("1" (REPLACE -1 2 RL)
                                (("1" (HIDE -1)
                                  (("1"
                                    (CASE-REPLACE
                                     "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                    (("1" (HIDE -1)
                                      (("1" (CASE-REPLACE "Re(n0x!1) > 0")
                                        (("1" (REWRITE "sqrt_div" -2)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (EXPAND "/=")
                                            (("2" (REWRITE "sq_eq_0") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REWRITE "sqrt_div" -1)
                                            (("1" (REWRITE "div_div1")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (EXPAND "/=")
                                              (("2" (REWRITE "sq_eq_0") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 3)
                                      (("2" (REWRITE "sq_div" 1)
                                        (("2"
                                          (LEMMA "add_div"
                                           ("x" "1" "n0x" "1" "y"
                                            "sq(Im(n0x!1))" "n0y"
                                            "sq(Re(n0x!1))"))
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (REWRITE "cross_mult") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (ASSERT)
                                      (("3" (EXPAND "/=")
                                        (("3" (REWRITE "sq_eq_0") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sqrt_sq_neg| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|cos_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|cos_period| FORMULA-DECL NIL |sincos| |trig|)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|Im_sin_abs1| 0
  (|Im_sin_abs1-2| |nil| 3721234635
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (USE "nzcomplex_nz")
        (("" (CASE-REPLACE "Im(n0x!1) = 0")
          (("1" (ASSERT)
            (("1" (EXPAND "atan2")
              (("1" (REWRITE "atan_0")
                (("1" (FLATTEN)
                  (("1" (REWRITE "sin_0")
                    (("1" (REWRITE "sin_pi")
                      (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (LEMMA "sin_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
              (("2" (ASSERT)
                (("2" (REWRITE "abs_def" -3)
                  (("2"
                    (LEMMA "sq_eq"
                     ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
                    (("2" (FLATTEN -1)
                      (("2" (SPLIT -2)
                        (("1" (HIDE -2 -4)
                          (("1" (REWRITE "sq_sqrt")
                            (("1" (REWRITE "sq_1")
                              (("1"
                                (LEMMA "sin_period"
                                 ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                                (("1" (REPLACE -1 2 RL)
                                  (("1" (HIDE -1)
                                    (("1" (CASE-REPLACE "Re(n0x!1)=0")
                                      (("1" (REPLACE -3)
                                        (("1" (ASSERT)
                                          (("1" (HIDE -1 -3)
                                            (("1" (CASE "Im(n0x!1)<0")
                                              (("1"
                                                (LEMMA "sq_neg"
                                                 ("a" "Im(n0x!1)"))
                                                (("1"
                                                  (LEMMA "sq_eq"
                                                   ("nna" "-Im(n0x!1)" "nnb"
                                                    "1"))
                                                  (("1" (EXPAND "sq" -1 2)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "sq_eq"
                                                   ("nna" "Im(n0x!1)" "nnb"
                                                    "1"))
                                                  (("2" (EXPAND "sq" -1 2)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (CASE-REPLACE
                                           "1 + sq(Im(n0x!1) / Re(n0x!1)) = sq(1/Re(n0x!1))")
                                          (("1" (REWRITE "sqrt_sq_abs")
                                            (("1" (HIDE -1)
                                              (("1" (REPLACE -2)
                                                (("1" (HIDE -1 -2)
                                                  (("1"
                                                    (LEMMA "real_props.abs_div"
                                                     ("x" "1" "n0y"
                                                      "Re(n0x!1)"))
                                                    (("1" (REPLACE -1)
                                                      (("1" (HIDE -1)
                                                        (("1" (EXPAND "abs")
                                                          (("1"
                                                            (REWRITE
                                                             "div_div1")
                                                            (("1"
                                                              (REWRITE
                                                               "div_cancel3")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 4 -2)
                                            (("2"
                                              (LEMMA "add_div"
                                               ("x" "1" "n0x" "1" "y"
                                                "sq(Im(n0x!1))" "n0y"
                                                "sq(Re(n0x!1))"))
                                              (("1" (REWRITE "sq_div" 1)
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -2)
                                                      (("1"
                                                        (REWRITE "sq_div" 1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (REWRITE "sq_eq_0") NIL
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sin_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|abs_def| FORMULA-DECL NIL |polar| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|) (< CONST-DECL "bool" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq_neg| FORMULA-DECL NIL |sq| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sin_period| FORMULA-DECL NIL |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL))
   NIL)
  (|Im_sin_abs1-1| |nil| 3455862298
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (TYPEPRED "n0x!1")
        (("" (REWRITE "sin_0")
          (("" (CASE-REPLACE "Im(n0x!1) = 0")
            (("1" (ASSERT)
              (("1" (EXPAND "atan2")
                (("1" (REWRITE "atan_0")
                  (("1" (ASSERT)
                    (("1" (REWRITE "sin_0")
                      (("1" (REWRITE "sin_pi")
                        (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (LEMMA "sin_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                (("2" (ASSERT)
                  (("2" (REWRITE "abs_def" -3)
                    (("2"
                      (LEMMA "sq_eq"
                       ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
                      (("2" (FLATTEN -1)
                        (("2" (SPLIT -2)
                          (("1" (HIDE -2 -4)
                            (("1" (REWRITE "sq_sqrt")
                              (("1" (REWRITE "sq_1")
                                (("1"
                                  (LEMMA "sin_period"
                                   ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j"
                                    "-1"))
                                  (("1" (REPLACE -1 2 RL)
                                    (("1" (HIDE -1)
                                      (("1" (CASE-REPLACE "Re(n0x!1)=0")
                                        (("1" (REPLACE -3)
                                          (("1" (ASSERT)
                                            (("1" (HIDE -1 -3)
                                              (("1" (CASE "Im(n0x!1)<0")
                                                (("1"
                                                  (LEMMA "sq_neg"
                                                   ("a" "Im(n0x!1)"))
                                                  (("1"
                                                    (LEMMA "sq_eq"
                                                     ("nna" "-Im(n0x!1)" "nnb"
                                                      "1"))
                                                    (("1" (EXPAND "sq" -1 2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (LEMMA "sq_eq"
                                                     ("nna" "Im(n0x!1)" "nnb"
                                                      "1"))
                                                    (("2" (EXPAND "sq" -1 2)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2"
                                            (CASE-REPLACE
                                             "1 + sq(Im(n0x!1) / Re(n0x!1)) = sq(1/Re(n0x!1))")
                                            (("1" (REWRITE "sqrt_sq_abs")
                                              (("1" (HIDE -1)
                                                (("1" (REPLACE -2)
                                                  (("1" (HIDE -1 -2)
                                                    (("1"
                                                      (LEMMA
                                                       "real_props.abs_div"
                                                       ("x" "1" "n0y"
                                                        "Re(n0x!1)"))
                                                      (("1" (REPLACE -1)
                                                        (("1" (HIDE -1)
                                                          (("1" (EXPAND "abs")
                                                            (("1"
                                                              (REWRITE
                                                               "div_div1")
                                                              (("1"
                                                                (REWRITE
                                                                 "div_cancel3")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 4 -2)
                                              (("2"
                                                (LEMMA "add_div"
                                                 ("x" "1" "n0x" "1" "y"
                                                  "sq(Im(n0x!1))" "n0y"
                                                  "sq(Re(n0x!1))"))
                                                (("1" (REWRITE "sq_div" 1)
                                                  (("1" (REPLACE -1)
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACE -2)
                                                        (("1"
                                                          (REWRITE "sq_div" 1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "/=")
                                                  (("2" (REWRITE "sq_eq_0") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|sq_eq| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sin_period| FORMULA-DECL NIL |sincos| |trig|)
    (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_div| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_neg| FORMULA-DECL NIL |sq| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|abs_cos_arg| 0
  (|abs_cos_arg-1| |nil| 3456133110
   ("" (SKOSIMP)
    (("" (CASE "z!1=complex_(0,0)")
      (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (REWRITE "complex_ext")
        (("2" (LEMMA "arg_div_abs" ("n0x" "z!1"))
          (("1" (LEMMA "Re_cos_abs1" ("n0x" "z!1 / abs(z!1)"))
            (("1" (REPLACE -2 :DIR RL)
              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (LEMMA "abs_is_0")
              (("2" (INST -1 "z!1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|arg_div_abs| FORMULA-DECL NIL |polar| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|abs_is_0| FORMULA-DECL NIL |polar| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|abs_div| FORMULA-DECL NIL |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Re_cos_abs1| FORMULA-DECL NIL |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|abs_sin_arg| 0
  (|abs_sin_arg-1| |nil| 3456133318
   ("" (SKOSIMP)
    (("" (CASE "z!1=real_(0)")
      (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (REWRITE "complex_ext")
        (("2" (LEMMA "arg_div_abs" ("n0x" "z!1"))
          (("1" (LEMMA "Im_sin_abs1" ("n0x" "z!1/abs(z!1)"))
            (("1" (REPLACE -2 -1 RL)
              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (LEMMA "abs_is_0")
              (("2" (INST? -) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|arg_div_abs| FORMULA-DECL NIL |polar| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|abs_is_0| FORMULA-DECL NIL |polar| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|abs_div| FORMULA-DECL NIL |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_sin_abs1| FORMULA-DECL NIL |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|arg_nnreal| 0
  (|arg_nnreal-1| |nil| 3455859070
   ("" (SKOSIMP) (("" (REWRITE "arg_is_0") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|arg_is_0| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|arg_nreal| 0
  (|arg_nreal-1| |nil| 3455859044
   ("" (SKOSIMP) (("" (REWRITE "arg_is_pi") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|arg_i| 0
  (|arg_i-2| "" 3790337204 ("" (REWRITE "arg_is_pi2") NIL NIL) NIL SHOSTAK)
  (|arg_i-1| |nil| 3455858988
   ("" (REWRITE "arg_is_pi2")
    (("" (EXPAND "complex_i")
      (("" (EXPAND "Re") (("" (EXPAND "Im") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|arg_is_pi2| FORMULA-DECL NIL |polar| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|arg_neg| 0
  (|arg_neg-2| |nil| 3721235245
   ("" (SKOSIMP)
    (("" (EXPAND "arg")
      (("" (REWRITE "complex_ext")
        (("" (ASSERT)
          (("" (LEMMA "trichotomy" ("x" "Re(n0x!1)"))
            (("" (SPLIT)
              (("1" (LEMMA "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (SPLIT)
                  (("1" (ASSERT)
                    (("1"
                      (LEMMA "atan2_cancel_neg"
                       ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "nz" "-1"))
                      (("1" (ASSERT)
                        (("1" (REPLACE -1 1)
                          (("1" (ASSERT)
                            (("1" (LIFT-IF)
                              (("1" (ASSERT)
                                (("1" (PROP)
                                  (("1" (LEMMA "atan_strict_increasing")
                                    (("1" (EXPAND "strict_increasing?")
                                      (("1" (EXPAND "atan2")
                                        (("1"
                                          (LEMMA "both_sides_div_pos_lt1"
                                           ("pz" "Re(n0x!1)" "y" "Im(n0x!1)"
                                            "x" "0"))
                                          (("1" (ASSERT)
                                            (("1"
                                              (INST - "0"
                                               "Im(n0x!1) / Re(n0x!1)")
                                              (("1" (REWRITE "atan_0")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (REPLACE -1)
                      (("2" (EXPAND "atan2")
                        (("2" (REWRITE "atan_0") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT)
                    (("3" (EXPAND "atan2")
                      (("3" (ASSERT)
                        (("3" (LIFT-IF)
                          (("3" (ASSERT)
                            (("3" (PROP)
                              (("3" (LEMMA "atan_strict_increasing")
                                (("3" (EXPAND "strict_increasing?")
                                  (("3"
                                    (LEMMA "both_sides_div_pos_lt1"
                                     ("pz" "Re(n0x!1)" "x" "Im(n0x!1)" "y"
                                      "0"))
                                    (("3" (INST - "Im(n0x!1) / Re(n0x!1)" "0")
                                      (("3" (REWRITE "atan_0")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACE -1)
                (("2" (ASSERT)
                  (("2" (USE "nzcomplex_nz")
                    (("2" (ASSERT)
                      (("2" (EXPAND "atan2") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT)
                (("3" (LEMMA "trichotomy" ("x" "Im(n0x!1)"))
                  (("3" (SPLIT)
                    (("1" (ASSERT)
                      (("1" (EXPAND "atan2")
                        (("1" (LIFT-IF)
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "atan(Im(n0x!1) / Re(n0x!1))")
                              (("1"
                                (CASE-REPLACE
                                 "atan(Im(n0x!1) / Re(n0x!1)) < 0")
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACE -1)
                      (("2" (EXPAND "atan2")
                        (("2" (REWRITE "atan_0")
                          (("2" (ASSERT)
                            (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (ASSERT)
                      (("3" (EXPAND "atan2")
                        (("3" (LIFT-IF)
                          (("3" (ASSERT)
                            (("3" (TYPEPRED "atan(Im(n0x!1) / Re(n0x!1))")
                              (("3"
                                (CASE-REPLACE
                                 "atan(Im(n0x!1) / Re(n0x!1)) < 0")
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan2_cancel_neg| FORMULA-DECL NIL |atan2| |trig|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|neg_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   NIL))
 (|arg_conjugate| 0
  (|arg_conjugate-1| |nil| 3456035972
   ("" (SKOSIMP)
    (("" (CASE-REPLACE "arg(z!1) = 0")
      (("1" (REWRITE "arg_is_0")
        (("1" (REWRITE "arg_is_0")
          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (CASE-REPLACE "arg(z!1) = pi")
        (("1" (REWRITE "arg_is_pi")
          (("1" (FLATTEN)
            (("1" (REWRITE "arg_is_pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (TYPEPRED "arg(z!1)")
            (("2" (CASE "arg(z!1)<0")
              (("1" (LEMMA "arg_lt_0" ("z" "z!1"))
                (("1" (ASSERT)
                  (("1" (HIDE-ALL-BUT (-1 3))
                    (("1" (EXPAND "arg")
                      (("1" (EXPAND "atan2")
                        (("1" (REWRITE "complex_ext")
                          (("1" (REWRITE "complex_ext")
                            (("1" (ASSERT)
                              (("1" (LEMMA "trichotomy" ("x" "Re(z!1)"))
                                (("1" (SPLIT)
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (ASSERT)
                                    (("3"
                                      (LEMMA "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "arg_p_lt_pi" ("z" "z!1"))
                (("2" (ASSERT)
                  (("2" (HIDE-ALL-BUT (-1 4))
                    (("2" (EXPAND "arg")
                      (("2" (EXPAND "atan2")
                        (("2" (REWRITE "complex_ext")
                          (("2" (REWRITE "complex_ext")
                            (("2" (ASSERT)
                              (("2" (LEMMA "trichotomy" ("x" "Re(z!1)"))
                                (("2" (SPLIT)
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3"
                                    (LEMMA "atan_neg"
                                     ("x" "Im(z!1) / Re(z!1)"))
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|conjugate| CONST-DECL "complex" |complex_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Re_conjugate| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_conjugate| FORMULA-DECL NIL |complex_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|arg_is_0| FORMULA-DECL NIL |polar| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atan_neg| FORMULA-DECL NIL |atan| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|arg_lt_0| FORMULA-DECL NIL |polar| NIL)
    (|arg_p_lt_pi| FORMULA-DECL NIL |polar| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK))
 (|arg_mult| 0
  (|arg_mult-2| |nil| 3721235610
   ("" (AUTO-REWRITE "complex_ext")
    ((""
      (CASE "FORALL (n0x, n0y: nzcomplex):
                      arg(n0x * n0y) =arg(n0y * n0x)")
      (("1"
        (CASE "FORALL (n0x, n0y: nzcomplex):arg(n0x)=0 =>
                          arg(n0x * n0y) =
                           LET r = arg(n0x) + arg(n0y) IN
                             IF r > pi THEN r - 2 * pi
                             ELSIF r <= -pi THEN r + 2 * pi
                             ELSE r
                             ENDIF")
        (("1"
          (CASE "FORALL (n0x, n0y: nzcomplex):
                              arg(n0x) = pi =>
                               arg(n0x * n0y) =
                                LET r = arg(n0x) + arg(n0y) IN
                                  IF r > pi THEN r - 2 * pi
                                  ELSIF r <= -pi THEN r + 2 * pi
                                  ELSE r
                                  ENDIF")
          (("1"
            (CASE "FORALL (n0x, n0y: nzcomplex):
                                  0<arg(n0x) & arg(n0x)< pi =>
                                   arg(n0x * n0y) =
                                    LET r = arg(n0x) + arg(n0y) IN
                                      IF r > pi THEN r - 2 * pi
                                      ELSIF r <= -pi THEN r + 2 * pi
                                      ELSE r
                                      ENDIF")
            (("1" (SKOSIMP)
              (("1" (LEMMA "trichotomy" ("x" "arg(n0x!1)"))
                (("1" (SPLIT)
                  (("1" (TYPEPRED "arg(n0x!1)")
                    (("1" (EXPAND "<=" -2)
                      (("1" (SPLIT)
                        (("1" (INST -4 "n0x!1" "n0y!1")
                          (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("2" (INST -5 "n0x!1" "n0y!1")
                          (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (INST -4 "n0x!1" "n0y!1")
                    (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                   ("3" (TYPEPRED "arg(n0x!1)")
                    (("3" (HIDE -2)
                      (("3" (LEMMA "arg_neg" ("n0x" "n0x!1"))
                        (("3" (ASSERT)
                          (("3" (INST -4 "-n0x!1" "n0y!1")
                            (("3" (REPLACE -1)
                              (("3" (ASSERT)
                                (("3" (LEMMA "arg_neg" ("n0x" "n0x!1*n0y!1"))
                                  (("3" (EXPAND "*" -1 1)
                                    (("3" (EXPAND "*" -5 1)
                                      (("3" (EXPAND "-" -1 1)
                                        (("3" (ASSERT)
                                          (("3" (REPLACE -1 -5)
                                            (("3" (HIDE -1)
                                              (("3" (LIFT-IF -4)
                                                (("3" (LIFT-IF -4)
                                                  (("3" (ASSERT)
                                                    (("3" (LIFT-IF 1)
                                                      (("3"
                                                        (CASE
                                                            "arg(n0x!1) + arg(n0y!1) <= -pi")
                                                        (("1" (ASSERT)
                                                          (("1" (PROP)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (REPLACE 2 -4)
                                                            (("2" (ASSERT)
                                                              (("2" (GROUND)
                                                                (("2" (LIFT-IF)
                                                                  (("2"
                                                                    (GROUND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2"
                (CASE "FORALL (n0x, n0y: nzcomplex):
                                      0 < arg(n0x) & arg(n0x) < pi & -pi < arg(n0y) & arg(n0y)<0=>
                                       arg(n0x * n0y) =
                                        LET r = arg(n0x) + arg(n0y) IN
                                          IF r > pi THEN r - 2 * pi
                                          ELSIF r <= -pi THEN r + 2 * pi
                                          ELSE r
                                          ENDIF")
                (("1" (SKOSIMP)
                  (("1" (LEMMA "trichotomy" ("x" "arg(n0y!1)"))
                    (("1" (SPLIT)
                      (("1" (TYPEPRED "arg(n0y!1)")
                        (("1" (EXPAND "<=" -2)
                          (("1" (SPLIT)
                            (("1" (HIDE -2)
                              (("1" (LEMMA "arg_neg" ("n0x" "n0y!1"))
                                (("1" (ASSERT)
                                  (("1" (INST -4 "n0x!1" "-n0y!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (LEMMA "arg_neg"
                                         ("n0x" "n0x!1 * n0y!1"))
                                        (("1" (EXPAND "-" -1 1)
                                          (("1" (EXPAND "-" -5 1)
                                            (("1" (EXPAND "*" -5 1)
                                              (("1" (EXPAND "*" -1 1)
                                                (("1" (ASSERT)
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 -5)
                                                      (("1" (REPLACE -2 -5)
                                                        (("1" (ASSERT)
                                                          (("1" (LIFT-IF -5)
                                                            (("1" (ASSERT)
                                                              (("1" (LIFT-IF 1)
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "0 < arg(n0x!1 * n0y!1)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -9 "n0x!1" "n0y!1")
                              (("2" (INST -7 "n0y!1" "n0x!1")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (INST -7 "n0x!1" "n0y!1")
                        (("2" (INST -6 "n0y!1" "n0x!1")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("3" (INST -2 "n0x!1" "n0y!1") (("3" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (SKOSIMP)
                    (("2" (ASSERT)
                      (("2" (LEMMA "arg_lt_0" ("z" "n0y!1"))
                        (("2" (ASSERT)
                          (("2" (LEMMA "arg_p_lt_pi" ("z" "n0x!1"))
                            (("2" (ASSERT)
                              (("2" (HIDE -3 -4 -5 -6)
                                (("2" (EXPAND "arg")
                                  (("2" (EXPAND "atan2")
                                    (("2" (ASSERT)
                                      (("2"
                                        (LEMMA "both_sides_times_pos_lt1"
                                         ("pz" "Im(n0x!1)" "x" "Im(n0y!1)" "y"
                                          "0"))
                                        (("2" (ASSERT)
                                          (("2" (CASE-REPLACE "Re(n0x!1)=0")
                                            (("1" (ASSERT)
                                              (("1"
                                                (CASE-REPLACE
                                                 "(Im(n0x!1) * Re(n0y!1) / (-1 * (Im(n0x!1) * Im(n0y!1))))=-(Re(n0y!1)/Im(n0y!1))")
                                                (("1" (REWRITE "atan_neg")
                                                  (("1" (HIDE -1)
                                                    (("1"
                                                      (LEMMA "trichotomy"
                                                       ("x" "Re(n0y!1)"))
                                                      (("1" (SPLIT)
                                                        (("1"
                                                          (LEMMA
                                                           "both_sides_div_neg_lt1"
                                                           ("nz" "Im(n0y!1)"
                                                            "x" "Re(n0y!1)" "y"
                                                            "0"))
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "atan_inv_neg"
                                                               ("nx"
                                                                "Re(n0y!1) / Im(n0y!1)"))
                                                              (("1"
                                                                (REWRITE
                                                                 "div_div1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (REPLACE -1)
                                                            (("2"
                                                              (REWRITE
                                                               "atan_0")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (LEMMA
                                                           "negreal_div_negreal_is_posreal"
                                                           ("nx" "Re(n0y!1)"
                                                            "ny" "Im(n0y!1)"))
                                                          (("1"
                                                            (LEMMA "atan_inv"
                                                             ("px"
                                                              "Re(n0y!1) / Im(n0y!1)"))
                                                            (("1"
                                                              (REWRITE
                                                               "div_div1")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2"
                                                (CASE-REPLACE "Re(n0y!1)=0")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "(Re(n0x!1) * Im(n0y!1) / (-1 * (Im(n0x!1) * Im(n0y!1))))=-(Re(n0x!1)/Im(n0x!1))")
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (REWRITE "atan_neg")
                                                        (("1"
                                                          (LEMMA "trichotomy"
                                                           ("x" "Re(n0x!1)"))
                                                          (("1" (SPLIT)
                                                            (("1"
                                                              (LEMMA
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "Re(n0x!1)"
                                                                "py"
                                                                "Im(n0x!1)"))
                                                              (("1"
                                                                (LEMMA
                                                                 "atan_inv"
                                                                 ("px"
                                                                  "Re(n0x!1) / Im(n0x!1)"))
                                                                (("1"
                                                                  (REWRITE
                                                                   "div_div1")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (PROPAX) NIL
                                                              NIL)
                                                             ("3"
                                                              (LEMMA
                                                               "both_sides_div_pos_lt1"
                                                               ("pz"
                                                                "Im(n0x!1)" "x"
                                                                "Re(n0x!1)" "y"
                                                                "0"))
                                                              (("3" (ASSERT)
                                                                (("3"
                                                                  (LEMMA
                                                                   "atan_inv_neg"
                                                                   ("nx"
                                                                    "Re(n0x!1) / Im(n0x!1)"))
                                                                  (("3"
                                                                    (REWRITE
                                                                     "div_div1")
                                                                    (("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (LEMMA "trichotomy"
                                                     ("x" "Re(n0x!1)"))
                                                    (("2" (SPLIT)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1"
                                                         ("pz" "Re(n0x!1)" "x"
                                                          "Im(n0y!1)" "y" "0"))
                                                        (("1"
                                                          (REWRITE
                                                           "zero_times1")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "Im(n0x!1)"
                                                                "py"
                                                                "Re(n0x!1)"))
                                                              (("1"
                                                                (LEMMA
                                                                 "trichotomy"
                                                                 ("x"
                                                                  "Re(n0y!1)"))
                                                                (("1" (SPLIT)
                                                                  (("1"
                                                                    (HIDE 1 2)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "both_sides_div_pos_lt1"
                                                                       ("pz"
                                                                        "Re(n0y!1)"
                                                                        "x"
                                                                        "Im(n0y!1)"
                                                                        "y"
                                                                        "0"))
                                                                      (("1"
                                                                        (LEMMA
                                                                         "both_sides_times_pos_lt1"
                                                                         ("pz"
                                                                          "Re(n0y!1)"
                                                                          "y"
                                                                          "Im(n0x!1)"
                                                                          "x"
                                                                          "0"))
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "zero_times1")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "posreal_times_posreal_is_posreal"
                                                                               ("px"
                                                                                "Re(n0x!1)"
                                                                                "py"
                                                                                "Re(n0y!1)"))
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "Im(n0x!1) / Re(n0x!1)"
                                                                                        "x"
                                                                                        "Im(n0y!1) / Re(n0y!1)"
                                                                                        "y"
                                                                                        "0"))
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -2)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "add_div")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "div_times")
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "div_distributes_minus"
                                                                                                 ("x"
                                                                                                  "Re(n0y!1) * Re(n0x!1)"
                                                                                                  "n0z"
                                                                                                  "Re(n0y!1) * Re(n0x!1)"
                                                                                                  "y"
                                                                                                  "Im(n0y!1) * Im(n0x!1)"))
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "div_simp")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "div_div1")
                                                                                                      (("1"
                                                                                                        (REWRITE
                                                                                                         "div_cancel2")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("3"
                                                                    (LEMMA
                                                                     "both_sides_div_neg_lt1"
                                                                     ("nz"
                                                                      "Re(n0y!1)"
                                                                      "y"
                                                                      "Im(n0y!1)"
                                                                      "x" "0"))
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "both_sides_times_neg_lt1"
                                                                         ("nz"
                                                                          "Re(n0y!1)"
                                                                          "x"
                                                                          "Im(n0x!1)"
                                                                          "y"
                                                                          "0"))
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "both_sides_times_neg_lt1"
                                                                             ("nz"
                                                                              "Re(n0y!1)"
                                                                              "x"
                                                                              "Re(n0x!1)"
                                                                              "y"
                                                                              "0"))
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "zero_times1")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "atan_plus"
                                                                                     ("x"
                                                                                      "Im(n0x!1) / Re(n0x!1)"
                                                                                      "y"
                                                                                      "Im(n0y!1) / Re(n0y!1)"))
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -3)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "trich_lt"
                                                                                             ("x"
                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                              "y"
                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "div_times"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (SPLIT)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "div_mult_neg_lt1"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "div_distributes_minus"
                                                                                                             ("x"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "n0z"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "y"
                                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "div_simp")
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (REWRITE
                                                                                                                   "add_div")
                                                                                                                  (("1"
                                                                                                                    (REWRITE
                                                                                                                     "div_div1")
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "div_cancel2")
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "cross_mult"
                                                                                                       ("x"
                                                                                                        "Re(n0x!1)"
                                                                                                        "n0x"
                                                                                                        "Im(n0x!1)"
                                                                                                        "y"
                                                                                                        "Im(n0y!1)"
                                                                                                        "n0y"
                                                                                                        "Re(n0y!1)"))
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (LEMMA
                                                                                                           "atan_inv"
                                                                                                           ("px"
                                                                                                            "Re(n0x!1) / Im(n0x!1)"))
                                                                                                          (("1"
                                                                                                            (REWRITE
                                                                                                             "div_div1")
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (REWRITE
                                                                                                   "div_mult_neg_lt2"
                                                                                                   -3)
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    (("3"
                                                                                                      (HIDE
                                                                                                       -2)
                                                                                                      (("3"
                                                                                                        (REPLACE
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (LEMMA
                                                                                                           "div_distributes_minus"
                                                                                                           ("x"
                                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                                            "n0z"
                                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                                            "y"
                                                                                                            "Im(n0x!1) * Im(n0y!1)"))
                                                                                                          (("3"
                                                                                                            (REWRITE
                                                                                                             "div_simp")
                                                                                                            (("3"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (REWRITE
                                                                                                                 "add_div")
                                                                                                                (("3"
                                                                                                                  (REWRITE
                                                                                                                   "div_div1")
                                                                                                                  (("3"
                                                                                                                    (REWRITE
                                                                                                                     "div_cancel2")
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (PROPAX) NIL NIL)
                                                       ("3"
                                                        (LEMMA
                                                         "both_sides_div_neg_lt1"
                                                         ("x" "Im(n0x!1)" "y"
                                                          "0" "nz"
                                                          "Re(n0x!1)"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_times_neg_lt1"
                                                             ("y" "Im(n0y!1)"
                                                              "x" "0" "nz"
                                                              "Re(n0x!1)"))
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REWRITE
                                                                 "zero_times1")
                                                                (("1"
                                                                  (LEMMA
                                                                   "trichotomy"
                                                                   ("x"
                                                                    "Re(n0y!1)"))
                                                                  (("1" (SPLIT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "both_sides_div_pos_lt1"
                                                                       ("pz"
                                                                        "Re(n0y!1)"
                                                                        "x"
                                                                        "Im(n0y!1)"
                                                                        "y"
                                                                        "0"))
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "both_sides_times_pos_lt1"
                                                                           ("pz"
                                                                            "Re(n0y!1)"
                                                                            "y"
                                                                            "Im(n0x!1)"
                                                                            "x"
                                                                            "0"))
                                                                          (("1"
                                                                            (REWRITE
                                                                             "zero_times1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -2)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "trich_lt"
                                                                                           ("x"
                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                            "y"
                                                                                            "Im(n0x!1) * Im(n0y!1)"))
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "div_times"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (SPLIT)
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "div_mult_neg_lt1"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "div_distributes_minus"
                                                                                                         ("x"
                                                                                                          "Re(n0x!1) * Re(n0y!1)"
                                                                                                          "n0z"
                                                                                                          "Re(n0x!1) * Re(n0y!1)"
                                                                                                          "y"
                                                                                                          "Im(n0x!1) * Im(n0y!1)"))
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "div_simp")
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "add_div")
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "div_div1")
                                                                                                                (("1"
                                                                                                                  (REWRITE
                                                                                                                   "div_cancel2")
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "cross_mult"
                                                                                                     ("x"
                                                                                                      "Re(n0x!1)"
                                                                                                      "n0x"
                                                                                                      "Im(n0x!1)"
                                                                                                      "y"
                                                                                                      "Im(n0y!1)"
                                                                                                      "n0y"
                                                                                                      "Re(n0y!1)"))
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "atan_inv_neg"
                                                                                                         ("nx"
                                                                                                          "Im(n0x!1) / Re(n0x!1)"))
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "div_div1")
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (LEMMA
                                                                                                 "both_sides_times_pos_lt1"
                                                                                                 ("pz"
                                                                                                  "Re(n0y!1)"
                                                                                                  "x"
                                                                                                  "Re(n0x!1)"
                                                                                                  "y"
                                                                                                  "0"))
                                                                                                (("3"
                                                                                                  (ASSERT)
                                                                                                  (("3"
                                                                                                    (REWRITE
                                                                                                     "div_mult_neg_lt2"
                                                                                                     -4)
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      (("3"
                                                                                                        (HIDE
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (REPLACE
                                                                                                           -3)
                                                                                                          (("3"
                                                                                                            (LEMMA
                                                                                                             "div_distributes_minus"
                                                                                                             ("x"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "n0z"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "y"
                                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                                            (("3"
                                                                                                              (REWRITE
                                                                                                               "div_simp")
                                                                                                              (("3"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (REWRITE
                                                                                                                   "add_div")
                                                                                                                  (("3"
                                                                                                                    (REWRITE
                                                                                                                     "div_div1")
                                                                                                                    (("3"
                                                                                                                      (REWRITE
                                                                                                                       "div_cancel2")
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (PROPAX)
                                                                      NIL NIL)
                                                                     ("3"
                                                                      (LEMMA
                                                                       "both_sides_div_neg_lt1"
                                                                       ("nz"
                                                                        "Re(n0y!1)"
                                                                        "y"
                                                                        "Im(n0y!1)"
                                                                        "x"
                                                                        "0"))
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "both_sides_times_neg_lt1"
                                                                           ("nz"
                                                                            "Re(n0y!1)"
                                                                            "x"
                                                                            "Im(n0x!1)"
                                                                            "y"
                                                                            "0"))
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "negreal_times_negreal_is_posreal"
                                                                               ("nx"
                                                                                "Re(n0x!1)"
                                                                                "ny"
                                                                                "Re(n0y!1)"))
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "Im(n0y!1) / Re(n0y!1)"
                                                                                        "x"
                                                                                        "Im(n0x!1) / Re(n0x!1)"
                                                                                        "y"
                                                                                        "0"))
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -2)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "div_times")
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "div_distributes_minus"
                                                                                               ("x"
                                                                                                "Re(n0x!1) * Re(n0y!1)"
                                                                                                "n0z"
                                                                                                "Re(n0x!1) * Re(n0y!1)"
                                                                                                "y"
                                                                                                "Im(n0x!1) * Im(n0y!1)"))
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "div_simp")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "add_div"
                                                                                                     ("x"
                                                                                                      "Im(n0x!1)"
                                                                                                      "n0x"
                                                                                                      "Re(n0x!1)"
                                                                                                      "y"
                                                                                                      "Im(n0y!1)"
                                                                                                      "n0y"
                                                                                                      "Re(n0y!1)"))
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (REWRITE
                                                                                                         "div_div1")
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "div_cancel2")
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP)
              (("2" (REPLACE -1)
                (("2" (ASSERT)
                  (("2" (TYPEPRED "arg(n0y!1)")
                    (("2" (ASSERT)
                      (("2" (HIDE -1 -2)
                        (("2" (REWRITE "arg_is_pi")
                          (("2" (FLATTEN)
                            (("2" (HIDE -3)
                              (("2" (HIDE -3)
                                (("2" (EXPAND "arg")
                                  (("2" (EXPAND "atan2")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -2)
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "trichotomy"
                                             ("x" "Re(n0y!1)"))
                                            (("2" (SPLIT -1)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA "trichotomy"
                                                   ("x" "Im(n0y!1)"))
                                                  (("1" (SPLIT)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1"
                                                         ("pz" "Re(n0y!1)" "x"
                                                          "Re(n0x!1)" "y" "0"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_times_pos_lt1"
                                                             ("pz" "Im(n0y!1)"
                                                              "x" "Re(n0x!1)"
                                                              "y" "0"))
                                                            (("1" (ASSERT)
                                                              (("1" (LIFT-IF)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "atan_strict_increasing")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "strict_increasing?")
                                                                      (("1"
                                                                        (INST -
                                                                         "0"
                                                                         "Im(n0y!1) / Re(n0y!1)")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "posreal_div_posreal_is_posreal"
                                                                           ("px"
                                                                            "Im(n0y!1)"
                                                                            "py"
                                                                            "Re(n0y!1)"))
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (REPLACE -1)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (LEMMA
                                                           "both_sides_times_pos_lt1"
                                                           ("pz" "Re(n0y!1)"
                                                            "x" "Re(n0x!1)" "y"
                                                            "0"))
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (LEMMA
                                                       "both_sides_times_pos_lt1"
                                                       ("pz" "Re(n0y!1)" "x"
                                                        "Re(n0x!1)" "y" "0"))
                                                      (("3" (ASSERT)
                                                        (("3"
                                                          (LEMMA
                                                           "negreal_times_negreal_is_posreal"
                                                           ("nx" "Im(n0y!1)"
                                                            "ny" "Re(n0x!1)"))
                                                          (("3" (ASSERT)
                                                            (("3" (LIFT-IF)
                                                              (("3" (ASSERT)
                                                                (("3"
                                                                  (LEMMA
                                                                   "both_sides_div_pos_lt1"
                                                                   ("pz"
                                                                    "Re(n0y!1)"
                                                                    "x"
                                                                    "Im(n0y!1)"
                                                                    "y" "0"))
                                                                  (("3"
                                                                    (LEMMA
                                                                     "atan_strict_increasing")
                                                                    (("3"
                                                                      (EXPAND
                                                                       "strict_increasing?")
                                                                      (("3"
                                                                        (INST -
                                                                         "Im(n0y!1) / Re(n0y!1)"
                                                                         "0")
                                                                        (("3"
                                                                          (REWRITE
                                                                           "atan_0")
                                                                          (("3"
                                                                            (ASSERT)
                                                                            (("3"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (REPLACE -1)
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (LEMMA "trichotomy"
                                                     ("x" "Im(n0y!1)"))
                                                    (("2" (SPLIT)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (LEMMA
                                                           "both_sides_times_pos_lt1"
                                                           ("pz" "Im(n0y!1)"
                                                            "x" "Re(n0x!1)" "y"
                                                            "0"))
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2"
                                                          (TYPEPRED "n0y!1")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (ASSERT)
                                                        (("3"
                                                          (LEMMA
                                                           "negreal_times_negreal_is_posreal"
                                                           ("nx" "Im(n0y!1)"
                                                            "ny" "Re(n0x!1)"))
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3"
                                                (LEMMA
                                                 "negreal_times_negreal_is_posreal"
                                                 ("nx" "Re(n0y!1)" "ny"
                                                  "Re(n0x!1)"))
                                                (("1" (ASSERT)
                                                  (("1" (LIFT-IF)
                                                    (("1" (ASSERT)
                                                      (("1" (LIFT-IF)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA "trichotomy"
                                                             ("x" "Im(n0y!1)"))
                                                            (("1" (SPLIT)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "atan(Im(n0y!1) / Re(n0y!1))")
                                                                  (("1"
                                                                    (LEMMA
                                                                     "atan_strict_increasing")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "strict_increasing?")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "both_sides_div_neg_lt1"
                                                                         ("nz"
                                                                          "Re(n0y!1)"
                                                                          "x"
                                                                          "Im(n0y!1)"
                                                                          "y"
                                                                          "0"))
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (REPLACE -1)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("3" (ASSERT)
                                                                (("3"
                                                                  (LEMMA
                                                                   "negreal_div_negreal_is_posreal"
                                                                   ("nx"
                                                                    "Im(n0y!1)"
                                                                    "ny"
                                                                    "Re(n0y!1)"))
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2 -1)
          (("2" (SKOSIMP)
            (("2" (REPLACE -1)
              (("2" (REWRITE "arg_is_0_nz")
                (("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "arg(n0y!1)")
                      (("2" (ASSERT)
                        (("2" (HIDE -1 -2)
                          (("2" (EXPAND "arg")
                            (("2" (ASSERT)
                              (("2" (EXPAND "atan2")
                                (("2" (REPLACE -2)
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "n0y!1")
                                      (("2"
                                        (LEMMA "trichotomy" ("x" "Re(n0y!1)"))
                                        (("2" (SPLIT)
                                          (("1"
                                            (LEMMA "both_sides_times_pos_lt1"
                                             ("pz" "Re(n0x!1)" "x" "0" "y"
                                              "Re(n0y!1)"))
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (ASSERT)
                                            (("2"
                                              (LEMMA "trichotomy"
                                               ("x" "Im(n0y!1)"))
                                              (("2" (SPLIT)
                                                (("1"
                                                  (LEMMA
                                                   "both_sides_times_pos_lt1"
                                                   ("pz" "Re(n0x!1)" "x" "0"
                                                    "y" "Im(n0y!1)"))
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (PROPAX) NIL NIL)
                                                 ("3"
                                                  (LEMMA
                                                   "both_sides_times_pos_lt1"
                                                   ("pz" "Re(n0x!1)" "y" "0"
                                                    "x" "Im(n0y!1)"))
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3"
                                            (LEMMA "both_sides_times_pos_lt1"
                                             ("pz" "Re(n0x!1)" "y" "0" "x"
                                              "Re(n0y!1)"))
                                            (("3" (ASSERT)
                                              (("3"
                                                (LEMMA "trichotomy"
                                                 ("x" "Im(n0y!1)"))
                                                (("3" (SPLIT)
                                                  (("1"
                                                    (LEMMA
                                                     "both_sides_times_pos_lt1"
                                                     ("pz" "Re(n0x!1)" "x" "0"
                                                      "y" "Im(n0y!1)"))
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL)
                                                   ("3"
                                                    (LEMMA
                                                     "both_sides_times_pos_lt1"
                                                     ("pz" "Re(n0x!1)" "y" "0"
                                                      "x" "Im(n0y!1)"))
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (SKOSIMP) (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "complex" |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|arg_is_0_nz| FORMULA-DECL NIL |polar| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|atan_plus| FORMULA-DECL NIL |atan| |trig|)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_neg_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_neg_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|trich_lt| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|atan_neg| FORMULA-DECL NIL |atan| |trig|)
    (|negreal_div_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|atan_inv| FORMULA-DECL NIL |atan| |trig|)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|both_sides_div_neg_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|atan_inv_neg| FORMULA-DECL NIL |atan| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|div_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|arg_p_lt_pi| FORMULA-DECL NIL |polar| NIL)
    (|arg_lt_0| FORMULA-DECL NIL |polar| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mul_nzcomplex1| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|neg_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|arg_neg| FORMULA-DECL NIL |polar| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL))
 (|arg_inv| 0
  (|arg_inv-1| |nil| 3721317210
   ("" (SKOSIMP)
    (("" (CASE-REPLACE "arg(n0z!1)=0")
      (("1" (REWRITE "arg_is_0")
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (EXPAND "arg")
              (("1" (ASSERT)
                (("1" (EXPAND "atan2")
                  (("1" (USE "nzcomplex_nz")
                    (("1" (ASSERT)
                      (("1" (LEMMA "nz_sq_abs_pos" ("n0z" "n0z!1"))
                        (("1"
                          (LEMMA "posreal_div_posreal_is_posreal"
                           ("px" "Re(n0z!1)" "py" "sq_abs(n0z!1)"))
                          (("1" (ASSERT)
                            (("1" (REWRITE "div_div1")
                              (("1" (REWRITE "div_cancel2")
                                (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (CASE-REPLACE "arg(n0z!1) = pi")
        (("1" (REWRITE "arg_is_pi")
          (("1" (FLATTEN)
            (("1" (ASSERT)
              (("1" (LEMMA "nz_sq_abs_pos" ("n0z" "n0z!1"))
                (("1" (EXPAND "arg")
                  (("1" (ASSERT)
                    (("1" (EXPAND "atan2")
                      (("1"
                        (LEMMA "both_sides_div_pos_lt1"
                         ("pz" "sq_abs(n0z!1)" "x" "Re(n0z!1)" "y" "0"))
                        (("1" (ASSERT)
                          (("1" (EXPAND "sq_abs")
                            (("1" (REPLACE -4)
                              (("1" (REWRITE "sq_0")
                                (("1" (HIDE -1)
                                  (("1" (REWRITE "atan_0")
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (USE "nzcomplex_nz")
            (("2" (ASSERT)
              (("2" (EXPAND "arg")
                (("2" (ASSERT)
                  (("2" (CASE-REPLACE "Re(n0z!1) = 0")
                    (("1" (ASSERT)
                      (("1" (CASE-REPLACE "Im(n0z!1) < 0")
                        (("1" (EXPAND "atan2")
                          (("1" (ASSERT)
                            (("1" (ASSERT)
                              (("1" (LIFT-IF 3)
                                (("1" (ASSERT)
                                  (("1" (PROP)
                                    (("1"
                                      (LEMMA "nz_sq_abs_pos" ("n0z" "n0z!1"))
                                      (("1"
                                        (LEMMA "posreal_div_posreal_is_posreal"
                                         ("px" "-1*Im(n0z!1)" "py"
                                          "sq_abs(n0z!1)"))
                                        (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND)
                                      (("2" (DECOMPOSE-EQUALITY)
                                        (("2" (FLIP-INEQ -1)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "atan2")
                            (("2" (LIFT-IF 4)
                              (("2" (ASSERT)
                                (("2" (PROP)
                                  (("1"
                                    (LEMMA "posreal_div_posreal_is_posreal"
                                     ("px" "Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                                    (("1" (ASSERT)
                                      (("1" (GRIND-REALS)
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (CASE-REPLACE "Im(n0z!1) < 0")
                        (("1" (EXPAND "atan2")
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "posreal_div_posreal_is_posreal"
                               ("px" "-1*Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                              (("1" (ASSERT)
                                (("1" (CASE-REPLACE "Re(n0z!1) > 0")
                                  (("1"
                                    (LEMMA "posreal_div_posreal_is_posreal"
                                     ("px" "Re(n0z!1)" "py" "sq_abs(n0z!1)"))
                                    (("1" (ASSERT)
                                      (("1" (REWRITE "div_div1")
                                        (("1" (REWRITE "div_cancel2" 4)
                                          (("1" (REWRITE "atan_neg" 4 :DIR RL)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (LEMMA "both_sides_div_pos_lt1"
                                       ("pz" "sq_abs(n0z!1)" "x" "Re(n0z!1)"
                                        "y" "0"))
                                      (("2" (ASSERT)
                                        (("2" (REWRITE "div_div1")
                                          (("2" (REWRITE "div_cancel2" 5)
                                            (("2"
                                              (CASE-REPLACE
                                               "((-1 * Im(n0z!1) / Re(n0z!1)))=-(Im(n0z!1) / Re(n0z!1))")
                                              (("1" (REWRITE "atan_neg" 5)
                                                (("1" (GRIND) NIL NIL)) NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (LIFT-IF 5)
                            (("2" (EXPAND "atan2")
                              (("2" (ASSERT)
                                (("2"
                                  (LEMMA "posreal_div_posreal_is_posreal"
                                   ("px" "Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                                  (("1" (ASSERT)
                                    (("1" (CASE-REPLACE "Re(n0z!1)>0")
                                      (("1"
                                        (LEMMA "posreal_div_posreal_is_posreal"
                                         ("px" "Re(n0z!1)" "py"
                                          "sq_abs(n0z!1)"))
                                        (("1" (ASSERT)
                                          (("1" (REWRITE "div_div1")
                                            (("1" (REWRITE "div_cancel2")
                                              (("1"
                                                (REWRITE "atan_neg" 5 :DIR RL)
                                                (("1" (ASSERT)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (LEMMA "both_sides_div_pos_lt1"
                                           ("pz" "sq_abs(n0z!1)" "x"
                                            "Re(n0z!1)" "y" "0"))
                                          (("2" (ASSERT)
                                            (("2" (REWRITE "div_div1")
                                              (("2" (REWRITE "div_cancel2")
                                                (("2"
                                                  (CASE-REPLACE
                                                   "(-1 * Im(n0z!1) / (1 * Re(n0z!1)))=-(Im(n0z!1) / Re(n0z!1))")
                                                  (("1" (REWRITE "atan_neg")
                                                    (("1" (ASSERT)
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (CASE-REPLACE "Im(n0z!1) =0")
                                      (("1" (ASSERT)
                                        (("1" (LIFT-IF) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_div1| FORMULA-DECL NIL |real_props| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nz_sq_abs_pos| JUDGEMENT-TCC NIL |complex_types| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|arg_is_0| FORMULA-DECL NIL |polar| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan_neg| FORMULA-DECL NIL |atan| |trig|)
    (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL))
   NIL))
 (|arg_div| 0
  (|arg_div-3| |nil| 3721235753
   ("" (SKOSIMP)
    (("" (LEMMA "arg_inv" ("n0z" "n0y!1"))
      (("" (LEMMA "arg_mult" ("n0x" "n0x!1" "n0y" "1/n0y!1"))
        (("1" (REPLACE -2 -1)
          (("1" (HIDE -2)
            (("1" (EXPAND "/")
              (("1" (EXPAND "*")
                (("1" (ASSERT)
                  (("1"
                    (CASE-REPLACE
                     "Re(n0x!1) * ((1 * Re(n0y!1)) / sq_abs(n0y!1)) -
                        Im(n0x!1) * (((-1) * Im(n0y!1)) / sq_abs(n0y!1))=(Im(n0x!1) * Im(n0y!1) + Re(n0x!1) * Re(n0y!1)) /
                        sq_abs(n0y!1)")
                    (("1" (HIDE -1)
                      (("1"
                        (CASE-REPLACE
                         "Im(n0x!1) * ((1 * Re(n0y!1)) / sq_abs(n0y!1)) +
                            Re(n0x!1) * (((-1) * Im(n0y!1)) / sq_abs(n0y!1))=(Im(n0x!1) * Re(n0y!1) - Re(n0x!1) * Im(n0y!1)) /
                            sq_abs(n0y!1)")
                        (("1" (ASSERT)
                          (("1" (HIDE -1)
                            (("1" (REPLACE -1 1)
                              (("1" (HIDE -1)
                                (("1" (CASE-REPLACE "arg(n0y!1) = 0")
                                  (("1" (LIFT-IF 1) (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (CASE-REPLACE "arg(n0y!1) = 0")
                                    (("2" (CASE-REPLACE "arg(n0y!1) = pi")
                                      (("1" (ASSERT)
                                        (("1"
                                          (LEMMA "trichotomy"
                                           ("x" "arg(n0x!1)"))
                                          (("1" (SPLIT)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (LIFT-IF 4)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL))
   NIL))
 (|arg_from_polar| 0
  (|arg_from_polar-3| |nil| 3722882894
   ("" (SKEEP)
    (("" (EXPAND "from_polar")
      ((""
        (CASE
            "NOT (Re(sin(theta) * complex_i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * complex_i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (HIDE 2)
          (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "arg")
            (("2" (LIFT-IF)
              (("2" (GROUND)
                (("1" (REPLACE -3)
                  (("1" (LEMMA "sin_eq_0")
                    (("1" (INST - "theta")
                      (("1" (GROUND)
                        (("1" (SKOSIMP*)
                          (("1" (CASE "i!1 >=2")
                            (("1" (MULT-BY -1 "pi") (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (CASE "i!1 <= -1")
                              (("1" (MULT-BY -1 "pi") (("1" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (CASE "i!1 = 1")
                                (("1" (REPLACES -1)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2)
                                      (("1" (LEMMA "cos_pi")
                                        (("1" (REPLACES -1)
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE "i!1 = 0")
                                  (("1" (REPLACES -1)
                                    (("1" (REPLACES -2)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (MULT-BY 2 "r") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "atan2")
                  (("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("1" (LEMMA "atan_tan")
                        (("1" (INST - "theta")
                          (("1" (EXPAND "tan") (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (ASSERT)
                            (("2" (HIDE (2 3))
                              (("2"
                                (CASE "NOT (cos(theta)>0 AND sin(theta)<0)")
                                (("1" (SPLIT)
                                  (("1" (MULT-BY 1 "r")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (MULT-BY 1 "r")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (HIDE (-2 -3))
                                  (("2" (FLATTEN)
                                    (("2" (LEMMA "cos_le_0")
                                      (("2" (INST - "theta")
                                        (("2" (LEMMA "sin_ge_0")
                                          (("2" (INST - "theta")
                                            (("2" (ASSERT)
                                              (("2" (LEMMA "cos_neg")
                                                (("2" (INST - "theta")
                                                  (("2" (GROUND)
                                                    (("2" (LEMMA "cos_le_0")
                                                      (("2" (INST - "-theta")
                                                        (("2" (GROUND) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "cos_eq_0")
                        (("2" (INST - "theta")
                          (("2" (ASSERT)
                            (("2" (GROUND)
                              (("1" (SKOSIMP*)
                                (("1" (LEMMA "sin_ge_0")
                                  (("1" (INST - "theta")
                                    (("1" (ASSERT)
                                      (("1" (SPLIT -)
                                        (("1" (MULT-BY -1 "r")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (CASE "NOT sin(theta)<0")
                                          (("1" (MULT-BY 1 "r")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (CASE "i!1>=0")
                                            (("1" (MULT-BY -1 "pi")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (CASE "i!1 <= -2")
                                              (("1" (MULT-BY -1 "pi")
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (CASE "i!1 = -1")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (MULT-BY 2 "r") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (CASE "NOT (cos(theta) < 0 AND sin(theta) < 0)")
                        (("1" (SPLIT)
                          (("1" (MULT-BY 1 "r") (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (MULT-BY 1 "r") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (HIDE (-3 1 3))
                            (("2" (LEMMA "atan_tan")
                              (("2" (INST - "theta+pi")
                                (("1" (CASE "tan(theta+pi) = tan(theta)")
                                  (("1" (REPLACES -1)
                                    (("1" (EXPAND "tan")
                                      (("1" (REPLACES -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "tan" 1)
                                    (("2" (REWRITE "sin_plus" 1)
                                      (("2" (REWRITE "cos_plus" 1)
                                        (("2" (REWRITE "cos_pi")
                                          (("2" (REWRITE "sin_pi")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (EXPAND "Tan?")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (LEMMA "cos_ge_0")
                                  (("2" (INST - "theta")
                                    (("2" (ASSERT)
                                      (("2" (LEMMA "sin_ge_0")
                                        (("2" (INST - "theta")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (CASE "NOT sin(theta)>=0")
                  (("1" (MULT-BY 1 "r") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 1)
                    (("2" (CASE "theta < 0")
                      (("1" (LEMMA "sin_lt_0")
                        (("1" (INST - "theta + 2*pi")
                          (("1" (ASSERT)
                            (("1" (REWRITE "sin_plus")
                              (("1" (REWRITE "cos_2pi")
                                (("1" (REWRITE "sin_2pi")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (CASE "NOT theta>=0")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 1)
                            (("2" (EXPAND "atan2")
                              (("2" (LIFT-IF)
                                (("2" (ASSERT)
                                  (("2" (GROUND)
                                    (("1" (CASE "NOT cos(theta)>0")
                                      (("1" (MULT-BY 1 "r")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE -2)
                                        (("2" (LEMMA "atan_tan")
                                          (("2" (INST - "theta")
                                            (("1" (EXPAND "tan")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (ASSERT)
                                              (("2" (LEMMA "cos_le_0")
                                                (("2" (INST - "theta")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "cos_eq_0")
                                      (("2" (INST - "theta")
                                        (("2" (GROUND)
                                          (("1" (SKOSIMP*)
                                            (("1" (CASE "i!1 = 0")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (CASE "i!1>=1")
                                                (("1" (MULT-BY -1 "pi")
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (CASE "i!1<=-1")
                                                    (("1" (MULT-BY -1 "pi")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (MULT-BY 2 "r")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (LEMMA "cos_eq_0")
                                      (("3" (INST?)
                                        (("3" (ASSERT)
                                          (("3" (GROUND)
                                            (("1" (SKOSIMP*)
                                              (("1" (CASE "i!1 = 0")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACES -1)
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACES -2)
                                                        (("1"
                                                          (REWRITE "sin_pi2")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (CASE "i!1>=1")
                                                  (("1" (MULT-BY -1 "pi")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (CASE "i!1<=-1")
                                                    (("1" (MULT-BY -1 "pi")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (MULT-BY 2 "r")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("4" (CASE "NOT cos(theta)<0")
                                      (("1" (MULT-BY 1 "r")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE (1 3))
                                        (("2" (CASE "NOT theta > pi/2")
                                          (("1" (LEMMA "cos_ge_0")
                                            (("1" (INST - "theta")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (LEMMA "atan_tan")
                                              (("2" (INST - "theta-pi")
                                                (("2" (EXPAND "tan" -1)
                                                  (("2" (REWRITE "sin_minus")
                                                    (("2" (REWRITE "cos_minus")
                                                      (("2" (REWRITE "sin_pi")
                                                        (("2"
                                                          (REWRITE "cos_pi")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|sin_2pi| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_2pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_lt_0| FORMULA-DECL NIL |trig_ineq| |trig|)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    NIL (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan| CONST-DECL "real" |trig_basic| |trig|)
    (|cos_le_0| FORMULA-DECL NIL |trig_ineq| |trig|)
    (|sin_ge_0| FORMULA-DECL NIL |trig_ineq| |trig|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|atan_tan| FORMULA-DECL NIL |trig_inverses| |trig|)
    (|cos_eq_0| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_ge_0| FORMULA-DECL NIL |trig_ineq| |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|sin_eq_0| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|Im_add1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL)
  (|arg_from_polar-2| |nil| 3722772929
   ("" (SKEEP)
    (("" (EXPAND "from_polar")
      ((""
        (CASE
            "NOT (Re(sin(theta) * i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (HIDE 2)
          (("1" (SPLIT)
            (("1" (REWRITE "Re_plus")
              (("1" (LEMMA "Re_imag")
                (("1" (INST - "sin(theta)*r")
                  (("1" (ASSERT)
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (HIDE -1)
                          (("1" (REWRITE "Re_real") NIL)))))))))))))))
             ("2" (REWRITE "Im_plus")
              (("2" (ASSERT)
                (("2" (LEMMA "Im_real")
                  (("2" (INST - "r*cos(theta)")
                    (("2" (REPLACES -1)
                      (("2" (ASSERT)
                        (("2" (LEMMA "Im_imag")
                          (("2" (INST - "sin(theta)*r")
                            (("2" (ASSERT) NIL)))))))))))))))))))))
         ("2" (FLATTEN)
          (("2" (EXPAND "arg")
            (("2" (REPLACE -1)
              (("2" (REPLACE -2)
                (("2" (LIFT-IF)
                  (("2" (GROUND)
                    (("1" (REWRITE "complex_is_0_Re_Im" -1)
                      (("1" (FLATTEN)
                        (("1" (REPLACE -3)
                          (("1" (REPLACE -4)
                            (("1" (ASSERT)
                              (("1" (LEMMA "sin_eq_0")
                                (("1" (INST - "theta")
                                  (("1" (GROUND)
                                    (("1" (SKOSIMP*)
                                      (("1" (CASE "i!1 >=2")
                                        (("1" (MULT-BY -1 "pi")
                                          (("1" (ASSERT) NIL)))
                                         ("2" (CASE "i!1 <= -1")
                                          (("1" (MULT-BY -1 "pi")
                                            (("1" (ASSERT) NIL)))
                                           ("2" (CASE "i!1 = 1")
                                            (("1" (REPLACES -1)
                                              (("1" (ASSERT)
                                                (("1" (REPLACE -2)
                                                  (("1" (LEMMA "cos_pi")
                                                    (("1" (REPLACES -1)
                                                      (("1" (ASSERT)
                                                        NIL)))))))))))
                                             ("2" (CASE "i!1 = 0")
                                              (("1" (REPLACES -1)
                                                (("1" (REPLACES -2)
                                                  (("1" (ASSERT) NIL)))))
                                               ("2" (ASSERT) NIL)))))))))))
                                     ("2" (MULT-BY 2 "r")
                                      (("2" (ASSERT) NIL)))))))))))))))))))
                     ("2" (EXPAND "atan2")
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (LEMMA "atan_tan")
                            (("1" (INST - "theta")
                              (("1" (EXPAND "tan")
                                (("1" (ASSERT)
                                  (("1"
                                    (CASE
                                        "r*sin(theta)/(r*cos(theta)) = atan(theta)")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1)
                                        (("1" (PROPAX) NIL)))))
                                     ("2" (ASSERT)
                                      (("2" (REPLACE -1)
                                        (("2" (PROPAX) NIL)))))))))))
                               ("2" (ASSERT)
                                (("2" (HIDE (2 3))
                                  (("2"
                                    (CASE
                                        "NOT (cos(theta)>0 AND sin(theta)<0)")
                                    (("1" (SPLIT)
                                      (("1" (MULT-BY 1 "r")
                                        (("1" (ASSERT) NIL)))
                                       ("2" (MULT-BY 1 "r")
                                        (("2" (ASSERT) NIL)))))
                                     ("2" (HIDE (-2 -3))
                                      (("2" (FLATTEN)
                                        (("2" (LEMMA "cos_le_0")
                                          (("2" (INST - "theta")
                                            (("2" (LEMMA "sin_ge_0")
                                              (("2" (INST - "theta")
                                                (("2" (ASSERT)
                                                  (("2" (LEMMA "cos_neg")
                                                    (("2" (INST - "theta")
                                                      (("2" (GROUND)
                                                        (("2"
                                                          (LEMMA "cos_le_0")
                                                          (("2"
                                                            (INST - "-theta")
                                                            (("2" (GROUND)
                                                              NIL)))))))))))))))))))))))))))))))))))
                           ("2" (LEMMA "cos_eq_0")
                            (("2" (INST - "theta")
                              (("2" (ASSERT)
                                (("2" (GROUND)
                                  (("1" (SKOSIMP*)
                                    (("1" (LEMMA "sin_ge_0")
                                      (("1" (INST - "theta")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -)
                                            (("1" (MULT-BY -1 "r")
                                              (("1" (ASSERT) NIL)))
                                             ("2" (CASE "NOT sin(theta)<0")
                                              (("1" (MULT-BY 1 "r")
                                                (("1" (ASSERT) NIL)))
                                               ("2" (CASE "i!1>=0")
                                                (("1" (MULT-BY -1 "pi")
                                                  (("1" (ASSERT) NIL)))
                                                 ("2" (CASE "i!1 <= -2")
                                                  (("1" (MULT-BY -1 "pi")
                                                    (("1" (ASSERT) NIL)))
                                                   ("2" (CASE "i!1 = -1")
                                                    (("1" (ASSERT) NIL)
                                                     ("2" (ASSERT)
                                                      NIL)))))))))))))))))))
                                   ("2" (MULT-BY 2 "r")
                                    (("2" (ASSERT) NIL)))))))))))
                           ("3"
                            (CASE "NOT (cos(theta) < 0 AND sin(theta) < 0)")
                            (("1" (SPLIT)
                              (("1" (MULT-BY 1 "r") (("1" (ASSERT) NIL)))
                               ("2" (MULT-BY 1 "r") (("2" (ASSERT) NIL)))))
                             ("2" (FLATTEN)
                              (("2" (HIDE (-3 1 3))
                                (("2" (LEMMA "atan_tan")
                                  (("2" (INST - "theta+pi")
                                    (("1" (CASE "tan(theta+pi) = tan(theta)")
                                      (("1" (REPLACES -1)
                                        (("1" (EXPAND "tan")
                                          (("1" (REPLACES -1)
                                            (("1" (ASSERT) NIL)))))))
                                       ("2" (EXPAND "tan" 1)
                                        (("2" (REWRITE "sin_plus" 1)
                                          (("2" (REWRITE "cos_plus" 1)
                                            (("2" (REWRITE "cos_pi")
                                              (("2" (REWRITE "sin_pi")
                                                (("2" (ASSERT) NIL)))))))))))
                                       ("3" (EXPAND "Tan?")
                                        (("3" (ASSERT) NIL)))))
                                     ("2" (LEMMA "cos_ge_0")
                                      (("2" (INST - "theta")
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "sin_ge_0")
                                            (("2" (INST - "theta")
                                              (("2" (ASSERT)
                                                NIL)))))))))))))))))))))))))))
                     ("3" (CASE "NOT sin(theta)>=0")
                      (("1" (MULT-BY 1 "r") (("1" (ASSERT) NIL)))
                       ("2" (HIDE 1)
                        (("2" (CASE "theta < 0")
                          (("1" (LEMMA "sin_lt_0")
                            (("1" (INST - "theta + 2*pi")
                              (("1" (ASSERT)
                                (("1" (REWRITE "sin_plus")
                                  (("1" (REWRITE "cos_2pi")
                                    (("1" (REWRITE "sin_2pi")
                                      (("1" (ASSERT) NIL)))))))))))))
                           ("2" (ASSERT)
                            (("2" (CASE "NOT theta>=0")
                              (("1" (ASSERT) NIL)
                               ("2" (HIDE 1)
                                (("2" (EXPAND "atan2")
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (GROUND)
                                        (("1" (CASE "NOT cos(theta)>0")
                                          (("1" (MULT-BY 1 "r")
                                            (("1" (ASSERT) NIL)))
                                           ("2" (HIDE -2)
                                            (("2" (LEMMA "atan_tan")
                                              (("2" (INST - "theta")
                                                (("1" (EXPAND "tan")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACES -1)
                                                      NIL)))))
                                                 ("2" (ASSERT)
                                                  (("2" (LEMMA "cos_le_0")
                                                    (("2" (INST - "theta")
                                                      (("2" (ASSERT)
                                                        NIL)))))))))))))))
                                         ("2" (LEMMA "cos_eq_0")
                                          (("2" (INST - "theta")
                                            (("2" (GROUND)
                                              (("1" (SKOSIMP*)
                                                (("1" (CASE "i!1 = 0")
                                                  (("1" (ASSERT) NIL)
                                                   ("2" (CASE "i!1>=1")
                                                    (("1" (MULT-BY -1 "pi")
                                                      (("1" (ASSERT) NIL)))
                                                     ("2" (ASSERT)
                                                      (("2" (CASE "i!1<=-1")
                                                        (("1" (MULT-BY -1 "pi")
                                                          (("1" (ASSERT) NIL)))
                                                         ("2" (ASSERT)
                                                          NIL)))))))))))
                                               ("2" (MULT-BY 2 "r")
                                                (("2" (ASSERT) NIL)))))))))
                                         ("3" (LEMMA "cos_eq_0")
                                          (("3" (INST?)
                                            (("3" (ASSERT)
                                              (("3" (GROUND)
                                                (("1" (SKOSIMP*)
                                                  (("1" (CASE "i!1 = 0")
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACES -1)
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACES -2)
                                                            (("1"
                                                              (REWRITE
                                                               "sin_pi2")
                                                              (("1" (ASSERT)
                                                                NIL)))))))))))
                                                     ("2" (CASE "i!1>=1")
                                                      (("1" (MULT-BY -1 "pi")
                                                        (("1" (ASSERT) NIL)))
                                                       ("2" (CASE "i!1<=-1")
                                                        (("1" (MULT-BY -1 "pi")
                                                          (("1" (ASSERT) NIL)))
                                                         ("2" (ASSERT)
                                                          NIL)))))))))
                                                 ("2" (MULT-BY 2 "r")
                                                  (("2" (ASSERT) NIL)))))))))))
                                         ("4" (CASE "NOT cos(theta)<0")
                                          (("1" (MULT-BY 1 "r")
                                            (("1" (ASSERT) NIL)))
                                           ("2" (HIDE (1 3))
                                            (("2" (CASE "NOT theta > pi/2")
                                              (("1" (LEMMA "cos_ge_0")
                                                (("1" (INST - "theta")
                                                  (("1" (ASSERT) NIL)))))
                                               ("2" (ASSERT)
                                                (("2" (LEMMA "atan_tan")
                                                  (("2" (INST - "theta-pi")
                                                    (("2" (EXPAND "tan" -1)
                                                      (("2"
                                                        (REWRITE "sin_minus")
                                                        (("2"
                                                          (REWRITE "cos_minus")
                                                          (("2"
                                                            (REWRITE "sin_pi")
                                                            (("2"
                                                              (REWRITE
                                                               "cos_pi")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|arg_from_polar-1| |nil| 3722709118
   ("" (SKEEP)
    (("" (EXPAND "from_polar")
      ((""
        (CASE
            "NOT (Re(sin(theta) * complex_i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * complex_i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (HIDE 2)
          (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "arg")
            (("2" (LIFT-IF)
              (("2" (GROUND)
                (("1" (GRIND)
                  (("1" (DIV-BY -1 "r")
                    (("1" (DIV-BY -2 "r")
                      (("1" (GRIND)
                        (("1" (LEMMA "cos_eq_0_2pi")
                          (("1" (LEMMA "sin_eq_0_2pi")
                            (("1" (INST -1 "theta+pi")
                              (("1" (INST -2 "theta+pi")
                                (("1" (LEMMA "sin_plus")
                                  (("1" (LEMMA "cos_plus")
                                    (("1" (INST -1 "theta" "pi")
                                      (("1" (INST -2 "theta" "pi")
                                        (("1" (LEMMA "cos_pi")
                                          (("1" (LEMMA "sin_pi")
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|idempotent_rectangular| 0
  (|idempotent_rectangular-1| |nil| 3455991054
   ("" (SKOSIMP)
    (("" (EXPAND "from_rectangular")
      (("" (EXPAND "rectangular")
        (("" (GRIND :REWRITES "complex_ext") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|from_rectangular| CONST-DECL "complex" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rectangular| CONST-DECL "[real, real]" |polar| NIL))
   SHOSTAK))
 (|idempotent_polar| 0
  (|idempotent_polar-1| |nil| 3455991097
   ("" (SKOSIMP)
    (("" (EXPAND "polar")
      (("" (EXPAND "from_polar")
        (("" (EXPAND "complex_i")
          (("" (LEMMA "arg_div_abs" ("n0x" "n0z!1"))
            (("" (REPLACES -1)
              (("" (DECOMPOSE-EQUALITY)
                (("1" (LEMMA "Im_sin_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
                  (("1" (ASSERT) (("1" (GRIND :EXCLUDE "arg") NIL NIL)) NIL))
                  NIL)
                 ("2" (LEMMA "Re_cos_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
                  (("2" (ASSERT) (("2" (GRIND :EXCLUDE "arg") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|polar| CONST-DECL "[nnreal, gt_npi_le_pi]" |polar| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Re_cos_abs1| FORMULA-DECL NIL |polar| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_sin_abs1| FORMULA-DECL NIL |polar| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|abs_div2| FORMULA-DECL NIL |polar| NIL)
    (|abs_abs| FORMULA-DECL NIL |polar| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "complex" |complex_types| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Re_add1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|div_nzcomplex1| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Im_add1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|arg_div_abs| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL))
   SHOSTAK))
 (|de_moivres_theorem_TCC1| 0
  (|de_moivres_theorem_TCC1-1| |nil| 3721933419 ("" (SUBTYPE-TCC) NIL NIL)
   ((|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|de_moivres_theorem| SUBTYPE "polar.n"
    "{i: integers.int | booleans.OR(polar.abs(polar.z) /= 0, reals.>=(i, 0))}")))
 (|de_moivres_theorem| 0
  (|de_moivres_theorem-1| |nil| 3721933516
   ("" (SKEEP :BUT "n")
    (("" (INDUCT "n")
      (("1" (TYPEPRED "n!1") (("1" (PROPAX) NIL NIL)) NIL)
       ("2" (ASSERT) NIL NIL)
       ("3" (SKEEP)
        (("3" (CASE "j=0")
          (("1" (GRIND :EXCLUDE ("abs" "arg" "to_pi")) NIL NIL)
           ("2" (CASE "j=1")
            (("1" (ASSERT)
              (("1" (REWRITE -1)
                (("1" (EXPAND "^")
                  (("1" (REPLACE -1 2)
                    (("1" (HIDE -1 -2 1)
                      (("1" (EXPAND "from_polar")
                        (("1" (TYPEPRED "to_pi(1 * arg(z))")
                          (("1" (REWRITE -3)
                            (("1" (REWRITE -3)
                              (("1" (TYPEPRED "to_pi(2 * arg(z))")
                                (("1" (REWRITE -3)
                                  (("1" (REWRITE -3)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "^")
                                        (("1" (EXPAND "expt")
                                          (("1" (EXPAND "expt")
                                            (("1" (EXPAND "expt")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      "2 * arg(z) = arg(z)+arg(z)")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (HIDE -1)
                                                      (("1" (LEMMA "cos_plus")
                                                        (("1"
                                                          (LEMMA "sin_plus")
                                                          (("1"
                                                            (INST -1 "arg(z)"
                                                             "arg(z)")
                                                            (("1"
                                                              (INST -2 "arg(z)"
                                                               "arg(z)")
                                                              (("1"
                                                                (GRIND :EXCLUDE
                                                                 ("abs" "arg"))
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j>1")
              (("1" (ASSERT)
                (("1" (EXPAND "^" 3)
                  (("1" (REPLACE -2 3)
                    (("1" (HIDE-ALL-BUT (-1 3))
                      (("1" (EXPAND "expt")
                        (("1" (EXPAND "from_polar")
                          (("1" (TYPEPRED "to_pi(j * arg(z))")
                            (("1" (REWRITE -3)
                              (("1" (REWRITE -3)
                                (("1" (TYPEPRED "to_pi(arg(z) + arg(z) * j)")
                                  (("1" (REWRITE -3)
                                    (("1" (REWRITE -3)
                                      (("1" (LEMMA "cos_plus")
                                        (("1" (LEMMA "sin_plus")
                                          (("1" (INST -1 "arg(z)" "arg(z)*j")
                                            (("1" (INST -2 "arg(z)" "arg(z)*j")
                                              (("1"
                                                (GRIND :EXCLUDE ("arg" "abs"))
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (^ DEF-DECL "complex" |complex_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|to_pi| CONST-DECL
     "{x: gt_npi_le_pi | cos(x) = cos(r) AND sin(x) = sin(r)}" |to2pi| |trig|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|to2pi| CONST-DECL "nnreal_lt_2pi" |to2pi| |trig|)
    (|from_2pi_to_pi| CONST-DECL
     "{x: gt_npi_le_pi | cos(x) = cos(r) AND sin(x) = sin(r)}" |to2pi| |trig|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|polar_to_rect| 0
  (|polar_to_rect-1| |nil| 3721933891
   ("" (SKEEP)
    (("" (EXPAND "from_polar")
      (("" (ASSERT) (("" (GRIND :EXCLUDE ("sin" "cos")) NIL NIL)) NIL)) NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|polar_zero| 0
  (|polar_zero-2| |nil| 3721934105
   ("" (SKEEP)
    (("" (GRIND)
      (("" (GRIND-REALS)
        (("" (LEMMA "sin_cos_eq_0") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_cos_eq_0| FORMULA-DECL NIL |trig_basic| |trig|)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|polar_abs| 0
  (|polar_abs-1| |nil| 3721934225
   ("" (SKEEP)
    (("" (GRIND)
      ((""
        (CASE-REPLACE "cos(theta) * cos(theta) * nnx * nnx +
            sin(theta) * sin(theta) * nnx * nnx = sq(nnx)*(sin(theta)*sin(theta)+cos(theta)*cos(theta))")
        (("1" (HIDE -1)
          (("1" (REWRITE "sin_cos_one") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sin_cos_one| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|polar_to_rect_eq| 0
  (|polar_to_rect_eq-1| |nil| 3721935124
   ("" (SKEEP)
    (("" (EXPAND "from_polar")
      (("" (TYPEPRED "arg(z)")
        (("" (LEMMA "abs_cos_arg")
          (("" (LEMMA "abs_sin_arg")
            (("" (INST -1 "z")
              (("" (INST -2 "z")
                (("" (GRIND :EXCLUDE ("abs" "to_pi" "arg"))
                  (("" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (|abs_cos_arg| FORMULA-DECL NIL |polar| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs_sin_arg| FORMULA-DECL NIL |polar| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL))
   NIL)))

