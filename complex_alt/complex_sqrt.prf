(|complex_sqrt|
 (|sqrt_TCC1| 0
  (|sqrt_TCC1-1| |nil| 3385156197 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL
   (|sqrt| SUBTYPE "number_fields./(polar.arg(complex_sqrt.z), 2)"
    "gt_npi_le_pi")))
 (|complex_sqrt_real| 0
  (|complex_sqrt_real-1| NIL 3930948409
   ("" (GRIND)
    (("1" (REWRITE "sin_0") (("1" (ASSERT) NIL NIL)) NIL)
     ("2" (REWRITE "cos_0") (("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL))
   SHOSTAK))
 (|sqrt_nzcomplex| 0
  (|sqrt_nzcomplex-1| NIL 3930998354
   ("" (SKOSIMP)
    (("" (REWRITE "complex_ext")
      (("" (FLATTEN)
        (("" (EXPAND "sqrt")
          (("" (EXPAND "abs")
            (("" (EXPAND "arg")
              (("" (EXPAND "from_polar")
                (("" (ASSERT)
                  (("" (LIFT-IF)
                    (("" (USE "nzcomplex_nz")
                      ((""
                        (LEMMA "sin_minus"
                         ("a" "atan2(Re(n0z!1), Im(n0z!1)) / 2" "b" "pi"))
                        (("1" (REPLACE -1)
                          (("1"
                            (LEMMA "cos_minus"
                             ("a" "atan2(Re(n0z!1), Im(n0z!1)) / 2" "b" "pi"))
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1 -2)
                                (("1" (REWRITE "cos_pi")
                                  (("1" (REWRITE "sin_pi")
                                    (("1" (ASSERT)
                                      (("1" (REWRITE "real_props.zero_times3")
                                        (("1"
                                          (REWRITE "real_props.zero_times3")
                                          (("1"
                                            (REWRITE "real_props.zero_times3")
                                            (("1"
                                              (REWRITE
                                               "real_props.zero_times3")
                                              (("1"
                                                (LEMMA "sin_cos_eq_0"
                                                 ("a"
                                                  "atan2(Re(n0z!1), Im(n0z!1)) / 2"))
                                                (("1"
                                                  (CASE-REPLACE
                                                   "Re(n0z!1) = 0 AND Im(n0z!1) = 0")
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "Im(n0z!1) < 0")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "nnreal" |polar| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|sin_cos_eq_0| FORMULA-DECL NIL |trig_basic| |trig|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzcomplex_nz| FORMULA-DECL NIL |complex_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL))
   NIL
   (|sqrt_nzcomplex| SUBTYPE "complex_sqrt.sqrt(complex_sqrt.n0z)"
    "nzcomplex")))
 (|sqrt_eq_0| 0
  (|sqrt_eq_0-1| "" 3790337390
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (SPLIT)
        (("1" (FLATTEN)
          (("1" (LEMMA "sqrt_nzcomplex" ("n0z" "z!1"))
            (("1" (ASSERT) NIL NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "sqrt")
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "abs")
                  (("2" (EXPAND "arg")
                    (("2" (EXPAND "sq_abs")
                      (("2" (ASSERT)
                        (("2" (EXPAND "sq")
                          (("2" (REPLACE -1)
                            (("2" (REPLACE -2)
                              (("2" (ASSERT)
                                (("2" (EXPAND "from_polar")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sqrt_eq_0-3| |nil| 3721241448
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (SPLIT)
        (("1" (FLATTEN)
          (("1" (LEMMA "sqrt_nzcomplex" ("n0z" "z!1"))
            (("1" (ASSERT)
              (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) NIL NIL))
                NIL))
              NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "sqrt")
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "abs")
                  (("2" (EXPAND "arg")
                    (("2" (EXPAND "sq_abs")
                      (("2" (ASSERT)
                        (("2" (EXPAND "sq")
                          (("2" (REPLACE -1)
                            (("2" (REPLACE -2)
                              (("2" (ASSERT)
                                (("2" (EXPAND "from_polar")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   NIL))
 (|sqrt_zero| 0
  (|sqrt_zero-1| NIL 3930948555
   ("" (LEMMA "sqrt_eq_0") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|sqrt_eq_0| FORMULA-DECL NIL |complex_sqrt| NIL))
   SHOSTAK))
 (|sqrt_sq| 0
  (|sqrt_sq-1| |nil| 3721246363
   ("" (AUTO-REWRITE ("complex_ext" "complex_sq_def"))
    (("" (SKOSIMP)
      (("" (EXPAND "sqrt")
        (("" (EXPAND "from_polar")
          (("" (ASSERT)
            (("" (CASE "z!1=real_(0)")
              (("1" (ASSERT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "*")
                    (("1" (EXPAND "arg")
                      (("1" (ASSERT)
                        (("1" (REWRITE "cos_0")
                          (("1" (REWRITE "sin_0")
                            (("1" (EXPAND "abs")
                              (("1" (EXPAND "sq_abs")
                                (("1" (EXPAND "sq")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "arg_mult" ("n0x" "z!1" "n0y" "z!1"))
                (("1" (ASSERT)
                  (("1" (REPLACE -1)
                    (("1" (HIDE -1)
                      (("1" (CASE "-pi / 2 < arg(z!1)")
                        (("1" (ASSERT)
                          (("1"
                            (LEMMA "div_mult_pos_lt1"
                             ("py" "2" "z" "-pi" "x" "arg(z!1)"))
                            (("1" (COPY -2)
                              (("1" (REPLACE -2 -1)
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (CASE "arg(z!1) <= pi / 2")
                                      (("1" (ASSERT)
                                        (("1" (REWRITE "abs_cos_arg")
                                          (("1" (USE "abs_sin_arg")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (LEMMA "cos_minus"
                                           ("a" "arg(z!1)" "b" "pi"))
                                          (("2"
                                            (LEMMA "sin_minus"
                                             ("a" "arg(z!1)" "b" "pi"))
                                            (("2" (REWRITE "cos_pi")
                                              (("2" (REWRITE "sin_pi")
                                                (("2" (ASSERT)
                                                  (("2" (REPLACE -1)
                                                    (("2" (REPLACE -2)
                                                      (("2" (HIDE -1 -2)
                                                        (("2"
                                                          (USE "abs_cos_arg")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "abs_sin_arg"
                                                               ("z" "z!1"))
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (LEMMA "cos_plus" ("a" "arg(z!1)" "b" "pi"))
                            (("2" (LEMMA "sin_plus" ("a" "arg(z!1)" "b" "pi"))
                              (("2" (REWRITE "sin_pi")
                                (("2" (REWRITE "cos_pi")
                                  (("2" (REPLACE -1)
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -1 -2)
                                        (("2" (ASSERT)
                                          (("2" (USE "abs_cos_arg")
                                            (("2" (ASSERT)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "abs_sin_arg"
                                                   ("z" "z!1"))
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|abs_cos_arg| FORMULA-DECL NIL |polar| NIL)
    (|abs_sin_arg| FORMULA-DECL NIL |polar| NIL)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|complex_sq_def| FORMULA-DECL NIL |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL)
  (|sqrt_sq-2| |nil| 3721241498
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (EXPAND "sqrt")
        (("" (EXPAND "from_polar")
          (("" (ASSERT)
            (("" (CASE "z!1=real_(0)")
              (("1" (ASSERT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "*")
                    (("1" (EXPAND "arg")
                      (("1" (ASSERT)
                        (("1" (REWRITE "cos_0")
                          (("1" (REWRITE "sin_0")
                            (("1" (EXPAND "abs")
                              (("1" (EXPAND "sq_abs")
                                (("1" (EXPAND "sq")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "arg_mult" ("n0x" "z!1" "n0y" "z!1"))
                (("1" (ASSERT)
                  (("1" (REPLACE -1)
                    (("1" (HIDE -1)
                      (("1" (CASE "-pi / 2 < arg(z!1)")
                        (("1" (ASSERT)
                          (("1"
                            (LEMMA "div_mult_pos_lt1"
                             ("py" "2" "z" "-pi" "x" "arg(z!1)"))
                            (("1" (COPY -2)
                              (("1" (REPLACE -2 -1)
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (CASE "arg(z!1) <= pi / 2")
                                      (("1" (ASSERT)
                                        (("1" (REWRITE "abs_cos_arg")
                                          (("1" (USE "abs_sin_arg")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (LEMMA "cos_minus"
                                           ("a" "arg(z!1)" "b" "pi"))
                                          (("2"
                                            (LEMMA "sin_minus"
                                             ("a" "arg(z!1)" "b" "pi"))
                                            (("2" (REWRITE "cos_pi")
                                              (("2" (REWRITE "sin_pi")
                                                (("2" (ASSERT)
                                                  (("2" (REPLACE -1)
                                                    (("2" (REPLACE -2)
                                                      (("2" (HIDE -1 -2)
                                                        (("2"
                                                          (USE "abs_cos_arg")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "abs_sin_arg"
                                                               ("z" "z!1"))
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (LEMMA "cos_plus" ("a" "arg(z!1)" "b" "pi"))
                            (("2" (LEMMA "sin_plus" ("a" "arg(z!1)" "b" "pi"))
                              (("2" (REWRITE "sin_pi")
                                (("2" (REWRITE "cos_pi")
                                  (("2" (REPLACE -1)
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -1 -2)
                                        (("2" (ASSERT)
                                          (("2" (USE "abs_cos_arg")
                                            (("2" (ASSERT)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "abs_sin_arg"
                                                   ("z" "z!1"))
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|from_polar| CONST-DECL "complex" |polar| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|abs_cos_arg| FORMULA-DECL NIL |polar| NIL)
    (|abs_sin_arg| FORMULA-DECL NIL |polar| NIL)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|complex_sq_def| FORMULA-DECL NIL |complex_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|sq_sqrt| 0
  (|sq_sqrt-1| |nil| 3385159230
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (EXPAND "sq")
        (("" (EXPAND "from_polar")
          (("" (REWRITE "complex_ext")
            (("" (REWRITE "sq_rew")
              (("" (REWRITE "sq_rew")
                (("" (REWRITE "cos2")
                  (("" (LEMMA "sin_2a" ("a" "arg(z!1) / 2"))
                    (("" (LEMMA "abs_sin_arg" ("z" "z!1"))
                      (("" (REPLACE -2 -1)
                        (("" (ASSERT)
                          (("" (HIDE -1 -2)
                            (("" (LEMMA "cos_2a_sin" ("a" "arg(z!1) / 2"))
                              (("" (LEMMA "abs_cos_arg" ("z" "z!1"))
                                (("" (REPLACE -2 -1)
                                  (("" (ASSERT)
                                    (("" (EXPAND "sq") (("" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|cos2| FORMULA-DECL NIL |sincos_def| |trig|)
    (|abs_sin_arg| FORMULA-DECL NIL |polar| NIL)
    (|cos_2a_sin| FORMULA-DECL NIL |trig_basic| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|abs_cos_arg| FORMULA-DECL NIL |polar| NIL)
    (|sin_2a| FORMULA-DECL NIL |trig_basic| |trig|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq| CONST-DECL "complex" |complex_types| NIL))
   SHOSTAK))
 (|sqrt_times| 0
  (|sqrt_times-1| "" 3790337400
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (CASE-REPLACE "x!1=real_(0)")
        (("1" (LIFT-IF)
          (("1" (LEMMA "abs_is_0" ("z" "x!1"))
            (("1" (LEMMA "arg_is_0" ("z" "x!1"))
              (("1" (FLATTEN)
                (("1" (HIDE -1 -3)
                  (("1" (SPLIT)
                    (("1" (SPLIT)
                      (("1" (TYPEPRED "arg(y!1)")
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "sqrt")
                              (("1" (EXPAND "from_polar")
                                (("1" (REWRITE "abs_mult")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "arg")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE-REPLACE "y!1=real_(0)")
          (("1" (LIFT-IF)
            (("1" (LEMMA "abs_is_0" ("z" "y!1"))
              (("1" (FLATTEN -1)
                (("1" (HIDE -1)
                  (("1" (SPLIT)
                    (("1" (LEMMA "arg_is_0" ("z" "y!1"))
                      (("1" (FLATTEN -1)
                        (("1" (HIDE -1)
                          (("1" (SPLIT)
                            (("1" (TYPEPRED "arg(x!1)")
                              (("1" (ASSERT)
                                (("1" (EXPAND "sqrt")
                                  (("1" (EXPAND "from_polar")
                                    (("1" (REWRITE "abs_mult")
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "arg_mult" ("n0x" "x!1" "n0y" "y!1"))
            (("1" (ASSERT)
              (("1" (EXPAND "sqrt")
                (("1" (REWRITE "abs_mult")
                  (("1" (REWRITE "sqrt_times")
                    (("1" (NAME-REPLACE "RX" "sqrt.sqrt(abs(x!1))")
                      (("1" (NAME-REPLACE "RY" "sqrt.sqrt(abs(y!1))")
                        (("1" (NAME-REPLACE "TX" "arg(x!1)")
                          (("1" (NAME-REPLACE "TY" "arg(y!1)")
                            (("1" (CASE-REPLACE "TX + TY > pi")
                              (("1" (ASSERT)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (HIDE -2)
                                      (("1"
                                        (CASE-REPLACE
                                         "(TX - 2 * pi + TY) / 2 = TX/2+TY/2-pi")
                                        (("1" (HIDE -1)
                                          (("1" (EXPAND "from_polar")
                                            (("1" (REWRITE "sin_minus")
                                              (("1" (REWRITE "cos_minus")
                                                (("1" (REWRITE "cos_pi")
                                                  (("1" (REWRITE "sin_pi")
                                                    (("1"
                                                      (REWRITE "zero_times1")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REWRITE "cos_plus")
                                                          (("1"
                                                            (REWRITE
                                                             "sin_plus")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE-REPLACE "TX + TY <= -pi")
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2)
                                    (("1" (HIDE -2)
                                      (("1"
                                        (CASE-REPLACE
                                         "(TX + TY + 2 * pi) / 2 = TX/2+TY/2+pi")
                                        (("1" (HIDE -1)
                                          (("1" (EXPAND "from_polar")
                                            (("1" (REWRITE "sin_plus")
                                              (("1" (REWRITE "sin_plus")
                                                (("1" (REWRITE "cos_plus")
                                                  (("1" (REWRITE "cos_plus")
                                                    (("1" (REWRITE "cos_pi")
                                                      (("1" (REWRITE "sin_pi")
                                                        (("1"
                                                          (REWRITE
                                                           "zero_times2")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (REPLACE -1)
                                    (("2" (HIDE -1)
                                      (("2"
                                        (REWRITE "div_distributes" 5 :DIR RL)
                                        (("2" (EXPAND "from_polar")
                                          (("2" (REWRITE "sin_plus")
                                            (("2" (REWRITE "cos_plus")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sqrt_times-2| |nil| 3721241641
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (CASE-REPLACE "x!1=real_(0)")
        (("1" (LIFT-IF)
          (("1" (LEMMA "abs_is_0" ("z" "x!1"))
            (("1" (LEMMA "arg_is_0" ("z" "x!1"))
              (("1" (FLATTEN)
                (("1" (HIDE -1 -3)
                  (("1" (SPLIT)
                    (("1" (SPLIT)
                      (("1" (TYPEPRED "arg(y!1)")
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "sqrt")
                              (("1" (EXPAND "from_polar")
                                (("1" (REWRITE "abs_mult")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "arg")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE-REPLACE "y!1=real_(0)")
          (("1" (LIFT-IF)
            (("1" (LEMMA "abs_is_0" ("z" "y!1"))
              (("1" (FLATTEN -1)
                (("1" (HIDE -1)
                  (("1" (SPLIT)
                    (("1" (LEMMA "arg_is_0" ("z" "y!1"))
                      (("1" (FLATTEN -1)
                        (("1" (HIDE -1)
                          (("1" (SPLIT)
                            (("1" (TYPEPRED "arg(x!1)")
                              (("1" (ASSERT)
                                (("1" (EXPAND "sqrt")
                                  (("1" (EXPAND "from_polar")
                                    (("1" (REWRITE "abs_mult")
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "arg_mult" ("n0x" "x!1" "n0y" "y!1"))
            (("1" (ASSERT)
              (("1" (EXPAND "sqrt")
                (("1" (REWRITE "abs_mult")
                  (("1" (REWRITE "sqrt_times")
                    (("1" (NAME-REPLACE "RX" "sqrt.sqrt(abs(x!1))")
                      (("1" (NAME-REPLACE "RY" "sqrt.sqrt(abs(y!1))")
                        (("1" (NAME-REPLACE "TX" "arg(x!1)")
                          (("1" (NAME-REPLACE "TY" "arg(y!1)")
                            (("1" (CASE-REPLACE "TX + TY > pi")
                              (("1" (ASSERT)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (HIDE -2)
                                      (("1"
                                        (CASE-REPLACE
                                         "(TX - 2 * pi + TY) / 2 = TX/2+TY/2-pi")
                                        (("1" (HIDE -1)
                                          (("1" (EXPAND "from_polar")
                                            (("1" (REWRITE "sin_minus")
                                              (("1" (REWRITE "cos_minus")
                                                (("1" (REWRITE "cos_pi")
                                                  (("1" (REWRITE "sin_pi")
                                                    (("1"
                                                      (REWRITE "zero_times1")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REWRITE "cos_plus")
                                                          (("1"
                                                            (REWRITE
                                                             "sin_plus")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE-REPLACE "TX + TY <= -pi")
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2)
                                    (("1" (HIDE -2)
                                      (("1"
                                        (CASE-REPLACE
                                         "(TX + TY + 2 * pi) / 2 = TX/2+TY/2+pi")
                                        (("1" (HIDE -1)
                                          (("1" (EXPAND "from_polar")
                                            (("1" (REWRITE "sin_plus")
                                              (("1" (REWRITE "sin_plus")
                                                (("1" (REWRITE "cos_plus")
                                                  (("1" (REWRITE "cos_plus")
                                                    (("1" (REWRITE "cos_pi")
                                                      (("1" (REWRITE "sin_pi")
                                                        (("1"
                                                          (REWRITE
                                                           "zero_times2")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (REPLACE -1)
                                    (("2" (HIDE -1)
                                      (("2"
                                        (REWRITE "div_distributes" 5 :DIR RL)
                                        (("2" (EXPAND "from_polar")
                                          (("2" (REWRITE "sin_plus")
                                            (("2" (REWRITE "cos_plus")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
             ("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|zero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|arg_is_0| FORMULA-DECL NIL |polar| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|abs_is_0| FORMULA-DECL NIL |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL))
   NIL))
 (|sqrt_neg| 0
  (|sqrt_neg-1| "" 3790337402
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (ASSERT)
        (("" (EXPAND "sqrt")
          (("" (REWRITE "abs_neg")
            (("" (CASE "z!1=real_(0)")
              (("1" (ASSERT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "arg")
                    (("1" (ASSERT)
                      (("1" (EXPAND "abs")
                        (("1" (EXPAND "sq_abs")
                          (("1" (EXPAND "sq")
                            (("1" (ASSERT)
                              (("1" (REPLACE -1)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "from_polar")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "arg_neg" ("n0x" "z!1"))
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (EXPAND "from_polar")
                      (("1" (ASSERT)
                        (("1" (LEMMA "trichotomy" ("x" "arg(z!1)"))
                          (("1" (SPLIT)
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA "sin_minus"
                                 ("a" "arg(z!1)/2" "b" "pi/2"))
                                (("1"
                                  (LEMMA "cos_minus"
                                   ("a" "arg(z!1)/2" "b" "pi/2"))
                                  (("1" (REWRITE "sin_pi2")
                                    (("1" (REWRITE "cos_pi2")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE -1)
                              (("2" (ASSERT)
                                (("2" (REWRITE "sin_0")
                                  (("2" (REWRITE "cos_0")
                                    (("2" (REWRITE "cos_pi2")
                                      (("2" (REWRITE "sin_pi2")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (ASSERT)
                              (("3" (LEMMA "cos_sin" ("a" "arg(z!1)/2"))
                                (("3" (REPLACE -1 2 RL)
                                  (("3" (ASSERT)
                                    (("3" (HIDE -1)
                                      (("3" (REWRITE "sin_cos")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sqrt_neg-2| |nil| 3721241718
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (ASSERT)
        (("" (EXPAND "sqrt")
          (("" (REWRITE "abs_neg")
            (("" (CASE "z!1=real_(0)")
              (("1" (ASSERT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "arg")
                    (("1" (ASSERT)
                      (("1" (EXPAND "abs")
                        (("1" (EXPAND "sq_abs")
                          (("1" (EXPAND "sq")
                            (("1" (ASSERT)
                              (("1" (REPLACE -1)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "from_polar")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "arg_neg" ("n0x" "z!1"))
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (EXPAND "from_polar")
                      (("1" (ASSERT)
                        (("1" (LEMMA "trichotomy" ("x" "arg(z!1)"))
                          (("1" (SPLIT)
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA "sin_minus"
                                 ("a" "arg(z!1)/2" "b" "pi/2"))
                                (("1"
                                  (LEMMA "cos_minus"
                                   ("a" "arg(z!1)/2" "b" "pi/2"))
                                  (("1" (REWRITE "sin_pi2")
                                    (("1" (REWRITE "cos_pi2")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE -1)
                              (("2" (ASSERT)
                                (("2" (REWRITE "sin_0")
                                  (("2" (REWRITE "cos_0")
                                    (("2" (REWRITE "cos_pi2")
                                      (("2" (REWRITE "sin_pi2")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (ASSERT)
                              (("3" (LEMMA "cos_sin" ("a" "arg(z!1)/2"))
                                (("3" (REPLACE -1 2 RL)
                                  (("3" (ASSERT)
                                    (("3" (HIDE -1)
                                      (("3" (REWRITE "sin_cos")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|sin_cos| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_sin| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|arg_neg| FORMULA-DECL NIL |polar| NIL)
    (|abs_neg| FORMULA-DECL NIL |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|neg_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL))
 (|sqrt_inv| 0
  (|sqrt_inv-3| "" 3790337405
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (CASE "arg(n0z!1) = pi")
        (("1" (REPLACE -1)
          (("1" (LEMMA "arg_is_pi" ("z" "n0z!1"))
            (("1" (REPLACE -2 -1)
              (("1" (FLATTEN -1)
                (("1" (EXPAND "sqrt")
                  (("1" (REPLACE -3)
                    (("1" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                      (("1" (REPLACE -4)
                        (("1" (SIMPLIFY -1)
                          (("1" (CASE-REPLACE "arg(1 / n0z!1) = pi")
                            (("1" (HIDE -1 -2 -5)
                              (("1" (TYPEPRED "abs(n0z!1)")
                                (("1" (HIDE -1)
                                  (("1"
                                    (CASE-REPLACE
                                     "sqrt(abs(1 / n0z!1))=1/sqrt(abs(n0z!1))")
                                    (("1" (HIDE -1 -3 -4)
                                      (("1" (NAME-REPLACE "X" "abs(n0z!1)")
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "cos_pi2")
                                            (("1" (REWRITE "sin_pi2")
                                              (("1" (REWRITE "zero_times2")
                                                (("1"
                                                  (LEMMA "sqrt_pos" ("px" "X"))
                                                  (("1"
                                                    (NAME-REPLACE "Y"
                                                     "sqrt(X)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "sq_abs(Y * complex_i)=sq(Y)")
                                                        (("1" (HIDE -1)
                                                          (("1" (EXPAND "sq")
                                                            (("1"
                                                              (REWRITE
                                                               "cross_mult")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 2)
                                                          (("2"
                                                            (EXPAND "sq_abs")
                                                            (("2" (EXPAND "sq")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (REWRITE "abs_inv")
                                        (("2" (REWRITE "sqrt_div" 1) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "arg(n0z!1)")
          (("2" (EXPAND "<=" -2)
            (("2" (REPLACE 1)
              (("2" (HIDE 1)
                (("2"
                  (LEMMA "complex_div_cancel4"
                   ("z2" "sqrt(1 / n0z!1)" "z1" "complex_(1,0)" "n0z"
                    "sqrt(n0z!1)"))
                  (("2" (FLATTEN)
                    (("2" (SPLIT -2)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (HIDE 2 -1)
                        (("2" (LEMMA "sqrt_times" ("x" "1/n0z!1" "y" "n0z!1"))
                          (("2" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                            (("2" (CASE-REPLACE "arg(n0z!1) = 0")
                              (("1" (REPLACE -2)
                                (("1" (SIMPLIFY -3)
                                  (("1" (ASSERT)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -3 1 RL)
                                        (("1" (REPLACE -4 1 RL)
                                          (("1" (HIDE -3 -4)
                                            (("1" (EXPAND "sqrt")
                                              (("1"
                                                (LEMMA "arg_mult"
                                                 ("n0x" "1 / n0z!1" "n0y"
                                                  "n0z!1"))
                                                (("1" (REPLACE -2)
                                                  (("1" (REPLACE -3)
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACE -1)
                                                        (("1"
                                                          (EXPAND "from_polar")
                                                          (("1"
                                                            (REWRITE "cos_0")
                                                            (("1"
                                                              (REWRITE "sin_0")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (CASE-REPLACE
                                                   "arg(n0z!1) = pi")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2"
                                                    (CASE-REPLACE
                                                     "-pi < -arg(n0z!1) + arg(n0z!1) AND -arg(n0z!1) + arg(n0z!1) <= pi")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (NAME-REPLACE "LHS"
                                                         "sqrt(1 / n0z!1) * sqrt(n0z!1)")
                                                        (("1"
                                                          (LEMMA
                                                           "complex_div_cancel2"
                                                           ("z" "complex_(1,0)"
                                                            "n0z" "n0z!1"))
                                                          (("1"
                                                            (NAME-REPLACE
                                                             "DRL1"
                                                             "1 / n0z!1 * n0z!1")
                                                            (("1"
                                                              (NAME-REPLACE
                                                               "DRL2"
                                                               "(complex_(1, 0) / n0z!1) * n0z!1")
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "arg(DRL1)=0")
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "abs(DRL1)=1")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sqrt_1")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "from_polar")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "cos_0")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "sin_0")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "DRL1")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "abs_mult"
                                                                         1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (CASE
                                                                      "DRL1=DRL2")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "arg"
                                                                         1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "DRL1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "DRL2")
                                                                        (("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REVEAL 2)
                                (("2" (ASSERT)
                                  (("2" (FLATTEN)
                                    (("2"
                                      (CASE
                                          "sqrt(complex_(1, 0) / n0z!1 * n0z!1) = complex_(1,0)")
                                      (("1" (GRIND :EXCLUDE ("sqrt" "arg")) NIL
                                        NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2"
                                          (CASE
                                              "complex_(1, 0) / n0z!1 * n0z!1 = complex_(1,0)")
                                          (("1" (REWRITE -1)
                                            (("1" (GRIND)
                                              (("1" (LEMMA "sin_0")
                                                (("1" (PROPAX) NIL NIL)) NIL)
                                               ("2" (LEMMA "cos_0")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (GRIND)
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_div_cancel4| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|sqrt_times| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|complex_div_cancel2| FORMULA-DECL NIL |complex_types| NIL) NIL
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL) NIL
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|complex_0_mult| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_plus_0| FORMULA-DECL NIL |complex_types| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_0_plus| FORMULA-DECL NIL |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|zero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   SHOSTAK)
  (|sqrt_inv-2| |nil| 3721241759
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (CASE "arg(n0z!1) = pi")
        (("1" (REPLACE -1)
          (("1" (LEMMA "arg_is_pi" ("z" "n0z!1"))
            (("1" (REPLACE -2 -1)
              (("1" (FLATTEN -1)
                (("1" (EXPAND "sqrt")
                  (("1" (REPLACE -3)
                    (("1" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                      (("1" (REPLACE -4)
                        (("1" (SIMPLIFY -1)
                          (("1" (CASE-REPLACE "arg(1 / n0z!1) = pi")
                            (("1" (HIDE -1 -2 -5)
                              (("1" (TYPEPRED "abs(n0z!1)")
                                (("1" (HIDE -1)
                                  (("1"
                                    (CASE-REPLACE
                                     "sqrt(abs(1 / n0z!1))=1/sqrt(abs(n0z!1))")
                                    (("1" (HIDE -1 -3 -4)
                                      (("1" (NAME-REPLACE "X" "abs(n0z!1)")
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "cos_pi2")
                                            (("1" (REWRITE "sin_pi2")
                                              (("1" (REWRITE "zero_times2")
                                                (("1"
                                                  (LEMMA "sqrt_pos" ("px" "X"))
                                                  (("1"
                                                    (NAME-REPLACE "Y"
                                                     "sqrt(X)")
                                                    (("1" (ASSERT)
                                                      (("1" (REWRITE "neg_neg")
                                                        (("1"
                                                          (REWRITE "one_times")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "sq_abs(0 + Y * complex_i)=sq(Y)")
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (EXPAND "sq")
                                                                (("1"
                                                                  (REWRITE
                                                                   "cross_mult")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (EXPAND
                                                                 "sq_abs")
                                                                (("2"
                                                                  (EXPAND "sq")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (REWRITE "abs_inv")
                                        (("2" (REWRITE "sqrt_div" 1) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "arg(n0z!1)")
          (("2" (EXPAND "<=" -2)
            (("2" (REPLACE 1)
              (("2" (HIDE 1)
                (("2"
                  (LEMMA "complex_div_cancel4"
                   ("z2" "sqrt(1 / n0z!1)" "z1" "complex_(1,0)" "n0z"
                    "sqrt(n0z!1)"))
                  (("2" (FLATTEN)
                    (("2" (SPLIT -2)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (HIDE 2 -1)
                        (("2" (LEMMA "sqrt_times" ("x" "1/n0z!1" "y" "n0z!1"))
                          (("2" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                            (("2" (CASE-REPLACE "arg(n0z!1) = 0")
                              (("1" (REPLACE -2)
                                (("1" (SIMPLIFY -3)
                                  (("1" (ASSERT)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -3 1 RL)
                                        (("1" (REPLACE -4 1 RL)
                                          (("1" (HIDE -3 -4)
                                            (("1" (EXPAND "sqrt")
                                              (("1"
                                                (LEMMA "arg_mult"
                                                 ("n0x" "1 / n0z!1" "n0y"
                                                  "n0z!1"))
                                                (("1" (REPLACE -2)
                                                  (("1" (REPLACE -3)
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACE -1)
                                                        (("1"
                                                          (EXPAND "from_polar")
                                                          (("1"
                                                            (REWRITE "cos_0")
                                                            (("1"
                                                              (REWRITE "sin_0")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (CASE-REPLACE
                                                   "arg(n0z!1) = pi")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2"
                                                    (CASE-REPLACE
                                                     "-pi < -arg(n0z!1) + arg(n0z!1) AND -arg(n0z!1) + arg(n0z!1) <= pi")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (NAME-REPLACE "LHS"
                                                         "sqrt(1 / n0z!1) * sqrt(n0z!1)")
                                                        (("1"
                                                          (LEMMA
                                                           "complex_div_cancel2"
                                                           ("z" "complex_(1,0)"
                                                            "n0z" "n0z!1"))
                                                          (("1"
                                                            (NAME-REPLACE
                                                             "DRL1"
                                                             "1 / n0z!1 * n0z!1")
                                                            (("1"
                                                              (NAME-REPLACE
                                                               "DRL2"
                                                               "(complex_(1, 0) / n0z!1) * n0z!1")
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "arg(DRL1)=0")
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "abs(DRL1)=1")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sqrt_1")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "from_polar")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "cos_0")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "sin_0")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "DRL1")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "abs_mult"
                                                                         1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (CASE
                                                                      "DRL1=DRL2")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "arg"
                                                                         1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -2)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -3)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -4)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "atan2")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "atan_0")
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "DRL1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "DRL2")
                                                                        (("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REVEAL 2)
                                (("2" (ASSERT)
                                  (("2" (FLATTEN)
                                    (("2"
                                      (CASE
                                          "sqrt(complex_(1, 0) / n0z!1 * n0z!1) = complex_(1,0)")
                                      (("1" (GRIND :EXCLUDE ("sqrt" "arg")) NIL
                                        NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2"
                                          (CASE
                                              "complex_(1, 0) / n0z!1 * n0z!1 = complex_(1,0)")
                                          (("1" (REWRITE -1)
                                            (("1" (GRIND)
                                              (("1" (LEMMA "sin_0")
                                                (("1" (PROPAX) NIL NIL)) NIL)
                                               ("2" (LEMMA "cos_0")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (GRIND)
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|complex_div_cancel4| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_times| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|complex_div_cancel2| FORMULA-DECL NIL |complex_types| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (+ CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "complex" |complex_types| NIL)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|neg_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|zero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (/ CONST-DECL "complex" |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   NIL)
  (|sqrt_inv-1| |nil| 3385200646
   ("" (SKOSIMP)
    (("" (CASE "arg(n0z!1) = pi")
      (("1" (REPLACE -1)
        (("1" (LEMMA "arg_is_pi" ("z" "n0z!1"))
          (("1" (REPLACE -2 -1)
            (("1" (FLATTEN -1)
              (("1" (EXPAND "sqrt")
                (("1" (REPLACE -3)
                  (("1" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                    (("1" (REPLACE -4)
                      (("1" (SIMPLIFY -1)
                        (("1" (CASE-REPLACE "arg(1 / n0z!1) = pi")
                          (("1" (HIDE -1 -2 -5)
                            (("1" (TYPEPRED "abs(n0z!1)")
                              (("1" (HIDE -1)
                                (("1"
                                  (CASE-REPLACE
                                   "sqrt(abs(1 / n0z!1))=1/sqrt(abs(n0z!1))")
                                  (("1" (HIDE -1 -3 -4)
                                    (("1" (NAME-REPLACE "X" "abs(n0z!1)")
                                      (("1" (EXPAND "from_polar")
                                        (("1" (REWRITE "cos_pi2")
                                          (("1" (REWRITE "sin_pi2")
                                            (("1" (REWRITE "zero_times2")
                                              (("1"
                                                (LEMMA "sqrt_pos" ("px" "X"))
                                                (("1"
                                                  (NAME-REPLACE "Y" "sqrt(X)")
                                                  (("1" (ASSERT)
                                                    (("1" (REWRITE "neg_neg")
                                                      (("1"
                                                        (REWRITE "one_times")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "sq_abs(0 + Y * complex_i)=sq(Y)")
                                                          (("1" (HIDE -1)
                                                            (("1" (EXPAND "sq")
                                                              (("1"
                                                                (REWRITE
                                                                 "cross_mult")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (EXPAND "sq_abs")
                                                              (("2"
                                                                (EXPAND "sq")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (REWRITE "abs_inv")
                                      (("2" (REWRITE "sqrt_div" 1) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "arg(n0z!1)")
        (("2" (EXPAND "<=" -2)
          (("2" (REPLACE 1)
            (("2" (HIDE 1)
              (("2"
                (LEMMA "complex_div_cancel4"
                 ("z2" "sqrt(1 / n0z!1)" "z1" "complex_(1,0)" "n0z"
                  "sqrt(n0z!1)"))
                (("2" (FLATTEN)
                  (("2" (SPLIT -2)
                    (("1" (HIDE -2)
                      (("1" (ASSERT)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL)
                     ("2" (HIDE 2 -1)
                      (("2" (LEMMA "sqrt_times" ("x" "1/n0z!1" "y" "n0z!1"))
                        (("2" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                          (("2" (CASE-REPLACE "arg(n0z!1) = 0")
                            (("1" (REPLACE -2)
                              (("1" (SIMPLIFY -3)
                                (("1" (ASSERT)
                                  (("1" (FLATTEN)
                                    (("1" (REPLACE -3 1 RL)
                                      (("1" (REPLACE -4 1 RL)
                                        (("1" (HIDE -3 -4)
                                          (("1" (EXPAND "sqrt")
                                            (("1"
                                              (LEMMA "arg_mult"
                                               ("n0x" "1 / n0z!1" "n0y"
                                                "n0z!1"))
                                              (("1" (REPLACE -2)
                                                (("1" (REPLACE -3)
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (EXPAND "from_polar")
                                                        (("1" (REWRITE "cos_0")
                                                          (("1"
                                                            (REWRITE "sin_0")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE 1)
                              (("2" (CASE-REPLACE "arg(n0z!1) = pi")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (REPLACE 1)
                                  (("2" (REPLACE -1)
                                    (("2"
                                      (CASE-REPLACE
                                       "-pi < -arg(n0z!1) + arg(n0z!1) AND -arg(n0z!1) + arg(n0z!1) <= pi")
                                      (("1" (FLATTEN)
                                        (("1"
                                          (NAME-REPLACE "LHS"
                                           "sqrt(1 / n0z!1) * sqrt(n0z!1)")
                                          (("1"
                                            (LEMMA "complex_div_cancel2"
                                             ("z" "complex_(1,0)" "n0z"
                                              "n0z!1"))
                                            (("1"
                                              (NAME-REPLACE "DRL1"
                                               "1 / n0z!1 * n0z!1")
                                              (("1"
                                                (NAME-REPLACE "DRL2"
                                                 "(complex_(1, 0) / n0z!1) * n0z!1")
                                                (("1" (EXPAND "sqrt")
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "arg(DRL1)=0")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "abs(DRL1)=1")
                                                      (("1" (REWRITE "sqrt_1")
                                                        (("1"
                                                          (EXPAND "from_polar")
                                                          (("1" (ASSERT)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (REWRITE
                                                                 "cos_0")
                                                                (("1"
                                                                  (REWRITE
                                                                   "sin_0")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "DRL1")
                                                        (("2"
                                                          (REWRITE "abs_mult"
                                                           1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (CASE "DRL1=DRL2")
                                                      (("1" (ASSERT)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND "arg" 1)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1"
                                                                  (REPLACE -2)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -3)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -4)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "atan2")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "atan_0")
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (EXPAND "DRL1")
                                                          (("2" (EXPAND "DRL2")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -1 -2 4)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg_is_pi| FORMULA-DECL NIL |polar| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|complex_i| CONST-DECL "nzcomplex" |complex_types| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|div_nzcomplex2| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|complex_div_cancel2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|complex_div_cancel4| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|sqrt_div| 0
  (|sqrt_div-2| |nil| 3721241839
   ("" (AUTO-REWRITE "complex_ext")
    (("" (SKOSIMP)
      (("" (LEMMA "sqrt_inv" ("n0z" "n0y!1"))
        (("" (LEMMA "sqrt_times" ("x" "x!1" "y" "1/n0y!1"))
          (("" (REWRITE "complex_div_def")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (REPLACE -1)
                  (("" (REPLACE -2)
                    (("" (REPLACE -3)
                      (("" (REPLACE -4)
                        (("" (HIDE -1 -2 -3 -4)
                          (("" (REWRITE "neg_neg")
                            (("" (REWRITE "one_times")
                              (("" (LEMMA "arg_inv" ("n0z" "n0y!1"))
                                (("" (REPLACE -1)
                                  (("" (HIDE -1)
                                    (("" (CASE-REPLACE "arg(n0y!1) = 0")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (CASE-REPLACE "arg(n0y!1) = pi")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "sqrt")
                                            (("1" (EXPAND "from_polar")
                                              (("1" (REPLACE -1)
                                                (("1" (REWRITE "sin_pi2")
                                                  (("1" (REWRITE "cos_pi2")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "sq_abs")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE
                                                             "sqrt.sq_sqrt")
                                                            (("1"
                                                              (REWRITE
                                                               "zero_times2")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LIFT-IF 2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (LIFT-IF)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF)
                                              (("2" (ASSERT)
                                                (("2" (LIFT-IF)
                                                  (("2" (ASSERT)
                                                    (("2" (GROUND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((/ CONST-DECL "complex" |complex_types| NIL)
    (|sqrt_times| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_ext| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|gt_npi_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|neg_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|complex_div_def| FORMULA-DECL NIL |complex_types| NIL)
    (|sqrt_inv| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL))
   NIL)
  (|sqrt_div-1| |nil| 3385202953
   ("" (SKOSIMP)
    (("" (LEMMA "sqrt_inv" ("n0z" "n0y!1"))
      (("" (LEMMA "sqrt_times" ("x" "x!1" "y" "1/n0y!1"))
        (("" (REWRITE "complex_div_def")
          (("" (ASSERT)
            (("" (FLATTEN)
              (("" (REPLACE -1)
                (("" (REPLACE -2)
                  (("" (REPLACE -3)
                    (("" (REPLACE -4)
                      (("" (HIDE -1 -2 -3 -4)
                        (("" (REWRITE "neg_neg")
                          (("" (REWRITE "one_times")
                            (("" (LEMMA "arg_inv" ("n0z" "n0y!1"))
                              (("" (REPLACE -1)
                                (("" (HIDE -1)
                                  (("" (CASE-REPLACE "arg(n0y!1) = 0")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (CASE-REPLACE "arg(n0y!1) = pi")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sqrt")
                                          (("1" (EXPAND "from_polar")
                                            (("1" (REPLACE -1)
                                              (("1" (REWRITE "sin_pi2")
                                                (("1" (REWRITE "cos_pi2")
                                                  (("1" (ASSERT)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "sq_abs")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE
                                                             "sqrt.sq_sqrt")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REWRITE
                                                                 "zero_times2")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LIFT-IF 2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (LIFT-IF)
                                        (("2" (ASSERT)
                                          (("2" (LIFT-IF)
                                            (("2" (ASSERT)
                                              (("2" (LIFT-IF)
                                                (("2" (ASSERT)
                                                  (("2" (GROUND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex_div_def| FORMULA-DECL NIL |complex_types| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs_nzcomplex| APPLICATION-JUDGEMENT "posreal" |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|Im_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_i| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_add2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_i| FORMULA-DECL NIL |complex_types| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|arg| CONST-DECL "gt_npi_le_pi" |polar| NIL)
    (|nz_sq_abs_pos| APPLICATION-JUDGEMENT "posreal" |complex_types| NIL)
    (|Im_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_div2| FORMULA-DECL NIL |complex_types| NIL)
    (|eq_rew| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|Im_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_neg1| FORMULA-DECL NIL |complex_types| NIL)
    (|Re_mul1| FORMULA-DECL NIL |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|div_nzcomplex2| APPLICATION-JUDGEMENT "nzcomplex" |complex_types| NIL))
   SHOSTAK)))

