(|mergesort| (|merge_TCC1| 0 (|merge_TCC1-1| |nil| 3589038563 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|merge| SUBTYPE "mergesort.l1" "(list_adt[mergesort.T].cons?)"))) (|merge_TCC2| 0 (|merge_TCC2-1| |nil| 3589038563 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|merge| SUBTYPE "mergesort.l2" "(list_adt[mergesort.T].cons?)"))) (|merge_TCC3| 0 (|merge_TCC3-1| |nil| 3589038563 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|merge| TERMINATION "mergesort.merge(list_adt[mergesort.T].cdr(mergesort.l1), mergesort.l2)" "NIL"))) (|merge_TCC4| 0 (|merge_TCC4-1| |nil| 3589194902 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|merge| TERMINATION "mergesort.merge(mergesort.l1, list_adt[mergesort.T].cdr(mergesort.l2))" "NIL"))) (|merge_size| 0 (|merge_size-2| "" 3884901449 ("" (MEASURE-INDUCT "length(l1) + length(l2)" ("l1" "l2")) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (REWRITE "length_append") NIL NIL)) NIL) ("2" (HIDE -2) (("2" (REWRITE "length_append") NIL NIL)) NIL) ("3" (EXPAND "length" 1 1) (("3" (INST -2 "cdr(x!1)" "x!2") (("3" (PROP) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE - 2) (("2" (EXPAND "length" 1 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "length" 2 1) (("4" (INST -1 "x!1" "cdr(x!2)") (("4" (PROP) (("1" (EXPAND "length" 2 3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "length" 1 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_size-1| |nil| 3589039228 ("" (MEASURE-INDUCT "length(l1) + length(l2)" (L1 L2)) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (REWRITE "length_append") NIL NIL)) NIL) ("2" (HIDE -2) (("2" (REWRITE "length_append") NIL NIL)) NIL) ("3" (EXPAND "length" 1 1) (("3" (INST -2 "cdr(x!1)" "x!2") (("3" (PROP) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE - 2) (("2" (EXPAND "length" 1 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "length" 2 1) (("4" (INST -1 "x!1" "cdr(x!2)") (("4" (PROP) (("1" (EXPAND "length" 2 3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "length" 1 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|merge| DEF-DECL "list[T]" |mergesort| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|merge_occurrence| 0 (|merge_occurrence-2| "" 3884901508 ("" (SKOLEM 1 ("_" "_" "x")) (("" (MEASURE-INDUCT "length(l1) + length(l2)" ("l1" "l2")) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (EXPAND "occurrences" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null" 2) (("1" (EXPAND "occurrences" 2 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "occurrences" 1 (1 2)) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (INST -2 "cdr(x!1)" "x!2") (("1" (PROP) (("1" (HIDE -1 2) (("1" (EXPAND "length" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 2 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (INST -1 "x!1" "cdr(x!2)") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (EXPAND "length" 1 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_occurrence-1| |nil| 3589039505 ("" (SKOLEM 1 ("_" "_" X)) (("" (MEASURE-INDUCT "length(l1) + length(l2)" (L1 L2)) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (EXPAND "occurrences" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null" 2) (("1" (EXPAND "occurrences" 2 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "occurrences" 1 (1 2)) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (INST -2 "cdr(x!1)" "x!2") (("1" (PROP) (("1" (HIDE -1 2) (("1" (EXPAND "length" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 2 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (INST -1 "x!1" "cdr(x!2)") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (EXPAND "length" 1 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|merge| DEF-DECL "list[T]" |mergesort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)) SHOSTAK)) (|merge_is_permutation| 0 (|merge_is_permutation-1| |nil| 3589039689 ("" (SKEEP) (("" (EXPAND "permutations") (("" (REWRITE "merge_size") (("" (REWRITE "length_append") (("" (SKEEP) (("" (REWRITE "merge_occurrence") (("" (REWRITE "occurrences_of_app") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|merge_occurrence| FORMULA-DECL NIL |mergesort| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL)) SHOSTAK)) (|merge_of_sorted_is_sorted| 0 (|merge_of_sorted_is_sorted-4| "" 3884901630 ("" (MEASURE-INDUCT "length(l1) + length(l2)" ("l1" "l2")) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null") NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (CASE "k=0") (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (EXPAND "merge" 1) (("1" (EXPAND "is_sorted?" (-5 -6)) (("1" (CASE "cdr(x!1) = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST -6 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST -3 "cdr(x!1)" "x!2") (("2" (PROP) (("1" (HIDE -4 -5) (("1" (EXPAND "is_sorted?") (("1" (INST -1 "k-1") (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4 5)) (("3" (EXPAND "length" 1 3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" 2) (("2" (SKEEP) (("2" (CASE "k=0") (("1" (EXPAND "nth" 2) (("1" (EXPAND "nth" 2) (("1" (ASSERT) (("1" (EXPAND "merge" 2) (("1" (CASE "cdr(x!2) = null") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "append_null") (("1" (HIDE -) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" -5) (("2" (INST -5 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (INST -2 "x!1" "cdr(x!2)") (("2" (EXPAND "length" -2 4) (("2" (REWRITE "cdr_of_sorted_is_sorted") (("2" (EXPAND "is_sorted?" -2) (("2" (INST -2 "k-1") (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_of_sorted_is_sorted-3| |nil| 3797776332 ("" (MEASURE-INDUCT "length(l1) + length(l2)" (L1 L2)) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null") NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (CASE K=0) (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (EXPAND "merge" 1) (("1" (EXPAND "is_sorted?" (-5 -6)) (("1" (CASE "cdr(x!1) = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST -6 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST -3 "cdr(x!1)" "x!2") (("2" (PROP) (("1" (HIDE -4 -5) (("1" (EXPAND "is_sorted?") (("1" (INST -1 "k-1") (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4 5)) (("3" (EXPAND "length" 1 3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" 2) (("2" (SKEEP) (("2" (CASE "k=0") (("1" (EXPAND "nth" 2) (("1" (EXPAND "nth" 2) (("1" (ASSERT) (("1" (EXPAND "merge" 2) (("1" (CASE "cdr(x!2) = null") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "append_null") (("1" (HIDE -) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" -5) (("2" (INST -5 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (INST -2 "x!1" "cdr(x!2)") (("2" (EXPAND "length" -2 4) (("2" (REWRITE "cdr_of_sorted_is_sorted") (("2" (EXPAND "is_sorted?" -2) (("2" (INST -2 "k-1") (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|x!2| SKOLEM-CONST-DECL "list[T]" |mergesort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|k| SKOLEM-CONST-DECL "below[length[T](cons(car(x!2), merge(x!1, cdr(x!2))))]" |mergesort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |mergesort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|merge| DEF-DECL "list[T]" |mergesort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |mergesort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|merge_of_sorted_is_sorted-2| |nil| 3731751321 ("" (MEASURE-INDUCT "length(l1) + length(l2)" (L1 L2)) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null") NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (CASE K=0) (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (EXPAND "merge" 1) (("1" (EXPAND "is_sorted?" (-5 -6)) (("1" (CASE "cdr(x!1) = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST -6 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST -3 "cdr(x!1)" "x!2") (("2" (PROP) (("1" (HIDE -4 -5) (("1" (EXPAND "is_sorted?") (("1" (INST -1 "k-1") (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4 5)) (("3" (EXPAND "length" 1 3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" 2) (("2" (SKEEP) (("2" (CASE "k=0") (("1" (EXPAND "nth" 2) (("1" (EXPAND "nth" 2) (("1" (ASSERT) (("1" (EXPAND "merge" 2) (("1" (CASE "cdr(x!2) = null") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "append_null") (("1" (HIDE -) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" -5) (("2" (INST -5 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (INST -2 "x!1" "cdr(x!2)") (("2" (EXPAND "length" -2 4) (("2" (REWRITE "cdr_of_sorted_is_sorted") (("2" (EXPAND "is_sorted?" -2) (("2" (INST -2 "k-1") (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|merge_of_sorted_is_sorted-1| |nil| 3589040010 ("" (MEASURE-INDUCT "length(l1) + length(l2)" (L1 L2)) (("" (SKOSIMP) (("" (EXPAND "merge" 1) (("" (CASE "x!1 = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!2 = null") (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REWRITE "append_null") NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (CASE K=0) (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (EXPAND "merge" 1) (("1" (EXPAND "is_sorted?" (-5 -6)) (("1" (CASE "cdr(x!1) = null") (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST -6 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST -3 "cdr(x!1)" "x!2") (("2" (PROP) (("1" (HIDE -4 -5) (("1" (EXPAND "is_sorted?") (("1" (INST -1 "k-1") (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (EXPAND "list2finseq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL) ("3" (HIDE-ALL-BUT (1 4 5)) (("3" (EXPAND "length" 1 3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" 2) (("2" (SKEEP) (("2" (CASE "k=0") (("1" (EXPAND "nth" 2) (("1" (EXPAND "nth" 2) (("1" (ASSERT) (("1" (EXPAND "merge" 2) (("1" (CASE "cdr(x!2) = null") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "append_null") (("1" (HIDE -) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST -2 "car(x!1)" "car(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?" -5) (("2" (INST -5 0) (("1" (PROP) (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (INST -2 "x!1" "cdr(x!2)") (("2" (EXPAND "length" -2 4) (("2" (REWRITE "cdr_of_sorted_is_sorted") (("2" (EXPAND "is_sorted?" -2) (("2" (INST -2 "k-1") (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|merge_sort_TCC1| 0 (|merge_sort_TCC1-1| |nil| 3589038563 ("" (SKEEP) (("" (EXPAND "length") (("" (ASSERT) (("" (LIFT-IF) (("" (ASSERT) (("" (PROP) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|merge_sort| SUBTYPE "floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))" "below[1 + length[T](l)]"))) (|merge_sort_TCC2| 0 (|merge_sort_TCC2-1| |nil| 3589038563 ("" (SKEEP) (("" (REWRITE "length_prefix") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|merge_sort| TERMINATION "mergesort.merge_sort(sorting_aux[mergesort.T].prefix(mergesort.l, floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))))" "NIL"))) (|merge_sort_TCC3| 0 (|merge_sort_TCC3-1| |nil| 3589038563 ("" (SKEEP) (("" (REWRITE "length_suffix") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|merge_sort| TERMINATION "mergesort.merge_sort(sorting_aux[mergesort.T].suffix(mergesort.l, floor_ceil.floor(number_fields./(list_props[mergesort.T].length(mergesort.l), 2))))" "NIL"))) (|merge_sort_size| 0 (|merge_sort_size-2| "" 3884901651 ("" (MEASURE-INDUCT "length(l)" "l") (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (LIFT-IF) (("" (PROP) (("" (REWRITE "merge_size") (("" (INST-CP -1 "prefix(x, floor(length(x) / 2))") (("" (INST -1 "suffix(x, floor(length(x) / 2))") (("" (REWRITE "length_suffix") (("" (REWRITE "length_prefix") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_sort_size-1| |nil| 3589040671 ("" (MEASURE-INDUCT "length(l)" L) (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (LIFT-IF) (("" (PROP) (("" (REWRITE "merge_size") (("" (INST-CP -1 "prefix(x, floor(length(x) / 2))") (("" (INST -1 "suffix(x, floor(length(x) / 2))") (("" (REWRITE "length_suffix") (("" (REWRITE "length_prefix") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|merge_size| FORMULA-DECL NIL |mergesort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|merge_sort_is_sorted| 0 (|merge_sort_is_sorted-2| "" 3884901676 ("" (MEASURE-INDUCT "length(l)" "l") (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length" -2) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "merge_of_sorted_is_sorted") (("2" (INST -1 "merge_sort(prefix(x, floor(length(x) / 2)))" "merge_sort(suffix(x, floor(length(x) / 2)))") (("2" (ASSERT) (("2" (SPLIT) (("1" (INST -1 "prefix(x, floor(length(x) / 2))") (("1" (ASSERT) (("1" (REWRITE "length_prefix") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 2) (("2" (ASSERT) (("2" (INST -1 "suffix(x, floor(length(x) / 2))") (("2" (ASSERT) (("2" (REWRITE "length_suffix") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_sort_is_sorted-1| |nil| 3589040459 ("" (MEASURE-INDUCT "length(l)" L) (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (PROP) (("1" (EXPAND "is_sorted?" 1) (("1" (SKEEP) (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length" -2) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "merge_of_sorted_is_sorted") (("2" (INST -1 "merge_sort(prefix(x, floor(length(x) / 2)))" "merge_sort(suffix(x, floor(length(x) / 2)))") (("2" (ASSERT) (("2" (SPLIT) (("1" (INST -1 "prefix(x, floor(length(x) / 2))") (("1" (ASSERT) (("1" (REWRITE "length_prefix") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 2) (("2" (ASSERT) (("2" (INST -1 "suffix(x, floor(length(x) / 2))") (("2" (ASSERT) (("2" (REWRITE "length_suffix") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|merge_of_sorted_is_sorted| FORMULA-DECL NIL |mergesort| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |mergesort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|merge_sort_is_permutation| 0 (|merge_sort_is_permutation-2| "" 3884901704 ("" (MEASURE-INDUCT "length(l)" "l") (("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (LIFT-IF) (("" (PROP) (("" (INST-CP -1 "suffix(x, floor(length(x) / 2))") (("" (INST -1 "prefix(x, floor(length(x) / 2))") (("" (REWRITE "length_prefix") (("" (REWRITE "length_suffix") (("" (ASSERT) (("" (REWRITE "merge_occurrence") (("" (INST -1 "x_1") (("" (INST -2 "x_1") (("" (REPLACES -1) (("" (REPLACES -1) (("" (LEMMA "app_prefix_suffix") (("" (INST -1 "x" "floor(length(x) / 2)") (("" (LEMMA "occurrences_of_app") (("" (INST -1 "prefix(x, floor(length(x) / 2))" "suffix(x, floor(length(x) / 2))" "x_1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|merge_sort_is_permutation-1| |nil| 3589041194 ("" (MEASURE-INDUCT "length(l)" L) (("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (LIFT-IF) (("" (PROP) (("" (INST-CP -1 "suffix(x, floor(length(x) / 2))") (("" (INST -1 "prefix(x, floor(length(x) / 2))") (("" (REWRITE "length_prefix") (("" (REWRITE "length_suffix") (("" (ASSERT) (("" (REWRITE "merge_occurrence") (("" (INST -1 "x_1") (("" (INST -2 "x_1") (("" (REPLACES -1) (("" (REPLACES -1) (("" (LEMMA "app_prefix_suffix") (("" (INST -1 "x" "floor(length(x) / 2)") (("" (LEMMA "occurrences_of_app") (("" (INST -1 "prefix(x, floor(length(x) / 2))" "suffix(x, floor(length(x) / 2))" "x_1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|app_prefix_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|merge_occurrence| FORMULA-DECL NIL |mergesort| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|merge_sort_works| 0 (|merge_sort_works-1| |nil| 3589041415 ("" (SKEEP) (("" (REWRITE "merge_sort_is_sorted") (("" (REWRITE "merge_sort_is_permutation") NIL NIL)) NIL)) NIL) ((|merge_sort_is_sorted| FORMULA-DECL NIL |mergesort| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|merge_sort_is_permutation| FORMULA-DECL NIL |mergesort| NIL)) SHOSTAK)) (|merge_is_conservative| 0 (|merge_is_conservative-3| |nil| 3797776536 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (SKEEP) (("" (EXPAND "merge" 1) (("" (CASE "null?(x!1) OR null?(x!2)") (("1" (REPLACE -1) (("1" (INST 1 "m" "n") (("1" (TYPEPRED "n") (("1" (REWRITE "merge_size") (("1" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "m") (("2" (REWRITE "merge_size") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("2" (ASSERT) (("2" (CASE "leq(car(x!1), car(x!2))") (("1" (ASSERT) (("1" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 3 1) (("1" (LEMMA "merge_is_permutation") (("1" (INST -1 "x!1" "x!2") (("1" (LEMMA "permutations_preserve_contents") (("1" (INST -1 "merge(x!1,x!2)" "_" "n") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "merge" -1) (("1" (REPLACES -1 :DIR RL) (("1" (INST 3 "0" "j") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 4 1) (("2" (ASSERT) (("2" (CASE "n=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "nth" 5 3) (("2" (INST -2 "cdr(x!1)" "x!2") (("1" (INST -2 "m-1" "n-1") (("1" (EXPAND "length" -2 3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "merge" -5) (("1" (EXPAND "nth" -5) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 5 "i+1" "j+1") (("1" (EXPAND "append" 5) (("1" (EXPAND "nth" 5 (2 4)) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "m=0") (("1" (EXPAND "nth" 4 1) (("1" (ASSERT) (("1" (CASE "n=0") (("1" (EXPAND "nth" 4 2) (("1" (ASSERT) (("1" (INST 4 "length(x!1)" "length(x!1)") (("1" (ASSERT) (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 5 2) (("2" (ASSERT) (("2" (EXPAND "merge" -4) (("2" (EXPAND "merge" -5) (("2" (EXPAND "nth" -5) (("2" (EXPAND "nth" -4) (("2" (LEMMA "merge_is_permutation") (("2" (INST?) (("2" (LEMMA "permutations_preserve_contents") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (USE "nth_of_append") (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "x!1") (("1" (LEMMA "is_sorted_implies_monotone") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "j=0") (("1" (GRIND) NIL NIL) ("2" (INST -1 "j" "0") (("1" (EXPAND "nth" -1 1) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -2 "car(x!1)" "nth(x!1,j)" "car(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "j - length(x!1) = 0") (("1" (INST 6 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST 7 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 5 (1 3)) (("2" (ASSERT) (("2" (INST -1 "x!1" "cdr(x!2)") (("1" (INST -1 "m-1" "n-1") (("1" (EXPAND "length" -1 4) (("1" (EXPAND "merge" -3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST 5 "i" "j") (("1" (LEMMA "nth_of_append") (("1" (INST -1 "x!1" "x!2" "_") (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REPLACES -2) (("2" (INST 6 "i" "j+1") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST -1 "i") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -2) (("3" (REPLACES -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (REPLACES -1) (("4" (REPLACES -1) (("4" (INST 7 "i+1" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|m| SKOLEM-CONST-DECL "below[length(merge(x!1, x!2))]" |mergesort| NIL) (|x!2| SKOLEM-CONST-DECL "(is_sorted?)" |mergesort| NIL) (|x!1| SKOLEM-CONST-DECL "(is_sorted?)" |mergesort| NIL) (|n| SKOLEM-CONST-DECL "below[length(merge(x!1, x!2))]" |mergesort| NIL) (|merge_size| FORMULA-DECL NIL |mergesort| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|j| SKOLEM-CONST-DECL "below[length(append(x!1, cdr(x!2)))]" |mergesort| NIL) (|i| SKOLEM-CONST-DECL "below[length(append(x!1, cdr(x!2)))]" |mergesort| NIL) (|nth_of_append| FORMULA-DECL NIL |sorting_aux| NIL) (|j| SKOLEM-CONST-DECL "below[length(append(x!1, cdr(x!2)))]" |mergesort| NIL) (|is_sorted_implies_monotone| FORMULA-DECL NIL |sorting| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j| SKOLEM-CONST-DECL "below[length(append(cdr(x!1), x!2))]" |mergesort| NIL) (|i| SKOLEM-CONST-DECL "below[length(append(cdr(x!1), x!2))]" |mergesort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr_of_sorted_is_sorted| FORMULA-DECL NIL |sorting| NIL) (|merge_is_permutation| FORMULA-DECL NIL |mergesort| NIL) (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|merge| DEF-DECL "list[T]" |mergesort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |mergesort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|merge_is_conservative-2| |nil| 3797776366 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (SKEEP) (("" (EXPAND "merge" 1) (("" (CASE "null?(x!1) OR null?(x!2)") (("1" (REPLACE -1) (("1" (INST 1 "m" "n") (("1" (TYPEPRED "n") (("1" (REWRITE "merge_size") (("1" (REWRITE "length_append") NIL))))) ("2" (TYPEPRED "m") (("2" (REWRITE "merge_size") (("2" (REWRITE "length_append") NIL))))))))) ("2" (PROP) (("2" (ASSERT) (("2" (CASE "car(x!1) <= car(x!2)") (("1" (ASSERT) (("1" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 3 1) (("1" (LEMMA "merge_is_permutation") (("1" (INST -1 "x!1" "x!2") (("1" (LEMMA "permutations_preserve_contents") (("1" (INST -1 "merge(x!1,x!2)" "_" "n") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "merge" -1) (("1" (REPLACES -1 :DIR RL) (("1" (INST 3 "0" "j") (("1" (GRIND) NIL))))))))))))))))))))))))) ("2" (EXPAND "nth" 4 1) (("2" (ASSERT) (("2" (CASE "n=0") (("1" (ASSERT) NIL) ("2" (EXPAND "nth" 5 3) (("2" (INST -2 "cdr(x!1)" "x!2") (("1" (INST -2 "m-1" "n-1") (("1" (EXPAND "length" -2 3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "merge" -5) (("1" (EXPAND "nth" -5) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 5 "i+1" "j+1") (("1" (EXPAND "append" 5) (("1" (EXPAND "nth" 5 (2 4)) (("1" (ASSERT) NIL))))) ("2" (TYPEPRED "j") (("2" (GRIND) NIL))) ("3" (TYPEPRED "i") (("3" (GRIND) NIL))))))))))))))))))) ("2" (TYPEPRED "n") (("2" (GRIND) NIL))) ("3" (TYPEPRED "m") (("3" (GRIND) NIL))))) ("2" (REWRITE "cdr_of_sorted_is_sorted") NIL))))))))))))))) ("2" (ASSERT) (("2" (CASE "m=0") (("1" (EXPAND "nth" 4 1) (("1" (ASSERT) (("1" (CASE "n=0") (("1" (EXPAND "nth" 4 2) (("1" (ASSERT) (("1" (INST 4 "length(x!1)" "length(x!1)") (("1" (ASSERT) (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL) ("2" (GRIND) NIL))))) ("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))))) ("2" (EXPAND "nth" 5 2) (("2" (ASSERT) (("2" (EXPAND "merge" -4) (("2" (EXPAND "merge" -5) (("2" (EXPAND "nth" -5) (("2" (EXPAND "nth" -4) (("2" (LEMMA "merge_is_permutation") (("2" (INST?) (("2" (LEMMA "permutations_preserve_contents") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (USE "nth_of_append") (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "x!1") (("1" (LEMMA "is_sorted_implies_monotone") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "j=0") (("1" (GRIND) NIL) ("2" (INST -1 "j" "0") (("1" (EXPAND "nth" -1 1) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -2 "car(x!1)" "nth(x!1,j)" "car(x!2)") (("1" (ASSERT) NIL))))))))))))))) ("2" (ASSERT) NIL))))))))))))))))) ("2" (REPLACE -1) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "j - length(x!1) = 0") (("1" (INST 6 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (GRIND) NIL))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("3" (REWRITE "length_append") (("3" (GRIND) NIL))))) ("2" (ASSERT) (("2" (INST 7 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (GRIND) NIL))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("3" (REWRITE "length_append") (("3" (GRIND) NIL))))))))))))))))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "nth" 5 (1 3)) (("2" (ASSERT) (("2" (INST -1 "x!1" "cdr(x!2)") (("1" (INST -1 "m-1" "n-1") (("1" (EXPAND "length" -1 4) (("1" (EXPAND "merge" -3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST 5 "i" "j") (("1" (LEMMA "nth_of_append") (("1" (INST -1 "x!1" "x!2" "_") (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (ASSERT) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))))))) ("2" (REWRITE "length_append") (("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL))))))))) ("2" (REPLACES -1) (("2" (REPLACES -2) (("2" (INST 6 "i" "j+1") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST -1 "i") (("1" (ASSERT) (("1" (GRIND) NIL))) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))))))))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL))))))))))))) ("3" (REPLACES -2) (("3" (REPLACES -2) (("3" (ASSERT) NIL))))) ("4" (REPLACES -1) (("4" (REPLACES -1) (("4" (INST 7 "i+1" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL))))))) ("3" (REWRITE "length_append") (("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (GRIND) NIL))))))))))))))))))))) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL))))) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") NIL))))))))))))))))))))))) ("2" (TYPEPRED "n") (("2" (GRIND) NIL))) ("3" (TYPEPRED "m") (("3" (GRIND) NIL))))) ("2" (TYPEPRED "x!2") (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL)))))))))))))))))))))))))) NIL) NIL NIL) (|merge_is_conservative-1| |nil| 3784126368 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (SKEEP) (("" (EXPAND "merge" 1) (("" (CASE "null?(x!1) OR null?(x!2)") (("1" (REPLACE -1) (("1" (INST 1 "m" "n") (("1" (TYPEPRED "n") (("1" (REWRITE "merge_size") (("1" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "m") (("2" (REWRITE "merge_size") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("2" (ASSERT) (("2" (CASE "car(x!1) <= car(x!2)") (("1" (ASSERT) (("1" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 3 1) (("1" (LEMMA "merge_is_permutation") (("1" (INST -1 "x!1" "x!2") (("1" (LEMMA "permutations_preserve_contents") (("1" (INST -1 "merge(x!1,x!2)" "_" "n") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "merge" -1) (("1" (REPLACES -1 :DIR RL) (("1" (INST 3 "0" "j") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 4 1) (("2" (ASSERT) (("2" (CASE "n=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "nth" 5 3) (("2" (INST -2 "cdr(x!1)" "x!2") (("1" (INST -2 "m-1" "n-1") (("1" (EXPAND "length" -2 3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "merge" -5) (("1" (EXPAND "nth" -5) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 5 "i+1" "j+1") (("1" (EXPAND "append" 5) (("1" (EXPAND "nth" 5 (2 4)) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "m=0") (("1" (EXPAND "nth" 4 1) (("1" (ASSERT) (("1" (CASE "n=0") (("1" (EXPAND "nth" 4 2) (("1" (ASSERT) (("1" (INST 4 "length(x!1)" "length(x!1)") (("1" (ASSERT) (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 5 2) (("2" (ASSERT) (("2" (EXPAND "merge" -4) (("2" (EXPAND "merge" -5) (("2" (EXPAND "nth" -5) (("2" (EXPAND "nth" -4) (("2" (LEMMA "merge_is_permutation") (("2" (INST?) (("2" (LEMMA "permutations_preserve_contents") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (USE "nth_of_append") (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "x!1") (("1" (LEMMA "is_sorted_implies_monotone") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "j=0") (("1" (GRIND) NIL NIL) ("2" (INST -1 "j" "0") (("1" (EXPAND "nth" -1 1) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (PROP) (("1" (INST -2 "car(x!1)" "nth(x!1,j)" "car(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "j - length(x!1) = 0") (("1" (INST 6 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST 7 "length(x!1)" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 5 (1 3)) (("2" (ASSERT) (("2" (INST -1 "x!1" "cdr(x!2)") (("1" (INST -1 "m-1" "n-1") (("1" (EXPAND "length" -1 4) (("1" (EXPAND "merge" -3) (("1" (EXPAND "merge" -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "nth" -4) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST 5 "i" "j") (("1" (LEMMA "nth_of_append") (("1" (INST -1 "x!1" "x!2" "_") (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REPLACES -2) (("2" (INST 6 "i" "j+1") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (LEMMA "nth_of_append") (("1" (INST?) (("1" (INST -1 "i") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -2) (("3" (REPLACES -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (REPLACES -1) (("4" (REPLACES -1) (("4" (INST 7 "i+1" "j+1") (("1" (REWRITE "nth_of_append") (("1" (REWRITE "nth_of_append") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (TYPEPRED "i") (("3" (REWRITE "length_append") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (REWRITE "cdr_of_sorted_is_sorted") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|merge_sort_is_conservative| 0 (|merge_sort_is_conservative-1| |nil| 3778250623 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (EXPAND "merge_sort" 1) (("" (CASE "length(x!1) <= 1") (("1" (ASSERT) (("1" (INST 1 "m" "n") (("1" (TYPEPRED "n") (("1" (REWRITE "merge_sort_size") NIL NIL)) NIL) ("2" (TYPEPRED "m") (("2" (REWRITE "merge_sort_size") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "merge_is_conservative") (("2" (EXPAND "merge_sort" -4) (("2" (EXPAND "merge_sort" -5) (("2" (INST?) (("1" (INST -1 "m" "n") (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST -1 "merge_sort(prefix(x!1, floor(length(x!1) / 2)))" "merge_sort(suffix(x!1, floor(length(x!1) / 2)))" "_") (("1" (INST-CP -1 "i") (("1" (INST -1 "j") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACES -2) (("1" (REPLACES -3) (("1" (INST -4 "prefix(x!1, floor(length(x!1) / 2))") (("1" (INST -4 "i" "j") (("1" (REWRITE "length_prefix") (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "contents_prefix") (("1" (INST -1 "x!1" "floor(length(x!1) / 2)" "_") (("1" (INST-CP -1 "i_1") (("1" (INST -1 "j_1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -5) (("1" (REPLACES -5) (("1" (INST 2 "i_1" "j_1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j_1") (("2" (REWRITE "length_prefix") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i_1") (("2" (REWRITE "length_prefix") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "merge_sort_size") (("2" (REWRITE "length_prefix") (("2" (REPLACES -1) (("2" (REPLACES -2) (("2" (LEMMA "merge_sort_is_permutation") (("2" (INST-CP -1 "prefix(x!1, floor(length(x!1) / 2))") (("2" (INST -1 "suffix(x!1, floor(length(x!1) / 2))") (("2" (LEMMA "permutations_preserve_contents") (("2" (INST-CP -1 "merge_sort(suffix(x!1, floor(length(x!1) / 2)))" "suffix(x!1, floor(length(x!1) / 2))" "j - floor(length(x!1) / 2)") (("1" (INST -1 "merge_sort(prefix(x!1, floor(length(x!1) / 2)))" "prefix(x!1, floor(length(x!1) / 2))" "i") (("1" (ASSERT) (("1" (SKEEP) (("1" (SKEEP) (("1" (LEMMA "contents_prefix") (("1" (INST -1 "x!1" "floor(length(x!1) / 2)" "j!1") (("1" (USE "contents_suffix") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (INST 3 "j!1" "j_1 + floor(length(x!1) / 2)") (("1" (TYPEPRED "j!1") (("1" (REWRITE "length_prefix") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j_1") (("2" (REWRITE "length_suffix") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (REWRITE "length_prefix") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (REWRITE "merge_sort_size") (("4" (REWRITE "length_prefix") (("4" (REPLACES -1) (("4" (REPLACES -1) (("4" (INST -2 "suffix(x!1, floor(length(x!1) / 2))") (("4" (INST -2 "i - floor(length(x!1) / 2)" "j - floor(length(x!1) / 2)") (("1" (REWRITE "length_suffix") (("1" (ASSERT) (("1" (SKEEP) (("1" (REPLACES -3) (("1" (REPLACES -3) (("1" (USE "contents_suffix") (("1" (REPLACES -1) (("1" (USE "contents_suffix") (("1" (REPLACES -1) (("1" (INST 4 "i_1 + floor(length(x!1) / 2)" "j_1 + floor(length(x!1) / 2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j_1") (("2" (REWRITE "length_suffix") NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i_1") (("2" (REWRITE "length_suffix") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "j") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "i") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "merge_sort_is_sorted") NIL NIL) ("3" (USE "merge_sort_is_sorted") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|m| SKOLEM-CONST-DECL "below[length(merge_sort(x!1))]" |mergesort| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |mergesort| NIL) (|n| SKOLEM-CONST-DECL "below[length(merge_sort(x!1))]" |mergesort| NIL) (|merge_sort_size| FORMULA-DECL NIL |mergesort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|merge_is_conservative| FORMULA-DECL NIL |mergesort| NIL) (|merge_sort_is_sorted| FORMULA-DECL NIL |mergesort| NIL) (|merge| DEF-DECL "list[T]" |mergesort| NIL) (|j| SKOLEM-CONST-DECL "below[length(append(merge_sort(prefix(x!1, floor(length(x!1) / 2))),
                    merge_sort(suffix(x!1, floor(length(x!1) / 2)))))]" |mergesort| NIL) (|contents_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|i_1| SKOLEM-CONST-DECL "below[length(prefix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (|j_1| SKOLEM-CONST-DECL "below[length(prefix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| NIL) (|contents_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|j_1| SKOLEM-CONST-DECL "below[length[T](suffix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|j!1| SKOLEM-CONST-DECL "below[length[T](prefix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|merge_sort_is_permutation| FORMULA-DECL NIL |mergesort| NIL) (|i_1| SKOLEM-CONST-DECL "below[length(suffix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (|j_1| SKOLEM-CONST-DECL "below[length(suffix(x!1, floor(length(x!1) / 2)))]" |mergesort| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|i| SKOLEM-CONST-DECL "below[length(append(merge_sort(prefix(x!1, floor(length(x!1) / 2))),
                    merge_sort(suffix(x!1, floor(length(x!1) / 2)))))]" |mergesort| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nth_of_append| FORMULA-DECL NIL |sorting_aux| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |mergesort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |mergesort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)))
