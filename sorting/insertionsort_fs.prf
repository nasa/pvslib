(|insertionsort_fs| (|insertion_TCC1| 0 (|insertion_TCC1-1| |nil| 3702380473 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|insertion| SUBTYPE "insertionsort_fs.s" "not_empty_seq[T]"))) (|insertion_TCC2| 0 (|insertion_TCC2-1| |nil| 3702380473 ("" (TERMINATION-TCC) NIL NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|insertion| TERMINATION "insertionsort_fs.insertion(insertionsort_fs.x, seq_extras[insertionsort_fs.T].rest(insertionsort_fs.s))" "NIL"))) (|length_insertion| 0 (|length_insertion-1| |nil| 3702581516 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (EXPAND "insertion" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "add_first" 1) (("2" (EXPAND "insert?" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "add_first" 2) (("3" (EXPAND "insert?" 2) (("3" (INST -1 "rest(x!1)") (("3" (INST?) (("3" (PROP) (("1" (REPLACE -1) (("1" (LEMMA "seq_first_rest") (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (REPLACE -1 (2 2)) (("1" (EXPAND "add_first" 2 2) (("1" (EXPAND "insert?" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "length_rest") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|insertion| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|occ_in_insert| 0 (|occ_in_insert-3| "" 3884901057 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (CASE "length(x!1) =0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "insertion" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "add_first(y, x!1) ^ (1, length(add_first(y, x!1)) - 1) = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "occurrences" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (LEMMA "length_insertion") (("1" (INST?) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 3)) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (ASSERT) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "reflexive?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 2) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "rest(x!1)") (("2" (INST -1 "y" "y") (("2" (PROP) (("1" (CASE-REPLACE "add_first(first(x!1), insertion(y, rest(x!1))) ^
                               (1,
                                length(add_first(first(x!1), insertion(y, rest(x!1))))
                                 - 1) = insertion(y, rest(x!1))") (("1" (CASE "x!1 ^ (1, length(x!1) - 1) = rest(x!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (NAME-REPLACE "irest" "insertion(y, rest(x!1))") (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (CASE "length(irest) > 0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "irest") (("2" (LEMMA "length_insertion") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2 3 4 5 6) (("3" (EXPAND "add_first") (("3" (EXPAND "insert?") (("3" (LEMMA "length_insertion") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE -) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1 2 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "first(x!1) = x") (("1" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = 1 + occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) = 1 + occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST? -2) (("1" (ASSERT) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "irest" "insertion(y, rest(x!1))") (("2" (HIDE -1 -2 -3 3 4 5) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1 7)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) =  occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (INST? -1) (("1" (PROP) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (HIDE-ALL-BUT (-1 2 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rest" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "irest" "insertion(y, rest(x!1))") (("2" (HIDE-ALL-BUT (-1 3 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (NAME-REPLACE "irest" "insertion(y, rest(x!1))") (("3" (HIDE-ALL-BUT (2 3 8)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|occ_in_insert-2| |nil| 3797766116 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (CASE "length(x!1) =0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "insertion" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "add_first(y, x!1) ^ (1, length(add_first(y, x!1)) - 1) = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "occurrences" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (LEMMA "length_insertion") (("1" (INST?) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 3)) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (ASSERT) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "reflexive?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 2) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "rest(x!1)") (("2" (INST -1 "y" "y") (("2" (PROP) (("1" (CASE-REPLACE "add_first(first(x!1), insertion(y, rest(x!1))) ^
                               (1,
                                length(add_first(first(x!1), insertion(y, rest(x!1))))
                                 - 1) = insertion(y, rest(x!1))") (("1" (CASE "x!1 ^ (1, length(x!1) - 1) = rest(x!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (CASE "length(irest) > 0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "irest") (("2" (LEMMA "length_insertion") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2 3 4 5 6) (("3" (EXPAND "add_first") (("3" (EXPAND "insert?") (("3" (LEMMA "length_insertion") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE -) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1 2 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "first(x!1) = x") (("1" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = 1 + occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) = 1 + occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST? -2) (("1" (ASSERT) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (HIDE -1 -2 -3 3 4 5) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1 7)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) =  occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (INST? -1) (("1" (PROP) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (HIDE-ALL-BUT (-1 2 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rest" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (HIDE-ALL-BUT (-1 3 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("3" (HIDE-ALL-BUT (2 3 8)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (> CONST-DECL "bool" |reals| NIL) (|irest| SKOLEM-CONST-DECL "finseq[T]" |insertionsort_fs| NIL) (|x!1| SKOLEM-CONST-DECL "finseq[T]" |insertionsort_fs| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|length_insertion| FORMULA-DECL NIL |insertionsort_fs| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort_fs| NIL) (|occurrences| DEF-DECL "nat" |sorting_seq| NIL) (|insertion| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|occ_in_insert-1| |nil| 3702377257 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (CASE "length(x!1) =0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "insertion" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "add_first(y, x!1) ^ (1, length(add_first(y, x!1)) - 1) = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "occurrences" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (LEMMA "length_insertion") (("1" (INST?) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 3)) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "reflexive?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 2) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "rest(x!1)") (("2" (INST -1 "y" "y") (("2" (PROP) (("1" (CASE-REPLACE "add_first(first(x!1), insertion(y, rest(x!1))) ^
                   (1,
                    length(add_first(first(x!1), insertion(y, rest(x!1))))
                     - 1) = insertion(y, rest(x!1))") (("1" (CASE "x!1 ^ (1, length(x!1) - 1) = rest(x!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (CASE "length(irest) > 0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "irest") (("2" (LEMMA "length_insertion") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2 3 4 5 6) (("3" (EXPAND "add_first") (("3" (EXPAND "insert?") (("3" (LEMMA "length_insertion") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE -) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1 2 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "first(x!1) = x") (("1" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = 1 + occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) = 1 + occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST? -2) (("1" (ASSERT) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (HIDE -1 -2 -3 3 4 5) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1 7)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "occurrences(add_first(first(x!1), insertion(y, rest(x!1))))(x) = occurrences(insertion(y, rest(x!1)))(x)") (("1" (CASE "occurrences(x!1)(x) =  occurrences(rest(x!1))(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (INST? -1) (("1" (PROP) (("1" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "rest" 1) (("1" (HIDE-ALL-BUT (-1 2 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rest" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("2" (HIDE-ALL-BUT (-1 3 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (NAME-REPLACE IREST "insertion(y, rest(x!1))") (("3" (HIDE-ALL-BUT (2 3 8)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|fs_insertion_sort_TCC1| 0 (|fs_insertion_sort_TCC1-1| |nil| 3702377221 ("" (TERMINATION-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|fs_insertion_sort| SUBTYPE "insertionsort_fs.s" "not_empty_seq[T]"))) (|fs_insertion_sort_TCC2| 0 (|fs_insertion_sort_TCC2-1| |nil| 3779126492 ("" (TERMINATION-TCC) NIL NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|fs_insertion_sort| TERMINATION "insertionsort_fs.fs_insertion_sort(seq_extras[insertionsort_fs.T].rest(insertionsort_fs.s))" "NIL"))) (|fs_insert_size| 0 (|fs_insert_size-1| |nil| 3702599166 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (EXPAND "insertion" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "add_first") (("3" (EXPAND "insert?") (("3" (INST?) (("3" (PROP) (("1" (CASE "rest(x!1)`length + 1 = x!1`length ") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2 3) (("2" (LEMMA "seq_first_rest") (("2" (INST -1 "x!1") (("2" (PROP) (("2" (NAME-REPLACE "rrest" "rest(x!1)") (("2" (REPLACE -1 1) (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|insertion| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|fs_insert_in_sorted_preserves_sort| 0 (|fs_insert_in_sorted_preserves_sort-2| |nil| 3797766160 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (EXPAND "insertion" 1) (("" (PROP) (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "add_first") (("2" (EXPAND "is_sorted?") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "k=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "insert?" -2) (("2" (CASE "x!1`length = 1") (("1" (ASSERT) NIL NIL) ("2" (INST -3 "k-1") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "rest(x!1)") (("3" (INST?) (("3" (REWRITE "length_rest") (("3" (PROP) (("1" (HIDE -2) (("1" (EXPAND "add_first") (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE-REPLACE "k = 0") (("1" (HIDE -1) (("1" (EXPAND "insert?") (("1" (EXPAND "finseq_appl") (("1" (CASE "length(rest(x!1)) = 0") (("1" (HIDE -2 -3) (("1" (EXPAND "insertion") (("1" (ASSERT) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "insertion" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST -2 "x" "x!1`seq(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (REVEAL -2) (("2" (HIDE -2) (("2" (EXPAND "is_sorted?") (("2" (INST -1 0) (("1" (PROP) (("1" (EXPAND "finseq_appl") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "k - 1") (("1" (EXPAND "insert?") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("1" (EXPAND "insert?") (("1" (REWRITE "fs_insert_size") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "insert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (INST -2 "k+1") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x| SKOLEM-CONST-DECL "T" |insertionsort_fs| NIL) (|x!1| SKOLEM-CONST-DECL "finseq[T]" |insertionsort_fs| NIL) (|k| SKOLEM-CONST-DECL "below[length(insert?(x, x!1, 0))]" |insertionsort_fs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|fs_insert_size| FORMULA-DECL NIL |insertionsort_fs| NIL) (|k| SKOLEM-CONST-DECL "below[length(insert?(first(x!1), insertion(x, rest(x!1)), 0))]" |insertionsort_fs| NIL) (|k| SKOLEM-CONST-DECL "below[length(rest(x!1))]" |insertionsort_fs| NIL) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|insertion| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (|is_sorted?| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort_fs| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|fs_insert_in_sorted_preserves_sort-1| |nil| 3702599945 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (SKEEP) (("" (EXPAND "insertion" 1) (("" (PROP) (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "add_first") (("2" (EXPAND "is_sorted?") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "k=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "insert?" -2) (("2" (CASE "x!1`length = 1") (("1" (ASSERT) NIL NIL) ("2" (INST -3 "k-1") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "rest(x!1)") (("3" (INST?) (("3" (REWRITE "length_rest") (("3" (PROP) (("1" (HIDE -2) (("1" (EXPAND "add_first") (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE-REPLACE "k = 0") (("1" (HIDE -1) (("1" (EXPAND "insert?") (("1" (EXPAND "finseq_appl") (("1" (CASE "length(rest(x!1)) = 0") (("1" (HIDE -2 -3) (("1" (EXPAND "insertion") (("1" (ASSERT) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "insertion" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "add_first") (("1" (EXPAND "insert?") (("1" (ASSERT) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST -2 "x" "x!1`seq(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (REVEAL -2) (("2" (HIDE -2) (("2" (EXPAND "is_sorted?") (("2" (INST -1 0) (("1" (PROP) (("1" (EXPAND "finseq_appl") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "k - 1") (("1" (EXPAND "insert?") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("1" (EXPAND "insert?") (("1" (REWRITE "fs_insert_size") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "insert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (INST -2 "k+1") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|fs_insertionsort_is_sorted| 0 (|fs_insertionsort_is_sorted-1| |nil| 3702632156 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "length(x!1) = 1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "fs_insertion_sort" 3) (("2" (PROP) (("2" (INST -1 "rest(x!1)") (("2" (LEMMA "fs_insert_in_sorted_preserves_sort") (("2" (INST?) (("2" (REWRITE "length_rest") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|fs_insert_in_sorted_preserves_sort| FORMULA-DECL NIL |insertionsort_fs| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|insertion| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|fs_insertion_sort| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (|is_sorted?| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort_fs| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|fs_ins_and_add_in_perm_is_perm| 0 (|fs_ins_and_add_in_perm_is_perm-1| |nil| 3702635713 ("" (SKEEP) (("" (TYPEPRED "s2") (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST -1 "x_1") (("" (LEMMA "occ_in_insert") (("" (INST?) (("" (PROP) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "add_first(x, s1) ^ (1, length(add_first(x, s1)) - 1) = s1") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE - 2) (("2" (CASE "length(s1) = 0") (("1" (GRIND) (("1" (REWRITE "empty_0") NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "occurrences" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 3)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 1) (("3" (CASE "add_first(x, s1) ^ (1, length(add_first(x, s1)) - 1) = s1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "length(s1) = 0") (("1" (GRIND) (("1" (REWRITE "empty_0") NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort_fs| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|occ_in_insert| FORMULA-DECL NIL |insertionsort_fs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (< CONST-DECL "bool" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|s1| SKOLEM-CONST-DECL "finseq[T]" |insertionsort_fs| NIL) (|x| SKOLEM-CONST-DECL "T" |insertionsort_fs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|occurrences| DEF-DECL "nat" |sorting_seq| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|fs_insertion_sort_is_permutations| 0 (|fs_insertion_sort_is_permutations-1| |nil| 3702633808 ("" (MEASURE-INDUCT+ "length(s)" ("s")) (("" (EXPAND "fs_insertion_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "fs_ins_and_add_in_perm_is_perm") (("2" (INST -1 "rest(x!1)" "fs_insertion_sort(rest(x!1))" "first(x!1)") (("1" (LEMMA "seq_first_rest") (("1" (INST -1 "x!1") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "rest(x!1)") (("2" (REWRITE "length_rest") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "finseq[T]" |insertionsort_fs| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|length_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|fs_ins_and_add_in_perm_is_perm| FORMULA-DECL NIL |insertionsort_fs| NIL) (|fs_insertion_sort| DEF-DECL "finseq[T]" |insertionsort_fs| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort_fs| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|fs_insertion_sort_works| 0 (|fs_insertion_sort_works-1| |nil| 3702635247 ("" (SKEEP) (("" (REWRITE "fs_insertionsort_is_sorted") (("" (REWRITE "fs_insertion_sort_is_permutations") NIL NIL)) NIL)) NIL) ((|fs_insertionsort_is_sorted| FORMULA-DECL NIL |insertionsort_fs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort_fs| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|fs_insertion_sort_is_permutations| FORMULA-DECL NIL |insertionsort_fs| NIL)) SHOSTAK)))
