(|heapsort| (|sink_TCC1| 0 (|sink_TCC1-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sink| SUBTYPE "(number_fields.-)(heapsort.n, heapsort.i)" "naturalnumber"))) (|sink_TCC2| 0 (|sink_TCC2-1| |nil| 3651167506 ("" (SKEEP) (("" (TYPEPRED "i" "n") (("" (EXPAND "ind_gc") (("" (SKEEP) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ind_lc") (("2" (REPLACES -1) (("2" (HIDE 1) (("2" (TYPEPRED "floor((n + 1) / 2)") (("2" (NAME-REPLACE "ffl" "floor((n + 1) / 2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink| SUBTYPE "heapsort.k" "below[length(h)]"))) (|sink_TCC3| 0 (|sink_TCC3-2| |nil| 3651921272 ("" (GRIND) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink| SUBTYPE "heapsort.k" "below[length(swap[T, leq](h)(i, k))]")) (|sink_TCC3-1| |nil| 3651167506 ("" (SKEEP) (("" (TYPEPRED "n" "i") (("" (SKEEP) (("" (HIDE -4) (("" (EXPAND "swap") (("" (EXPAND "ind_gc") (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (REPLACES -2) (("1" (TYPEPRED "floor((n + 1) / 2)") (("1" (NAME-REPLACE "ffl" "floor((n + 1) / 2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ind_lc") (("2" (REPLACES -1) (("2" (TYPEPRED "floor((n + 1) / 2)") (("2" (NAME-REPLACE "ffl" "floor((n + 1) / 2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 1) (("3" (EXPAND "ind_lc") (("3" (REPLACES -1) (("3" (TYPEPRED "floor((n + 1) / 2)") (("3" (NAME-REPLACE "ffl" "floor((n + 1) / 2)") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|sink| SUBTYPE "heapsort.k" "below[length(swap[T, leq](h)(i, k))]"))) (|sink_TCC4| 0 (|sink_TCC4-1| |nil| 3651167506 ("" (GRIND) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink| SUBTYPE "heapsort.n" "{n: nat_types[length(sorting_seq[heapsort.T, heapsort.leq].swap(heapsort.h)(heapsort.i, heapsort.k))].below | reals.>=(n, heapsort.k)}"))) (|sink_TCC5| 0 (|sink_TCC5-1| |nil| 3651167506 ("" (TERMINATION-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink| TERMINATION "heapsort.sink(sorting_seq[heapsort.T, heapsort.leq].swap(heapsort.h)(heapsort.i, heapsort.k))(heapsort.k, heapsort.n)" "NIL"))) (|sink_TCC6| 0 (|sink_TCC6-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|sink| SUBTYPE "heapsort.i" "{i: nat_types[(number_fields.+)(1, heapsort.n)].below | sorting_seq[heapsort.T, heapsort.leq].is_parent(heapsort.h)(heapsort.n, i)}"))) (|sink_permutes_TCC1| 0 (|sink_permutes_TCC1-1| |nil| 3651506972 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sink_permutes| SUBTYPE "heapsort.i" "below[length(h)]"))) (|sink_permutes| 0 (|sink_permutes-2| |nil| 3652028984 ("" (MEASURE-INDUCT+ "n + (-1 * i)" ("h" "i" "n")) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "swap_permutes") (("2" (INST -1 "x!1" "x!2" "ind_gc(x!1)(x!3, x!2)") (("2" (INST -3 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -3 "x!1" "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "sink(swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2)))(ind_gc(x!1)(x!3, x!2), x!3)") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROP) (("3" (HIDE -1 -2 -3 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE-ALL-BUT 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|swap_permutes| FORMULA-DECL NIL |sorting_seq| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|x!3| SKOLEM-CONST-DECL "{n: nat | n < length(x!1) AND n >= x!2}" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "nat" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|permutations_equiv| FORMULA-DECL NIL |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (<= CONST-DECL "bool" |reals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|sink_permutes-1| |nil| 3651506192 ("" (MEASURE-INDUCT+ "n + (-1 * i)" ("h" "i" "n")) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "swap_permutes") (("2" (INST -1 "x!1" "x!2" "ind_gc(x!1)(x!3, x!2)") (("2" (INST -3 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -3 "x!1" "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "sink(swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2)))(ind_gc(x!1)(x!3, x!2), x!3)") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROP) (("3" (HIDE -1 -2 -3 2 3) (("3" (EXPAND "ind_gc") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "ind_rc") (("1" (HIDE -1 -2 -4 -5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 1 2) (("2" (EXPAND "ind_lc") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE 1 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE 1 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 1 2) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "swap") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|sink_length| 0 (|sink_length-1| |nil| 3651423638 ("" (MEASURE-INDUCT+ "n + (-1 * i)" ("h" "i" "n")) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (PROP) (("1" (EXPAND "swap" -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "nat" |heapsort| NIL) (|x!3| SKOLEM-CONST-DECL "{n: nat | n < length(x!1) AND n >= x!2}" |heapsort| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (<= CONST-DECL "bool" |reals| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|sink_stable_TCC1| 0 (|sink_stable_TCC1-1| |nil| 3652121746 ("" (SKEEP) (("" (REWRITE "sink_length") (("" (TYPEPRED "k") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL (|sink_stable| SUBTYPE "heapsort.k" "below[length((sink(h)(i, n)))]"))) (|sink_stable| 0 (|sink_stable-2| |nil| 3652127678 ("" (AUTO-REWRITE "finseq_appl") (("" (ASSERT) (("" (MEASURE-INDUCT+ "n - i" ("h" "i" "n")) (("1" (ASSERT) (("1" (SKEEP) (("1" (TYPEPRED "k") (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) (("1" (EXPAND "ind_gc") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "both_childs") (("1" (EXPAND "left_child") (("1" (EXPAND "right_child") (("1" (EXPAND "ind_rc") (("1" (EXPAND "ind_lc") (("1" (ASSERT) (("1" (INST -6 "swap(x!1)(x!2, 2 + 2 * x!2)" "2 + 2 * x!2" "x!3") (("1" (INST -6 "k") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "both_childs") (("2" (EXPAND "ind_rc") (("2" (TYPEPRED "floor((1 + x!3) / 2)") (("2" (EXPAND "ind_lc") (("2" (INST -7 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ind_lc") (("3" (INST -5 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "ind_lc") (("4" (INST -5 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "ind_lc") (("5" (INST -6 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (INST -6 "swap(x!1)(x!2, 2 + 2 * x!2)" "2 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ind_lc") (("2" (ASSERT) (("2" (INST -4 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ind_lc") (("3" (EXPAND "finseq_appl") (("3" (INST -5 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "ind_lc") (("4" (INST -5 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("5" (EXPAND "ind_lc") (("5" (INST -6 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (TYPEPRED "k!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "k") (("3" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("4" (SKEEP* :PREDS? T) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -2 3) (("5" (GRIND) NIL NIL)) NIL) ("6" (HIDE -2 3) (("6" (GRIND) NIL NIL)) NIL) ("7" (SKEEP* :PREDS? T) (("7" (REWRITE "sink_length") NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (SKEEP* :PREDS? T) (("9" (REWRITE "sink_length") (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (GRIND) NIL NIL) ("11" (SKEEP* :PREDS? T) (("11" (REWRITE "sink_length") NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|x!3| SKOLEM-CONST-DECL "{n: nat | n < length(x!1) AND n >= x!2}" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "nat" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|k| SKOLEM-CONST-DECL "{k: below[length(x!1)] | k < x!2 OR k > x!3}" |heapsort| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) NIL) (|sink_stable-1| |nil| 3652121747 ("" (AUTO-REWRITE "finseq_appl") (("" (ASSERT) (("" (MEASURE-INDUCT+ "n - i" ("h" "i" "n")) (("1" (ASSERT) (("1" (SKEEP) (("1" (TYPEPRED "k") (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) (("1" (EXPAND "ind_gc") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (EXPAND "left_child") (("1" (EXPAND "right_child") (("1" (ASSERT) (("1" (EXPAND "ind_lc") (("1" (EXPAND "ind_rc") (("1" (INST -8 "swap(x!1)(x!2, 2 + 2 * x!2)" "2 + 2 * x!2" "x!3") (("1" (INST -8 "k") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (TYPEPRED "x!3") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "both_childs") (("2" (EXPAND "ind_rc") (("2" (TYPEPRED "floor((1 + x!3) / 2)") (("2" (EXPAND "ind_lc") (("2" (INST -7 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (TYPEPRED "x!3") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ind_lc") (("3" (INST -4 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (INST -8 "swap(x!1)(x!2, 2 + 2 * x!2)" "2 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (TYPEPRED "x!3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "ind_lc") (("2" (ASSERT) (("2" (INST -4 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ind_lc") (("3" (EXPAND "finseq_appl") (("3" (INST -4 "swap(x!1)(x!2, 1 + 2 * x!2)" "1 + 2 * x!2" "x!3") (("1" (INST?) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (TYPEPRED "k!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "k") (("3" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (SKEEP) (("4" (TYPEPRED "x!1`3") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 3) (("5" (GRIND) NIL NIL)) NIL) ("6" (HIDE -2 3) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE -2 3) (("7" (GRIND) NIL NIL)) NIL) ("8" (SKEEP 2) (("8" (SKEEP 2) (("8" (POSTPONE) NIL NIL)) NIL)) NIL) ("9" (HIDE -2 3) (("9" (GRIND) NIL NIL)) NIL) ("10" (HIDE -2 3) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -2 3) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (HIDE -2 3) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE -2 3) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -2 3) (("15" (SKEEP) (("15" (REWRITE "sink_length") (("15" (REWRITE "sink_length") (("15" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (GRIND) NIL NIL) ("17" (GRIND) NIL NIL) ("18" (REWRITE "sink_length") (("18" (GRIND) NIL NIL)) NIL) ("19" (REWRITE "sink_length") (("19" (SKEEP) (("19" (HIDE 2) (("19" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sink_in_stable_TCC1| 0 (|sink_in_stable_TCC1-1| |nil| 3652137312 ("" (SKEEP) (("" (REWRITE "sink_length") (("" (TYPEPRED "k") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL (|sink_in_stable| SUBTYPE "heapsort.k" "below[length((sink(h)(i, n)))]"))) (|sink_in_stable| 0 (|sink_in_stable-3| "" 3804609830 ("" (AUTO-REWRITE "finseq_appl") (("" (MEASURE-INDUCT+ "n - i" ("h" "i" "n")) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "sink" 1) (("1" (ASSERT) (("1" (CASE " x!2 > floor((1 + x!3) / 2) - 1") (("1" (INST 1 "k") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT  gt(x!1`seq(ind_gc(x!1)(x!3, x!2)), x!1`seq(x!2))") (("1" (ASSERT) (("1" (INST 3 "k") NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k < ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -3) (("1" (LEMMA "sink_stable") (("1" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "k") (("1" (ASSERT) (("1" (CASE "k = x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) (("1" (INST 2 "ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 3 "k") (("2" (EXPAND "swap" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (INST -2 "k") (("1" (PROP) (("1" (SKEEP) (("1" (CASE "l= x!2") (("1" (INST 3 "ind_gc(x!1)(x!3, x!2)") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE " l = ind_gc(x!1)(x!3, x!2)") (("1" (INST 4 "x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 5 "l") (("1" (EXPAND "swap" -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "l") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE - 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (SKEEP) (("2" (REWRITE "sink_length") (("2" (TYPEPRED "k!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "sink_length") (("3" (TYPEPRED "k") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (SKEEP) (("4" (REWRITE "sink_length") (("4" (TYPEPRED "k") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 3) (("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "sink_length") (("5" (REWRITE "sink_length") (("5" (TYPEPRED "k!1" "k") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (REWRITE "sink_length") (("6" (TYPEPRED "k") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (TYPEPRED "k!1") (("7" (REWRITE "sink_length") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|l| SKOLEM-CONST-DECL "{l: below[length(swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2)))] |
   l >= ind_gc(x!1)(x!3, x!2) AND l <= x!3}" |heapsort| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|x!3| SKOLEM-CONST-DECL "{n: nat | n < length(x!1) AND n >= x!2}" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "nat" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|k| SKOLEM-CONST-DECL "{k: below[length(x!1)] | k >= x!2 AND k <= x!3}" |heapsort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sink_stable| FORMULA-DECL NIL |heapsort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL)) SHOSTAK) (|sink_in_stable-2| |nil| 3797771307 ("" (AUTO-REWRITE "finseq_appl") (("" (MEASURE-INDUCT+ "n - i" ("h" "i" "n")) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "sink" 1) (("1" (ASSERT) (("1" (CASE " x!2 > floor((1 + x!3) / 2) - 1") (("1" (INST 1 "k") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT  gt(x!1`seq(ind_gc(x!1)(x!3, x!2)), x!1`seq(x!2))") (("1" (ASSERT) (("1" (INST 3 "k") NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k < ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -3) (("1" (LEMMA "sink_stable") (("1" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "k") (("1" (ASSERT) (("1" (CASE "k = x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) (("1" (INST 2 "ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 3 "k") (("2" (EXPAND "swap" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (INST -2 "k") (("1" (PROP) (("1" (SKEEP) (("1" (CASE "l= x!2") (("1" (INST 3 "ind_gc(x!1)(x!3, x!2)") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE " l = ind_gc(x!1)(x!3, x!2)") (("1" (INST 4 "x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 5 "l") (("1" (EXPAND "swap" -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "l") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE - 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (SKEEP) (("2" (REWRITE "sink_length") (("2" (TYPEPRED "k!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "sink_length") (("3" (TYPEPRED "k") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (SKEEP) (("4" (REWRITE "sink_length") (("4" (TYPEPRED "k1") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 3) (("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "sink_length") (("5" (REWRITE "sink_length") (("5" (TYPEPRED "k!1" "k1") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (REWRITE "sink_length") (("6" (TYPEPRED "k") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (TYPEPRED "k!1") (("7" (REWRITE "sink_length") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|sink_in_stable-1| |nil| 3652715692 ("" (AUTO-REWRITE "finseq_appl") (("" (MEASURE-INDUCT+ "n - i" ("h" "i" "n")) (("1" (ASSERT) (("1" (SKEEP) (("1" (EXPAND "sink" 1) (("1" (ASSERT) (("1" (CASE " x!2 > floor((1 + x!3) / 2) - 1") (("1" (INST 1 "k") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT  x!1`seq(ind_gc(x!1)(x!3, x!2)) > x!1`seq(x!2)") (("1" (ASSERT) (("1" (INST 3 "k") NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k < ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -3) (("1" (LEMMA "sink_stable") (("1" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "k") (("1" (ASSERT) (("1" (CASE "k = x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) (("1" (INST 2 "ind_gc(x!1)(x!3, x!2)") (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 3 "k") (("2" (EXPAND "swap" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (INST -2 "k") (("1" (PROP) (("1" (SKEEP) (("1" (CASE "l= x!2") (("1" (INST 3 "ind_gc(x!1)(x!3, x!2)") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE " l = ind_gc(x!1)(x!3, x!2)") (("1" (INST 4 "x!2") (("1" (EXPAND "swap" -2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 5 "l") (("1" (EXPAND "swap" -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "l") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE - 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (SKEEP) (("2" (REWRITE "sink_length") (("2" (TYPEPRED "k!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "sink_length") (("3" (TYPEPRED "k") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (SKEEP) (("4" (REWRITE "sink_length") (("4" (TYPEPRED "k1") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 3) (("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "sink_length") (("5" (REWRITE "sink_length") (("5" (TYPEPRED "k!1" "k1") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (REWRITE "sink_length") (("6" (TYPEPRED "k") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (TYPEPRED "k!1") (("7" (REWRITE "sink_length") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sink_interval_children_stable_TCC1| 0 (|sink_interval_children_stable_TCC1-1| |nil| 3653214376 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "heapsort.k" "{i: nat_types[length(heapsort.h)].below | reals.<=(i, heapsort.n)}"))) (|sink_interval_children_stable_TCC2| 0 (|sink_interval_children_stable_TCC2-1| |nil| 3653214376 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_lc(heapsort.k)" "below[length(h)]"))) (|sink_interval_children_stable_TCC3| 0 (|sink_interval_children_stable_TCC3-1| |nil| 3653214376 ("" (LEMMA "sink_length") (("" (GRIND) NIL NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_lc(heapsort.k)" "below[length(sh)]"))) (|sink_interval_children_stable_TCC4| 0 (|sink_interval_children_stable_TCC4-1| |nil| 3653214376 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_lc(heapsort.k)" "below[length(h)]"))) (|sink_interval_children_stable_TCC5| 0 (|sink_interval_children_stable_TCC5-1| |nil| 3653214376 ("" (GRIND) (("" (REWRITE "sink_length") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_lc(heapsort.k)" "below[length(sh)]"))) (|sink_interval_children_stable_TCC6| 0 (|sink_interval_children_stable_TCC6-1| |nil| 3653214376 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_rc(heapsort.k)" "below[length(h)]"))) (|sink_interval_children_stable_TCC7| 0 (|sink_interval_children_stable_TCC7-1| |nil| 3653422033 ("" (SKEEP) (("" (GRIND) (("1" (REWRITE "sink_length") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL)) NIL (|sink_interval_children_stable| SUBTYPE "sorting_seq[heapsort.T, heapsort.leq].ind_rc(heapsort.k)" "below[length(sh)]"))) (|sink_interval_children_stable| 0 (|sink_interval_children_stable-1| |nil| 3653271767 ("" (EXPAND "finseq_appl") (("" (SKEEP) (("" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "i" "k" "n") (("2" (EXPAND "sink") (("2" (EXPAND "finseq_appl") (("2" (LIFT-IF) (("2" (PROP) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(h)(i, ind_gc(h)(n, i))" "ind_gc(h)(n, i)" "n" "ind_lc(k)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "swap") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) (("3" (HIDE 2) (("3" (TYPEPRED "i" "n" "k") (("3" (EXPAND "sink") (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST -1 "swap(h)(i, ind_gc(h)(n, i))" "ind_gc(h)(n, i)" "n" "ind_rc(k)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) (("4" (HIDE 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "is_parent") (("5" (SPLIT) (("1" (HIDE 2) (("1" (TYPEPRED "i" "n" "k") (("1" (EXPAND "sink") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "sink_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "is_parent") (("6" (SPLIT) (("1" (EXPAND "sink") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "sink_stable") (("1" (EXPAND "finseq_appl") (("1" (INST-CP -1 "swap(h)(i, ind_gc(h)(n, i))" "ind_gc(h)(n, i)" "n" "ind_lc(k)") (("1" (INST -1 "swap(h)(i, ind_gc(h)(n, i))" "ind_gc(h)(n, i)" "n" "ind_rc(k)") (("1" (REPLACE -1 3 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|sink_stable| FORMULA-DECL NIL |heapsort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|n| SKOLEM-CONST-DECL "{n: nat | n < length(h) AND n >= i}" |heapsort| NIL) (|i| SKOLEM-CONST-DECL "posnat" |heapsort| NIL) (|h| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|k| SKOLEM-CONST-DECL "{k: below[length(h)] | k < i AND k > ind_parent(i)}" |heapsort| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) SHOSTAK)) (|is_heap_from_to_TCC1| 0 (|is_heap_from_to_TCC1-1| |nil| 3652072422 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|is_heap_from_to| SUBTYPE "(number_fields.+)(heapsort.i, 1)" "below[length(h)]"))) (|is_heap_from_to_TCC2| 0 (|is_heap_from_to_TCC2-1| |nil| 3652072422 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|is_heap_from_to| SUBTYPE "heapsort.j" "{j: nat_types[length(heapsort.h)].below | reals.<=((number_fields.+)(1, heapsort.i), j)}"))) (|is_heap_from_to_TCC3| 0 (|is_heap_from_to_TCC3-1| |nil| 3652072422 ("" (SKEEP) (("" (REWRITE "sink_length") (("" (TYPEPRED "i") (("" (HIDE -2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL (|is_heap_from_to| SUBTYPE "heapsort.i" "below[length(sink(h)(i, j))]"))) (|is_heap_from_to_TCC4| 0 (|is_heap_from_to_TCC4-1| |nil| 3652072422 ("" (SKEEP) (("" (HIDE -1) (("" (REWRITE "sink_length") (("" (TYPEPRED "i" "j") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|is_heap_from_to| SUBTYPE "heapsort.j" "{j_1: nat_types[length(heapsort.sink(heapsort.h)(heapsort.i, heapsort.j))].below | reals.<=(heapsort.i, j_1)}"))) (|is_heap_from_to_TCC5| 0 (|is_heap_from_to_TCC5-1| |nil| 3652072422 ("" (SUBTYPE-TCC) NIL NIL) ((|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|is_heap_from_to| SUBTYPE "heapsort.i" "below[length(h)]"))) (|is_heap_from_to_TCC6| 0 (|is_heap_from_to_TCC6-1| |nil| 3652072422 ("" (SUBTYPE-TCC) NIL NIL) ((|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|is_heap_from_to| SUBTYPE "heapsort.j" "{n: nat_types[length(heapsort.h)].below | reals.>=(n, heapsort.i)}"))) (|is_heap_from_to| 0 (|is_heap_from_to-6| |nil| 3797771418 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE -5) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE 2) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -4 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE -3) (("17" (GRIND) NIL NIL)) NIL) ("18" (HIDE -5 1) (("18" (GRIND) NIL NIL)) NIL) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL NIL)) NIL) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE 2) (("21" (GRIND) NIL NIL)) NIL) ("22" (HIDE -5 2) (("22" (GRIND) NIL NIL)) NIL) ("23" (HIDE -5 2) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) (("1" (HIDE-ALL-BUT (1 4)) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (2 5)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "gt") (("1" (EXPAND "geq") (("1" (EXPAND "lt") (("1" (EXPAND "converse") (("1" (EXPAND "swap") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (PROP) (("1" (REPLACES -1) (("1" (EXPAND "reflexive?") (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                                  (ind_lc(x!2),
                                                                                                                                                                                   ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3 -9) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5) (("3" (EXPAND "gt") (("3" (EXPAND "lt") (("3" (EXPAND "converse") (("3" (LEMMA "lt_le") (("3" (INST? -1 :WHERE -2) (("3" (ASSERT) (("3" (HIDE -2) (("3" (GRIND) (("3" (HIDE-ALL-BUT (1 4)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "swap" 6) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (EXPAND "ind_lc" 6 1) (("1" (HIDE-ALL-BUT (1 6)) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (EXPAND "geq") (("1" (EXPAND "converse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (EXPAND "gt") (("1" (EXPAND "lt") (("1" (EXPAND "geq") (("1" (EXPAND "converse") (("1" (EXPAND "swap") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (PROP) (("1" (REPLACES -1) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                                                    (ind_lc(x!2),
                                                                                                                                                                                                     ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (EXPAND "gt") (("3" (EXPAND "geq") (("3" (EXPAND "lt") (("3" (EXPAND "swap") (("3" (EXPAND "converse") (("3" (LIFT-IF) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (PROP) (("1" (REPLACES -1) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) (("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (HIDE-ALL-BUT (3 4)) (("4" (TYPEPRED "leq") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (ASSERT) (("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL)) NIL) ("7" (GRIND) (("7" (HIDE-ALL-BUT (1 2)) (("7" (TYPEPRED "leq") (("7" (EXPAND "total_preorder?") (("7" (FLATTEN) (("7" (EXPAND "dichotomous?") (("7" (INST?) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (GRIND) (("8" (HIDE-ALL-BUT (1 2)) (("8" (TYPEPRED "leq") (("8" (EXPAND "total_preorder?") (("8" (FLATTEN) (("8" (EXPAND "dichotomous?") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (GRIND) (("9" (HIDE-ALL-BUT (3 4)) (("9" (TYPEPRED "leq") (("9" (EXPAND "total_preorder?") (("9" (FLATTEN) (("9" (EXPAND "dichotomous?") (("9" (INST?) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) (("4" (HIDE-ALL-BUT (1 3)) (("4" (TYPEPRED "leq") (("4" (EXPAND "total_preorder?") (("4" (EXPAND "dichotomous?") (("4" (FLATTEN) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (-2 2)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) (("2" (HIDE-ALL-BUT (-2 3)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "right_child") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (2 -4 1)) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                                                        (ind_rc(x!2),
                                                         ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5 -6) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -5) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (4 -3 2)) (("3" (GRIND) (("1" (TYPEPRED "leq") (("1" (HIDE -2 2) (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (PROP) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1+2*x!2)" "x!1`seq(2+2*x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3 -2)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "sink" 1) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-4 1 -2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                        (ind_lc(x!2),
                                                         ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                                  (ind_lc(x!2),
                                                                                                                                                                                   ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) (("1" (HIDE -1) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 1) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "dichotomous?") (("3" (FLATTEN) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-1 -5 2)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (EXPAND "dichotomous?") (("3" (INST -3 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(k)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -6) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-2 -6 2)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (EXPAND "transitive?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(k)") (("3" (ASSERT) (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE - 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("3" (PROP) (("3" (HIDE-ALL-BUT (1 3)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (TYPEPRED "leq") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "preorder?") (("4" (FLATTEN) (("4" (EXPAND "transitive?") (("4" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("4" (PROP) (("4" (HIDE-ALL-BUT (1 2)) (("4" (TYPEPRED "leq") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) (("5" (TYPEPRED "leq") (("5" (EXPAND "total_preorder?") (("5" (FLATTEN) (("5" (EXPAND "preorder?") (("5" (FLATTEN) (("5" (EXPAND "transitive?") (("5" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(x!2)") (("5" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -3 "k") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -1 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL NIL)) NIL)) NIL) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|dichotomous_converse| APPLICATION-JUDGEMENT "(dichotomous?[T])" |relation_converse_props| NIL) (|preorder_converse| APPLICATION-JUDGEMENT "(preorder?[T])" |relation_converse_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|k!1| SKOLEM-CONST-DECL "below[length(swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))) - 1]" |heapsort| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "nat" |heapsort| NIL) (|x!3| SKOLEM-CONST-DECL "{j: below[length(x!1)] | x!2 < j}" |heapsort| NIL) (|ind_parent| CONST-DECL "nat" |sorting_seq| NIL) (|k| SKOLEM-CONST-DECL "below[length
        (sink(swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2)))
             (ind_gc(x!1)(x!3, x!2), x!3))
       - 1]" |heapsort| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|sink_interval_children_stable| FORMULA-DECL NIL |heapsort| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|lt_le| FORMULA-DECL NIL |sorting| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sink_stable| FORMULA-DECL NIL |heapsort| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|is_heap_from_to-5| |nil| 3797707297 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE -5) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE 2) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -4 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE -3) (("17" (GRIND) NIL NIL)) NIL) ("18" (HIDE -5 1) (("18" (GRIND) NIL NIL)) NIL) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL NIL)) NIL) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE 2) (("21" (GRIND) NIL NIL)) NIL) ("22" (HIDE -5 2) (("22" (GRIND) NIL NIL)) NIL) ("23" (HIDE -5 2) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (USE "lt_le") (("2" (ASSERT) (("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                (ind_lc(x!2),
                                                                                                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3 -9) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (LEMMA "lt_le") (("3" (INST? -1 :WHERE -2) (("3" (ASSERT) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "swap" 6) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (EXPAND "ind_lc" 6 1) (("1" (HIDE-ALL-BUT (1 6)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (EXPAND ">=") (("1" (EXPAND "converse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                                (ind_lc(x!2),
                                                                                                                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (USE "lt_le") (("3" (ASSERT) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) (("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (HIDE-ALL-BUT (3 4)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) (("4" (REWRITE "gt_def") (("4" (EXPAND "converse") (("4" (REWRITE "lt_def") (("4" (HIDE-ALL-BUT (1 3)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (EXPAND "dichotomous?") (("4" (FLATTEN) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (-2 2)) (("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (REWRITE "lt_def") (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) (("2" (HIDE-ALL-BUT (-2 3)) (("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (REWRITE "lt_def") (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "right_child") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (2 -4 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (REWRITE "lt_def") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) (("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (REWRITE "lt_def") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                                    (ind_rc(x!2),
                                     ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5 -6) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -5) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (4 -3 2)) (("3" (GRIND) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (REWRITE "lt_def") (("1" (TYPEPRED "<=") (("1" (HIDE -2 2) (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (PROP) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1+2*x!2)" "x!1`seq(2+2*x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2 3 4) (("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (REWRITE "lt_def") (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3 -2)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "sink" 1) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-4 1 -2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                    (ind_lc(x!2),
                                     ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (REWRITE "lt_def") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                                (ind_lc(x!2),
                                                                                                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) (("1" (HIDE -1) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (REWRITE "lt_def") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 1) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "dichotomous?") (("3" (FLATTEN) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-1 -5 2)) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (EXPAND "dichotomous?") (("3" (INST -3 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(k)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -6) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-2 -6 2)) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (EXPAND "transitive?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(k)") (("3" (ASSERT) (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE - 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (CASE "k=x!2") (("1" (HIDE -5) (("1" (REPLACES -1) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("3" (PROP) (("3" (HIDE-ALL-BUT (1 3)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "preorder?") (("4" (FLATTEN) (("4" (EXPAND "transitive?") (("4" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("4" (PROP) (("4" (HIDE-ALL-BUT (1 2)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) (("5" (TYPEPRED "<=") (("5" (EXPAND "total_preorder?") (("5" (FLATTEN) (("5" (EXPAND "preorder?") (("5" (FLATTEN) (("5" (EXPAND "transitive?") (("5" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(x!2)") (("5" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "k") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -1 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL NIL)) NIL)) NIL) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL) (|is_heap_from_to-4| |nil| 3731694930 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE -5) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE 2) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -4 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE -3) (("17" (GRIND) NIL NIL)) NIL) ("18" (HIDE -5 1) (("18" (GRIND) NIL NIL)) NIL) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL NIL)) NIL) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE 2) (("21" (GRIND) NIL NIL)) NIL) ("22" (HIDE -5 2) (("22" (GRIND) NIL NIL)) NIL) ("23" (HIDE -5 2) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (REWRITE "gt_def") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "gt_def") (("2" (EXPAND "converse") (("2" (USE "lt_le") (("2" (ASSERT) (("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND ">") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                              (ind_lc(x!2),
                                                                                                                                               ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3 -9) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5) (("3" (EXPAND ">") (("3" (EXPAND "converse") (("3" (LEMMA "lt_le") (("3" (INST? -1 :WHERE -2) (("3" (ASSERT) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "swap" 6) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (EXPAND "ind_lc" 6 1) (("1" (HIDE-ALL-BUT (1 6)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (EXPAND ">=") (("1" (EXPAND "converse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (EXPAND ">") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                                            (ind_lc(x!2),
                                                                                                                                                             ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (EXPAND ">") (("3" (EXPAND "converse") (("3" (USE "lt_le") (("3" (ASSERT) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (EXPAND ">") (("1" (EXPAND "converse") (("1" (USE "lt_le") (("1" (ASSERT) (("1" (HIDE -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) (("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (HIDE-ALL-BUT (3 4)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) (("4" (HIDE-ALL-BUT (1 3)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) (("2" (HIDE-ALL-BUT (2 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) (("2" (HIDE-ALL-BUT (3 5)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "right_child") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (2 -4 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                (ind_rc(x!2),
                 ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5 -6) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -5) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (4 -3 2)) (("3" (GRIND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (EXPAND "preorder?") (("2" (PROP) (("2" (EXPAND "transitive?") (("2" (INST -2 "x!1`seq(x!2)" "x!1`seq(1+2*x!2)" "x!1`seq(2+2*x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 5 -2)) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3 -2)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "sink" 1) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-4 1 -2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                (ind_lc(x!2),
                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -6 "ind_rc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                                                              (ind_lc(x!2),
                                                                                                                                               ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) (("1" (HIDE -1) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (2 3)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-1 -4 -6 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -6) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-2 -7 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE - 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (CASE "k=x!2") (("1" (HIDE -5) (("1" (REPLACES -1) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("3" (PROP) (("3" (HIDE-ALL-BUT (1 3)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "preorder?") (("4" (FLATTEN) (("4" (EXPAND "transitive?") (("4" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)") (("4" (PROP) (("4" (HIDE-ALL-BUT (1 2)) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_preorder?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) (("5" (TYPEPRED "<=") (("5" (EXPAND "total_preorder?") (("5" (FLATTEN) (("5" (EXPAND "preorder?") (("5" (FLATTEN) (("5" (EXPAND "transitive?") (("5" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(x!2)") (("5" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "k") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -1 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL NIL)) NIL)) NIL) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL) (|is_heap_from_to-3| |nil| 3731694710 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL))) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL))))))) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL))) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL))) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL))) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL))))) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL))) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL))) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL))) ("9" (GRIND) NIL) ("10" (HIDE -5) (("10" (GRIND) NIL))) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL))) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL))) ("13" (HIDE 2) (("13" (GRIND) NIL))) ("14" (HIDE 2) (("14" (GRIND) NIL))) ("15" (HIDE -4 2) (("15" (GRIND) NIL))) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL))) ("17" (HIDE -3) (("17" (GRIND) NIL))) ("18" (HIDE -5 1) (("18" (GRIND) NIL))) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL))) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL))) ("21" (HIDE 2) (("21" (GRIND) NIL))) ("22" (HIDE -5 2) (("22" (GRIND) NIL))) ("23" (HIDE -5 2) (("23" (GRIND) NIL))) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL))))))) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL))))))))))))) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL))))) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL))))) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL))) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL))) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL))))))))))) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE -3 2) (("2" (GRIND) NIL))) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL))))) ("2" (GRIND) NIL))))))) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL))) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                        (ind_lc(x!2),
                                                                                         ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL))) ("2" (HIDE -3 -9) (("2" (GRIND) NIL))) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL))))))) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL))))))) ("3" (HIDE -4 -5) (("3" (GRIND) NIL))))))))))))) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL) ("3" (GRIND) NIL))))))))))))) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL))) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL))))))))))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL))))))))) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL))) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                (ind_lc(x!2),
                                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL))) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL))))) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL))))) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL))) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL))))))))))) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (GRIND) NIL))))))))))))))) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL) ("4" (GRIND) NIL) ("5" (GRIND) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE 3) (("2" (GRIND) NIL))) ("3" (HIDE 3 -4) (("3" (GRIND) NIL))))))))))))) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL))) ("4" (GRIND) NIL) ("5" (GRIND) NIL))) ("2" (GRIND) NIL))))) ("2" (HIDE -4) (("2" (GRIND) NIL))) ("3" (HIDE -4 2) (("3" (GRIND) NIL))))))))))))))))))))))))))) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL))) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL))))))))))))) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 -5 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("1" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                                                                                                (ind_rc(x!2),
                                                                                                 ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5) (("1" (GRIND) NIL))) ("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL))) ("3" (HIDE -3 -6) (("3" (GRIND) NIL))) ("4" (HIDE -1 -4) (("4" (GRIND) NIL))) ("5" (HIDE-ALL-BUT (-2 1)) (("5" (GRIND) NIL))))) ("2" (HIDE -1 -4) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL))) ("3" (HIDE -1 -4 2) (("3" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT (-2 -4 2)) (("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))) ("3" (EXPAND "sink" 2) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-3 1 2)) (("1" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (TYPEPRED "<=") (("2" (HIDE -2 3) (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                                    (ind_lc(x!2),
                                                                                                     ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -5 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3) (("1" (GRIND) NIL))) ("2" (HIDE -4 -5) (("2" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("3" (HIDE -3 -4) (("3" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("4" (HIDE -1 -2 1) (("4" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("5" (HIDE -1 -2) (("5" (GRIND) NIL))))) ("2" (HIDE -1 -2) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -2 -3 2 4) (("3" (GRIND) NIL))))))) ("3" (HIDE -1 -4) (("3" (EXPAND ">") (("3" (EXPAND "converse") (("3" (EXPAND "<") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (PROP) (("1" (HIDE 2) (("1" (GRIND) (("1" (HIDE-ALL-BUT (1 2)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))))))) ("2" (HIDE 1) (("2" (GRIND) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL))))))))) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))) ("4" (HIDE -2) (("4" (GRIND) (("4" (HIDE-ALL-BUT 1) (("4" (TYPEPRED "<=") (("4" (GRIND) NIL))))))))))))))))))))))))))))))))))))))) ("2" (PROPAX) NIL))))))))))))))) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL))))))))))))) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL))) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                        (ind_lc(x!2),
                                                                                         ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL))) ("2" (HIDE -1 -4) (("2" (GRIND) NIL))) ("3" (HIDE -3 -6) (("3" (GRIND) NIL))) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL))) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL))))) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL))))))))))))) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL))))))))))))) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))))))) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL))))))))))))))))))) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL))) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL))))))))))))))))))))))) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL))))) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL))))) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL))))))))) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL))) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-1 -4 -6 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))))))))))))))))) ("4" (GRIND) NIL))) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL))))))))))))) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL))))) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL))) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL))))))))))))))) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL))))))))))) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL))) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL))))))) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL))))))) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL))))))))))))))) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL))))))))))) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL))) ("2" (HIDE -7 1) (("2" (GRIND) NIL))) ("3" (HIDE -6) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-2 -7 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))))))))))))))))) ("4" (HIDE -4 2) (("4" (GRIND) NIL))))))) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL))))))))))) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL))))))) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL))) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL))))))))))))))))))) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL))))) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL))))))))))) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL))) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL))))))) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL))) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL))))))))))))))))) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL))))))))))) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL))) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL))) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL))))) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL))))))))))))))))) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL))) ("2" (HIDE -7) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL))))) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL))))) ("2" (HIDE - 2 3) (("2" (GRIND) NIL))) ("3" (HIDE - 2 3) (("3" (GRIND) NIL))))))))))))) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL))) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL))))))))))))))))))))))))))))) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (CASE "k=x!2") (("1" (HIDE -4) (("1" (REPLACES -1) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL))) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (GRIND) (("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))) ("3" (GRIND) (("1" (HIDE-ALL-BUT (2 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL))))))))))))) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -5 2 4)) (("2" (INST -1 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (REVEAL -4) (("3" (HIDE -2 2) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))))))) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (HIDE-ALL-BUT (-2 2 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))) ("4" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-2 1 2)) (("1" (INST?) (("1" (ASSERT) NIL))))))))))))) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (INST -2 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (HIDE-ALL-BUT (-3 1 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (HIDE-ALL-BUT (-3 2 4)) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL))))))) ("3" (HIDE-ALL-BUT (-3 2 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))) ("4" (TYPEPRED "<=") (("4" (EXPAND "total_order?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL))))))))))))) ("5" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL))))))))))) ("2" (HIDE-ALL-BUT (2 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL))))))) ("3" (HIDE-ALL-BUT (-3 1 5)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))))) ("6" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL))))))))))) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (HIDE-ALL-BUT (-2 2 4)) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (HIDE-ALL-BUT (-2 1 4)) (("3" (INST?) (("3" (ASSERT) NIL))))))))))))) ("4" (HIDE - 2 4 5) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_order?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL))))))))))))))) ("7" (GRIND) NIL) ("8" (GRIND) (("8" (HIDE-ALL-BUT 1) (("8" (TYPEPRED "<=") (("8" (GRIND) NIL))))))) ("9" (GRIND) (("1" (HIDE-ALL-BUT 2) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL))))))) ("10" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "<=") (("3" (GRIND) NIL))))))) ("11" (GRIND) (("1" (HIDE-ALL-BUT 2) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL))))) ("3" (HIDE-ALL-BUT (2 3)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "dichotomous?") (("3" (FLATTEN) (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))) ("12" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "<=") (("3" (GRIND) NIL))))))))))))) ("2" (INST -3 "k") (("2" (ASSERT) (("2" (PROP) NIL))))))))))))))))))))))))))))))) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL))))) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (GRIND) NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL))))))) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL))) ("8" (GRIND) NIL) ("9" (GRIND) NIL) ("10" (HIDE 2) (("10" (GRIND) NIL))) ("11" (HIDE -1 2) (("11" (GRIND) NIL))) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL))))) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL))))) ("14" (HIDE 2) (("14" (GRIND) NIL))) ("15" (HIDE 2) (("15" (GRIND) NIL))) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL))))) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL)))))) NIL) NIL NIL) (|is_heap_from_to-2| |nil| 3656339142 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE -5) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE 2) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -4 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE -3) (("17" (GRIND) NIL NIL)) NIL) ("18" (HIDE -5 1) (("18" (GRIND) NIL NIL)) NIL) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL NIL)) NIL) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE 2) (("21" (GRIND) NIL NIL)) NIL) ("22" (HIDE -5 2) (("22" (GRIND) NIL NIL)) NIL) ("23" (HIDE -5 2) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                      (ind_lc(x!2),
                                                                       ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3 -9) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                            (ind_lc(x!2),
                                                                             ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 -5 1)) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                                                                            (ind_rc(x!2),
                                                                             ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 1)) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -4 2)) (("3" (GRIND) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "sink" 2) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-3 1 2)) (("1" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (HIDE -2 3) (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                (ind_lc(x!2),
                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -5 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5) (("2" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4) (("3" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 1) (("4" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -1 -2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -2 -3 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4) (("3" (EXPAND ">") (("3" (EXPAND "converse") (("3" (EXPAND "<") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (PROP) (("1" (HIDE 2) (("1" (GRIND) (("1" (HIDE-ALL-BUT (1 2)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (GRIND) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -2) (("4" (GRIND) (("4" (HIDE-ALL-BUT 1) (("4" (TYPEPRED "<=") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                      (ind_lc(x!2),
                                                                       ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-1 -4 -6 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -6) (("3" (GRIND) (("3" (HIDE-ALL-BUT (-2 -7 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(x!2) " "x!1`seq(2 + 2 * x!2)" " x!1`seq(k)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE - 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (REWRITE "gt_def") (("3" (EXPAND "converse") (("3" (REWRITE "lt_def") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (CASE "k=x!2") (("1" (HIDE -4) (("1" (REPLACES -1) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_parent") (("2" (ASSERT) (("2" (GRIND) (("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) (("1" (HIDE-ALL-BUT (2 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -5 2 4)) (("2" (INST -1 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (REVEAL -4) (("3" (HIDE -2 2) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (HIDE-ALL-BUT (-2 2 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-2 1 2)) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (INST -2 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (-3 1 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(1 + 2 * x!2)" "x!1`seq(2 + 2 * x!2)" "x!1`seq(x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (-3 2 4)) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2 4)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "<=") (("4" (EXPAND "total_order?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (2 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "partial_order?") (("3" (EXPAND "preorder?") (("3" (FLATTEN) (("3" (EXPAND "transitive?") (("3" (INST -2 "x!1`seq(2 + 2 * x!2)" "x!1`seq(1 + 2 * x!2)" "x!1`seq(x!2)") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1 5)) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (GRIND) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (HIDE-ALL-BUT (-2 2 4)) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (HIDE-ALL-BUT (-2 1 4)) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2 4 5) (("4" (TYPEPRED "<=") (("4" (EXPAND "total_order?") (("4" (FLATTEN) (("4" (EXPAND "dichotomous?") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) (("8" (HIDE-ALL-BUT 1) (("8" (TYPEPRED "<=") (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("9" (GRIND) (("1" (HIDE-ALL-BUT 2) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("10" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "<=") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("11" (GRIND) (("1" (HIDE-ALL-BUT 2) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (2 3)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (EXPAND "dichotomous?") (("3" (FLATTEN) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "<=") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "k") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -1 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL NIL)) NIL)) NIL) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL) (|is_heap_from_to-1| |nil| 3652721178 ("" (MEASURE-INDUCT+ "j-i" ("h" "i" "j")) (("1" (EXPAND "sink" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (AUTO-REWRITE "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "is_p_heap" 1) (("2" (SKEEP) (("2" (CASE "k >= ind_gc(x!1)(x!3, x!2)") (("1" (INST -5 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -5) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -5 1)) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (INST -6 "k!1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "is_parent") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "is_parent") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "left_child") (("5" (EXPAND "finseq_appl") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-1 2)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (-1 -2 -6 1 3)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (-2 1)) (("8" (GRIND) NIL NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE -5) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE-ALL-BUT (-1 1)) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE-ALL-BUT (-2 1)) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE 2) (("13" (GRIND) NIL NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE -4 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 1)) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE -3) (("17" (GRIND) NIL NIL)) NIL) ("18" (HIDE -5 1) (("18" (GRIND) NIL NIL)) NIL) ("19" (HIDE-ALL-BUT (-1 1)) (("19" (GRIND) NIL NIL)) NIL) ("20" (HIDE-ALL-BUT (-2 1)) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE 2) (("21" (GRIND) NIL NIL)) NIL) ("22" (HIDE -5 2) (("22" (GRIND) NIL NIL)) NIL) ("23" (HIDE -5 2) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT (-2 1)) (("24" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -4 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -5 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k=x!2") (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (EXPAND "is_parent") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3") (("1" (SPLIT -4) (("1" (EXPAND "is_p_heap" -1) (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (REWRITE "sink_length") (("1" (EXPAND "swap" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3,x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 2) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                      (ind_lc(x!2),
                                                                       ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap" -7) (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_lc(x!2)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -9) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3 -9) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -4 -5 -7 -8 -9 -10 -11 -12) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_rc(x!2))" "ind_rc(x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND ">=") (("1" (EXPAND "converse") (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (EXPAND ">") (("2" (EXPAND "converse") (("2" (EXPAND "<") (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND ">=") (("3" (EXPAND "converse") (("3" (EXPAND "<") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -2 -3 -4 -6 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "left_child") (("4" (EXPAND "finseq_appl") (("4" (LEMMA "sink_stable") (("4" (EXPAND "finseq_appl") (("4" (INST?) (("1" (HIDE 2) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (HIDE -5) (("1" (EXPAND "sink" 1) (("1" (LIFT-IF) (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                            (ind_lc(x!2),
                                                                             ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "is_p_heap") (("1" (INST -7 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -3 -4 -5 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -2 -4) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (HIDE -1) (("1" (INST -4 "ind_lc(x!2)") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -4 -5 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "right_child") (("5" (EXPAND "finseq_appl") (("5" (HIDE -4) (("5" (LEMMA "sink_stable") (("5" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 2 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (SPLIT) (("1" (HIDE 1) (("1" (EXPAND "ind_gc" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 -5 1)) (("1" (EXPAND ">=") (("1" (EXPAND ">") (("1" (EXPAND "converse") (("1" (EXPAND "<") (("1" (EXPAND "difference") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (EXPAND "swap") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "ind_gc") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (HIDE -1 -3 -4 1 3 4) (("2" (EXPAND "transitive?") (("2" (INST -1 "x!1`seq(x!2)" "x!1`seq(ind_lc(x!2))" "x!1`seq(ind_rc(x!2))") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_rc(x!2)))
                                                                            (ind_rc(x!2),
                                                                             ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_rc(x!2)))(x!3, ind_rc(x!2))" "x!3" "ind_rc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -7 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5 -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 1)) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -4 2)) (("3" (EXPAND ">") (("3" (EXPAND ">=") (("3" (EXPAND "converse") (("3" (EXPAND "<") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (FLATTEN) (("3" (EXPAND "swap") (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -5 -6 2)) (("2" (EXPAND "transitive?") (("2" (INST -1 "x!1`seq(x!2)" "x!1`seq(ind_gc(x!1)(x!3, x!2))" "x!1`seq(ind_rc(x!2))") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "sink" 2) (("3" (EXPAND "finseq_appl") (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-3 1 2)) (("1" (EXPAND "swap") (("1" (EXPAND "finseq_appl") (("1" (EXPAND ">") (("1" (EXPAND ">=") (("1" (EXPAND "converse") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<") (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (PROP) (("1" (HIDE 4) (("1" (EXPAND "ind_gc") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "<") (("1" (EXPAND "difference") (("1" (EXPAND "member") (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "ind_gc") (("2" (LIFT-IF) (("2" (PROP) (("2" (EXPAND "<") (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "<") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (PROP) (("1" (HIDE 5) (("1" (EXPAND "ind_gc") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (2 4)) (("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (2 4)) (("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (TYPEPRED "<=") (("3" (EXPAND "total_order?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "right_child") (("2" (EXPAND "finseq_appl") (("2" (HIDE-ALL-BUT (-1 2)) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                                (ind_lc(x!2),
                                                                                 ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_rc(x!2)") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (INST -5 "ind_rc(x!2)") (("1" (PROP) (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -5) (("2" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4) (("3" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 1) (("4" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -1 -2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -2 -3 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4) (("3" (GRIND) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 2) (("3" (TYPEPRED "<=") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 2) (("4" (TYPEPRED "<=") (("4" (GRIND) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 3)) (("5" (TYPEPRED "<=") (("5" (EXPAND "total_order?") (("5" (EXPAND "dichotomous?") (("5" (FLATTEN) (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (2 4)) (("6" (TYPEPRED "<=") (("6" (EXPAND "total_order?") (("6" (EXPAND "dichotomous?") (("6" (FLATTEN) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT (2 4)) (("7" (TYPEPRED "<=") (("7" (EXPAND "total_order?") (("7" (EXPAND "dichotomous?") (("7" (FLATTEN) (("7" (INST?) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT (2 4)) (("8" (TYPEPRED "<=") (("8" (EXPAND "total_order?") (("8" (EXPAND "dichotomous?") (("8" (FLATTEN) (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 2) (("9" (TYPEPRED "<=") (("9" (GRIND) NIL NIL)) NIL)) NIL) ("10" (HIDE-ALL-BUT 3) (("10" (TYPEPRED "<=") (("10" (GRIND) NIL NIL)) NIL)) NIL) ("11" (HIDE-ALL-BUT 3) (("11" (TYPEPRED "<=") (("11" (GRIND) NIL NIL)) NIL)) NIL) ("12" (HIDE-ALL-BUT 3) (("12" (TYPEPRED "<=") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (HIDE-ALL-BUT (2 4)) (("13" (TYPEPRED "<=") (("13" (EXPAND "total_order?") (("13" (EXPAND "dichotomous?") (("13" (FLATTEN) (("13" (INST?) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT (3 5)) (("14" (TYPEPRED "<=") (("14" (EXPAND "total_order?") (("14" (EXPAND "dichotomous?") (("14" (FLATTEN) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT (3 5)) (("15" (TYPEPRED "<=") (("15" (EXPAND "total_order?") (("15" (EXPAND "dichotomous?") (("15" (FLATTEN) (("15" (INST?) (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT (3 5)) (("16" (TYPEPRED "<=") (("16" (EXPAND "total_order?") (("16" (EXPAND "dichotomous?") (("16" (FLATTEN) (("16" (INST?) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "left_child") (("6" (EXPAND "right_child") (("6" (EXPAND "finseq_appl") (("6" (HIDE -4 2) (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "swap" 1 1) (("1" (EXPAND "finseq_appl") (("1" (CASE "ind_gc(x!1)(x!3, x!2) = ind_lc(x!2)") (("1" (REPLACES -1) (("1" (EXPAND "sink" 1) (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(swap(x!1)(x!2, ind_lc(x!2)))
                                                                      (ind_lc(x!2),
                                                                       ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2)))" "ind_gc(swap(x!1)(x!2, ind_lc(x!2)))(x!3, ind_lc(x!2))" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (INST -5 "ind_lc(x!2)") (("1" (PROP) (("1" (HIDE -2 -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -6) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -4 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE -1 -4 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -4 -5 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "swap(x!1)(x!2, ind_gc(x!1)(x!3, x!2))" "ind_gc(x!1)(x!3, x!2)" "x!3" "ind_lc(x!2)") (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -4 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (EXPAND "one_child") (("2" (PROP) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "sink_stable") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2 -5 2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -4 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2 4)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND ">=") (("3" (EXPAND "converse") (("3" (TYPEPRED "<=") (("3" (GRIND) (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -5 -6 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACE -2 2 RL) (("3" (HIDE -2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST?) (("1" (INST -1 "k") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap" -5) (("2" (INST -5 "k") (("1" (EXPAND "finseq_appl") (("1" (PROP) (("1" (HIDE -5 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -6) (("3" (GRIND) (("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("4" (HIDE -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -2 1 RL) (("3" (HIDE -2 -3 -6) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (LEMMA "sink_stable") (("5" (EXPAND "finseq_appl") (("5" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (EXPAND "right_child") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "one_child") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE -1 -3 -4 3) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "finseq_appl") (("6" (LEMMA "sink_stable") (("6" (EXPAND "finseq_appl") (("6" (INST?) (("1" (REPLACE -1 (1 2) RL) (("1" (HIDE -1) (("1" (LEMMA "sink_interval_children_stable") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST -1 "k") (("1" (PROP) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (EXPAND "is_p_heap") (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4 -7 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -6 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "left_child") (("3" (EXPAND "right_child") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 1 RL) (("3" (REPLACE -3 2 RL) (("3" (HIDE -2 -3) (("3" (EXPAND "is_p_heap") (("3" (INST -5 "k") (("1" (PROP) (("1" (HIDE -2 -5 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -7) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3)) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-4 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE - 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE - 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 2 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -3 -4 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (HIDE -1) (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!3") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "sink_length") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "y!2") (("3" (REWRITE "sink_length") (("3" (HIDE -2 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (REWRITE "sink_length") (("6" (TYPEPRED "x!1`2" "x!1`3") (("6" (HIDE -4 -5 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (REWRITE "sink_length") (("7" (GRIND) NIL NIL)) NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL) ("11" (HIDE -1 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE -1 2) (("12" (REWRITE "sink_length") (("12" (GRIND) NIL NIL)) NIL)) NIL) ("13" (REWRITE "sink_length") (("13" (HIDE -1 2) (("13" (GRIND) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (GRIND) NIL NIL)) NIL) ("15" (HIDE 2) (("15" (GRIND) NIL NIL)) NIL) ("16" (REWRITE "sink_length") (("16" (HIDE -1 2) (("16" (GRIND) NIL NIL)) NIL)) NIL) ("17" (REWRITE "sink_length") (("17" (HIDE -1 2) (("17" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|heapify_TCC1| 0 (|heapify_TCC1-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapify| SUBTYPE "heapsort.i" "below[length(h)]"))) (|heapify_TCC2| 0 (|heapify_TCC2-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapify| SUBTYPE "(number_fields.-)(length(heapsort.h), 1)" "{n: nat_types[length(heapsort.h)].below | reals.>=(n, heapsort.i)}"))) (|heapify_TCC3| 0 (|heapify_TCC3-1| |nil| 3651167506 ("" (SKEEP) (("" (TYPEPRED "h" "i") (("" (REWRITE "sink_length") (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|heapify| SUBTYPE "(number_fields.-)(heapsort.i, 1)" "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.sink(heapsort.h)(heapsort.i, (number_fields.-)(length(heapsort.h), 1))), 2)), 1))}"))) (|heapify_TCC4| 0 (|heapify_TCC4-1| |nil| 3651167506 ("" (TERMINATION-TCC) NIL NIL) ((|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapify| TERMINATION "heapsort.heapify(heapsort.sink(heapsort.h)(heapsort.i, (number_fields.-)(length(heapsort.h), 1)))((number_fields.-)(heapsort.i, 1))" "NIL"))) (|heapify_TCC5| 0 (|heapify_TCC5-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapify| SUBTYPE "heapsort.i" "below[length(h)]"))) (|heapify_TCC6| 0 (|heapify_TCC6-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapify| SUBTYPE "(number_fields.-)(length(heapsort.h), 1)" "{n: nat_types[length(heapsort.h)].below | reals.>=(n, heapsort.i)}"))) (|heapify_length_TCC1| 0 (|heapify_length_TCC1-1| |nil| 3651374495 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapify_length| SUBTYPE "heapsort.i" "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.h), 2)), 1))}"))) (|heapify_length| 0 (|heapify_length-1| |nil| 3651376870 ("" (MEASURE-INDUCT+ "i " ("h" "i")) (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (REPLACE -1 1) (("1" (EXPAND "heapify") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "x!2") (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "sink_length") (("2" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "heapify" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "sink(x!1)(x!2, length(x!1) - 1)" "x!2 -1") (("1" (ASSERT) (("1" (REPLACES -2) (("1" (LEMMA "sink_length") (("1" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (HIDE 2) (("1" (TYPEPRED "x!2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sink_length") (("2" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sink_length") (("3" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_length") (("2" (HIDE -2) (("2" (INST?) (("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "below[floor(length(x!1) / 2)]" |heapsort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|heapify| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|heapify_permutes| 0 (|heapify_permutes-2| "" 3884901343 ("" (MEASURE-INDUCT+ "i" ("h" "i")) (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (EXPAND "permutations") (("1" (SKEEP) (("1" (EXPAND "occurrences") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (REWRITE "heapify_length") NIL NIL) ("2" (REWRITE "heapify_length") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "heapify" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "sink_permutes") (("1" (INST -1 "x!1" "x!2" "length(x!1) -1") (("1" (INST -3 "sink(x!1)(x!2, length(x!1) - 1)" "x!2 - 1") (("1" (ASSERT) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (HIDE -1 -2 -5) (("1" (INST -1 "x!1" "sink(x!1)(x!2, length(x!1) - 1)" " heapify(sink(x!1)(x!2, length(x!1) - 1))(x!2 - 1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (LEMMA "sink_length") (("2" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "x!1" "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (LEMMA "sink_permutes") (("2" (INST -1 "x!1" "x!2" "length(x!1) -1") (("2" (HIDE -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|heapify_permutes-1| |nil| 3651568904 ("" (MEASURE-INDUCT+ "i" ("h" "i")) (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (EXPAND "permutations") (("1" (SKEEP) (("1" (EXPAND "occurrences") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (REWRITE "heapify_length") NIL NIL) ("2" (REWRITE "heapify_length") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "heapify" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "sink_permutes") (("1" (INST -1 "x!1" "x!2" "length(x!1) -1") (("1" (INST -3 "sink(x!1)(x!2, length(x!1) - 1)" "x!2 - 1") (("1" (ASSERT) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (HIDE -1 -2 -5) (("1" (INST -1 "x!1" "sink(x!1)(x!2, length(x!1) - 1)" " heapify(sink(x!1)(x!2, length(x!1) - 1))(x!2 - 1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (LEMMA "sink_length") (("2" (INST -1 "x!1" "x!2" "length(x!1) - 1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "x!1" "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 2) (("2" (TYPEPRED X!2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!2) (("2" (LEMMA "sink_permutes") (("2" (INST -1 "x!1" "x!2" "length(x!1) -1") (("2" (HIDE -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|occurrences| DEF-DECL "nat" |sorting_seq| NIL) (|heapify_length| FORMULA-DECL NIL |heapsort| NIL) (|sink_permutes| FORMULA-DECL NIL |heapsort| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|permutations_equiv| FORMULA-DECL NIL |sorting_seq| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "below[floor(length(x!1) / 2)]" |heapsort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|heapify| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|heapify_heapifies_TCC1| 0 (|heapify_heapifies_TCC1-1| |nil| 3651181141 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapify_heapifies| SUBTYPE "(number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.h), 2)), 1)" "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.h), 2)), 1))}"))) (|heapify_heapifies| 0 (|heapify_heapifies-1| |nil| 3651181154 ("" (CASE "FORALL (h : finite_sequence[T], (i : nat | i <= floor(length(h) / 2) - 1)) :
                                    is_p_heap(h)(i+1, length(h) -1)   =>
                                         is_heap(heapify(h)(i))") (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "is_p_heap") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (EXPAND "is_parent") (("1" (EXPAND "both_childs") (("1" (EXPAND "ind_rc") (("1" (EXPAND "one_child") (("1" (EXPAND "ind_rc") (("1" (HIDE 2 3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "i" ("h" "i")) (("1" (EXPAND "heapify" 1) (("1" (PROP) (("1" (INST -2 "sink(x!1)(x!2, length(x!1) - 1)" "x!2 - 1") (("1" (ASSERT) (("1" (HIDE 1) (("1" (REWRITE "sink_length") (("1" (LEMMA " is_heap_from_to") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA " is_heap_from_to") (("2" (INST?) (("1" (EXPAND "is_heap") (("1" (REWRITE "sink_length") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (HIDE - 4) (("2" (REWRITE "sink_length") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "x!2" "y!2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "x!2" "y!2" "y!1") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (GRIND) NIL NIL)) NIL)) NIL) ("5" (HIDE - 2) (("5" (TYPEPRED "x!1`1" "x!1`2") (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (TYPEPRED "y!1`1" "y!1`2" "x!1`2") (("6" (GRIND) NIL NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (TYPEPRED "y!1`1" "y!1`2" "x!1`2") (("7" (GRIND) NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (TYPEPRED "i!1" "h!1") (("8" (GRIND) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (TYPEPRED "i!1" "h!1") (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED " i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (TYPEPRED " i") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "{i: nat | i <= floor(length(x!1) / 2) - 1}" |heapsort| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|is_heap_from_to| FORMULA-DECL NIL |heapsort| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|heapify| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|is_heap| CONST-DECL "bool" |sorting_seq| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|heapsort_aux_TCC1| 0 (|heapsort_aux_TCC1-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|heapsort_aux| SUBTYPE "0" "below[length(h)]"))) (|heapsort_aux_TCC2| 0 (|heapsort_aux_TCC2-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)) NIL (|heapsort_aux| SUBTYPE "1" "below[length(h)]"))) (|heapsort_aux_TCC3| 0 (|heapsort_aux_TCC3-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL)) NIL (|heapsort_aux| SUBTYPE "0" "below[length(swap[T, leq](h)(0, n))]"))) (|heapsort_aux_TCC4| 0 (|heapsort_aux_TCC4-1| |nil| 3651167506 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux| SUBTYPE "(number_fields.-)(heapsort.n, 1)" "{n_1: nat_types[length(sorting_seq[heapsort.T, heapsort.leq].swap(heapsort.h)(0, heapsort.n))].below | reals.>=(n_1, 0)}"))) (|heapsort_aux_TCC5| 0 (|heapsort_aux_TCC5-1| |nil| 3651167506 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|heapsort_aux| SUBTYPE "0" "below[length(h)]"))) (|heapsort_aux_TCC6| 0 (|heapsort_aux_TCC6-1| |nil| 3651819469 ("" (SKEEP) (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (REWRITE "sink_length") (("2" (EXPAND "swap") (("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) NIL (|heapsort_aux| SUBTYPE "(number_fields.-)(heapsort.n, 1)" "below[length(sink(swap[T, leq](h)(0, n))(0, n - 1))]"))) (|heapsort_aux_TCC7| 0 (|heapsort_aux_TCC7-1| |nil| 3651819469 ("" (TERMINATION-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux| TERMINATION "heapsort.heapsort_aux(heapsort.sink(sorting_seq[heapsort.T, heapsort.leq].swap(heapsort.h)(0, heapsort.n))(0, (number_fields.-)(heapsort.n, 1)))((number_fields.-)(heapsort.n, 1))" "NIL"))) (|heapsort_aux_permutes| 0 (|heapsort_aux_permutes-1| |nil| 3651572880 ("" (MEASURE-INDUCT+ "n" ("h" "n")) (("" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (EXPAND "permutations") (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "heapsort_aux" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "swap_permutes") NIL NIL) ("3" (INST -1 "sink(swap(x!1)(0, x!2))(0, x!2 - 1)" "x!2 -1") (("1" (ASSERT) (("1" (LEMMA "sink_permutes") (("1" (INST?) (("1" (LEMMA "swap_permutes") (("1" (INST?) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "transitive?") (("1" (INST-CP -1 "x!1" "swap(x!1)(0, x!2)" "sink(swap(x!1)(0, x!2))(0, x!2 - 1)") (("1" (ASSERT) (("1" (INST -1 "x!1" "sink(swap(x!1)(0, x!2))(0, x!2 - 1)" "heapsort_aux(sink(swap(x!1)(0, x!2))(0, x!2 - 1))(x!2 - 1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "below[length(x!1)]" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|sink_permutes| FORMULA-DECL NIL |heapsort| NIL) (|permutations_equiv| FORMULA-DECL NIL |sorting_seq| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|swap_permutes| FORMULA-DECL NIL |sorting_seq| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (|heapsort_aux| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|heapsort_aux_length| 0 (|heapsort_aux_length-1| |nil| 3651494770 ("" (MEASURE-INDUCT+ "n" ("h" "n")) (("" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "heapsort_aux" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "swap") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST -1 "sink(swap(x!1)(0, x!2))(0, x!2 - 1)" "x!2-1") (("1" (PROP) (("1" (REPLACES -1) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "below[length(x!1)]" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|heapsort_aux| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|heapsort_aux_psorts_TCC1| 0 (|heapsort_aux_psorts_TCC1-1| |nil| 3651943039 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "(number_fields.+)(heapsort.n, 1)" "below[length(h)]"))) (|heapsort_aux_psorts_TCC2| 0 (|heapsort_aux_psorts_TCC2-1| |nil| 3651943039 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "(number_fields.-)(length(heapsort.h), 1)" "{j: nat_types[length(heapsort.h)].below | reals.<=((number_fields.+)(1, heapsort.n), j)}"))) (|heapsort_aux_psorts_TCC3| 0 (|heapsort_aux_psorts_TCC3-1| |nil| 3651943039 ("" (SKEEP) (("" (HIDE -1) (("" (REWRITE "heapsort_aux_length") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "0" "below[length(h)]"))) (|heapsort_aux_psorts_TCC4| 0 (|heapsort_aux_psorts_TCC4-1| |nil| 3651943039 ("" (SKEEP) (("" (REWRITE "heapsort_aux_length") (("" (HIDE -) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "heapsort.n" "{j: nat_types[length(heapsort.h)].below | reals.<=(0, j)}"))) (|heapsort_aux_psorts_TCC5| 0 (|heapsort_aux_psorts_TCC5-1| |nil| 3652102354 ("" (SKEEP) (("" (REWRITE "heapsort_aux_length") (("" (HIDE -) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "heapsort.i" "below[length(h)]"))) (|heapsort_aux_psorts_TCC6| 0 (|heapsort_aux_psorts_TCC6-1| |nil| 3652114041 ("" (SKEEP) (("" (TYPEPRED "n") (("" (HIDE -2 -3 -4) (("" (REWRITE "heapsort_aux_length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|heapsort_aux_psorts| SUBTYPE "heapsort.n" "below[length(h)]"))) (|heapsort_aux_psorts| 0 (|heapsort_aux_psorts-5| |nil| 3652138783 ("" (MEASURE-INDUCT+ "n" ("h" "n")) (("1" (CASE "length(x!1) < 2") (("1" (HIDE -2) (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "heapsort_aux" 2) (("2" (PROP) (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (INST -3 0) (("1" (HIDE -2) (("1" (ASSERT) (("1" (EXPAND "psorted") (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE "k = 0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (HIDE -1 2) (("2" (ASSERT) (("2" (EXPAND "is_sorted?") (("2" (EXPAND "psorted") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "k = 0") (("1" (REPLACES -1) (("1" (HIDE -2 -4) (("1" (EXPAND "is_p_heap") (("1" (INST -2 0) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "ind_lc") (("1" (EXPAND "finseq_appl") (("1" (HIDE -3 -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k = 1") (("1" (REPLACES -1) (("1" (INST -4 0) (("1" (HIDE -2 1 -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "k") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "sink(swap(x!1)(0, x!2))(0, x!2 - 1)" "x!2 - 1") (("1" (EXPAND "finseq_appl") (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -1 (2 7)) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST -3 0) (("2" (HIDE 3) (("2" (EXPAND "psorted") (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (CASE-REPLACE "k = x!2" :HIDE? T) (("1" (LEMMA "sink_stable") (("1" (EXPAND "finseq_appl") (("1" (COPY -1) (("1" (INST? -1) (("1" (REPLACE -1 3 RL :HIDE? T) (("1" (INST?) (("1" (REPLACE -1 3 RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "k") (("1" (PROP) (("1" (LEMMA "sink_stable") (("1" (COPY -1) (("1" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k") (("1" (INST -2 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k + 1") (("1" (EXPAND "finseq_appl") (("1" (REPLACES -1 4 RL) (("1" (REPLACES -2 4 RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (COPY -1) (("2" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k") (("1" (INST -2 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k + 1") (("1" (GRIND) NIL NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "is_heap_from_to") (("3" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "is_heap_from_to") (("3" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1") (("1" (ASSERT) (("1" (HIDE -1 -3 2 4) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (EXPAND "both_childs") (("1" (EXPAND "one_child") (("1" (INST -3 "k") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (LEMMA "sink_stable") (("4" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "i") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "l") (("1" (REPLACES -4 1 RL) (("1" (REPLACE -4 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (LEMMA "root_is_greatest_in_p_heap") (("1" (INST?) (("1" (INST -1 "l") (("1" (LEMMA "root_is_greatest_in_p_heap") (("1" (INST?) (("1" (INST -1 "x!2") (("1" (EXPAND "finseq_appl") (("1" (HIDE -6 -7 -9 3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (TYPEPRED "i") (("2" (HIDE-ALL-BUT (-1 1 2 3 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 5)) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (HIDE-ALL-BUT (1 2 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (TYPEPRED "x!1`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (ASSERT) NIL NIL) ("7" (CASE "length(x!1`1) = 0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("8" (ASSERT) NIL NIL) ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL) ("12" (ASSERT) NIL NIL) ("13" (ASSERT) NIL NIL) ("14" (ASSERT) NIL NIL) ("15" (ASSERT) NIL NIL)) NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|dichotomous_converse| APPLICATION-JUDGEMENT "(dichotomous?[T])" |relation_converse_props| NIL) (|preorder_converse| APPLICATION-JUDGEMENT "(preorder?[T])" |relation_converse_props| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|k| SKOLEM-CONST-DECL "below[length(swap(x!1)(0, 1))]" |heapsort| NIL) (|x!1| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sink_in_stable| FORMULA-DECL NIL |heapsort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|root_is_greatest_in_p_heap| FORMULA-DECL NIL |sorting_seq| NIL) (|i| SKOLEM-CONST-DECL "below[x!2]" |heapsort| NIL) (|k| SKOLEM-CONST-DECL "below[length(swap(x!1)(0, x!2)) - 1]" |heapsort| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sink_stable| FORMULA-DECL NIL |heapsort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|is_heap_from_to| FORMULA-DECL NIL |heapsort| NIL) (|k| SKOLEM-CONST-DECL "below[length(sink(swap(x!1)(0, x!2))(0, x!2 - 1))]" |heapsort| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|x!2| SKOLEM-CONST-DECL "{n: nat | n < length(x!1) - 1}" |heapsort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL) (|psorted| CONST-DECL "bool" |sorting_seq| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|is_sorted?| CONST-DECL "bool" |sorting_seq| NIL) (|heapsort_aux| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|heapsort_aux_psorts-4| |nil| 3652116900 ("" (MEASURE-INDUCT+ "n" ("h" "n")) (("1" (CASE "length(x!1) < 2") (("1" (HIDE -2) (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "heapsort_aux" 2) (("2" (PROP) (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (INST -3 0) (("1" (HIDE -2) (("1" (ASSERT) (("1" (EXPAND "psorted") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE "k = 0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (HIDE -1 2) (("2" (ASSERT) (("2" (EXPAND "psorted") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "k = 0") (("1" (REPLACES -1) (("1" (HIDE -2 -4) (("1" (EXPAND "is_p_heap") (("1" (INST -2 0) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "ind_lc") (("1" (EXPAND "finseq_appl") (("1" (HIDE -3 -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k = 1") (("1" (REPLACES -1) (("1" (INST -4 0) (("1" (HIDE -2 1 -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "k") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "sink(swap(x!1)(0, x!2))(0, x!2 - 1)" "x!2 - 1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -1 (2 7)) (("1" (SPLIT) (("1" (INST -3 0) (("1" (HIDE 3) (("1" (EXPAND "psorted") (("1" (FLATTEN) (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE "k = x!2") (("1" (REPLACES -1) (("1" (LEMMA "sink_stable") (("1" (INST?) (("1" (INST?) (("1" (INST -1 "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 3 RL) (("1" (LEMMA "sink_stable") (("1" (INST?) (("1" (INST -1 "1 + x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 3 RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "k") (("1" (PROP) (("1" (LEMMA "sink_stable") (("1" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k") (("1" (LEMMA "sink_stable") (("1" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k + 1") (("1" (EXPAND "finseq_appl") (("1" (REPLACES -1 4 RL) (("1" (REPLACES -2 4 RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sink_stable") (("2" (LEMMA "sink_stable") (("2" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k") (("1" (INST -2 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "k + 1") (("1" (GRIND) NIL NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1") (("1" (ASSERT) (("1" (HIDE -1 -3 2 4) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "is_parent") (("1" (EXPAND "both_childs") (("1" (EXPAND "one_child") (("1" (INST -3 "k") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (TYPEPRED "floor(length(x!1) / 2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "x!2") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(x!1)(0, x!2)" "0" "x!2 - 1" "i") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (LEMMA "root_is_greatest_in_p_heap") (("1" (INST?) (("1" (TYPEPRED "l") (("1" (INST -4 "x!2" "l") (("1" (ASSERT) (("1" (HIDE -5 3) (("1" (CASE "NOT l = 0 AND NOT l = x!2") (("1" (GRIND) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL) ("9" (POSTPONE) NIL NIL) ("10" (POSTPONE) NIL NIL) ("11" (POSTPONE) NIL NIL) ("12" (POSTPONE) NIL NIL) ("13" (POSTPONE) NIL NIL) ("14" (POSTPONE) NIL NIL) ("15" (POSTPONE) NIL NIL) ("16" (POSTPONE) NIL NIL) ("17" (POSTPONE) NIL NIL) ("18" (POSTPONE) NIL NIL) ("19" (POSTPONE) NIL NIL) ("20" (POSTPONE) NIL NIL) ("21" (POSTPONE) NIL NIL) ("22" (POSTPONE) NIL NIL) ("23" (POSTPONE) NIL NIL) ("24" (POSTPONE) NIL NIL) ("25" (POSTPONE) NIL NIL) ("26" (POSTPONE) NIL NIL)) NIL) NIL NIL) (|heapsort_aux_psorts-3| |nil| 3652019618 ("" (MEASURE-INDUCT+ "length(h) - n - 1" ("h" "n")) (("1" (CASE "length(x!1) < 2") (("1" (HIDE -2) (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "heapsort_aux" 2) (("2" (PROP) (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "finseq_appl") (("1" (INST -3 0) (("1" (HIDE -2) (("1" (ASSERT) (("1" (EXPAND "psorted") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (CASE "k = 0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (HIDE -1 2) (("2" (ASSERT) (("2" (EXPAND "psorted") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "k = 0") (("1" (REPLACES -1) (("1" (HIDE -2 -4) (("1" (EXPAND "is_p_heap") (("1" (INST -2 0) (("1" (PROP) (("1" (EXPAND "left_child") (("1" (EXPAND "ind_lc") (("1" (EXPAND "finseq_appl") (("1" (HIDE -3 -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k = 1") (("1" (REPLACES -1) (("1" (INST -4 0) (("1" (HIDE -2 1 -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "k") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL) ("9" (POSTPONE) NIL NIL) ("10" (POSTPONE) NIL NIL) ("11" (POSTPONE) NIL NIL) ("12" (POSTPONE) NIL NIL) ("13" (POSTPONE) NIL NIL) ("14" (POSTPONE) NIL NIL) ("15" (POSTPONE) NIL NIL) ("16" (POSTPONE) NIL NIL) ("17" (POSTPONE) NIL NIL) ("18" (POSTPONE) NIL NIL) ("19" (POSTPONE) NIL NIL) ("20" (POSTPONE) NIL NIL) ("21" (POSTPONE) NIL NIL) ("22" (POSTPONE) NIL NIL) ("23" (POSTPONE) NIL NIL) ("24" (POSTPONE) NIL NIL) ("25" (POSTPONE) NIL NIL) ("26" (POSTPONE) NIL NIL)) NIL) NIL NIL) (|heapsort_aux_psorts-2| |nil| 3652002993 ("" (SKOLEM 1 ("h" "_")) (("" (MEASURE-INDUCT+ "n" ("n")) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (HIDE -2 -3) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (TYPEPRED "x!1") (("2" (REPLACES -2) (("2" (EXPAND "is_p_heap") (("2" (INST -2 "0") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "ind_lc") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "left_child") (("2" (EXPAND "ind_lc") (("2" (EXPAND "finseq_appl") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "x!1 -1 ") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "heapsort_aux" -1) (("1" (PROP) (("1" (CASE "x!1 = 2") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "heapsort_aux") (("1" (EXPAND "sink") (("1" (PROP) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (REWRITE "heapsort_aux_length") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (REWRITE "heapsort_aux_length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|heapsort_aux_psorts-1| |nil| 3651943041 ("" (SKOLEM 1 ("h" "_")) (("" (MEASURE-INDUCT "n" "n") (("1" (SKEEP) (("1" (HIDE -1) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x") (("2" (REPLACES -2) (("2" (EXPAND "is_p_heap") (("2" (INST -2 0) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "left_child") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "ind_lc") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "left_child") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "ind_lc") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_p_heap") (("3" (INST -1 "x-1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (HIDE -1) (("2" (REWRITE "heapsort_aux_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (HIDE -1) (("3" (REWRITE "heapsort_aux_length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|heapsort_TCC1| 0 (|heapsort_TCC1-1| |nil| 3651167506 ("" (SKEEP) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "heapify_length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|heapify_length| FORMULA-DECL NIL |heapsort| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapsort| SUBTYPE "(number_fields.-)(length(heapsort.h), 1)" "below[length(heapify(h)(floor(length(h) / 2) - 1))]"))) (|heapsort_TCC2| 0 (|heapsort_TCC2-1| |nil| 3651926390 ("" (SUBTYPE-TCC) NIL NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)) NIL (|heapsort| SUBTYPE "(number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.h), 2)), 1)" "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(floor_ceil.floor(number_fields./(length(heapsort.h), 2)), 1))}"))) (|heapsort_works| 0 (|heapsort_works-8| "lkafsdj" 3797773873 ("" (AUTO-REWRITE "gt_def" "converse" "finseq_appl" "lt_def") (("" (SKEEP) (("" (TYPEPRED "leq") (("" (CASE "length(h) <= 2") (("1" (EXPAND "heapsort") (("1" (CASE "length(h) = 2") (("1" (ASSERT) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "heapsort_aux_psorts") (("2" (EXPAND "is_sorted?") (("2" (EXPAND "heapsort") (("2" (ASSERT) (("2" (LEMMA "heapify_heapifies") (("2" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (SKEEP) (("1" (EXPAND "heapsort_aux" 1) (("1" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (SPLIT -4) (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "heapsort_aux_length") (("1" (REWRITE "sink_length") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "heapsort_aux_length") (("2" (REWRITE "sink_length") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "is_heap_from_to") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("3" (PROP) (("3" (EXPAND "is_heap") (("3" (ASSERT) (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (HIDE 4) (("3" (INST -5 "k!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 3) (("4" (SKEEP) (("4" (TYPEPRED "i") (("4" (LEMMA "root_is_greatest_in_heap") (("4" (COPY -1) (("4" (INST?) (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (ASSERT) (("1" (REPLACE -1 1 RL :HIDE? T) (("1" (EXPAND "swap" 1 2) (("1" (ASSERT) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (ASSERT) (("1" (SKEEP) (("1" (REPLACE -1 1 RL :HIDE? T) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (REWRITE "sink_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (EXPAND "hh") (("2" (LEMMA "heapsort_aux_permutes") (("2" (INST?) (("1" (LEMMA "heapify_permutes") (("1" (INST?) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -3 "h" "heapify(h)(floor(length(h) / 2) - 1)" "heapsort_aux(heapify(h)(floor(length(h) / 2) - 1))
                                                                                   (length(h) - 1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "hh") (("2" (REWRITE "heapify_length") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|ind_rc| CONST-DECL "nat" |sorting_seq| NIL) (|both_childs| CONST-DECL "bool" |sorting_seq| NIL) (|right_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_lc| CONST-DECL "nat" |sorting_seq| NIL) (|left_child| CONST-DECL "T" |sorting_seq| NIL) (|ind_gc| CONST-DECL "nat" |sorting_seq| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|sink| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|heapify| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|swap| CONST-DECL "finite_sequence[T]" |sorting_seq| NIL) (|heapsort_aux| DEF-DECL "finite_sequence[T]" |heapsort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting_seq| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|occurrences| DEF-DECL "nat" |sorting_seq| NIL) (|permutations| CONST-DECL "bool" |sorting_seq| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|heapsort| CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|h| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL) (|k| SKOLEM-CONST-DECL "below[length(heapsort(h))]" |heapsort| NIL) (|is_heap| CONST-DECL "bool" |sorting_seq| NIL) (|is_p_heap| CONST-DECL "bool" |sorting_seq| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|is_parent| CONST-DECL "bool" |sorting_seq| NIL) (|one_child| CONST-DECL "bool" |sorting_seq| NIL) (|psorted| CONST-DECL "bool" |sorting_seq| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|is_heap_from_to| FORMULA-DECL NIL |heapsort| NIL) (|dichotomous_converse| APPLICATION-JUDGEMENT "(dichotomous?[T])" |relation_converse_props| NIL) (|preorder_converse| APPLICATION-JUDGEMENT "(preorder?[T])" |relation_converse_props| NIL) (|k!1| SKOLEM-CONST-DECL "below[length(swap(hh)(0, length(h) - 1)) - 1]" |heapsort| NIL) (|root_is_greatest_in_heap| FORMULA-DECL NIL |sorting_seq| NIL) (|sink_stable| FORMULA-DECL NIL |heapsort| NIL) (|i| SKOLEM-CONST-DECL "below[length(h) - 1]" |heapsort| NIL) (|sink_in_stable| FORMULA-DECL NIL |heapsort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sink_length| FORMULA-DECL NIL |heapsort| NIL) (|hh| SKOLEM-CONST-DECL "finite_sequence[T]" |heapsort| NIL) (|permutations_equiv| FORMULA-DECL NIL |sorting_seq| NIL) (|heapify_permutes| FORMULA-DECL NIL |heapsort| NIL) (|heapsort_aux_permutes| FORMULA-DECL NIL |heapsort| NIL) (|heapsort_aux_length| FORMULA-DECL NIL |heapsort| NIL) (|heapify_length| FORMULA-DECL NIL |heapsort| NIL) (|heapify_heapifies| FORMULA-DECL NIL |heapsort| NIL) (|heapsort_aux_psorts| FORMULA-DECL NIL |heapsort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |heapsort| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |heapsort| NIL)) NIL) (|heapsort_works-7| "lkafsdj" 3797690535 ("" (AUTO-REWRITE "gt_def" "converse" "finseq_appl" "lt_def") (("" (SKEEP) (("" (TYPEPRED "<=") (("" (CASE "length(h) <= 2") (("1" (EXPAND "heapsort") (("1" (CASE "length(h) = 2") (("1" (ASSERT) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "heapsort_aux_psorts") (("2" (EXPAND "is_sorted?") (("2" (EXPAND "heapsort") (("2" (ASSERT) (("2" (LEMMA "heapify_heapifies") (("2" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (SKEEP) (("1" (EXPAND "heapsort_aux" 1) (("1" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (SPLIT -4) (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "heapsort_aux_length") (("1" (REWRITE "sink_length") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "heapsort_aux_length") (("2" (REWRITE "sink_length") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "is_heap_from_to") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("3" (PROP) (("3" (EXPAND "is_heap") (("3" (ASSERT) (("3" (EXPAND "is_p_heap") (("3" (SKEEP) (("3" (EXPAND "finseq_appl") (("3" (HIDE 4) (("3" (INST -5 "k!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 3) (("4" (SKEEP) (("4" (TYPEPRED "i") (("4" (LEMMA "root_is_greatest_in_heap") (("4" (COPY -1) (("4" (INST?) (("4" (HIDE 2) (("4" (LEMMA "sink_stable") (("4" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (ASSERT) (("1" (REPLACE -1 1 RL :HIDE? T) (("1" (EXPAND "swap" 1 2) (("1" (ASSERT) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (ASSERT) (("1" (SKEEP) (("1" (REPLACE -1 1 RL :HIDE? T) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (REWRITE "sink_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (EXPAND "hh") (("2" (LEMMA "heapsort_aux_permutes") (("2" (INST?) (("1" (LEMMA "heapify_permutes") (("1" (INST?) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -3 "h" "heapify(h)(floor(length(h) / 2) - 1)" "heapsort_aux(heapify(h)(floor(length(h) / 2) - 1))
                                                                   (length(h) - 1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "hh") (("2" (REWRITE "heapify_length") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|heapsort_works-6| "lkafsdj" 3652200120 ("" (SKEEP) (("" (CASE "length(h) <= 2") (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1) (("2" (SPLIT) (("1" (LEMMA "heapsort_aux_psorts") (("1" (EXPAND "sorted") (("1" (FLATTEN) (("1" (EXPAND "heapsort") (("1" (LEMMA "heapify_heapifies") (("1" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE -2 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -4 (2 7)) (("1" (SPLIT) (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("2" (PROP) (("2" (HIDE 2 4) (("2" (EXPAND "is_heap") (("2" (ASSERT) (("2" (EXPAND "is_p_heap") (("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (INST -5 "k") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (LEMMA "root_is_greatest_in_heap") (("3" (COPY -1) (("3" (INST?) (("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -1) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "hh") (("2" (REVEAL 1) (("2" (REWRITE "heapify_length") NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (REVEAL 1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "heapsort") (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "heapsort_aux_permutes") (("1" (INST?) (("1" (LEMMA "heapify_permutes") (("1" (INST?) (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -3 "h" "heapify(h)(floor(length(h) / 2) - 1)" "heapsort_aux(heapify(h)(floor(length(h) / 2) - 1))
                                           (length(h) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-5 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|heapsort_works-5| "lkafsdj" 3652199182 ("" (SKEEP) (("" (CASE "length(h) <= 3") (("1" (GRIND) NIL) ("2" (HIDE 1) (("2" (SPLIT) (("1" (LEMMA "heapsort_aux_psorts") (("1" (EXPAND "sorted") (("1" (FLATTEN) (("1" (EXPAND "heapsort") (("1" (LEMMA "heapify_heapifies") (("1" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (ASSERT) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE -2 -5 2) (("2" (GRIND) NIL))))))) ("3" (HIDE 4) (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -4 (2 7)) (("1" (SPLIT) (("1" (HIDE 3) (("1" (GRIND) NIL))) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("1" (PROP) (("1" (HIDE 2 4) (("1" (EXPAND "is_heap") (("1" (ASSERT) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (INST -5 "k") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (HIDE 3 4) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL))))))))))))))))))) ("2" (HIDE 2 4) (("2" (GRIND) NIL))))))) ("3" (HIDE 3) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (LEMMA "root_is_greatest_in_heap") (("3" (COPY -1) (("3" (INST?) (("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -1) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL))))))))))))) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL))))))))))))))))))) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("2" (REWRITE "sink_length") (("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL))))))))))))))))) ("2" (HIDE - 3) (("2" (GRIND) NIL))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "hh") (("2" (EXPAND "heapify") (("2" (LIFT-IF) (("2" (PROP) (("1" (REWRITE "heapify_length") (("1" (REWRITE "sink_length") NIL) ("2" (REWRITE "sink_length") (("2" (ASSERT) NIL))))) ("2" (REVEAL 3) (("2" (HIDE 3) (("2" (TYPEPRED "floor(length(h) / 2)") (("2" (GRIND) (("2" (GRIND) (("2" (POSTPONE) NIL))))))))))))))))))))))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL))))))))))))) ("2" (POSTPONE) NIL)))))))) NIL) NIL NIL) (|heapsort_works-4| "lkafsdj" 3652198983 ("" (SKEEP) (("" (CASE "length(h) <= 2") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (SPLIT) (("1" (LEMMA "heapsort_aux_psorts") (("1" (EXPAND "sorted") (("1" (FLATTEN) (("1" (EXPAND "heapsort") (("1" (LEMMA "heapify_heapifies") (("1" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE -2 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -4 (2 7)) (("1" (SPLIT) (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("1" (PROP) (("1" (HIDE 2 4) (("1" (EXPAND "is_heap") (("1" (ASSERT) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (INST -5 "k") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (LEMMA "root_is_greatest_in_heap") (("3" (COPY -1) (("3" (INST?) (("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -1) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "hh") (("2" (EXPAND "heapify") (("2" (LIFT-IF) (("2" (PROP) (("1" (REWRITE "heapify_length") (("1" (REWRITE "sink_length") NIL NIL) ("2" (REWRITE "sink_length") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL 3) (("2" (HIDE 3) (("2" (TYPEPRED "floor(length(h) / 2)") (("2" (GRIND) (("2" (GRIND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|heapsort_works-3| "lkafsdj" 3652197522 ("" (SKEEP) (("" (CASE "length(h) < 2") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (SPLIT) (("1" (LEMMA "heapsort_aux_psorts") (("1" (EXPAND "sorted") (("1" (FLATTEN) (("1" (EXPAND "heapsort") (("1" (LEMMA "heapify_heapifies") (("1" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE -2 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -4 (2 7)) (("1" (SPLIT) (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("1" (PROP) (("1" (HIDE 2 4) (("1" (EXPAND "is_heap") (("1" (ASSERT) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (INST -5 "k") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (LEMMA "root_is_greatest_in_heap") (("3" (COPY -1) (("3" (INST?) (("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -1) (("1" (INST -1 "length(h) -1") (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (TYPEPRED "l") (("1" (INST -5 "hh" "l") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sink_length") (("2" (EXPAND "swap" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "hh") (("2" (EXPAND "heapify") (("2" (LIFT-IF) (("2" (PROP) (("1" (REWRITE "heapify_length") (("1" (REWRITE "sink_length") NIL NIL) ("2" (REWRITE "sink_length") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL 3) (("2" (HIDE 3) (("2" (TYPEPRED "floor(length(h) / 2)") (("2" (GRIND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|heapsort_works-2| "lkafsdj" 3651917826 ("" (SKEEP) (("" (SPLIT) (("1" (LEMMA "heapsort_aux_psorts") (("1" (EXPAND "sorted") (("1" (FLATTEN) (("1" (EXPAND "heapsort") (("1" (LEMMA "heapify_heapifies") (("1" (INST?) (("1" (NAME-REPLACE "hh" "heapify(h)(floor(length(h) / 2) - 1)") (("1" (CASE "length(hh) = length(h)") (("1" (REWRITE "heapsort_aux_length") (("1" (PROP) (("1" (EXPAND "heapsort_aux" 1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE -2 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (INST -4 "sink(swap(hh)(0, length(h) - 1))(0, length(h) - 2)" "length(h) - 2") (("1" (ASSERT) (("1" (REWRITE "sink_length") (("1" (EXPAND "swap" -4 (2 7)) (("1" (SPLIT) (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "is_heap_from_to") (("2" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) -2") (("1" (PROP) (("1" (HIDE 2 4) (("1" (EXPAND "is_heap") (("1" (ASSERT) (("1" (EXPAND "is_p_heap") (("1" (SKEEP) (("1" (EXPAND "finseq_appl") (("1" (INST -5 "k") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3 4) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (LEMMA "root_is_greatest_in_heap") (("3" (INST?) (("3" (EXPAND "finseq_appl") (("3" (LEMMA "sink_stable") (("3" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "length(h) -1") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 1 RL) (("1" (EXPAND "swap" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -1) (("1" (LEMMA "sink_in_stable") (("1" (INST -1 "swap(hh)(0, length(h) - 1)" "0" "length(h) - 2" "i") (("1" (EXPAND "finseq_appl") (("1" (SKEEP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (TYPEPRED "l") (("1" (INST -4 "l") (("1" (EXPAND "swap" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (POSTPONE) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL NIL) (|klafdsj| "lkafsdj" 3651917609 ("" (SKEEP) (("" (EXPAND "heapsort") (("" (PROP) (("1" (EXPAND "sorted") (("1" (LEMMA "heapsort_aux_sorts") (("1" (LEMMA "heapsort_aux_length") (("1" (INST -1 "heapify(h)(floor(length(h) / 2) - 1)" "length(h) -1") (("1" (REPLACES -1) (("1" (INST -1 "heapify(h)(floor(length(h) / 2) - 1)" 0) (("1" (ASSERT) (("1" (LEMMA "heapify_length") (("1" (INST -1 "h" "floor(length(h) / 2) - 1") (("1" (REPLACES -1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|heapsort_works-1| |nil| 3651331127 ("" (SKEEP) (("" (EXPAND "heapsort") (("" (PROP) (("1" (EXPAND "sorted") (("1" (LEMMA "heapsort_aux_sorts") (("1" (LEMMA "heapsort_aux_length") (("1" (INST -1 "heapify(h)(floor(length(h) / 2) - 1)" "length(h) -1") (("1" (REPLACES -1) (("1" (INST -1 "heapify(h)(floor(length(h) / 2) - 1)" 0) (("1" (ASSERT) (("1" (LEMMA "heapify_length") (("1" (INST -1 "h" "floor(length(h) / 2) - 1") (("1" (REPLACES -1) (("1" (REWRITE "heapify_heapifies") (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "heapify_length") (("2" (INST -1 "h" "floor(length(h) / 2) - 1") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (LEMMA "heapsort_aux_permutes") (("1" (INST -1 "heapify(h)(floor(length(h) / 2) - 1)" "length(h)-1") (("1" (LEMMA "heapify_permutes") (("1" (INST -1 "h" "floor(length(h) / 2) - 1") (("1" (LEMMA "permutations_equiv") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "transitive?") (("1" (INST -1 "h" "heapify(h)(floor(length(h) / 2) - 1)" "heapsort_aux(heapify(h)(floor(length(h) / 2) - 1))(length(h) - 1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
