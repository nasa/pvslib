(|sorting_aux| (|elim_list_TCC1| 0 (|elim_list_TCC1-1| |nil| 3582282533 ("" (TCC)) NIL NIL (|elim_list| SUBTYPE "sorting_aux.l" "(list_adt[sorting_aux.T].cons?)"))) (|elim_list_TCC2| 0 (|elim_list_TCC2-1| |nil| 3582282533 ("" (TCC)) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|elim_list| SUBTYPE "list_adt[sorting_aux.T].cdr(sorting_aux.l)" "{l: list_adt[sorting_aux.T].list | (booleans.NOT)(list_adt[sorting_aux.T].null?(l))}"))) (|elim_list_TCC3| 0 (|elim_list_TCC3-1| |nil| 3582282533 ("" (TCC)) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|elim_list| SUBTYPE "sorting_aux.x" "{x: sorting_aux.T | list_props[sorting_aux.T].member(x, list_adt[sorting_aux.T].cdr(sorting_aux.l))}"))) (|elim_list_TCC4| 0 (|elim_list_TCC4-1| |nil| 3654356775 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL)) NIL (|elim_list| TERMINATION "sorting_aux.elim_list(list_adt[sorting_aux.T].cdr(sorting_aux.l), sorting_aux.x)" "NIL"))) (|elim_list_length_TCC1| 0 (|elim_list_length_TCC1-1| |nil| 3620640559 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL)) NIL (|elim_list_length| SUBTYPE "sorting_aux.l" "{l: list_adt[sorting_aux.T].list | (booleans.NOT)(list_adt[sorting_aux.T].null?(l))}"))) (|elim_list_length| 0 (|elim_list_length-2| "" 3804612450 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (CASE "null?(x!1)") (("1" (HIDE -2 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "elim_list" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 2) (("2" (ASSERT) (("2" (INST?) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "member" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE +) (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|elim_list| DEF-DECL "list[T]" |sorting_aux| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|elim_list_length-1| |nil| 3620640571 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (CASE "null?(x!1)") (("1" (HIDE -2 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "elim_list" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 2) (("2" (ASSERT) (("2" (INST?) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "member" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE +) (("3" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|preservation_contents_TCC1| 0 (|preservation_contents_TCC1-1| |nil| 3517307925 ("" (TCC)) NIL SHOSTAK (|preservation_contents| SUBTYPE "sorting_aux.l" "(list_adt[sorting_aux.T].cons?)"))) (|preservation_contents| 0 (|preservation_contents-1| |nil| 3517308006 ("" (SKEEP) (("" (SKEEP) (("" (INST -1 "k+1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|k| SKOLEM-CONST-DECL "below[length(cdr(l))]" |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|l| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l)}" |sorting_aux| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|nth_implies_member| 0 (|nth_implies_member-1| |nil| 3532265876 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("1" (CASE "null?(x!1)") (("1" (SKEEP) (("1" (HIDE -2 1) (("1" (EXPAND "nth") (("1" (TYPEPRED "k") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "k!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "member" 2) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE 3) (("1" (EXPAND "nth" -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "i!1" "k!1 - 1") (("1" (PROP) (("1" (EXPAND "nth" -2) (("1" (ASSERT) (("1" (EXPAND "member" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "k!1") (("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|k!1| SKOLEM-CONST-DECL "below[length(x!1)]" |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|member_implies_exists_nth| 0 (|member_implies_exists_nth-1| |nil| 3532297042 ("" (MEASURE-INDUCT+ "l`length" ("l")) (("1" (SKEEP) (("1" (EXPAND "member" -2) (("1" (CASE "i = car(x!1)") (("1" (INST 1 0) (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "i") (("1" (LEMMA "length_dec") (("1" (INST -1 "x!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST 2 "k!1 + 1") (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE +) (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (TYPEPRED "k") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l)}" |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|k!1| SKOLEM-CONST-DECL "below[length(cdr(x!1))]" |sorting_aux| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|nth_of_list_is_nth_append_list_TCC1| 0 (|nth_of_list_is_nth_append_list_TCC1-1| |nil| 3532297029 ("" (SKEEP :PREDS? T) (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|nth_of_list_is_nth_append_list| SUBTYPE "sorting_aux.k" "below[length[T](append[T](l1, l2))]"))) (|nth_of_list_is_nth_append_list| 0 (|nth_of_list_is_nth_append_list-1| |nil| 3532297584 ("" (MEASURE-INDUCT "l1`length" ("l1")) (("1" (SKEEP) (("1" (SKEEP) (("1" (CASE "null?(x)") (("1" (HIDE -2) (("1" (TYPEPRED "k") (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "k=0" :HIDE? T) (("1" (HIDE -) (("1" (EXPAND "nth" 2 1) (("1" (EXPAND "append") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x)") (("1" (EXPAND "list2finseq") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (INST -1 "l2" "k - 1") (("1" (EXPAND "nth" 3 1) (("1" (REPLACE -1 3) (("1" (EXPAND "append" 3 2) (("1" (EXPAND "nth" 3 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (EXPAND "list2finseq") (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP :PREDS? T) (("3" (EXPAND "list2finseq") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|k| SKOLEM-CONST-DECL "below[length(x)]" |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|nth_of_cons_TCC1| 0 (|nth_of_cons_TCC1-1| |nil| 3620472388 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|nth_of_cons| SUBTYPE "sorting_aux.x" "below[length[T](cons[T](k, l))]"))) (|nth_of_cons_TCC2| 0 (|nth_of_cons_TCC2-1| |nil| 3620472388 ("" (GRIND) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|nth_of_cons| SUBTYPE "sorting_aux.x" "below[length[T](cons[T](k, l))]"))) (|nth_of_cons_TCC3| 0 (|nth_of_cons_TCC3-1| |nil| 3620472388 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|nth_of_cons| SUBTYPE "(number_fields.-)(sorting_aux.x, 1)" "below[length[T](l)]"))) (|nth_of_cons| 0 (|nth_of_cons-1| |nil| 3620472389 ("" (SKEEP) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|nth_of_append_TCC1| 0 (|nth_of_append_TCC1-1| |nil| 3620462305 ("" (SKEEP) (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth_of_append| SUBTYPE "sorting_aux.i" "below[length[T](append[T](l1, l2))]"))) (|nth_of_append_TCC2| 0 (|nth_of_append_TCC2-1| |nil| 3620462305 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth_of_append| SUBTYPE "(number_fields.-)(sorting_aux.i, list_props[sorting_aux.T].length(sorting_aux.l1))" "below[length[T](l2)]"))) (|nth_of_append| 0 (|nth_of_append-1| |nil| 3620462306 ("" (MEASURE-INDUCT "l1`length" ("l1")) (("1" (SKEEP) (("1" (SKEEP) (("1" (CASE "null?(x)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "null?(l2)") (("1" (HIDE -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "nth_of_list_is_nth_append_list") (("1" (INST -1 "x" "l2" "i") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (HIDE -) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x)") (("1" (AUTO-REWRITE "list2finseq") (("1" (ASSERT) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "l2" "i - 1") (("1" (LEMMA "nth_of_list_is_nth_append_list") (("1" (INST -1 "x" "l2" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (INST -2 "l2" "i-1") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "append" 2) (("1" (LEMMA "nth_of_cons") (("1" (INST -1 "append(cdr(x),l2)" "car(x)" "i") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "length" 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|i| SKOLEM-CONST-DECL "below[length(l2) + length(x)]" |sorting_aux| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nth_of_cons| FORMULA-DECL NIL |sorting_aux| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|nth_of_list_is_nth_append_list| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|null_rev_null| 0 (|null_rev_null-1| |nil| 3518528061 ("" (GRIND) NIL NIL) ((|reverse| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|nth_member_TCC1| 0 (|nth_member_TCC1-1| |nil| 3532267079 ("" (TCC)) NIL NIL (|nth_member| SUBTYPE "sorting_aux.m" "below[length[T](l)]"))) (|nth_member| 0 (|nth_member-2| "" 3884901834 ("" (MEASURE-INDUCT+ "m" "m") (("" (SKOSIMP*) (("" (CASE "x!1=0") (("1" (HIDE -2) (("1" (TYPEPRED "l!1") (("1" (EXPAND "nth") (("1" (CASE "cons?(l!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" -2) (("2" (ASSERT) (("2" (INST -1 "x!1-1") (("2" (ASSERT) (("2" (INST -1 "cdr(l!1)" "k!1") (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (CASE "cons?(l!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "l!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l!1") (("2" (CASE "cons?(l!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|nth_member-1| |nil| 3518785192 ("" (MEASURE-INDUCT+ "m" "m") (("" (SKOSIMP*) (("" (CASE "x!1=0") (("1" (HIDE -2) (("1" (TYPEPRED "l!1") (("1" (REPLACE -3) (("1" (EXPAND "nth") (("1" (CASE "cons?(l!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" -2) (("2" (ASSERT) (("2" (INST -1 "x!1-1") (("2" (ASSERT) (("2" (INST -1 "cdr(l!1)" K!1) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (CASE "cons?(l!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "l!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l!1") (("2" (CASE "cons?(l!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|l!1| SKOLEM-CONST-DECL "{l: list[T] | x!1 < length(l)}" |sorting_aux| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "nat" |sorting_aux| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|car_rev_TCC1| 0 (|car_rev_TCC1-1| |nil| 3518961800 ("" (TCC)) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|car_rev| SUBTYPE "sorting_aux.l" "(list_adt[sorting_aux.T].cons?)"))) (|car_rev_TCC2| 0 (|car_rev_TCC2-1| |nil| 3518961800 ("" (SKEEP) (("" (TYPEPRED "l") (("" (LEMMA "length_reverse") (("" (INST -1 "cdr(l)") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL)) SHOSTAK (|car_rev| SUBTYPE "list_props[sorting_aux.T].reverse(list_adt[sorting_aux.T].cdr(sorting_aux.l))" "(list_adt[sorting_aux.T].cons?)"))) (|car_rev_TCC3| 0 (|car_rev_TCC3-1| |nil| 3518961800 ("" (SUBTYPE-TCC) (("" (HIDE -1) (("" (LEMMA "length_reverse") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK (|car_rev| SUBTYPE "list_props[sorting_aux.T].reverse(sorting_aux.l)" "(list_adt[sorting_aux.T].cons?)"))) (|car_rev| 0 (|car_rev-1| |nil| 3518961800 ("" (SKOLEM!) (("" (EXPAND "reverse" 1 2) (("" (CASE "null?(l!1)") (("1" (TYPEPRED "l!1") (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "append") (("2" (TYPEPRED "l!1") (("2" (CASE "null?(cdr(l!1))") (("1" (HIDE 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "null_rev_null") (("1" (INST -1 "reverse(cdr(l!1))") (("1" (LEMMA "reverse_reverse[T]") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|reverse| DEF-DECL "list[T]" |list_props| NIL) (|null_rev_null| FORMULA-DECL NIL |sorting_aux| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL)) SHOSTAK)) (|nth_rev_zero_TCC1| 0 (|nth_rev_zero_TCC1-1| |nil| 3518522428 ("" (TCC)) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|nth_rev_zero| SUBTYPE "0" "below[length[T](l)]"))) (|nth_rev_zero_TCC2| 0 (|nth_rev_zero_TCC2-1| |nil| 3518522428 ("" (SUBTYPE-TCC) (("1" (HIDE -1) (("1" (LEMMA "length_reverse") (("1" (INST -1 "l!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|nth_rev_zero| SUBTYPE "(number_fields.-)(list_props[sorting_aux.T].length(sorting_aux.l), 1)" "below[length[T](reverse[T](l))]"))) (|nth_rev_zero| 0 (|nth_rev_zero-1| |nil| 3518522429 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1) (("1" (CASE "length(x!1) - 1 = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "reverse") (("1" (CASE "null?(cdr(x!1))") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "reverse(cdr(reverse(x!1)))") (("1" (LEMMA "reverse_reverse") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "nth" -2 1) (("1" (LEMMA "length_reverse") (("1" (INST-CP -1 "x!1") (("1" (PROP) (("1" (INST -2 "cdr(reverse(x!1))") (("1" (LEMMA "car_rev") (("1" (INST -1 "reverse(x!1)") (("1" (LEMMA "reverse_reverse") (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -3) (("1" (EXPAND "length" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -4 -5 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(reverse(x!1))") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(cdr[T](reverse[T](x!1)))") (("1" (EXPAND "length" 1) (("1" (HIDE -2 -3 2) (("1" (CASE "length(x!1)=1") (("1" (GRIND) NIL NIL) ("2" (CASE "length(reverse(x!1))=1") (("1" (LEMMA "length_reverse") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(cdr(reverse(x!1)))=0") (("1" (EXPAND "length" 1) (("1" (TYPEPRED "x!1") (("1" (LEMMA "null_rev_null") (("1" (INST -1 "reverse(x!1)") (("1" (LEMMA "reverse_reverse") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "ma" "cdr[T](reverse[T](x!1))") (("2" (HIDE 2 3) (("2" (LEMMA "length_reverse") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "length_reverse") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "l!1") (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l)}" |sorting_aux| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car_rev| FORMULA-DECL NIL |sorting_aux| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|null_rev_null| FORMULA-DECL NIL |sorting_aux| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|nth_rev_last_TCC1| 0 (|nth_rev_last_TCC1-1| |nil| 3525021198 ("" (TCC)) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|nth_rev_last| SUBTYPE "(number_fields.-)(list_props[sorting_aux.T].length(sorting_aux.l), 1)" "below[length[T](l)]"))) (|nth_rev_last_TCC2| 0 (|nth_rev_last_TCC2-1| |nil| 3525021198 ("" (SUBTYPE-TCC) (("" (HIDE -) (("" (LEMMA "length_reverse") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK (|nth_rev_last| SUBTYPE "0" "below[length[T](reverse[T](l))]"))) (|nth_rev_last| 0 (|nth_rev_last-1| |nil| 3525021200 ("" (SKOSIMP*) (("" (LEMMA "nth_rev_zero") (("" (CASE "length(l!1) = 0") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "nth_rev_zero") (("2" (LEMMA "reverse_reverse") (("2" (INST -2 "reverse(l!1)") (("1" (INST -1 "l!1") (("1" (REPLACE -1 -2) (("1" (LEMMA "length_reverse") (("1" (INST -1 "l!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 2) (("2" (LEMMA "length_reverse") (("2" (INST -1 "l!1") (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth_rev_zero| FORMULA-DECL NIL |sorting_aux| NIL) (|l!1| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l)}" |sorting_aux| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|nth_append_TCC1| 0 (|nth_append_TCC1-1| |nil| 3519203110 ("" (SKEEP) (("" (LEMMA "length_append") (("" (INST -1 "l" "p") (("" (TYPEPRED "m") (("" (TYPEPRED "l" "p") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK (|nth_append| SUBTYPE "sorting_aux.m" "below[length[T](append[T](l, p))]"))) (|nth_append_TCC2| 0 (|nth_append_TCC2-1| |nil| 3655720139 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nth_append| SUBTYPE "sorting_aux.m" "below[length[T](l)]"))) (|nth_append| 0 (|nth_append-1| |nil| 3519203110 ("" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nth" 1) (("2" (INST -1 "cdr(l!1)" "p!1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "l!1") (("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "length_append") (("3" (INST?) (("3" (REPLACES -1) (("3" (TYPEPRED "m!2") (("3" (TYPEPRED "l!1" "p!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|l!1| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l) AND 1 + j!1 < length(l)}" |sorting_aux| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |sorting_aux| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|nth_rev_TCC1| 0 (|nth_rev_TCC1-1| |nil| 3518521656 ("" (SUBTYPE-TCC) (("" (HIDE -2) (("" (CASE "null?(l!1)") (("1" (PROPAX) NIL NIL) ("2" (LEMMA "length_reverse") (("2" (INST -1 "l!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|nth_rev| SUBTYPE "(number_fields.-)((number_fields.-)(list_props[sorting_aux.T].length(sorting_aux.l), 1), sorting_aux.m)" "below[length[T](reverse[T](l))]"))) (|nth_rev| 0 (|nth_rev-1| |nil| 3518521657 ("" (MEASURE-INDUCT+ "m" "m") (("1" (SKOLEM!) (("1" (CASE "x!1=0") (("1" (LEMMA "nth_rev_zero") (("1" (INST?) (("1" (HIDE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=length(l!1)-1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "nth_rev_zero") (("1" (INST -1 "reverse(l!1)") (("1" (LEMMA "reverse_reverse") (("1" (INST?) (("1" (LEMMA "length_reverse") (("1" (INST?) (("1" (HIDE -5) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l!1") (("2" (HIDE-ALL-BUT (-2 1)) (("2" (LEMMA "null_rev_null") (("2" (INST -1 "reverse(l!1)") (("2" (LEMMA "reverse_reverse") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 3) (("2" (ASSERT) (("2" (INST -1 "x!1-1") (("2" (ASSERT) (("2" (INST -1 "cdr(l!1)") (("1" (EXPAND "length" 3) (("1" (EXPAND "nth" -1 2) (("1" (EXPAND "length" 1) (("1" (ASSERT) (("1" (EXPAND "reverse" 3) (("1" (LEMMA "nth_append") (("1" (INST -1 "length(cdr(l!1)) -x!1" "reverse(cdr(l!1))" "cons(car(l!1),null)") (("1" (EXPAND "nth" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "length_reverse") (("2" (INST -1 "cdr(l!1)") (("2" (TYPEPRED "l!1") (("2" (HIDE -3 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "l!1") (("3" (HIDE -2 5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l!1") (("2" (HIDE 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l!1") (("2" (LEMMA "length_reverse") (("2" (INST?) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "length_reverse") (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|l!1| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l) AND x!1 < length(l)}" |sorting_aux| NIL) (|x!1| SKOLEM-CONST-DECL "nat" |sorting_aux| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|null_rev_null| FORMULA-DECL NIL |sorting_aux| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nth_append| FORMULA-DECL NIL |sorting_aux| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nth_rev_zero| FORMULA-DECL NIL |sorting_aux| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|occurrences_TCC1| 0 (|occurrences_TCC1-1| |nil| 3652111426 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|occurrences| SUBTYPE "sorting_aux.l" "(list_adt[sorting_aux.T].cons?)"))) (|occurrences_TCC2| 0 (|occurrences_TCC2-1| |nil| 3778233903 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|occurrences| TERMINATION "sorting_aux.occurrences(list_adt[sorting_aux.T].cdr(sorting_aux.l))" "NIL"))) (|occurrences_TCC3| 0 (|occurrences_TCC3-1| |nil| 3778233903 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|occurrences| TERMINATION "sorting_aux.occurrences(list_adt[sorting_aux.T].cdr(sorting_aux.l))" "NIL"))) (|occurrences_of_nth_element| 0 (|occurrences_of_nth_element-1| |nil| 3620571726 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (CASE "null?(cdr(x!1))") (("1" (HIDE -2) (("1" (GRIND) (("1" (TYPEPRED "i") (("1" (CASE "i=0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 3) (("2" (EXPAND "nth" 3) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "i-1") (("1" (PROP) (("1" (HIDE-ALL-BUT (1 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|i| SKOLEM-CONST-DECL "below[length(x!1)]" |sorting_aux| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|occurrences_of_app| 0 (|occurrences_of_app-1| |nil| 3558777610 ("" (MEASURE-INDUCT+ "length(l1)" ("l1")) (("" (SKEEP) (("" (EXPAND "occurrences" 1 2) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "cdr(x!1)") (("2" (INST -2 "l2" "x") (("2" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "append" 1 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "l2" "x") (("3" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|cons_of_perm_is_permutation| 0 (|cons_of_perm_is_permutation-1| |nil| 3558375026 ("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST -1 "x_1") (("" (EXPAND "occurrences" 1) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL)) SHOSTAK)) (|ocurrence_list_has_element| 0 (|ocurrence_list_has_element-1| |nil| 3556904709 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKOSIMP) (("" (EXPAND "occurrences" 1) (("" (LIFT-IF) (("" (PROP) (("1" (INST 3 0) (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x!2") (("2" (PROP) (("1" (SKOSIMP) (("1" (INST 4 "i!1+1") (("1" (REPLACE -1 4 RL) (("1" (HIDE -1 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2 3) (("2" (TYPEPRED "i!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|i!1| SKOLEM-CONST-DECL "below[length(cdr(x!1))]" |sorting_aux| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|no_occurrence_implies| 0 (|no_occurrence_implies-1| |nil| 3556906761 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (SKOSIMP) (("" (EXPAND "occurrences" -2) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (TYPEPRED "i!1") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -2 "cdr(x!1)") (("3" (INST -2 "x") (("3" (PROP) (("1" (CASE "i!1=0") (("1" (HIDE -2 -3) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -1 "i!1-1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 3) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|i!1| SKOLEM-CONST-DECL "below[length(x!1)]" |sorting_aux| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|member_implies_pos_occurrences| 0 (|member_implies_pos_occurrences-1| |nil| 3557217933 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (LEMMA "no_occurrence_implies") (("" (SKEEP) (("" (COPY -1) (("" (HIDE -1) (("" (INST -1 "x!1" "x") (("" (ASSERT) (("" (EXPAND "member" -3) (("" (CASE "null?(x!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "occurrences" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -3 "cdr(x!1)") (("4" (INST -3 "x") (("4" (PROP) (("4" (HIDE-ALL-BUT (1 4)) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|no_occurrence_implies| FORMULA-DECL NIL |sorting_aux| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|occurrences_implies_member| 0 (|occurrences_implies_member-1| |nil| 3620566562 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (EXPAND "member" 1) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (EXPAND "occurrences" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|permutations_preserve_contents| 0 (|permutations_preserve_contents-1| |nil| 3556900259 ("" (SKOSIMP) (("" (EXPAND "permutations") (("" (TYPEPRED "i!1") (("" (INST -2 "nth(l1!1, i!1)") (("" (LEMMA "ocurrence_list_has_element") (("" (INST -1 "l2!1" "nth(l1!1, i!1)") (("" (PROP) (("" (LEMMA "member_implies_pos_occurrences") (("" (INST -1 "l1!1" "nth(l1!1, i!1)") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "nth_implies_member") (("2" (INST -1 "l1!1" "nth(l1!1, i!1)" I!1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|member_implies_pos_occurrences| FORMULA-DECL NIL |sorting_aux| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth_implies_member| FORMULA-DECL NIL |sorting_aux| NIL) (|ocurrence_list_has_element| FORMULA-DECL NIL |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|permutations_is_commutative| 0 (|permutations_is_commutative-1| |nil| 3556822643 ("" (SKEEP) (("" (PROP) (("1" (EXPAND "permutations") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "permutations") (("2" (SKEEP) (("2" (INST -1 "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL)) SHOSTAK)) (|permutations_is_transitive| 0 (|permutations_is_transitive-1| |nil| 3556895251 ("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST -1 "x") (("" (INST -2 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL)) SHOSTAK)) (|cons_elim_is_permutation| 0 (|cons_elim_is_permutation-2| "" 3804612651 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (EXPAND "elim_list" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -) (("1" (CASE "x!1 = cons(car(x!1), cdr(x!1))") (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (LEMMA "cons_of_perm_is_permutation") (("1" (INST -1 "cons(x, elim_list(cdr(x!1), x))" "cdr(x!1)" "car(x!1)") (("1" (ASSERT) (("1" (CASE "permutations(cons(x, cons(car(x!1), elim_list(cdr(x!1), x))), cons(car(x!1), cons(x, elim_list(cdr(x!1), x))))") (("1" (CASE "  cons(car(x!1), cdr(x!1)) = x!1") (("1" (REPLACE -1) (("1" (PROP) (("1" (REWRITE "permutations_is_commutative") (("1" (REWRITE "permutations_is_commutative" -3) (("1" (HIDE -2 -4 -5 1) (("1" (LEMMA "permutations_is_transitive") (("1" (INST -1 "x!1" "cons(car(x!1), cons(x, elim_list(cdr(x!1), x)))" "cons(x, cons(car(x!1), elim_list(cdr(x!1), x)))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "permutations_is_commutative" -3) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "nnn" "elim_list(cdr(x!1), x)") (("2" (HIDE -1 -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) (("2" (EXPAND "member" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (EXPAND "member") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE +) (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| NIL) (|permutations_is_transitive| FORMULA-DECL NIL |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons_of_perm_is_permutation| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|elim_list| DEF-DECL "list[T]" |sorting_aux| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|cons_elim_is_permutation-1| |nil| 3620638024 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (EXPAND "elim_list" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -) (("1" (CASE "x!1 = cons(car(x!1), cdr(x!1))") (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (LEMMA "cons_of_perm_is_permutation") (("1" (INST -1 "cons(x, elim_list(cdr(x!1), x))" "cdr(x!1)" "car(x!1)") (("1" (ASSERT) (("1" (CASE "permutations(cons(x, cons(car(x!1), elim_list(cdr(x!1), x))), cons(car(x!1), cons(x, elim_list(cdr(x!1), x))))") (("1" (CASE "  cons(car(x!1), cdr(x!1)) = x!1") (("1" (REPLACE -1) (("1" (PROP) (("1" (REWRITE "permutations_is_commutative") (("1" (REWRITE "permutations_is_commutative" -3) (("1" (HIDE -2 -4 -5 1) (("1" (LEMMA "permutations_is_transitive") (("1" (INST -1 "x!1" "cons(car(x!1), cons(x, elim_list(cdr(x!1), x)))" "cons(x, cons(car(x!1), elim_list(cdr(x!1), x)))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "permutations_is_commutative" -3) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "nnn" "elim_list(cdr(x!1), x)") (("2" (HIDE -1 -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) (("2" (EXPAND "member" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (EXPAND "member") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE +) (("3" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|same_occurrences_same_length| 0 (|same_occurrences_same_length-1| |nil| 3620636365 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (MEASURE-INDUCT+ "length(l)" "l") (("" (CASE "null?(x!1)") (("1" (HIDE -2 -4) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) (("1" (EXPAND "length" 1) (("1" (ASSERT) (("1" (INST -2 "car(x!2)") (("1" (EXPAND "occurrences" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 2 2) (("2" (ASSERT) (("2" (LEMMA "ocurrence_list_has_element") (("2" (INST -1 "x!2" "car(x!1)") (("2" (PROP) (("1" (SKEEP) (("1" (LEMMA "cons_elim_is_permutation") (("1" (HIDE -3) (("1" (INST?) (("1" (INST -1 "car(x!1)") (("1" (PROP) (("1" (EXPAND "permutations" -1) (("1" (INST -4 "cdr(x!1)") (("1" (INST -4 "elim_list(x!2, car(x!1))") (("1" (PROP) (("1" (HIDE -2 -4) (("1" (LEMMA "elim_list_length") (("1" (LEMMA "nth_implies_member") (("1" (INST -1 "x!2" "car(x!1)" "i") (("1" (ASSERT) (("1" (INST -2 "car(x!1)" "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -1 "x") (("2" (INST -3 "x") (("2" (REPLACES -1) (("2" (EXPAND "occurrences" -2) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3) (("2" (LEMMA "nth_implies_member") (("2" (INST?) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2) (("3" (INST -3 "car(x!1)") (("3" (HIDE -2 2) (("3" (EXPAND "occurrences") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "nth_implies_member") (("2" (INST?) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i") (("2" (HIDE -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4) (("2" (INST -2 "car(x!1)") (("2" (EXPAND "occurrences" -2 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ocurrence_list_has_element| FORMULA-DECL NIL |sorting_aux| NIL) (|cons_elim_is_permutation| FORMULA-DECL NIL |sorting_aux| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|elim_list_length| FORMULA-DECL NIL |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth_implies_member| FORMULA-DECL NIL |sorting_aux| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|elim_list| DEF-DECL "list[T]" |sorting_aux| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|permutations_is_ext_reflexive_TCC1| 0 (|permutations_is_ext_reflexive_TCC1-1| |nil| 3639231787 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|permutations_is_ext_reflexive| SUBTYPE "sorting_aux.i" "below[length[T](l1)]"))) (|permutations_is_ext_reflexive| 0 (|permutations_is_ext_reflexive-1| |nil| 3639231947 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "occurrences" 1) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -3 -4) (("1" (TYPEPRED "l1" "x!1") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "l1" "x!1") (("2" (HIDE -3 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -3 -4) (("3" (GRIND) (("3" (TYPEPRED "l1" "x!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "cdr(x!1)") (("4" (INST -3 "cdr(l1)") (("1" (PROP) (("1" (INST -1 "x") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "nth" -3) (("2" (INST -3 "i + 1") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (HIDE-ALL-BUT (-1 1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "l1") (("2" (HIDE -4 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2) (("5" (INST -2 0) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("6" (TYPEPRED "l1") (("6" (HIDE -3 -4) (("6" (GRIND) NIL NIL)) NIL)) NIL) ("7" (HIDE -2) (("7" (INST -2 0) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("8" (INST -1 "cdr(x!1)") (("8" (INST -1 "cdr(l1)") (("1" (PROP) (("1" (INST -1 "x") NIL NIL) ("2" (HIDE 3) (("2" (SKEEP) (("2" (INST -1 "i+1") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 6)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "l1" "x!1") (("2" (HIDE-ALL-BUT (-1 1 4 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|l1| SKOLEM-CONST-DECL "{l1: list[T] | length(l1) = length(x!1)}" |sorting_aux| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "below[length(cdr(x!1))]" |sorting_aux| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|i| SKOLEM-CONST-DECL "below[length(cdr(x!1))]" |sorting_aux| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|suffix_TCC1| 0 (|suffix_TCC1-1| |nil| 3639212212 ("" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|suffix| SUBTYPE "sorting_aux.l" "(list_adt[sorting_aux.T].cons?)"))) (|suffix_TCC2| 0 (|suffix_TCC2-1| |nil| 3639212212 ("" (SUBTYPE-TCC) (("" (GRIND) (("" (EXPAND "length") (("" (LIFT-IF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|suffix| SUBTYPE "(number_fields.-)(sorting_aux.n, 1)" "below[1 + length[T](cdr[T](l))]"))) (|suffix_TCC3| 0 (|suffix_TCC3-1| |nil| 3639212212 ("" (TERMINATION-TCC) (("" (GRIND) (("" (EXPAND "length" 2 2) (("" (LIFT-IF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|suffix| TERMINATION "sorting_aux.suffix(list_adt[sorting_aux.T].cdr(sorting_aux.l), (number_fields.-)(sorting_aux.n, 1))" "NIL"))) (|app_prefix_suffix| 0 (|app_prefix_suffix-1| |nil| 3639212631 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (SKEEP) (("" (EXPAND "prefix" 1) (("" (LIFT-IF) (("" (PROP) (("1" (REPLACE -1) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "suffix" 2) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "append" 2) (("2" (INST? -1) (("2" (PROP) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) (("2" (EXPAND "length" 1 2) (("2" (GRIND) (("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|length_suffix| 0 (|length_suffix-1| |nil| 3639217290 ("" (MEASURE-INDUCT+ "n" ("l" "n")) (("" (EXPAND "suffix" 1) (("" (LIFT-IF) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST? -1) (("1" (PROP) (("1" (REPLACE -1 2) (("1" (HIDE -) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "x!2") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|x!2| SKOLEM-CONST-DECL "below[1 + length(x!1)]" |sorting_aux| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|length_prefix| 0 (|length_prefix-1| |nil| 3639217549 ("" (MEASURE-INDUCT+ "n" ("l" "n")) (("" (EXPAND "prefix" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "length" 2) (("2" (INST? -1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "below[1 + length(x!1)]" |sorting_aux| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|contents_suffix_TCC1| 0 (|contents_suffix_TCC1-1| |nil| 3639217934 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|contents_suffix| SUBTYPE "(number_fields.-)(list_props[sorting_aux.T].length(sorting_aux.l), sorting_aux.n)" "nat"))) (|contents_suffix_TCC2| 0 (|contents_suffix_TCC2-1| |nil| 3639219203 ("" (SUBTYPE-TCC) (("" (REWRITE "length_suffix") NIL NIL)) NIL) ((|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|contents_suffix| SUBTYPE "sorting_aux.i" "below[length[T](suffix(l, n))]"))) (|contents_suffix_TCC3| 0 (|contents_suffix_TCC3-1| |nil| 3639219203 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|contents_suffix| SUBTYPE "(number_fields.+)(sorting_aux.i, sorting_aux.n)" "below[length[T](l)]"))) (|contents_suffix| 0 (|contents_suffix-1| |nil| 3639220160 ("" (WITH-TCCS (MEASURE-INDUCT+ "n" ("l" "n"))) (("1" (SKEEP) (("1" (TYPEPRED "x!2" "i") (("1" (EXPAND "suffix" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "nth" 2 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -3 "cdr(x!1)" "x!2 - 1") (("1" (INST -3 "i") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 3) (("2" (GRIND) (("2" (EXPAND "length" -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_suffix") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (REWRITE "length_suffix") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (REWRITE "length_suffix") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (REWRITE "length_suffix") (("5" (ASSERT) NIL NIL)) NIL) ("6" (REWRITE "length_suffix") (("6" (ASSERT) NIL NIL)) NIL) ("7" (REWRITE "length_suffix") (("7" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_suffix| FORMULA-DECL NIL |sorting_aux| NIL) (|x!2| SKOLEM-CONST-DECL "below[1 + length(x!1)]" |sorting_aux| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_aux| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i| SKOLEM-CONST-DECL "below[length(x!1) - x!2]" |sorting_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|suffix| DEF-DECL "list[T]" |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|contents_prefix_TCC1| 0 (|contents_prefix_TCC1-1| |nil| 3639219203 ("" (SUBTYPE-TCC) (("" (REWRITE "length_prefix") NIL NIL)) NIL) ((|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|contents_prefix| SUBTYPE "sorting_aux.i" "below[length[T](prefix(l, n))]"))) (|contents_prefix_TCC2| 0 (|contents_prefix_TCC2-1| |nil| 3639219203 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|contents_prefix| SUBTYPE "sorting_aux.i" "below[length[T](l)]"))) (|contents_prefix| 0 (|contents_prefix-2| "" 3804612779 ("" (WITH-TCCS (MEASURE-INDUCT+ "n" ("l" "n"))) (("1" (TYPEPRED "x!2") (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (EXPAND "prefix" 1) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST? -3) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_prefix") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (REWRITE "length_prefix") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (SKEEP :PREDS? T) (("5" (REWRITE "length_prefix") NIL NIL)) NIL) ("6" (REWRITE "length_prefix") (("6" (TYPEPRED "x!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (SKEEP :PREDS? T) (("7" (REWRITE "length_prefix") NIL NIL)) NIL) ("8" (REWRITE "length_prefix") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_prefix| FORMULA-DECL NIL |sorting_aux| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|prefix| DEF-DECL "list[T]" |sorting_aux| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK) (|contents_prefix-1| |nil| 3639217936 ("" (WITH-TCCS (MEASURE-INDUCT+ "n" ("l" "n"))) (("1" (TYPEPRED "x!2") (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (EXPAND "prefix" 1) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST? -3) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_prefix") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (REWRITE "length_prefix") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "i1") (("4" (TYPEPRED "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "x!1`2") (("5" (ASSERT) NIL NIL)) NIL) ("6" (REWRITE "length_prefix") (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP :PREDS? T) (("7" (REWRITE "length_prefix") NIL NIL)) NIL) ("8" (TYPEPRED "x!1`2") (("8" (TYPEPRED "i!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (REWRITE "length_prefix") (("9" (TYPEPRED "x!1`2") (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (SKEEP :PREDS? T) (("10" (TYPEPRED "y!1`2") (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (SKEEP :PREDS? T) (("11" (REWRITE "length_prefix") NIL NIL)) NIL) ("12" (ASSERT) (("12" (REWRITE "length_prefix") (("12" (TYPEPRED "n!1") (("12" (TYPEPRED "i!1") (("12" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|permutations_of_appends| 0 (|permutations_of_appends-1| |nil| 3639213348 ("" (SKEEP) (("" (EXPAND "permutations" -) (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST?) (("" (INST?) (("" (REWRITE "occurrences_of_app") (("" (REWRITE "occurrences_of_app") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL)) SHOSTAK)) (|permutations_of_app_suff| 0 (|permutations_of_app_suff-1| |nil| 3639213831 ("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST?) (("" (INST?) (("" (ASSERT) (("" (REWRITE "occurrences_of_app") (("" (REWRITE "occurrences_of_app") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK)) (|permutations_of_app_pref| 0 (|permutations_of_app_pref-1| |nil| 3639216066 ("" (SKEEP) (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST?) (("" (INST?) (("" (REWRITE "occurrences_of_app") (("" (REWRITE "occurrences_of_app") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (T FORMAL-TYPE-DECL NIL |sorting_aux| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)))
