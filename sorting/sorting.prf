(|sorting| (|lt_le| 0 (|lt_le-1| |nil| 3797719502 ("" (SKEEP) (("" (EXPAND "lt") (("" (TYPEPRED "leq") (("" (EXPAND "total_preorder?") (("" (FLATTEN) (("" (EXPAND "dichotomous?") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt| CONST-DECL "bool" |sorting| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|gt_not_le| 0 (|gt_not_le-1| |nil| 3797719594 ("" (SKEEP) (("" (EXPAND "gt") (("" (EXPAND "converse") (("" (EXPAND "lt") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL)) SHOSTAK)) (|search_TCC1| 0 (|search_TCC1-1| |nil| 3517307925 ("" (TCC)) NIL SHOSTAK (|search| SUBTYPE "sorting.l" "(list_adt[sorting.T].cons?)"))) (|search_TCC2| 0 (|search_TCC2-1| |nil| 3517307925 ("" (TCC)) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK (|search| TERMINATION "sorting.search(sorting.i, list_adt[sorting.T].cdr(sorting.l))" "NIL"))) (|not_in_l_gives_lenght_l| 0 (|not_in_l_gives_lenght_l-1| |nil| 3778236903 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (CASE "car(x!1)=i") (("1" (INST -3 0) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "search" 3) (("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "i") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 3) (("2" (PROP) (("1" (SKEEP) (("1" (LEMMA "preservation_contents") (("1" (INST -1 "x!1" "i") (("1" (PROP) (("1" (INST -1 "k") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (SKEEP :PREDS? T) (("2" (INST?) (("2" (EXPAND "list2finseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "k!1") (("3" (EXPAND "list2finseq") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|preservation_contents| FORMULA-DECL NIL |sorting_aux| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|not_member_gives_length| 0 (|not_member_gives_length-1| |nil| 3532265028 ("" (LEMMA "not_in_l_gives_lenght_l") (("" (SKEEP) (("" (INST -1 "l" "i") (("" (PROP) (("" (HIDE 3) (("" (SKEEP) (("" (LEMMA "nth_implies_member") (("" (INST -1 "l" "i" "k") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth_implies_member| FORMULA-DECL NIL |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|not_in_l_gives_lenght_l| FORMULA-DECL NIL |sorting| NIL)) SHOSTAK)) (|search_works_TCC1| 0 (|search_works_TCC1-1| |nil| 3517307926 ("" (MEASURE-INDUCT "length(l)" "l") (("" (SKEEP) (("" (SKEEP) (("" (CASE "null?(x)") (("1" (GRIND) NIL NIL) ("2" (CASE "car(x)=k") (("1" (EXPAND "search" 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "search" 3) (("2" (ASSERT) (("2" (INST -1 "cdr(x)") (("2" (PROP) (("1" (INST -1 "k") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK (|search_works| SUBTYPE "sorting.search(sorting.k, sorting.l)" "below[length[T](l)]"))) (|search_works| 0 (|search_works-2| "" 3804612396 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "search" 2) (("2" (ASSERT) (("2" (CASE "car(x!1)=k") (("1" (ASSERT) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "k") (("2" (PROP) (("1" (EXPAND "member" -2) (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "search_works_TCC1") NIL NIL) ("3" (HIDE 2) (("3" (REWRITE "search_works_TCC1") NIL NIL)) NIL)) NIL) ((|search_works_TCC1| SUBTYPE-TCC NIL |sorting| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|search_works-1| |nil| 3517564787 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (SKEEP) (("1" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "search" 2) (("2" (ASSERT) (("2" (CASE "car(x!1)=k") (("1" (ASSERT) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "k") (("2" (PROP) (("1" (EXPAND "member" -2) (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (REWRITE "search_works_TCC1") NIL NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE "search_works_TCC1") NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|search_min_index| 0 (|search_min_index-1| |nil| 3518184887 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "search" 1) (("1" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (CASE "car(x!1) = k!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "k!1") (("2" (PROP) (("1" (INST -1 "m!1 - 1") (("1" (EXPAND "nth" -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "m!1") (("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "m!1") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "m!1") (("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|m!1| SKOLEM-CONST-DECL "below[length(x!1)]" |sorting| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|search_in_rev_max_index| 0 (|search_in_rev_max_index-1| |nil| 3519243847 ("" (LEMMA "search_min_index") (("" (SKOSIMP*) (("" (LEMMA "nth_rev") (("" (INST -1 "m!1" "l!1") (("1" (INST -2 "reverse(l!1)" "k!1" "length(l!1) - 1 - m!1") (("1" (GRIND) NIL NIL) ("2" (LEMMA "length_reverse") (("2" (INST -1 "l!1") (("2" (TYPEPRED "m!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "m!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|l!1| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|nth_rev| FORMULA-DECL NIL |sorting_aux| NIL) (|search_min_index| FORMULA-DECL NIL |sorting| NIL)) SHOSTAK)) (|search_in_append_of_lists_key_in_the_first| 0 (|search_in_append_of_lists_key_in_the_first-1| |nil| 3531728399 ("" (MEASURE-INDUCT+ "l1`length" ("l1")) (("" (SKEEP) (("" (CASE "null?(x!1)") (("1" (HIDE -2 1) (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "search" 2 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (CASE "null?(append(x!1,l2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "search" 1) (("1" (CASE "car(x!1) = k") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr(append(x!1, l2)) = append(cdr(x!1), l2)") (("1" (REPLACE -1 2) (("1" (INST -2 "cdr(x!1)") (("1" (INST -2 "l2" "k") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "member" -3) (("1" (CASE "k = car(x!1)") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1 4)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -2 2) (("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "search" 3 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|search_in_append_of_lists_key_not_member_of_the_first| 0 (|search_in_append_of_lists_key_not_member_of_the_first-1| |nil| 3532272614 ("" (MEASURE-INDUCT+ "length(l1)" ("l1")) (("" (SKEEP) (("" (CASE "null?(x!1)") (("1" (EXPAND "search" 2 1) (("1" (CASE "null?(append(x!1, l2))") (("1" (ASSERT) (("1" (EXPAND "length" 2) (("1" (EXPAND "append" -1) (("1" (EXPAND "search" 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "append" 3 1) (("2" (EXPAND "append" 3 1) (("2" (EXPAND "length" 3) (("2" (EXPAND "search" 3 2) (("2" (EXPAND "append" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 3) (("2" (ASSERT) (("2" (EXPAND "search" 3 1) (("2" (ASSERT) (("2" (CASE "car(x!1) = k") (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "l2" "k") (("2" (PROP) (("1" (EXPAND "member" 3) (("1" (REPLACES -1) (("1" (EXPAND "length" 4 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2 4 5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|search_in_append_of_lists_with_searched_key| 0 (|search_in_append_of_lists_with_searched_key-2| "" 3884901806 ("" (SKEEP) (("" (CASE "member(k,l1)") (("1" (LEMMA "search_min_index") (("1" (INST -1 "l1" "k" "_") (("1" (LEMMA "member_implies_exists_nth") (("1" (INST -1 "l1" "k") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -2 "k!1") (("1" (ASSERT) (("1" (CASE "nth(append(l1, cons(k, l2)), k!1) = k") (("1" (LEMMA "search_min_index") (("1" (INST -1 "append(l1, cons(k, l2))" "k" "k!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (ASSERT) (("2" (HIDE -2 -3 2) (("2" (TYPEPRED "k!1") (("2" (LEMMA "nth_of_list_is_nth_append_list") (("2" (INST -1 "l1" "cons(k, l2)" "k!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "length_append") (("3" (INST -1 "l1" "cons(k,l2)") (("3" (HIDE -2 -3 -4 2) (("3" (TYPEPRED "k!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) (("2" (LEMMA "search_in_append_of_lists_key_not_member_of_the_first") (("2" (INST -1 "l1" "cons(k,l2)" "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|search_in_append_of_lists_with_searched_key-1| |nil| 3531738934 ("" (SKEEP) (("" (CASE "member(k,l1)") (("1" (LEMMA "search_min_index") (("1" (INST -1 "l1" "k" "_") (("1" (LEMMA "member_implies_exists_nth") (("1" (INST -1 "l1" "k") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -2 "k!1") (("1" (ASSERT) (("1" (CASE "nth(append(l1, cons(k, l2)), k!1) = k") (("1" (LEMMA "search_min_index") (("1" (INST -1 "append(l1, cons(k, l2))" K K!1) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "k!1") (("2" (ASSERT) (("2" (EXPAND "list2finseq") (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 2) (("2" (TYPEPRED "k!1") (("2" (LEMMA "nth_of_list_is_nth_append_list") (("2" (INST -1 "l1" "cons(k, l2)" K!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "length_append") (("3" (INST -1 "l1" "cons(k,l2)") (("3" (HIDE -2 -3 -4 2) (("3" (TYPEPRED "k!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 1) (("2" (ASSERT) (("2" (EXPAND "search" 1) (("2" (HIDE -2 -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "search_in_append_of_lists_key_not_member_of_the_first") (("2" (INST -1 "l1" "cons(k,l2)" K) (("2" (ASSERT) (("2" (REPLACE -1 2) (("2" (EXPAND "search" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|l1| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth_of_list_is_nth_append_list| FORMULA-DECL NIL |sorting_aux| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|search| DEF-DECL "nat" |sorting| NIL) (|member_implies_exists_nth| FORMULA-DECL NIL |sorting_aux| NIL) (|search_min_index| FORMULA-DECL NIL |sorting| NIL) (|search_in_append_of_lists_key_not_member_of_the_first| FORMULA-DECL NIL |sorting| NIL)) SHOSTAK)) (|is_sorted?_TCC1| 0 (|is_sorted?_TCC1-1| |nil| 3578072583 ("" (TCC)) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|is_sorted?| SUBTYPE "(number_fields.+)(sorting.k, 1)" "below[length[T](l)]"))) (|is_sorted_implies_monotone_TCC1| 0 (|is_sorted_implies_monotone_TCC1-1| |nil| 3784473959 ("" (SUBTYPE-TCC) NIL NIL) ((|is_sorted?| CONST-DECL "bool" |sorting| NIL)) NIL (|is_sorted_implies_monotone| SUBTYPE "sorting.i" "below[length[T](l)]"))) (|is_sorted_implies_monotone| 0 (|is_sorted_implies_monotone-1| |nil| 3778349074 ("" (MEASURE-INDUCT "length(l)" "l") (("" (SKEEP) (("" (CASE "null?(x)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "is_sorted?") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (CASE-REPLACE "j = 1") (("1" (INST -6 0) (("1" (ASSERT) (("1" (EXPAND "nth" -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "cdr(x)") (("2" (EXPAND "length" -4 2) (("2" (ASSERT) (("2" (PROP) (("1" (INST -1 "j - 1" "0") (("1" (INST -5 0) (("1" (ASSERT) (("1" (EXPAND "nth" -5) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-2 -4 -8 2)) (("1" (EXPAND "transitive?") (("1" (INST -1 "car(x)" "nth(cdr(x),0)" "nth(cdr(x), j - 1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -5 "k + 1") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "j = i + 1") (("1" (ASSERT) (("1" (INST -5 "i") (("1" (EXPAND "nth" -5) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "cdr(x)") (("2" (EXPAND "length" -3 2) (("2" (ASSERT) (("2" (PROP) (("1" (INST?) NIL NIL) ("2" (SKEEP) (("2" (INST -4 "1 + k") (("1" (EXPAND "length" -4) (("1" (ASSERT) (("1" (EXPAND "nth" -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|k| SKOLEM-CONST-DECL "below[length(cdr(x))]" |sorting| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|k| SKOLEM-CONST-DECL "below[length(cdr(x))]" |sorting| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|cdr_of_sorted_is_sorted_TCC1| 0 (|cdr_of_sorted_is_sorted_TCC1-1| |nil| 3655720139 ("" (SUBTYPE-TCC) NIL NIL) ((|is_sorted?| CONST-DECL "bool" |sorting| NIL)) NIL (|cdr_of_sorted_is_sorted| SUBTYPE "sorting.l" "(list_adt[sorting.T].cons?)"))) (|cdr_of_sorted_is_sorted| 0 (|cdr_of_sorted_is_sorted-1| |nil| 3589039883 ("" (SKEEP) (("" (EXPAND "is_sorted?") (("" (SKEEP) (("" (INST -1 "k+1") (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|k| SKOLEM-CONST-DECL "below[length(cdr(l))]" |sorting| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |sorting| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL)) SHOSTAK)))
