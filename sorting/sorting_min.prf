(|sorting_min| (|switching_min_TCC1| 0 (|switching_min_TCC1-1| |nil| 3517307926 ("" (TCC)) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)) SHOSTAK (|switching_min| SUBTYPE "sorting_min.l" "(list_adt[sorting_min.T].cons?)"))) (|switching_min_TCC2| 0 (|switching_min_TCC2-1| |nil| 3517307926 ("" (SUBTYPE-TCC) (("" (GRIND) (("" (EXPAND "length") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)) SHOSTAK (|switching_min| SUBTYPE "list_adt[sorting_min.T].cdr(sorting_min.l)" "(list_adt[sorting_min.T].cons?)"))) (|switching_min_TCC3| 0 (|switching_min_TCC3-1| |nil| 3517307926 ("" (SKEEP) (("" (EXPAND "length" 2 2) (("" (HIDE -1) (("" (GRIND) (("" (EXPAND "length" 2 2) (("" (GRIND) (("" (CASE "null?(l)") (("1" (GRIND) NIL NIL) ("2" (CASE "length(l) = 1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)) SHOSTAK (|switching_min| TERMINATION "sorting_min.switching_min(list_adt[sorting_min.T].cons(list_adt[sorting_min.T].car(sorting_min.l), list_adt[sorting_min.T].cdr(list_adt[sorting_min.T].cdr(sorting_min.l))))" "NIL"))) (|switching_min_TCC4| 0 (|switching_min_TCC4-1| |nil| 3517307926 ("" (SKEEP) (("" (EXPAND "length" 3 2) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|switching_min| TERMINATION "sorting_min.switching_min(list_adt[sorting_min.T].cdr(sorting_min.l))" "NIL"))) (|reverse_is_permutation| 0 (|reverse_is_permutation-1| |nil| 3558374535 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "reverse" 1) (("" (LIFT-IF) (("" (PROP) (("" (REWRITE "occurrences_of_app") (("" (EXPAND "occurrences" 2 2) (("" (LIFT-IF) (("" (PROP) (("1" (INST -2 "cdr(x!1)") (("1" (PROP) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (PROP) (("1" (INST?) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|swch_min_preserves_length| 0 (|swch_min_preserves_length-1| |nil| 3523646710 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (EXPAND "switching_min" 1) (("" (CASE "length(x!1) < 2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("1" (PROP) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "length" 1 1) (("1" (HIDE -1) (("1" (GRIND) (("1" (EXPAND "length" 1 1) (("1" (GRIND) (("1" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "length") (("2" (GRIND) (("2" (EXPAND "length" 2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2 1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST?) (("2" (PROP) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 4 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|swch_min_preserves_contents| 0 (|swch_min_preserves_contents-2| |nil| 3797766371 ("" (MEASURE-INDUCT+ ("length(l)") "l") (("" (SKEEP) (("" (EXPAND "switching_min" 1) (("" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "lt(car(x!1), car(cdr(x!1)))") (("1" (ASSERT) (("1" (CASE "i=car(cdr(x!1))") (("1" (EXPAND "member" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "member" 3) (("2" (ASSERT) (("2" (CASE "member(i, cons(car(x!1),cdr(cdr(x!1))))") (("1" (INST -3 "cons(car(x!1),cdr(cdr(x!1)))") (("1" (INST -3 "i") (("1" (PROP) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) (("1" (EXPAND "length" 1 2) (("1" (GRIND) (("1" (EXPAND "length" 1 2) (("1" (GRIND) (("1" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (EXPAND "member") (("2" (GRIND) (("2" (EXPAND "member" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "i=car(x!1)") (("1" (EXPAND "member" 3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "member" 4) (("2" (ASSERT) (("2" (EXPAND "member" -2) (("2" (CASE "x!1=null") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "i") (("2" (PROP) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (CASE "NOT null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (CASE "NOT null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|swch_min_preserves_contents-1| |nil| 3553523288 ("" (MEASURE-INDUCT+ ("length(l)") "l") (("" (SKEEP) (("" (EXPAND "switching_min" 1) (("" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "car(x!1) < car(cdr(x!1))") (("1" (ASSERT) (("1" (CASE "i=car(cdr(x!1))") (("1" (EXPAND "member" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "member" 3) (("2" (ASSERT) (("2" (CASE "member(i, cons(car(x!1),cdr(cdr(x!1))))") (("1" (INST -3 "cons(car(x!1),cdr(cdr(x!1)))") (("1" (INST -3 "i") (("1" (PROP) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) (("1" (EXPAND "length" 1 2) (("1" (GRIND) (("1" (EXPAND "length" 1 2) (("1" (GRIND) (("1" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (EXPAND "member") (("2" (GRIND) (("2" (EXPAND "member" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "i=car(x!1)") (("1" (EXPAND "member" 3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "member" 4) (("2" (ASSERT) (("2" (EXPAND "member" -2) (("2" (CASE "x!1=null") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "i") (("2" (PROP) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (CASE "NOT null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (CASE "NOT null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|swch_min_is_permutation| 0 (|swch_min_is_permutation-1| |nil| 3556825965 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (EXPAND "permutations" 1) (("" (SKEEP) (("" (EXPAND "switching_min" 1) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "occurrences" 1 2) (("1" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("1" (PROP) (("1" (LIFT-IF) (("1" (EXPAND "permutations") (("1" (INST?) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (PROP) (("1" (EXPAND "occurrences") (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 1) (("3" (LIFT-IF) (("3" (PROP) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 1) (("3" (LIFT-IF) (("3" (PROP) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (EXPAND "length") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "length" 2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (PROP) (("1" (EXPAND "permutations") (("1" (INST -1 "x") (("1" (EXPAND "occurrences" 2 2) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "length" 1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|last_swch_min_element_is_least_TCC1| 0 (|last_swch_min_element_is_least_TCC1-1| |nil| 3554566004 ("" (SKEEP) (("" (TYPEPRED "k") (("" (CASE "null?(l)") (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "l") (("2" (REPLACE -1 2 RL) (("2" (PROP) (("1" (HIDE -) (("1" (EXPAND "length") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (EXPAND "length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)) SHOSTAK (|last_swch_min_element_is_least| SUBTYPE "(number_fields.-)(list_props[sorting_min.T].length(sorting_min.l), 1)" "below[length[T](switching_min(l))]"))) (|last_swch_min_element_is_least_TCC2| 0 (|last_swch_min_element_is_least_TCC2-1| |nil| 3589549499 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|last_swch_min_element_is_least| SUBTYPE "sorting_min.k" "below[length[T](l)]"))) (|last_swch_min_element_is_least| 0 (|last_swch_min_element_is_least-4| |nil| 3797766452 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (SKOSIMP) (("1" (TYPEPRED "k!1") (("1" (HIDE 1) (("1" (EXPAND "list2finseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 2) (("2" (EXPAND "switching_min" 2) (("2" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "lt(car(x!1), car(cdr(x!1)))") (("1" (ASSERT) (("1" (EXPAND "nth" 3 1) (("1" (CASE "length(x!1) -1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("2" (CASE "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (NAME-REPLACE "lastelement" "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)") (("1" (EXPAND "nth" 4) (("1" (CASE "k=0") (("1" (ASSERT) (("1" (INST -4 0) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k=1") (("1" (EXPAND "nth" 5) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (LEMMA "lt_le") (("1" (INST? -1 :WHERE -4) (("1" (ASSERT) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "lastelement" "car(x!1)" "car(cdr(x!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (EXPAND "length" -2 1) (("2" (REPLACE -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 6) (("2" (ASSERT) (("2" (INST -3 "k-1") (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (GRIND) (("2" (EXPAND "length" 1 2) (("2" (GRIND) (("2" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 4 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2 3 4) (("1" (TYPEPRED "k") (("1" (GRIND) (("1" (CASE "null?(x!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "leq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (EXPAND "length" 2) (("2" (CASE "null?(x!1)") (("1" (ASSERT) (("1" (HIDE -2 1 2 3 4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 3 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 0) (("1" (EXPAND "nth" -2 2) (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (TCCS-FORMULA 1) (("1" (INST -5 "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) " "car(cdr(x!1))" "car(x!1)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "k-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (7 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (HIDE 3 6) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 4) (("3" (GRIND) (("3" (EXPAND "length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 4) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (TYPEPRED "k!1" "k!2") (("3" (EXPAND "list2finseq") (("3" (INST -4 "y!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (HIDE -2) (("4" (GRIND) (("1" (REWRITE "swch_min_preserves_length") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "swch_min_preserves_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "k!1") (("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "swch_min_preserves_length") (("6" (GRIND) (("6" (TYPEPRED "k!1") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|k| SKOLEM-CONST-DECL "below[list2finseq(x!1)`length]" |sorting_min| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_le| FORMULA-DECL NIL |sorting| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_min| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|last_swch_min_element_is_least-3| |nil| 3797695681 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (SKOSIMP) (("1" (TYPEPRED "k!1") (("1" (HIDE 1) (("1" (EXPAND "list2finseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 2) (("2" (EXPAND "switching_min" 2) (("2" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(x!1) < car(cdr(x!1))") (("1" (ASSERT) (("1" (EXPAND "nth" 3 1) (("1" (CASE "length(x!1) -1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("2" (CASE "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (NAME-REPLACE "lastelement" "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)") (("1" (EXPAND "nth" 4) (("1" (CASE "k=0") (("1" (ASSERT) (("1" (INST -4 0) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k=1") (("1" (EXPAND "nth" 5) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (LEMMA "lt_le") (("1" (INST? -1 :WHERE -4) (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "lastelement" "car(x!1)" "car(cdr(x!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (EXPAND "length" -2 1) (("2" (REPLACE -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 6) (("2" (ASSERT) (("2" (INST -3 "k-1") (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (GRIND) (("2" (EXPAND "length" 1 2) (("2" (GRIND) (("2" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 4 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2 3 4) (("1" (TYPEPRED "k") (("1" (GRIND) (("1" (CASE "null?(x!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (EXPAND "length" 2) (("2" (CASE "null?(x!1)") (("1" (ASSERT) (("1" (HIDE -2 1 2 3 4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 3 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 0) (("1" (EXPAND "nth" -2 2) (("1" (ASSERT) (("1" (PROP) (("1" (USE "lt_def") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (TCCS-FORMULA 1) (("1" (INST -5 "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) " "car(cdr(x!1))" "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "k-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (7 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (HIDE 3 6) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 4) (("3" (GRIND) (("3" (EXPAND "length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 4) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (TYPEPRED "k!1" "k!2") (("3" (EXPAND "list2finseq") (("3" (INST -4 "y!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (HIDE -2) (("4" (GRIND) (("1" (REWRITE "swch_min_preserves_length") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "swch_min_preserves_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "k!1") (("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "swch_min_preserves_length") (("6" (GRIND) (("6" (TYPEPRED "k!1") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|last_swch_min_element_is_least-2| |nil| 3731693507 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (SKOSIMP) (("1" (TYPEPRED "k!1") (("1" (HIDE 1) (("1" (EXPAND "list2finseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 2) (("2" (EXPAND "switching_min" 2) (("2" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(x!1) < car(cdr(x!1))") (("1" (ASSERT) (("1" (EXPAND "nth" 3 1) (("1" (CASE "length(x!1) -1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("2" (CASE "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (NAME-REPLACE LASTELEMENT "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)") (("1" (EXPAND "nth" 4) (("1" (CASE "k=0") (("1" (ASSERT) (("1" (INST -4 0) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k=1") (("1" (EXPAND "nth" 5) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (LEMMA "lt_le") (("1" (INST? -1 :WHERE -4) (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "lastelement" "car(x!1)" "car(cdr(x!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (EXPAND "length" -2 1) (("2" (REPLACE -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 6) (("2" (ASSERT) (("2" (INST -3 "k-1") (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (GRIND) (("2" (EXPAND "length" 1 2) (("2" (GRIND) (("2" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 4 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2 3 4) (("1" (TYPEPRED "k") (("1" (GRIND) (("1" (CASE "null?(x!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (EXPAND "length" 2) (("2" (CASE "null?(x!1)") (("1" (ASSERT) (("1" (HIDE -2 1 2 3 4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 3 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 0) (("1" (EXPAND "nth" -2 2) (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "<") (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (FLATTEN) (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (TCCS-FORMULA 1) (("1" (INST -5 "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1) " "car(cdr(x!1))" "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "k-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (7 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (HIDE 3 6) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 4) (("3" (GRIND) (("3" (EXPAND "length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 4) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (TYPEPRED "k!1" "k!2") (("3" (EXPAND "list2finseq") (("3" (INST -4 "y!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (HIDE -2) (("4" (GRIND) (("1" (REWRITE "swch_min_preserves_length") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "swch_min_preserves_length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "k!1") (("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "swch_min_preserves_length") (("6" (GRIND) (("6" (TYPEPRED "k!1") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|last_swch_min_element_is_least-1| |nil| 3554566006 ("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "length(x!1) = 0") (("1" (HIDE -2) (("1" (SKOSIMP) (("1" (TYPEPRED "k!1") (("1" (HIDE 1) (("1" (EXPAND "list2finseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 2) (("2" (EXPAND "switching_min" 2) (("2" (CASE "list2finseq(x!1)`length < 2") (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(x!1) < car(cdr(x!1))") (("1" (ASSERT) (("1" (EXPAND "nth" 3 1) (("1" (CASE "length(x!1) -1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))") (("2" (CASE "length(cons(car(x!1), cdr(cdr(x!1)))) - 1 = length(x!1) - 2") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (NAME-REPLACE LASTELEMENT "nth(switching_min(cons(car(x!1), cdr(cdr(x!1)))), length(x!1) - 2)") (("1" (EXPAND "nth" 4) (("1" (CASE "k=0") (("1" (ASSERT) (("1" (INST -4 0) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "k=1") (("1" (EXPAND "nth" 5) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (EXPAND "<") (("1" (EXPAND "difference") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (TYPEPRED "<=") (("1" (HIDE-ALL-BUT (-1 -4 -5 6)) (("1" (EXPAND "total_order?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "lastelement" "car(x!1)" "car(cdr(x!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (EXPAND "length" -2 1) (("2" (REPLACE -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 6) (("2" (ASSERT) (("2" (INST -3 "k-1") (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (GRIND) (("2" (EXPAND "length" 1 2) (("2" (GRIND) (("2" (CASE "length(x!1) = 1") (("1" (GRIND) NIL NIL) ("2" (CASE "null?(x!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 4 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2 3 4) (("1" (TYPEPRED "k") (("1" (GRIND) (("1" (CASE "null?(x!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (EXPAND "length" 2) (("2" (CASE "null?(x!1)") (("1" (ASSERT) (("1" (HIDE -2 1 2 3 4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 3 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 0) (("1" (EXPAND "nth" -2 2) (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "<") (("1" (EXPAND "difference") (("1" (SPLIT) (("1" (EXPAND "member") (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "nth(switching_min(cdr(x!1)), length(cdr(x!1)) - 1)" "car(cdr(x!1))" "car(x!1)") (("1" (ASSERT) (("1" (EXPAND "dichotomous?") (("1" (INST -3 "car(cdr(x!1))" "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "k-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (7 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (HIDE 3 6) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 4) (("3" (GRIND) (("3" (EXPAND "length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 4) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "k!1") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (TYPEPRED "k!1" "k!2") (("3" (EXPAND "list2finseq") (("3" (INST -4 "y!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (HIDE -2) (("4" (GRIND) (("1" (REWRITE "swch_min_preserves_length") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "swch_min_preserves_length") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "k!1") (("3" (HIDE 2) (("3" (GRIND) (("3" (HIDE 2) (("3" (LEMMA "swch_min_preserves_length") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "k!1") (("5" (GRIND) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "swch_min_preserves_length") (("6" (INST -1 "l!1") (("6" (GRIND) (("6" (TYPEPRED "k!1") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sorting_min_TCC1| 0 (|sorting_min_TCC1-1| |nil| 3517307926 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "swch_min_preserves_length") (("" (INST -1 "l") (("" (LEMMA "length_reverse") (("" (INST -1 "switching_min(l)") (("" (REPLACE -2 -1 RL) (("" (HIDE -2) (("" (REPLACE -2 -1 RL) (("" (HIDE -2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL)) SHOSTAK (|sorting_min| SUBTYPE "sorting_min.rev_sw_min" "(list_adt[sorting_min.T].cons?)"))) (|sorting_min_TCC2| 0 (|sorting_min_TCC2-1| |nil| 3517307926 ("" (SKEEP) (("" (SKEEP) (("" (REPLACES -1) (("" (LEMMA "length_reverse") (("" (INST?) (("" (EXPAND "length" -1 1) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|sorting_min| TERMINATION "sorting_min.sorting_min(list_adt[sorting_min.T].cdr(sorting_min.rev_sw_min))" "NIL"))) (|sorting_min_preserves_length| 0 (|sorting_min_preserves_length-1| |nil| 3523648590 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (CASE "length(x!1) < 2") (("1" (EXPAND "sorting_min" 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sorting_min" 2) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (CASE "list2finseq(x!1)`length >= 2") (("1" (ASSERT) (("1" (EXPAND "length" 2 2) (("1" (INST -2 "cdr(reverse(switching_min(x!1)))") (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (LEMMA "length_reverse") (("1" (INST?) (("1" (EXPAND "length" -1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "length_reverse") (("2" (INST?) (("2" (EXPAND "length" -1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sorting_min| DEF-DECL "list[T]" |sorting_min| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|sorting_min_is_permutations| 0 (|sorting_min_is_permutations-2| "" 3884901258 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "sorting_min" 1) (("" (LIFT-IF) (("" (PROP) (("" (EXPAND "occurrences" 2 2) (("" (INST -1 "cdr(reverse(switching_min(x!1)))") (("1" (PROP) (("1" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (LEMMA "reverse_is_permutation") (("1" (LEMMA "swch_min_is_permutation") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REWRITE "permutations_is_commutative") (("1" (LEMMA "permutations_is_transitive") (("1" (INST -1 "reverse(switching_min(x!1))" "switching_min(x!1)" "x!1") (("1" (ASSERT) (("1" (HIDE -2 -3) (("1" (EXPAND "permutations") (("1" (INST?) (("1" (EXPAND "list2finseq") (("1" (PROP) (("1" (EXPAND "occurrences" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE 1) (("1" (LEMMA "length_reverse") (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REPLACE -1) (("1" (REPLACE -2 1 RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" -1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACE -2 2 RL) (("1" (HIDE -2) (("1" (LEMMA "length_reverse") (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REPLACE -2 -1 RL) (("1" (HIDE -2 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "length_reverse") (("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (INST -2 "switching_min(x!1)") (("2" (REPLACE -1) (("2" (REPLACE -2 1 RL) (("2" (NAME-REPLACE "rswmp" "reverse(switching_min(x!1))") (("2" (EXPAND "length" 1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "length_reverse") (("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (INST -2 "switching_min(x!1)") (("2" (NAME-REPLACE "rev" "reverse[T](switching_min(x!1))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sorting_min_is_permutations-1| |nil| 3557864953 ("" (MEASURE-INDUCT+ "length(l)" ("l")) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "sorting_min" 1) (("" (LIFT-IF) (("" (PROP) (("" (EXPAND "occurrences" 2 2) (("" (INST -1 "cdr(reverse(switching_min(x!1)))") (("1" (PROP) (("1" (INST?) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (LEMMA "reverse_is_permutation") (("1" (LEMMA "swch_min_is_permutation") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REWRITE "permutations_is_commutative") (("1" (LEMMA "permutations_is_transitive") (("1" (INST -1 "reverse(switching_min(x!1))" "switching_min(x!1)" X!1) (("1" (ASSERT) (("1" (HIDE -2 -3) (("1" (EXPAND "permutations") (("1" (INST?) (("1" (EXPAND "list2finseq") (("1" (PROP) (("1" (EXPAND "occurrences" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE 1) (("1" (LEMMA "length_reverse") (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REPLACE -1) (("1" (REPLACE -2 1 RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" -1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACE -2 2 RL) (("1" (HIDE -2) (("1" (LEMMA "length_reverse") (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "x!1") (("1" (INST -2 "switching_min(x!1)") (("1" (REPLACE -2 -1 RL) (("1" (HIDE -2 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "length_reverse") (("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (INST -2 "switching_min(x!1)") (("2" (REPLACE -1) (("2" (REPLACE -2 1 RL) (("2" (NAME-REPLACE RSWMP "reverse(switching_min(x!1))") (("2" (EXPAND "length" 1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "length_reverse") (("2" (LEMMA "swch_min_preserves_length") (("2" (INST -1 "x!1") (("2" (INST -2 "switching_min(x!1)") (("2" (NAME-REPLACE "rev" "reverse[T](switching_min(x!1))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_min| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|reverse_is_permutation| FORMULA-DECL NIL |sorting_min| NIL) (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|permutations_is_transitive| FORMULA-DECL NIL |sorting_aux| NIL) (|swch_min_is_permutation| FORMULA-DECL NIL |sorting_min| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|sorting_min| DEF-DECL "list[T]" |sorting_min| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|swch_min_moves_min_to_end_TCC1| 0 (|swch_min_moves_min_to_end_TCC1-1| |nil| 3525020231 ("" (SUBTYPE-TCC) (("" (LEMMA "swch_min_preserves_length") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|swch_min_moves_min_to_end| SUBTYPE "sorting_min.k" "below[length[T](switching_min(l))]"))) (|swch_min_moves_min_to_end_TCC2| 0 (|swch_min_moves_min_to_end_TCC2-1| |nil| 3525020231 ("" (SUBTYPE-TCC) (("" (LEMMA "swch_min_preserves_length") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|swch_min_moves_min_to_end| SUBTYPE "(number_fields.-)(list_props[sorting_min.T].length(sorting_min.l), 1)" "below[length[T](switching_min(l))]"))) (|swch_min_moves_min_to_end| 0 (|swch_min_moves_min_to_end-2| |nil| 3797766559 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "last_swch_min_element_is_least") (("" (LEMMA "swch_min_is_permutation") (("" (LEMMA "permutations_preserve_contents") (("" (INST -2 "l") (("" (INST -1 "switching_min(l)" "l" "length(l)-1") (("" (LEMMA "permutations_is_commutative") (("" (INST -1 "l" "switching_min(l)") (("" (ASSERT) (("" (SKEEP -2) (("" (INST -4 "l" "_") (("" (LEMMA "permutations_preserve_contents") (("" (INST -1 "switching_min(l)" "l" "k") (("" (ASSERT) (("" (SKOSIMP*) (("" (INST -5 "j!1") (("1" (EXPAND "geq") (("1" (EXPAND "converse") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "j!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|swch_min_is_permutation| FORMULA-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |sorting_min| NIL) (|j!1| SKOLEM-CONST-DECL "below[length(l)]" |sorting_min| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| NIL) (|last_swch_min_element_is_least| FORMULA-DECL NIL |sorting_min| NIL)) NIL) (|swch_min_moves_min_to_end-1| |nil| 3557660047 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "last_swch_min_element_is_least") (("" (LEMMA "swch_min_is_permutation") (("" (LEMMA "permutations_preserve_contents") (("" (INST -2 "l") (("" (INST -1 "switching_min(l)" "l" "length(l)-1") (("" (LEMMA "permutations_is_commutative") (("" (INST -1 "l" "switching_min(l)") (("" (ASSERT) (("" (SKEEP -2) (("" (INST -4 "l" "_") (("" (LEMMA "permutations_preserve_contents") (("" (INST -1 "switching_min(l)" "l" "k") (("" (ASSERT) (("" (SKOSIMP*) (("" (INST -5 "j!1") (("1" (EXPAND ">=") (("1" (EXPAND "converse") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (TYPEPRED "j!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sorting_min_moves_min_to_begining_TCC1| 0 (|sorting_min_moves_min_to_begining_TCC1-1| |nil| 3525020231 ("" (SUBTYPE-TCC) (("" (LEMMA "sorting_min_preserves_length") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|sorting_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)) SHOSTAK (|sorting_min_moves_min_to_begining| SUBTYPE "0" "below[length[T](sorting_min(l))]"))) (|sorting_min_moves_min_to_begining_TCC2| 0 (|sorting_min_moves_min_to_begining_TCC2-1| |nil| 3525020231 ("" (SUBTYPE-TCC) (("" (LEMMA "sorting_min_preserves_length") (("" (INST -1 "l!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|sorting_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)) SHOSTAK (|sorting_min_moves_min_to_begining| SUBTYPE "sorting_min.k" "below[length[T](sorting_min(l))]"))) (|sorting_min_moves_min_to_begining| 0 (|sorting_min_moves_min_to_begining-3| "no" 3881761466 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "swch_min_moves_min_to_end") (("" (EXPAND "sorting_min" 2 1) (("" (LIFT-IF) (("" (PROP) (("1" (TYPEPRED "k") (("1" (HIDE -3) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (INST -1 "l") (("2" (ASSERT) (("2" (INST -1 "k") (("1" (LEMMA "nth_rev_last") (("1" (INST -1 "switching_min(l)") (("1" (EXPAND "nth" -1 2) (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "l") (("1" (LEMMA "swch_min_is_permutation") (("1" (INST -1 "l") (("1" (LEMMA "sorting_min_is_permutations") (("1" (INST -1 "l") (("1" (LEMMA "permutations_is_transitive") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "l" "switching_min(l)") (("1" (PROP) (("1" (INST -3 "switching_min(l)" "l" "sorting_min(l)") (("1" (ASSERT) (("1" (REVEAL -7) (("1" (HIDE -2 -3 -5 -6 -9) (("1" (LEMMA "permutations_preserve_contents") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "sorting_min(l)" "switching_min(l)") (("1" (ASSERT) (("1" (INST -2 "sorting_min(l)" "switching_min(l)" "k") (("1" (ASSERT) (("1" (SKEEP -2) (("1" (INST -3 "j") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sorting_min| DEF-DECL "list[T]" |sorting_min| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|k| SKOLEM-CONST-DECL "below[list2finseq(l)`length]" |sorting_min| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |sorting_min| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|swch_min_is_permutation| FORMULA-DECL NIL |sorting_min| NIL) (|sorting_min_is_permutations| FORMULA-DECL NIL |sorting_min| NIL) (|permutations_is_transitive| FORMULA-DECL NIL |sorting_aux| NIL) (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| NIL) (|dichotomous_converse| APPLICATION-JUDGEMENT "(dichotomous?[T])" |relation_converse_props| NIL) (|preorder_converse| APPLICATION-JUDGEMENT "(preorder?[T])" |relation_converse_props| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|nth_rev_last| FORMULA-DECL NIL |sorting_aux| NIL) (|swch_min_moves_min_to_end| FORMULA-DECL NIL |sorting_min| NIL)) SHOSTAK) (|sorting_min_moves_min_to_begining-2| |nil| 3797766592 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "swch_min_moves_min_to_end") (("" (EXPAND "sorting_min" 2 1) (("" (LIFT-IF) (("" (PROP) (("1" (TYPEPRED "k") (("1" (HIDE -3) (("1" (GRIND) (("1" (TYPEPRED "leq") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (INST -1 "l") (("2" (ASSERT) (("2" (INST -1 "k") (("1" (LEMMA "nth_rev_last") (("1" (INST -1 "switching_min(l)") (("1" (EXPAND "nth" -1 2) (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "l") (("1" (LEMMA "swch_min_is_permutation") (("1" (INST -1 "l") (("1" (LEMMA "sorting_min_is_permutations") (("1" (INST -1 "l") (("1" (LEMMA "permutations_is_transitive") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "l" "switching_min(l)") (("1" (PROP) (("1" (INST -3 "switching_min(l)" "l" "sorting_min(l)") (("1" (ASSERT) (("1" (REVEAL -7) (("1" (HIDE -2 -3 -5 -6 -9) (("1" (LEMMA "permutations_preserve_contents") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "sorting_min(l)" "switching_min(l)") (("1" (ASSERT) (("1" (INST -2 "sorting_min(l)" "switching_min(l)" K) (("1" (ASSERT) (("1" (SKEEP -2) (("1" (INST -3 "j") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|permutations_is_transitive| FORMULA-DECL NIL |sorting_aux| NIL) (|permutations_preserve_contents| FORMULA-DECL NIL |sorting_aux| NIL) (|geq| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|permutations_is_commutative| FORMULA-DECL NIL |sorting_aux| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|nth_rev_last| FORMULA-DECL NIL |sorting_aux| NIL)) NIL) (|sorting_min_moves_min_to_begining-1| |nil| 3525019134 ("" (SKEEP) (("" (SKEEP 2) (("" (LEMMA "swch_min_moves_min_to_end") (("" (EXPAND "sorting_min" 2 1) (("" (LIFT-IF) (("" (PROP) (("1" (TYPEPRED "k") (("1" (HIDE -3) (("1" (GRIND) (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (INST -1 "l") (("2" (ASSERT) (("2" (INST -1 "k") (("1" (LEMMA "nth_rev_last") (("1" (INST -1 "switching_min(l)") (("1" (EXPAND "nth" -1 2) (("1" (LEMMA "swch_min_preserves_length") (("1" (INST -1 "l") (("1" (LEMMA "swch_min_is_permutation") (("1" (INST -1 "l") (("1" (LEMMA "sorting_min_is_permutations") (("1" (INST -1 "l") (("1" (LEMMA "permutations_is_transitive") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "l" "switching_min(l)") (("1" (PROP) (("1" (INST -3 "switching_min(l)" "l" "sorting_min(l)") (("1" (ASSERT) (("1" (REVEAL -7) (("1" (HIDE -2 -3 -5 -6 -9) (("1" (LEMMA "permutations_preserve_contents") (("1" (LEMMA "permutations_is_commutative") (("1" (INST -1 "sorting_min(l)" "switching_min(l)") (("1" (ASSERT) (("1" (INST -2 "sorting_min(l)" "switching_min(l)" K) (("1" (ASSERT) (("1" (SKEEP -2) (("1" (INST -3 "j") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "k") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sorting_min_work| 0 (|sorting_min_work-1| |nil| 3578072584 ("" (EXPAND "is_sorted?") (("" (MEASURE-INDUCT+ "length(l)" "l") (("1" (PROP) (("1" (SKEEP) (("1" (CASE "length(x!1)<2") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "k=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "sorting_min_moves_min_to_begining") (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (PROP) (("1" (INST -1 1) (("1" (HIDE -2 3) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sorting_min" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST -2 "cdr(reverse(switching_min(x!1)))") (("2" (PROP) (("1" (INST -1 "k-1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (LEMMA "sorting_min_preserves_length") (("2" (INST -1 "cdr(reverse(switching_min(x!1)))") (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sorting_min_preserves_length") (("2" (INST -1 "x!1") (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (LEMMA "swch_min_preserves_length") (("2" (LEMMA "length_reverse") (("2" (INST -2 "x!1") (("2" (INST -1 "switching_min(x!1)") (("2" (EXPAND "length" -1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND "list2finseq") (("2" (LEMMA "sorting_min_preserves_length") (("2" (INST-CP -1 "x!1") (("2" (INST -1 "cdr(reverse(switching_min(x!1)))") (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 -3 RL) (("2" (HIDE -1 -2) (("2" (LEMMA "swch_min_preserves_length") (("2" (LEMMA "length_reverse") (("2" (INST -2 "x!1") (("2" (INST -1 "switching_min(x!1)") (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "swch_min_preserves_length") (("2" (LEMMA "length_reverse") (("2" (INST -2 "x!1") (("2" (INST -1 "switching_min(x!1)") (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sorting_min_is_permutations") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |sorting_min| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sorting_min| DEF-DECL "list[T]" |sorting_min| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |sorting_min| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|sorting_min_is_permutations| FORMULA-DECL NIL |sorting_min| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |sorting_min| NIL) (|sorting_min_moves_min_to_begining| FORMULA-DECL NIL |sorting_min| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|switching_min| DEF-DECL "list[T]" |sorting_min| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|swch_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|sorting_min_preserves_length| FORMULA-DECL NIL |sorting_min| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL)) SHOSTAK)))
