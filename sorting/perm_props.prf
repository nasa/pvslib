(perm_props
 (remove_TCC1 0
  (remove_TCC1-1 nil 3810479978 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil perm_props nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (remove subtype "(number_fields.-)(perm_props.i, 1)" "nat")))
 (remove_TCC2 0
  (remove_TCC2-1 nil 3810479978 ("" (subtype-tcc) nil nil) nil nil
   (remove subtype
           "(number_fields.-)(list_props[perm_props.T].length(perm_props.l), 1)"
     "nat")))
 (remove_length 0
  (remove_length-1 nil 3810550983
   ("" (skeep)
    (("" (expand "remove")
      (("" (assert)
        (("" (typepred "i")
          (("" (rewrite "length_append")
            (("1" (assert)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (rewrite "caret_length")
                          (("1" (move-terms 1 l 2)
                            (("1" (assert)
                              (("1"
                                (case "length(l) =1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (expand "length")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "caret_length")
                      (("2" (rewrite "caret_length")
                        (("1" (assert) nil nil)
                         ("2" (move-terms 1 l 2)
                          (("2" (assert)
                            (("2" (case "NOT length(l) =i+1")
                              (("1" (assert) nil nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "length")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove const-decl "list[T]" perm_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil perm_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (caret_length formula-decl nil more_list_props structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (length_null formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ def-decl "list[T]" more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (remove_cdr_TCC1 0
  (remove_cdr_TCC1-1 nil 3810550554
   ("" (skeep :preds? T)
    (("" (expand "length") (("" (assert) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (remove_cdr subtype "perm_props.l"
    "(list_adt[perm_props.T].cons?)")))
 (remove_cdr_TCC2 0
  (remove_cdr_TCC2-1 nil 3810550554
   ("" (skeep :preds? T)
    (("" (lemma "remove_length")
      (("" (inst?)
        (("" (assert)
          (("" (expand "length" -1 1) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_length formula-decl nil perm_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil perm_props nil))
   nil
   (remove_cdr subtype "perm_props.remove(perm_props.l, perm_props.i)"
    "(list_adt[perm_props.T].cons?)")))
 (remove_cdr_TCC3 0
  (remove_cdr_TCC3-1 nil 3810550554
   ("" (skeep :preds? T)
    (("" (expand "length" -1)
      (("" (assert)
        (("" (lift-if -1)
          (("" (assert)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (remove_cdr subtype "list_adt[perm_props.T].cdr(perm_props.l)"
    "(list_adt[perm_props.T].cons?)")))
 (remove_cdr_TCC4 0
  (remove_cdr_TCC4-1 nil 3810550554
   ("" (skeep :preds? T)
    (("" (assert)
      (("" (expand "length" -)
        (("" (assert)
          (("" (lift-if -1)
            (("" (split -1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (remove_cdr subtype "(number_fields.-)(perm_props.i, 1)"
    "naturalnumbers.below(list_props[perm_props.T].length(list_adt[perm_props.T].cdr(perm_props.l)))")))
 (remove_cdr 0
  (remove_cdr-1 nil 3810551425
   ("" (skeep)
    (("" (lemma "list_extensionality[T]")
      (("" (inst?)
        (("" (flatten)
          (("" (hide -1)
            (("" (assert)
              (("" (hide 2)
                (("" (splash 1)
                  (("1" (skeep)
                    (("1" (expand "remove" 1)
                      (("1" (typepred "i")
                        (("1" (typepred "n")
                          (("1" (rewrite "nth_append")
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (move-terms -1 l 2)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" 1 1)
                                          (("1"
                                            (expand "append " 1 1)
                                            (("1"
                                              (expand "append " 1 1)
                                              (("1"
                                                (lemma "caret_nth")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "l"
                                                   "n+2"
                                                   "(2, length(l) -1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "caret_nth")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             " cdr(l) "
                                                             "n+1"
                                                             "(1, length(cdr(l)) - 1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "l")
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (lift-if
                                                                         -1)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (move-terms
                                                                                 -1
                                                                                 l
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     2
                                                                                     l
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT length(cdr(l)) =1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             3)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               3
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 3
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   -6
                                                                   -3)
                                                                  (("3"
                                                                    (rewrite
                                                                     "remove_length"
                                                                     -3)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -4)
                                                                (("2"
                                                                  (lift-if
                                                                   -4)
                                                                  (("2"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (move-terms
                                                           1
                                                           l
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "length(l) =2 ")
                                                              (("1"
                                                                (replace
                                                                 -6
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "remove_length"
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (move-terms
                                                           1
                                                           l
                                                           1)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (replace
                                                               -5
                                                               -2)
                                                              (("3"
                                                                (rewrite
                                                                 "remove_length"
                                                                 -2)
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   1)
                                                                  (("3"
                                                                    (lift-if
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -4)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (move-terms 1 l 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "remove_length")
                                        (("2"
                                          (inst -1 "cdr(l)" " i-1")
                                          (("2"
                                            (replace -5 -1 :dir rl)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "cdr_append"
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       "cdr_subl")
                                                      (("1"
                                                        (rewrite
                                                         "nth_append")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "^")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "^")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "cdr_append")
                                                    (("1"
                                                      (rewrite
                                                       "cdr_subl")
                                                      (("1"
                                                        (rewrite
                                                         "nth_append")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "subl_shr")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "car(l)"
                                                               "cdr(l)"
                                                               "i+1"
                                                               "length(l)-1")
                                                              (("1"
                                                                (case
                                                                 "NOT cons(car(l), cdr(l)) = l")
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -2
                                                                     2)
                                                                    (("2"
                                                                      (lift-if
                                                                       -2)
                                                                      (("2"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -5
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "remove"
                                                             -2)
                                                            (("2"
                                                              (rewrite
                                                               "length_append"
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 "caret_length")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "cdr(l) "
                                                                   " (i, length(cdr(l)) - 1)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "caret_length")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "l "
                                                                             " (1 + i, length(l) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -1
                                                                                   3)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     l
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT length(l) = i+1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               2
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (move-terms
                                                                           1
                                                                           l
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -3)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if
                                                                                 -3)
                                                                                (("2"
                                                                                  (split
                                                                                   -3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (move-terms
                                                                                         -1
                                                                                         r
                                                                                         1)
                                                                                        (("2"
                                                                                          (swap-rel
                                                                                           -1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT length(cdr(l)) =i")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1
                                                                                               -4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -4
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "^")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "^")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "remove_length")
                              (("2"
                                (inst -1 "l" "i")
                                (("2"
                                  (lemma "remove_length")
                                  (("2"
                                    (inst -1 "cdr(l)" "i-1")
                                    (("2"
                                      (expand "length" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if -2)
                                          (("2"
                                            (lift-if -2)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -5
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "remove"
                                                               -2)
                                                              (("2"
                                                                (rewrite
                                                                 "length_append")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "l")
                              (("3"
                                (expand "length" -1)
                                (("3"
                                  (lift-if -1)
                                  (("3"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "remove_length")
                    (("2" (inst -1 "l" "i")
                      (("2" (expand "length" -1)
                        (("2" (assert)
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lift-if -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "l")
                                          (("2"
                                            (expand "length" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if -1)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "remove_length")
                                            (("2"
                                              (inst -1 "cdr(l)" "i-1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil perm_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length_append formula-decl nil list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (caret_length formula-decl nil more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (subl_shr formula-decl nil more_list_props structures)
    (above nonempty-type-eq-decl nil integers nil)
    (cdr_subl formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (remove_length formula-decl nil perm_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (l skolem-const-decl "{l: list[T] | length(l) >= 2}" perm_props
     nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (caret_nth formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_null formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (remove const-decl "list[T]" perm_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (list_splitting_nth 0
  (list_splitting_nth-1 nil 3810481644
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (rewrite "append_null_left")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (expand "nth")
                  (("1" (expand "append")
                    (("1" (expand "append")
                      (("1" (lemma "list_extensionality")
                        (("1" (inst?)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (splash -1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "n=0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nth" 2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "caret_nth")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1 1)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2"
                                      (rewrite "caret_length")
                                      (("1"
                                        (expand "length" 1 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (flip-ineq 1)
                                          (("2"
                                            (expand "^")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "list_extensionality")
            (("2" (inst?)
              (("1" (flatten)
                (("1" (hide -1)
                  (("1" (splash -1)
                    (("1" (skeep)
                      (("1" (case "length(l) = i+1")
                        (("1" (replace -1 1)
                          (("1" (assert)
                            (("1" (expand "^" 1 2)
                              (("1"
                                (rewrite "append_null_right")
                                (("1"
                                  (lemma "caret_length")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "nth_append")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "caret_nth"
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (flip-ineq 1)
                                                  (("2"
                                                    (case "not n=i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "nth_append")
                          (("1" (rewrite "length_append" 2)
                            (("1" (rewrite "length_append" -1)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite "nth_append" 1)
                                      (("1"
                                        (rewrite "length_append" -2)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite "caret_nth")
                                                (("1"
                                                  (rewrite
                                                   "caret_length"
                                                   -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (flip-ineq 1)
                                                (("1"
                                                  (case
                                                   "NOT n = length(l ^ (0, i - 1))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -1
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         1
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "caret_length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (lemma "caret_length")
                                        (("2"
                                          (inst -1 "l" "(0,i-1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite "caret_nth")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "length_append" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_append")
                      (("2" (rewrite "length_append")
                        (("2" (rewrite "caret_length")
                          (("1" (rewrite "caret_length")
                            (("1" (assert) nil nil)) nil)
                           ("2" (typepred "i")
                            (("2" (flip-ineq 1)
                              (("2"
                                (move-terms -1 l 2)
                                (("2"
                                  (swap-rel -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "NOT length(l) = i+1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "^" 1 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "caret_length")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(l))" perm_props nil)
    (l skolem-const-decl "(cons?[T])" perm_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_null_left formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil perm_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ def-decl "list[T]" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (caret_length formula-decl nil more_list_props structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (caret_nth formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (occurrences_remove_not 0
  (occurrences_remove_not-1 nil 3810480924
   ("" (skeep)
    (("" (lemma "list_splitting_nth")
      (("" (inst?)
        (("" (name-replace "orm" "occurrences(remove(l, i))(x)")
          (("" (replace -1 2)
            (("" (expand "orm")
              (("" (expand "remove")
                (("" (rewrite "occurrences_of_app[T]" 2)
                  (("1" (rewrite "occurrences_of_app[T]" 2)
                    (("1" (rewrite "occurrences_of_app[T]" 2)
                      (("1" (assert)
                        (("1" (expand "occurrences")
                          (("1" (expand "occurrences")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_splitting_nth formula-decl nil perm_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (occurrences def-decl "nat" sorting_aux sorting)
    (remove const-decl "list[T]" perm_props nil)
    (orm skolem-const-decl "nat" perm_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences_of_app formula-decl nil sorting_aux sorting)
    (append def-decl "list[T]" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil perm_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (occurrences_remove 0
  (occurrences_remove-1 nil 3810483985
   ("" (skeep)
    (("" (lemma "list_splitting_nth")
      (("" (inst?)
        (("" (name-replace "x" "nth(l,i)")
          (("" (name-replace "orm" "occurrences(remove(l, i))(x)")
            (("" (replace -1)
              (("" (expand "orm")
                (("" (expand "remove")
                  (("" (rewrite "occurrences_of_app[T]")
                    (("1" (rewrite "occurrences_of_app[T]")
                      (("1" (rewrite "occurrences_of_app[T]")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "occurrences")
                                  (("1"
                                    (expand "occurrences")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "occurrences")
                                  (("2"
                                    (expand "occurrences")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_splitting_nth formula-decl nil perm_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ def-decl "list[T]" more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (append def-decl "list[T]" list_props nil)
    (occurrences_of_app formula-decl nil sorting_aux sorting)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (orm skolem-const-decl "nat" perm_props nil)
    (occurrences def-decl "nat" sorting_aux sorting)
    (remove const-decl "list[T]" perm_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil perm_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (remove_perm 0
  (remove_perm-1 nil 3810479996
   ("" (skeep)
    (("" (lemma "permutations_preserve_contents[T]")
      (("" (inst?)
        (("" (inst -1 "0")
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "nth" -1 2)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (copy -2)
                      (("1" (expand "permutations" 1)
                        (("1" (expand "permutations" -3)
                          (("1" (skeep)
                            (("1" (inst-cp -3 "car(l1)")
                              (("1"
                                (expand "occurrences" -4 1)
                                (("1"
                                  (case "x = car(l1)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (move-terms -5 l 1)
                                      (("1"
                                        (replaces -5 1)
                                        (("1"
                                          (replace -3 :dir rl)
                                          (("1"
                                            (rewrite
                                             "occurrences_remove")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (move-terms -4 l 1)
                                    (("2"
                                      (inst -3 "x")
                                      (("2"
                                        (expand "occurrences" -3 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces -3)
                                            (("2"
                                              (rewrite
                                               "occurrences_remove_not")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "l1")
              (("2" (expand "length") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil perm_props nil)
    (permutations_preserve_contents formula-decl nil sorting_aux
     sorting)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l1 skolem-const-decl "(cons?[T])" perm_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (occurrences_remove formula-decl nil perm_props nil)
    (TRUE const-decl "bool" booleans nil)
    (occurrences_remove_not formula-decl nil perm_props nil)
    (occurrences def-decl "nat" sorting_aux sorting)
    (permutations const-decl "bool" sorting_aux sorting)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

