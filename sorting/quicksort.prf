(|quicksort| (|leq_elements_TCC1| 0 (|leq_elements_TCC1-1| |nil| 3619867046 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|leq_elements| TERMINATION "quicksort.leq_elements(quicksort.r, quicksort.p)" "NIL"))) (|leq_elements_TCC2| 0 (|leq_elements_TCC2-1| |nil| 3619867046 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|leq_elements| TERMINATION "quicksort.leq_elements(quicksort.r, quicksort.p)" "NIL"))) (|g_elements_TCC1| 0 (|g_elements_TCC1-1| |nil| 3731797056 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL)) NIL (|g_elements| TERMINATION "quicksort.g_elements(quicksort.r, quicksort.p)" "NIL"))) (|g_elements_TCC2| 0 (|g_elements_TCC2-1| |nil| 3731797056 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL)) NIL (|g_elements| TERMINATION "quicksort.g_elements(quicksort.r, quicksort.p)" "NIL"))) (|leq_elements_size| 0 (|leq_elements_size-2| "" 3884899689 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (EXPAND "leq_elements" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "cdr(x!1)") (("2" (INST -2 "x") (("2" (PROP) (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "length" 2 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|leq_elements_size-1| |nil| 3619867047 ("" (MEASURE-INDUCT+ "length(l1)" L1) (("" (SKEEP) (("" (EXPAND "leq_elements" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "cdr(x!1)") (("2" (INST -2 "x") (("2" (PROP) (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "length" 2 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|g_elements_size| 0 (|g_elements_size-2| "" 3884899721 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (EXPAND "g_elements" 1) (("" (LIFT-IF) (("" (REWRITE "gt_not_le") (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (EXPAND "length" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -2 "cdr(x!1)") (("3" (INST -2 "x") (("3" (PROP) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|g_elements_size-1| |nil| 3620034974 ("" (MEASURE-INDUCT+ "length(l1)" L1) (("" (SKEEP) (("" (EXPAND "g_elements" 1) (("" (LIFT-IF) (("" (REWRITE "gt_not_le") (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (EXPAND "length" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -2 "cdr(x!1)") (("3" (INST -2 "x") (("3" (PROP) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|same_occurrence_leq| 0 (|same_occurrence_leq-2| "" 3884899782 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (SPLIT) (("1" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (PROP) (("1" (EXPAND "leq_elements" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (PROP) (("1" (EXPAND "g_elements" 2) (("1" (LIFT-IF) (("1" (REWRITE "gt_not_le") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|same_occurrence_leq-1| |nil| 3620053581 ("" (MEASURE-INDUCT+ "length(l1)" L1) (("" (SKEEP) (("" (SPLIT) (("1" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (PROP) (("1" (EXPAND "leq_elements" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 2 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (PROP) (("1" (EXPAND "g_elements" 2) (("1" (LIFT-IF) (("1" (REWRITE "gt_not_le") (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|same_occurrence_g| 0 (|same_occurrence_g-2| "" 3884900578 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (REWRITE "gt_not_le") (("" (SPLIT) (("1" (CASE "x!1=null") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (REWRITE "gt_not_le") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "g_elements" 2) (("1" (REWRITE "gt_not_le") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (REWRITE "gt_not_le") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "leq_elements" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|same_occurrence_g-1| |nil| 3620058296 ("" (MEASURE-INDUCT+ "length(l1)" L1) (("" (SKEEP) (("" (REWRITE "gt_not_le") (("" (SPLIT) (("1" (CASE "x!1=null") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (REWRITE "gt_not_le") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "g_elements" 2) (("1" (REWRITE "gt_not_le") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=null") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "p") (("1" (REWRITE "gt_not_le") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "leq_elements" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|x!1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|quick_sort_TCC1| 0 (|quick_sort_TCC1-2| |nil| 3797765865 ("" (LEMMA "leq_elements_size") (("" (SKEEP) (("" (INST -1 "l" "x") (("" (EXPAND "leq_elements" -1) (("" (ASSERT) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "leq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|leq_elements_size| FORMULA-DECL NIL |quicksort| NIL)) NIL (|quick_sort| TERMINATION "quicksort.quick_sort(quicksort.leq_elements(quicksort.r, quicksort.x))" "NIL")) (|quick_sort_TCC1-1| |nil| 3620020924 ("" (LEMMA "leq_elements_size") (("" (SKEEP) (("" (INST -1 "l" "x") (("" (EXPAND "leq_elements" -1) (("" (ASSERT) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "<=") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|quick_sort| TERMINATION "quicksort.quick_sort(quicksort.leq_elements(quicksort.r, quicksort.x))" "NIL"))) (|quick_sort_TCC2| 0 (|quick_sort_TCC2-1| |nil| 3620020924 ("" (LEMMA "g_elements_size") (("" (SKEEP) (("" (INST -1 "r" "x") (("" (EXPAND "length" 1 2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|g_elements_size| FORMULA-DECL NIL |quicksort| NIL)) NIL (|quick_sort| TERMINATION "quicksort.quick_sort(quicksort.g_elements(quicksort.r, quicksort.x))" "NIL"))) (|g_leq_car_size_TCC1| 0 (|g_leq_car_size_TCC1-1| |nil| 3620399534 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|g_leq_car_size| SUBTYPE "quicksort.l1" "(list_adt[quicksort.T].cons?)"))) (|g_leq_car_size| 0 (|g_leq_car_size-2| "" 3884900647 ("" (SKEEP) (("" (LEMMA "length_append") (("" (INST -1 "cons(car(l1), g_elements(cdr(l1), car(l1)))" "leq_elements(cdr(l1), car(l1))") (("" (EXPAND "length" -1 2) (("" (REPLACE -1 2 RL) (("" (HIDE -1) (("" (LEMMA "same_occurrences_same_length") (("" (INST -1 "append(cons(car(l1), g_elements(cdr(l1), car(l1))),
                             leq_elements(cdr(l1), car(l1)))" "l1") (("" (PROP) (("" (HIDE 3) (("" (LEMMA "occurrences_of_app") (("" (INST?) (("1" (SKEEP) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_leq") (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(l1)" "x" "car(l1)") (("1" (REWRITE "gt_not_le") (("1" (INST -2 "cdr(l1)" "x" "car(l1)") (("1" (PROP) (("1" (REPLACE -4 -1) (("1" (EXPAND "occurrences" 1 1) (("1" (REPLACE -2 1) (("1" (REPLACE -4 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "occurrences" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 2) (("2" (EXPAND "occurrences" 2) (("2" (ASSERT) (("2" (REPLACE -1 2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 1 (1 3)) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (REPLACE -3 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -2 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|g_leq_car_size-1| |nil| 3620399536 ("" (SKEEP) (("" (LEMMA "length_append") (("" (INST -1 "cons(car(l1), g_elements(cdr(l1), car(l1)))" "leq_elements(cdr(l1), car(l1))") (("" (EXPAND "length" -1 2) (("" (REPLACE -1 2 RL) (("" (HIDE -1) (("" (LEMMA "same_occurrences_same_length") (("" (INST -1 "append(cons(car(l1), g_elements(cdr(l1), car(l1))),
                             leq_elements(cdr(l1), car(l1)))" L1) (("" (PROP) (("" (HIDE 3) (("" (LEMMA "occurrences_of_app") (("" (INST?) (("1" (SKEEP) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_leq") (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(l1)" "x" "car(l1)") (("1" (REWRITE "gt_not_le") (("1" (INST -2 "cdr(l1)" "x" "car(l1)") (("1" (PROP) (("1" (REPLACE -4 -1) (("1" (EXPAND "occurrences" 1 1) (("1" (REPLACE -2 1) (("1" (REPLACE -4 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "occurrences" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 2) (("2" (EXPAND "occurrences" 2) (("2" (ASSERT) (("2" (REPLACE -1 2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "occurrences" 1 (1 3)) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (REPLACE -3 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -2 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|l1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (|same_occurrence_leq| FORMULA-DECL NIL |quicksort| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (|same_occurrence_g| FORMULA-DECL NIL |quicksort| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|same_occurrences_same_length| FORMULA-DECL NIL |sorting_aux| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|quick_sort_size| 0 (|quick_sort_size-2| "" 3884900679 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (EXPAND "quick_sort") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "quick_sort" 2) (("2" (ASSERT) (("2" (LEMMA "length_append") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "cons(car(x!1),
                             quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (REPLACES -1) (("2" (EXPAND "length" 2 2) (("2" (INST-CP -1 "g_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (REPLACES -1) (("1" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("1" (SPLIT) (("1" (REPLACES -1) (("1" (LEMMA "g_leq_car_size") (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 -1) (("2" (LEMMA "leq_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|quick_sort_size-1| |nil| 3620020926 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (EXPAND "quick_sort") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "quick_sort" 2) (("2" (ASSERT) (("2" (LEMMA "length_append") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "cons(car(x!1),
                             quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (REPLACES -1) (("2" (EXPAND "length" 2 2) (("2" (INST-CP -1 "g_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (REPLACES -1) (("1" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("1" (SPLIT) (("1" (REPLACES -1) (("1" (LEMMA "g_leq_car_size") (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 -1) (("2" (LEMMA "leq_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|leq_elements_size| FORMULA-DECL NIL |quicksort| NIL) (|g_leq_car_size| FORMULA-DECL NIL |quicksort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|g_elements_size| FORMULA-DECL NIL |quicksort| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|quick_sort| DEF-DECL "list[T]" |quicksort| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|leq_elements_works| 0 (|leq_elements_works-2| "" 3884900698 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (INST -1 "cdr(x!1)") (("1" (EXPAND "leq_elements" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -3 "x" "i") (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -2 "x" "i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|leq_elements_works-1| |nil| 3620463812 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (SKEEP) (("" (INST -1 "cdr(x!1)") (("1" (EXPAND "leq_elements" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -3 "x" "i") (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -2 "x" "i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|g_elements_works| 0 (|g_elements_works-2| "" 3884900716 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (EXPAND "g_elements" -2) (("" (LIFT-IF) (("" (INST -1 "cdr(x!1)") (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -3 "x" "i") (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -2 "x" "i") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|g_elements_works-1| |nil| 3620466925 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (SKEEP) (("" (EXPAND "g_elements" -2) (("" (LIFT-IF) (("" (INST -1 "cdr(x!1)") (("1" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -3 "x" "i") (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -2 "x" "i") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt| CONST-DECL "bool" |sorting| NIL) (|converse| CONST-DECL "pred[[T2, T1]]" |relation_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (|gt| CONST-DECL "pred[[T, T]]" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|quick_sort_is_permutation| 0 (|quick_sort_is_permutation-2| "" 3884900790 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "quick_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "occurrences_of_app") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))" "x") (("2" (REPLACES -1) (("2" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (EXPAND "occurrences" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "g_elements(cdr(x!1), car(x!1))") (("1" (SPLIT) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(x!1)" "x" "x") (("1" (REWRITE "gt_not_le") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACE -3) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "same_occurrence_g") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (REWRITE "gt_not_le") (("2" (PROP) (("1" (REPLACE -2 1) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "same_occurrence_leq") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (SPLIT) (("1" (FLATTEN) (("1" (REPLACE -1 1 RL) (("1" (REPLACES -2) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (PROP) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("1" (REWRITE "gt_not_le") (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (EXPAND "occurrences" 2 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 2 3) (("2" (ASSERT) (("2" (LEMMA "same_occurrence_leq") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (LEMMA "leq_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|quick_sort_is_permutation-1| |nil| 3620036003 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (EXPAND "permutations") (("" (SKEEP) (("" (EXPAND "quick_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "occurrences_of_app") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))" "x") (("2" (REPLACES -1) (("2" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (EXPAND "occurrences" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "g_elements(cdr(x!1), car(x!1))") (("1" (SPLIT) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(x!1)" "x" "x") (("1" (REWRITE "gt_not_le") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACE -3) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "same_occurrence_g") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (REWRITE "gt_not_le") (("2" (PROP) (("1" (REPLACE -2 1) (("1" (REPLACE -1 1 RL) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "same_occurrence_leq") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (SPLIT) (("1" (FLATTEN) (("1" (REPLACE -1 1 RL) (("1" (REPLACES -2) (("1" (EXPAND "occurrences" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (PROP) (("1" (INST -1 "x") (("1" (REPLACES -1) (("1" (LEMMA "same_occurrence_g") (("1" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("1" (REWRITE "gt_not_le") (("1" (PROP) (("1" (REPLACE -1 2 RL) (("1" (EXPAND "occurrences" 2 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "occurrences" 2 3) (("2" (ASSERT) (("2" (LEMMA "same_occurrence_leq") (("2" (INST -1 "cdr(x!1)" "x" "car(x!1)") (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "g_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (LEMMA "leq_elements_size") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|leq_elements_size| FORMULA-DECL NIL |quicksort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|same_occurrence_leq| FORMULA-DECL NIL |quicksort| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (|same_occurrence_g| FORMULA-DECL NIL |quicksort| NIL) (|g_elements_size| FORMULA-DECL NIL |quicksort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|occurrences_of_app| FORMULA-DECL NIL |sorting_aux| NIL) (|quick_sort| DEF-DECL "list[T]" |quicksort| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|append_null_in_sorted_is_sorted| 0 (|append_null_in_sorted_is_sorted-1| |nil| 3620551497 ("" (SKEEP) (("" (SPLIT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|list2set| DEF-DECL "set[T]" |list2set| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|cons_in_sorted_TCC1| 0 (|cons_in_sorted_TCC1-1| |nil| 3620551764 ("" (SUBTYPE-TCC) NIL NIL) ((|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL)) NIL (|cons_in_sorted| SUBTYPE "quicksort.l1" "(list_adt[quicksort.T].cons?)"))) (|cons_in_sorted| 0 (|cons_in_sorted-1| |nil| 3620551766 ("" (SKEEP) (("" (CASE "null?(l1)") (("1" (HIDE -2 -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "is_sorted?" 2) (("2" (SKEEP) (("2" (CASE "k=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 2) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "is_sorted?") (("2" (INST -1 "k-1") (("1" (SPLIT) (("1" (EXPAND "nth" 3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x| SKOLEM-CONST-DECL "T" |quicksort| NIL) (|l1| SKOLEM-CONST-DECL "{l1: list[T] | NOT null?(l1)}" |quicksort| NIL) (|k| SKOLEM-CONST-DECL "below[length(cons(x, l1))]" |quicksort| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL)) SHOSTAK)) (|quick_sort_is_sorted| 0 (|quick_sort_is_sorted-3| "" 3884900834 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "quick_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "null?(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "append_null_in_sorted_is_sorted") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "cons(car(x!1),
                                                                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (PROP) (("1" (HIDE -2 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 4) (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (LEMMA "g_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (SPLIT) (("1" (LEMMA "cons_in_sorted") (("1" (INST?) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (REPLACE -2 -1 RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_size") (("2" (HIDE 2 3) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (PROP) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST-CP -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                          quick_sort(g_elements(cdr(x!1), car(x!1))))" "k") (("1" (REPLACES -2) (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                                            quick_sort(g_elements(cdr(x!1), car(x!1))))" "k+1") (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -3 "k") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "k + 1 = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 2 2) (("1" (LEMMA "leq_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1)))) -1") (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (LEMMA "quick_sort_is_permutation") (("1" (INST?) (("1" (EXPAND "permutations") (("1" (INST -1 "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LEMMA "occurrences_implies_member") (("1" (INST -1 "leq_elements(cdr(x!1),car(x!1))" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (PROP) (("1" (LEMMA "occurrences_of_nth_element") (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "k") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 3 2) (("1" (HIDE -4 -5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (EXPAND "nth" 2) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (REWRITE "length_append") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_works") (("2" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (ASSERT) (("1" (HIDE -2 -3 -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (1 4)) (("1" (EXPAND "nth") (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5 6) (("2" (EXPAND "nth") (("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (EXPAND "occurrences" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -2 "k -1 - length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (EXPAND "length" 1 2) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (LEMMA "leq_elements_size") (("2" (INST?) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (LEMMA "g_elements_size") (("3" (INST?) (("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2 3 5) (("4" (LEMMA "leq_elements_size") (("4" (INST?) (("4" (EXPAND "length" 1 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|quick_sort_is_sorted-2| |nil| 3797765815 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (EXPAND "quick_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "null?(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "append_null_in_sorted_is_sorted") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "cons(car(x!1),
                                                                                                     quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (PROP) (("1" (HIDE -2 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 4) (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (LEMMA "g_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (SPLIT) (("1" (LEMMA "cons_in_sorted") (("1" (INST?) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "leq") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (REPLACE -2 -1 RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_size") (("2" (HIDE 2 3) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (PROP) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST-CP -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                          quick_sort(g_elements(cdr(x!1), car(x!1))))" "k") (("1" (REPLACES -2) (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                                            quick_sort(g_elements(cdr(x!1), car(x!1))))" "k+1") (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -3 "k") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "k + 1 = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 2 2) (("1" (LEMMA "leq_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1)))) -1") (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (LEMMA "quick_sort_is_permutation") (("1" (INST?) (("1" (EXPAND "permutations") (("1" (INST -1 "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LEMMA "occurrences_implies_member") (("1" (INST -1 "leq_elements(cdr(x!1),car(x!1))" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (PROP) (("1" (LEMMA "occurrences_of_nth_element") (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "k") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 3 2) (("1" (HIDE -4 -5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (EXPAND "nth" 2) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (REWRITE "length_append") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_works") (("2" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (ASSERT) (("1" (HIDE -2 -3 -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (1 4)) (("1" (EXPAND "nth") (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5 6) (("2" (EXPAND "nth") (("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (EXPAND "occurrences" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -2 "k -1 - length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (EXPAND "length" 1 2) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (LEMMA "leq_elements_size") (("2" (INST?) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (LEMMA "g_elements_size") (("3" (INST?) (("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2 3 5) (("4" (LEMMA "leq_elements_size") (("4" (INST?) (("4" (EXPAND "length" 1 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|k| SKOLEM-CONST-DECL "below[length(append(quick_sort(leq_elements(cdr(x!1), car(x!1))),
                    cons(car(x!1),
                         quick_sort(g_elements(cdr(x!1), car(x!1))))))]" |quicksort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|leq_elements_works| FORMULA-DECL NIL |quicksort| NIL) (|occurrences_of_nth_element| FORMULA-DECL NIL |sorting_aux| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nth_of_append| FORMULA-DECL NIL |sorting_aux| NIL) (|leq_elements_size| FORMULA-DECL NIL |quicksort| NIL) (|g_elements| DEF-DECL "list[T]" |quicksort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |quicksort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|cons_in_sorted| FORMULA-DECL NIL |quicksort| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|occurrences_implies_member| FORMULA-DECL NIL |sorting_aux| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|quick_sort_is_permutation| FORMULA-DECL NIL |quicksort| NIL) (|gt_not_le| FORMULA-DECL NIL |sorting| NIL) (|g_elements_works| FORMULA-DECL NIL |quicksort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|g_elements_size| FORMULA-DECL NIL |quicksort| NIL) (|append_null_in_sorted_is_sorted| FORMULA-DECL NIL |quicksort| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|leq_elements| DEF-DECL "list[T]" |quicksort| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|quick_sort| DEF-DECL "list[T]" |quicksort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |quicksort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|quick_sort_is_sorted-1| |nil| 3620401365 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (EXPAND "quick_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "null?(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "append_null_in_sorted_is_sorted") (("2" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "cons(car(x!1),
                                                                                             quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (PROP) (("1" (HIDE -2 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 4) (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (SPLIT) (("1" (LEMMA "g_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (SPLIT) (("1" (LEMMA "cons_in_sorted") (("1" (INST?) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (TYPEPRED "<=") (("3" (EXPAND "total_preorder?") (("3" (FLATTEN) (("3" (EXPAND "dichotomous?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (REPLACE -2 -1 RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_size") (("2" (HIDE 2 3) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -1 "leq_elements(cdr(x!1), car(x!1))") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))") (("2" (PROP) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (LEMMA "nth_of_append") (("1" (INST-CP -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                  quick_sort(g_elements(cdr(x!1), car(x!1))))" "k") (("1" (REPLACES -2) (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" " cons(car(x!1),
                                                                                                  quick_sort(g_elements(cdr(x!1), car(x!1))))" "k+1") (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -3 "k") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "k + 1 = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 2 2) (("1" (LEMMA "leq_elements_works") (("1" (INST -1 "cdr(x!1)" "car(x!1)" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1)))) -1") (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (LEMMA "quick_sort_is_permutation") (("1" (INST?) (("1" (EXPAND "permutations") (("1" (INST -1 "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (LEMMA "occurrences_implies_member") (("1" (INST -1 "leq_elements(cdr(x!1),car(x!1))" "nth(quick_sort(leq_elements(cdr(x!1), car(x!1))), k)") (("1" (PROP) (("1" (LEMMA "occurrences_of_nth_element") (("1" (INST -1 "quick_sort(leq_elements(cdr(x!1), car(x!1)))" "k") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (EXPAND "nth" 3 2) (("1" (HIDE -4 -5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (EXPAND "nth" 2) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (CASE "k = length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "null?(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (HIDE -3) (("1" (REWRITE "length_append") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "g_elements_works") (("2" (INST -1 "cdr(x!1)" "car(x!1)" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("1" (REWRITE "gt_not_le") (("1" (ASSERT) (("1" (HIDE -2 -3 -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (1 4)) (("1" (EXPAND "nth") (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5 6) (("2" (EXPAND "nth") (("2" (LEMMA "quick_sort_is_permutation") (("2" (INST?) (("2" (EXPAND "permutations") (("2" (INST -1 "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (LEMMA "occurrences_implies_member") (("2" (INST -1 "g_elements(cdr(x!1), car(x!1))" "car(quick_sort(g_elements(cdr(x!1), car(x!1))))") (("2" (EXPAND "occurrences" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -2 "k -1 - length(quick_sort(leq_elements(cdr(x!1), car(x!1))))") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND "list2finseq") (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (EXPAND "length" 1 2) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 4) (("2" (REWRITE "length_append") (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (LEMMA "leq_elements_size") (("2" (INST?) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 4) (("3" (LEMMA "g_elements_size") (("3" (INST?) (("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2 3 5) (("4" (LEMMA "leq_elements_size") (("4" (INST?) (("4" (EXPAND "length" 1 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|quick_sort_works| 0 (|quick_sort_works-1| |nil| 3620406814 ("" (SKEEP) (("" (SPLIT) (("1" (REWRITE "quick_sort_is_sorted") NIL NIL) ("2" (REWRITE "quick_sort_is_permutation") NIL NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |quicksort| NIL) (|quick_sort_is_sorted| FORMULA-DECL NIL |quicksort| NIL) (|quick_sort_is_permutation| FORMULA-DECL NIL |quicksort| NIL)) SHOSTAK)))
