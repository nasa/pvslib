(|insertionsort| (|insert_TCC1| 0 (|insert_TCC1-1| |nil| 3578072583 ("" (TCC)) NIL NIL (|insert| SUBTYPE "insertionsort.l" "(list_adt[insertionsort.T].cons?)"))) (|insert_TCC2| 0 (|insert_TCC2-1| |nil| 3589201731 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|insert| TERMINATION "insertionsort.insert(insertionsort.x, list_adt[insertionsort.T].cdr(insertionsort.l))" "NIL"))) (|occ_in_insert| 0 (|occ_in_insert-2| "" 3884900858 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (SKEEP) (("" (PROP) (("1" (EXPAND "insert" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (HIDE -2) (("2" (EXPAND "occurrences" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -1) (("3" (HIDE -1) (("3" (EXPAND "occurrences" 2 1) (("3" (ASSERT) (("3" (EXPAND "occurrences" 2 2) (("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "y" "y") (("3" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "y") (("1" (PROP) (("1" (HIDE 3) (("1" (EXPAND "insert" 3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|occ_in_insert-1| |nil| 3582477709 ("" (MEASURE-INDUCT+ "length(l)" L) (("" (SKEEP) (("" (PROP) (("1" (EXPAND "insert" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (HIDE -2) (("2" (EXPAND "occurrences" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -1) (("3" (HIDE -1) (("3" (EXPAND "occurrences" 2 1) (("3" (ASSERT) (("3" (EXPAND "occurrences" 2 2) (("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "y" "y") (("3" (PROP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(x!1)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("1" (INST -1 "x" "y") (("1" (PROP) (("1" (HIDE 3) (("1" (EXPAND "insert" 3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |insertionsort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|insert| DEF-DECL "list[T]" |insertionsort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|insertion_sort_TCC1| 0 (|insertion_sort_TCC1-1| |nil| 3578072583 ("" (TCC)) NIL NIL (|insertion_sort| SUBTYPE "insertionsort.l" "(list_adt[insertionsort.T].cons?)"))) (|insertion_sort_TCC2| 0 (|insertion_sort_TCC2-1| |nil| 3656079119 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|insertion_sort| TERMINATION "insertionsort.insertion_sort(list_adt[insertionsort.T].cdr(insertionsort.l))" "NIL"))) (|insert_size| 0 (|insert_size-1| |nil| 3578301238 ("" (AUTO-REWRITE "list2finseq") (("" (ASSERT) (("" (MEASURE-INDUCT+ "length(l)" "l") (("" (CASE "x!1=null") (("1" (HIDE -2) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "insert" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (INST -1 "x") (("2" (PROP) (("1" (HIDE 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|insert| DEF-DECL "list[T]" |insertionsort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|insert_in_sorted_preserves_sort| 0 (|insert_in_sorted_preserves_sort-4| |nil| 3797766006 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "insert" 1) (("" (SKEEP) (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (HIDE +) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "is_sorted?" 1) (("2" (SKEEP) (("2" (EXPAND "is_sorted?" -3) (("2" (CASE "k = 0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (ASSERT) (("2" (EXPAND "nth" 2 2) (("2" (INST -3 "k - 1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length" -2) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "is_sorted?" 2) (("1" (SKEEP) (("1" (CASE "k > 0") (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "is_sorted?" -2) (("1" (INST -2 "k -1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 3 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "nth" 3) (("2" (EXPAND "nth" 3) (("2" (EXPAND "insert" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "leq") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST -2 "car(x!1)" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (TYPEPRED "leq") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST -2 "car(x!1)" "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_sorted?" -3) (("3" (INST -3 0) (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (INST -2 "k + 1") (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|k| SKOLEM-CONST-DECL "below[length[T](cdr(x!1))]" |insertionsort| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |insertionsort| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|insert| DEF-DECL "list[T]" |insertionsort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|insert_in_sorted_preserves_sort-3| |nil| 3731693416 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "insert" 1) (("" (SKEEP) (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (HIDE +) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "is_sorted?" 1) (("2" (SKEEP) (("2" (EXPAND "is_sorted?" -3) (("2" (CASE "k = 0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (ASSERT) (("2" (EXPAND "nth" 2 2) (("2" (INST -3 "k - 1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length" -2) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "is_sorted?" 2) (("1" (SKEEP) (("1" (CASE "k > 0") (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "is_sorted?" -2) (("1" (INST -2 "k -1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 3 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "nth" 3) (("2" (EXPAND "nth" 3) (("2" (EXPAND "insert" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST -2 "car(x!1)" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_preorder?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST -2 "car(x!1)" "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_sorted?" -3) (("3" (INST -3 0) (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (INST -2 "k + 1") (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|insert_in_sorted_preserves_sort-2| |nil| 3731693387 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "insert" 1) (("" (SKEEP) (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (HIDE +) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL))))))))))))) ("2" (HIDE -2) (("2" (EXPAND "is_sorted?" 1) (("2" (SKEEP) (("2" (EXPAND "is_sorted?" -3) (("2" (CASE "k = 0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL))))))))) ("2" (EXPAND "nth" 2 1) (("2" (ASSERT) (("2" (EXPAND "nth" 2 2) (("2" (INST -3 "k - 1") (("1" (PROP) (("1" (ASSERT) NIL) ("2" (EXPAND "length" -2) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL))))))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))))))))))) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "is_sorted?" 2) (("1" (SKEEP) (("1" (CASE "k > 0") (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "is_sorted?" -2) (("1" (INST -2 "k -1") (("1" (PROP) (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL))))))))))))))) ("2" (EXPAND "nth" 3 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "nth" 3) (("2" (EXPAND "nth" 3) (("2" (EXPAND "insert" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_preorder?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST -2 "car(x!1)" "x") (("1" (ASSERT) NIL))))))))))))) ("2" (HIDE-ALL-BUT (1 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST -2 "car(x!1)" "x") (("2" (ASSERT) NIL))))))))))))) ("3" (EXPAND "is_sorted?" -3) (("3" (INST -3 0) (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL))))) ("2" (HIDE-ALL-BUT (1 4 7)) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (INST -2 "k + 1") (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL))) ("2" (HIDE 2 3) (("2" (GRIND) NIL))))) ("2" (HIDE 2 3) (("2" (GRIND) NIL))))))))))) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL)))))))))))))))) NIL) NIL NIL) (|insert_in_sorted_preserves_sort-1| |nil| 3578302955 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "insert" 1) (("" (SKEEP) (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "is_sorted?") (("1" (SKEEP) (("1" (HIDE +) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "is_sorted?" 1) (("2" (SKEEP) (("2" (EXPAND "is_sorted?" -3) (("2" (CASE "k = 0") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (ASSERT) (("2" (EXPAND "nth" 2 2) (("2" (INST -3 "k - 1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "length" -2) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "cdr(x!1)") (("3" (INST -1 "x") (("3" (PROP) (("1" (EXPAND "is_sorted?" 2) (("1" (SKEEP) (("1" (CASE "k > 0") (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "is_sorted?" -2) (("1" (INST -2 "k -1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 3 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "nth" 3) (("2" (EXPAND "nth" 3) (("2" (EXPAND "insert" 3) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "dichotomous?") (("1" (FLATTEN) (("1" (INST -2 "car(x!1)" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (FLATTEN) (("2" (EXPAND "dichotomous?") (("2" (INST -2 "car(x!1)" "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "is_sorted?" -3) (("3" (INST -3 0) (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "is_sorted?") (("2" (SKEEP) (("2" (INST -2 "k + 1") (("1" (PROP) (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|insertionsort_is_sorted| 0 (|insertionsort_is_sorted-1| |nil| 3582304089 ("" (MEASURE-INDUCT+ "length(l)" "l") (("" (EXPAND "insertion_sort" 1) (("" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (PROP) (("1" (REWRITE "insert_in_sorted_preserves_sort") NIL NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|insert_in_sorted_preserves_sort| FORMULA-DECL NIL |insertionsort| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|insertion_sort| DEF-DECL "list[T]" |insertionsort| NIL) (|is_sorted?| CONST-DECL "bool" |sorting| NIL) (|leq| FORMAL-CONST-DECL "(total_preorder?[T])" |insertionsort| NIL) (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|ins_and_cons_in_perm_is_perm| 0 (|ins_and_cons_in_perm_is_perm-1| |nil| 3581889068 ("" (SKEEP) (("" (TYPEPRED "l2") (("" (EXPAND "permutations") (("" (SKEEP) (("" (INST -1 "x_1") (("" (LEMMA "occ_in_insert") (("" (INST?) (("" (PROP) (("1" (EXPAND "occurrences" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "occurrences" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|occ_in_insert| FORMULA-DECL NIL |insertionsort| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|insertion_sort_is_permutations| 0 (|insertion_sort_is_permutations-1| |nil| 3581887977 ("" (MEASURE-INDUCT+ "l`length" "l") (("" (EXPAND "insertion_sort" 1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "ins_and_cons_in_perm_is_perm") (("2" (INST -1 "cdr(x!1)" "insertion_sort(cdr(x!1))" "car(x!1)") (("1" (INST -2 "cdr(x!1)") (("1" (PROP) (("1" (CASE "cons(car(x!1), cdr(x!1)) = x!1") (("1" (REPLACE -1 -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE - 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "cdr(x!1)") (("2" (PROP) (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|occurrences| DEF-DECL "nat" |sorting_aux| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |insertionsort| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|ins_and_cons_in_perm_is_perm| FORMULA-DECL NIL |insertionsort| NIL) (|insertion_sort| DEF-DECL "list[T]" |insertionsort| NIL) (|permutations| CONST-DECL "bool" |sorting_aux| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|insertion_sort_works| 0 (|insertion_sort_works-1| |nil| 3580193237 ("" (SKEEP) (("" (REWRITE "insertion_sort_is_permutations") (("" (REWRITE "insertionsort_is_sorted") NIL NIL)) NIL)) NIL) ((|insertion_sort_is_permutations| FORMULA-DECL NIL |insertionsort| NIL) (T FORMAL-TYPE-DECL NIL |insertionsort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|insertionsort_is_sorted| FORMULA-DECL NIL |insertionsort| NIL)) SHOSTAK)))
