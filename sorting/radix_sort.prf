(radix_sort (radixsort_aux_TCC1 0 (radixsort_aux_TCC1-1 nil 3779626281 ("" (subtype-tcc) nil nil) nil nil (radixsort_aux subtype "(number_fields.-)(radix_sort.N, radix_sort.i)" "naturalnumber"))) (radixsort_aux_TCC2 0 (radixsort_aux_TCC2-1 nil 3779626281 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (radixsort_aux subtype "radix_sort.i" "below(radix_sort.N)"))) (radixsort_aux_TCC3 0 (radixsort_aux_TCC3-1 nil 3779626281 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (radixsort_aux subtype "(number_fields.+)(radix_sort.i, 1)" "upto[N]"))) (radixsort_aux_TCC4 0 (radixsort_aux_TCC4-1 nil 3779626281 ("" (termination-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (radixsort_aux termination "radix_sort.radixsort_aux(mergesort[radix_sort.T, radix_sort.leq(radix_sort.i)].merge_sort(radix_sort.l), (number_fields.+)(radix_sort.i, 1))" "nil"))) (radixsort_TCC1 0 (radixsort_TCC1-1 nil 3779626281 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (radixsort subtype "0" "upto[N]"))) (radixsort_permutes 0 (radixsort_permutes-2 "" 3783765641 ("" (skeep) (("" (expand "radixsort") (("" (case "FORALL(i:upto(N)): FORALL(l: list[T],l_: list[T] | permutations[T](l,l_) ): permutations[T](radixsort_aux(l, N-i), l_)") (("1" (inst -1 "N") (("1" (inst -1 "l" "l") (("1" (assert) nil nil) ("2" (expand "permutations") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct "i") (("1" (assert) (("1" (expand "radixsort_aux") (("1" (propax) nil nil)) nil)) nil) ("2" (skeep) (("2" (skeep 1) (("2" (expand "radixsort_aux" 1) (("2" (inst? -2) (("1" (typepred "l_") (("1" (lemma "merge_sort_is_permutation[T,leq(N-1-jt)]") (("1" (inst -1 "l!1") (("1" (lemma "permutations_is_transitive[T]") (("1" (inst? -1 :where 1) (("1" (inst? -1 :where -2) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((radixsort const-decl "list[T]" radix_sort nil) (NOT const-decl "[bool -> bool]" booleans nil) (permutations_is_transitive formula-decl nil sorting_aux nil) (merge_sort_is_permutation formula-decl nil mergesort nil) (l!1 skolem-const-decl "list[T]" radix_sort nil) (l_ skolem-const-decl "{l_: list[T] | permutations[T](l!1, l_)}" radix_sort nil) (jt skolem-const-decl "upto(N)" radix_sort nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (PRED type-eq-decl nil defined_types nil) (total_preorder? const-decl "bool" total_preorder nil) (leq formal-const-decl "[below(N) -> (total_preorder?[T])]" radix_sort nil) (merge_sort def-decl "list[T]" mergesort nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (pred type-eq-decl nil defined_types nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (l skolem-const-decl "list[T]" radix_sort nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (T formal-type-decl nil radix_sort nil) (list type-decl nil list_adt nil) (permutations const-decl "bool" sorting_aux nil) (upto nonempty-type-eq-decl nil nat_types nil) (radixsort_aux def-decl "list[T]" radix_sort nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) shostak) (radixsort_permutes-1 nil 3748006034 ("" (skeep) (("" (expand "radixsort") (("" (case "FORALL(i:upto(N)): FORALL(l: list[T],l_: list[T] | permutations[T](l,l_) ): permutations[T](radixsort_aux(l, N-i), l_)") (("1" (inst -1 "N") (("1" (inst -1 "l" "l") (("1" (assert) nil nil) ("2" (expand "permutations") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct "i") (("1" (assert) (("1" (expand "radixsort_aux") (("1" (propax) nil nil)) nil)) nil) ("2" (skeep) (("2" (skeep 1) (("2" (expand "radixsort_aux" 1) (("2" (inst -2 "merge_sort[T, leq(N - 1 - jt)](l!1)" "l_") (("1" (typepred "l_") (("1" (lemma "merge_sort_is_permutation[T,leq(N - 1 - jt)]") (("1" (inst -1 "l!1") (("1" (lemma "permutations_is_transitive[T]") (("1" (inst? -1 :where 1) (("1" (inst? -1 :where -2) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((permutations_is_transitive formula-decl nil sorting_aux nil) (merge_sort_is_permutation formula-decl nil mergesort nil) (total_preorder? const-decl "bool" total_preorder nil) (merge_sort def-decl "list[T]" mergesort nil) (permutations const-decl "bool" sorting_aux nil)) nil)) (lex_TCC1 0 (lex_TCC1-1 nil 3783704369 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (lex subtype "(number_fields.-)(radix_sort.i, 1)" "below(radix_sort.N)"))) (lex_TCC2 0 (lex_TCC2-1 nil 3783704369 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (lex subtype "(number_fields.-)(radix_sort.i, 1)" "upto(radix_sort.N)"))) (lex_total_preorder 0 (lex_total_preorder-1 nil 3783757278 ("" (case "forall(i : upto[N]) : total_preorder?[T](lex(i))") (("1" (propax) nil nil) ("2" (hide 2) (("2" (measure-induct+ "i" "i") (("2" (expand "lex" 1) (("2" (expand "total_preorder?" 1) (("2" (prop) (("1" (expand "preorder?") (("1" (prop) (("1" (expand "reflexive?") (("1" (skeep) (("1" (assert) (("1" (prop) (("1" (typepred "leq(x!1-1)") (("1" (expand "total_preorder?") (("1" (expand "preorder?") (("1" (expand "reflexive?") (("1" (prop) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "leq(x!1-1)") (("2" (expand "total_preorder?") (("2" (expand "preorder?") (("2" (expand "reflexive?") (("2" (prop) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "leq(x!1-1)") (("3" (expand "total_preorder?") (("3" (expand "preorder?") (("3" (prop) (("3" (expand "reflexive?") (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("4" (inst -2 "x!1-1") (("4" (assert) (("4" (expand "total_preorder?") (("4" (expand "preorder?") (("4" (expand "reflexive?") (("4" (prop) (("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "transitive?") (("2" (skeep) (("2" (assert) (("2" (flatten 2) (("2" (split 3) (("1" (assert) (("1" (case "leq(x!1 - 1)(x_1, y_1) and leq(x!1 - 1)(y_1, z)") (("1" (hide-all-but (-1 1)) (("1" (typepred "leq(x!1 - 1)") (("1" (expand "total_preorder?") (("1" (expand "preorder?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x_1" "y_1" "z") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split 1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but (1 3)) (("2" (typepred "leq(x!1 - 1)") (("2" (expand "total_preorder?") (("2" (expand "dichotomous?") (("2" (prop) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (split -1) (("1" (split -2) (("1" (flatten) (("1" (typepred "leq(x!1 - 1)") (("1" (assert) (("1" (expand "total_preorder?" -1) (("1" (prop) (("1" (hide-all-but (-1 -3 -4 1)) (("1" (expand "preorder?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x_1" "y_1" "z") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 -2 -5 1)) (("2" (expand "preorder?") (("2" (expand "transitive?") (("2" (prop) (("2" (inst -3 "z" "x_1" "y_1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (hide-all-but (-1 -4 1)) (("1" (typepred "leq(x!1 - 1)") (("1" (expand "total_preorder?") (("1" (expand "preorder?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x_1" "y_1" "z") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 -2 1)) (("2" (typepred "leq(x!1-1)") (("2" (expand "total_preorder?") (("2" (expand "preorder?") (("2" (expand "transitive?") (("2" (prop) (("2" (inst -2 "y_1" "z" "x_1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split -4) (("1" (flatten) (("1" (split) (("1" (hide-all-but (-1 -2 1)) (("1" (typepred "leq(x!1-1)") (("1" (expand "total_preorder?") (("1" (expand "preorder?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x_1" "y_1" "z") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 -3 1)) (("2" (typepred "leq(x!1-1)") (("2" (expand "total_preorder?") (("2" (expand "preorder?") (("2" (expand "transitive?") (("2" (prop) (("2" (inst -2 "z" "x_1" "y_1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but (-3 -6 -7 1 2)) (("2" (inst -3 "x!1-1") (("2" (assert) (("2" (expand "total_preorder?") (("2" (expand "preorder?") (("2" (expand "transitive?") (("2" (prop) (("2" (inst -4 "x_1" "y_1" "z") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "dichotomous?") (("2" (skeep) (("2" (assert) (("2" (flatten) (("2" (split) (("1" (assert) (("1" (assert) (("1" (typepred "leq(x!1-1)") (("1" (hide-all-but (-1 1 5)) (("1" (expand "total_preorder?") (("1" (expand "dichotomous?") (("1" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst -3 "x!1-1") (("2" (assert) (("2" (expand "total_preorder?") (("2" (expand "dichotomous?") (("2" (prop) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (leq formal-const-decl "[below(N) -> (total_preorder?[T])]" radix_sort nil) (below type-eq-decl nil naturalnumbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reflexive? const-decl "bool" relations nil) (dichotomous? const-decl "bool" orders nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (wf_nat formula-decl nil naturalnumbers nil) (measure_induction formula-decl nil measure_induction nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (T formal-type-decl nil radix_sort nil) (PRED type-eq-decl nil defined_types nil) (total_preorder? const-decl "bool" total_preorder nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (lex inductive-decl "bool" radix_sort nil)) nil)) (merge_sort_lex_sorted_TCC1 0 (merge_sort_lex_sorted_TCC1-1 nil 3783773838 ("" (subtype-tcc) nil nil) nil nil (merge_sort_lex_sorted subtype "radix_sort.i" "upto(radix_sort.N)"))) (merge_sort_lex_sorted_TCC2 0 (merge_sort_lex_sorted_TCC2-1 nil 3783773838 ("" (lemma "lex_total_preorder") (("" (skeep) (("" (inst?) nil nil)) nil)) nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (lex_total_preorder formula-decl nil radix_sort nil)) nil (merge_sort_lex_sorted subtype "radix_sort.lex(radix_sort.i)" "(total_preorder[radix_sort.T].total_preorder?)"))) (merge_sort_lex_sorted_TCC3 0 (merge_sort_lex_sorted_TCC3-1 nil 3783773838 ("" (subtype-tcc) nil nil) nil nil (merge_sort_lex_sorted subtype "(number_fields.+)(1, radix_sort.i)" "upto(radix_sort.N)"))) (merge_sort_lex_sorted_TCC4 0 (merge_sort_lex_sorted_TCC4-1 nil 3783773838 ("" (skeep) (("" (use "lex_total_preorder") nil nil)) nil) ((is_sorted? const-decl "bool" sorting nil) (lex inductive-decl "bool" radix_sort nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (T formal-type-decl nil radix_sort nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (upto nonempty-type-eq-decl nil nat_types nil) (N formal-const-decl "nat" radix_sort nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (lex_total_preorder formula-decl nil radix_sort nil)) nil (merge_sort_lex_sorted subtype "radix_sort.lex((number_fields.+)(1, radix_sort.i))" "(total_preorder[radix_sort.T].total_preorder?)"))) (merge_sort_lex_sorted 0 (merge_sort_lex_sorted-1 nil 3783774155 ("" (skeep :preds? t) (("" (expand "is_sorted?" 1) (("" (skeep) (("" (expand "lex" 1) (("" (use "merge_sort_is_sorted[T,leq(i)]") (("" (expand "is_sorted?" -1) (("" (inst -1 "k") (("" (assert) (("" (flatten) (("" (assert) (("" (lemma "merge_sort_is_conservative[T,leq(i)]") (("" (inst -1 "l" "k" "k+1") (("" (assert) (("" (skolem -1 ("j1" "j2")) (("" (flatten) (("" (replace -2 :hide? t) (("" (replace -2 :hide? t) (("" (use "is_sorted_implies_monotone[T,lex(i)]") (("1" (assert) (("1" (case "j1=j2") (("1" (lemma "lex_total_preorder") (("1" (inst?) (("1" (expand "total_preorder?") (("1" (expand "preorder?") (("1" (expand "reflexive?") (("1" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -1 "j2" "j1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (use "lex_total_preorder") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (is_sorted? const-decl "bool" sorting nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (lex inductive-decl "bool" radix_sort nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (is_sorted_implies_monotone formula-decl nil sorting nil) (= const-decl "[T, T -> boolean]" equalities nil) (upto nonempty-type-eq-decl nil nat_types nil) (preorder? const-decl "bool" orders nil) (nth def-decl "T" list_props nil) (reflexive? const-decl "bool" relations nil) (lex_total_preorder formula-decl nil radix_sort nil) (j2 skolem-const-decl "below[length(l)]" radix_sort nil) (j1 skolem-const-decl "below[length(l)]" radix_sort nil) (l skolem-const-decl "list[T]" radix_sort nil) (merge_sort_is_conservative formula-decl nil mergesort nil) (below type-eq-decl nil nat_types nil) (merge_sort def-decl "list[T]" mergesort nil) (length def-decl "nat" list_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (leq formal-const-decl "[below(N) -> (total_preorder?[T])]" radix_sort nil) (total_preorder? const-decl "bool" total_preorder nil) (PRED type-eq-decl nil defined_types nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T formal-type-decl nil radix_sort nil) (merge_sort_is_sorted formula-decl nil mergesort nil)) shostak)) (radix_sort_is_sorted_TCC1 0 (radix_sort_is_sorted_TCC1-2 "" 3884876837 ("" (assert) nil nil) nil shostak (radix_sort_is_sorted_ subtype "radix_sort.N" "upto(radix_sort.N)")) (radix_sort_is_sorted_TCC1-1 nil 3783773838 ("" (lemma "lex_total_preorder") (("" (propax) nil nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (radix_sort_is_sorted_ subtype "radix_sort.N" "upto(radix_sort.N)"))) (radix_sort_is_sorted_TCC2 0 (radix_sort_is_sorted_TCC2-3 "" 3884878192 ("" (lemma "lex_total_preorder") (("" (inst?) nil nil)) nil) nil shostak (radix_sort_is_sorted_ subtype "radix_sort.lex(radix_sort.N)" "(total_preorder[radix_sort.T].total_preorder?)")) (radix_sort_is_sorted_TCC2-2 nil 3783775324 ("" (skeep) (("" (use "merge_sort_lex_sorted") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ((upto nonempty-type-eq-decl nil nat_types nil) (N formal-const-decl "nat" radix_sort nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lex_total_preorder formula-decl nil radix_sort nil)) nil (radix_sort_is_sorted_ subtype "radix_sort.lex(radix_sort.N)" "(total_preorder[radix_sort.T].total_preorder?)")) (radix_sort_is_sorted_TCC2-1 nil 3783773838 ("" (recursive-judgement-tcc) nil nil) nil nil (radix_sort_is_sorted_ subtype "radix_sort.lex(radix_sort.N)" "(total_preorder[radix_sort.T].total_preorder?)"))) (radix_sort_is_sorted_TCC3 0 (radix_sort_is_sorted_TCC3-1 nil 3783775400 ("" (use "lex_total_preorder") nil nil) ((lex_total_preorder formula-decl nil radix_sort nil)) nil (radix_sort_is_sorted_ subtype "radix_sort.lex(radix_sort.i)" "(total_preorder[radix_sort.T].total_preorder?)"))) (radix_sort_is_sorted_TCC4 0 (radix_sort_is_sorted_TCC4-1 nil 3783775400 ("" (tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (T formal-type-decl nil radix_sort nil) (list type-decl nil list_adt nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (lex inductive-decl "bool" radix_sort nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (is_sorted? const-decl "bool" sorting nil)) nil (radix_sort_is_sorted_ subtype "radix_sort.l" "(sorting[radix_sort.T, radix_sort.lex(radix_sort.N)].is_sorted?)"))) (radix_sort_is_sorted_TCC5 0 (radix_sort_is_sorted_TCC5-2 nil 3783775546 ("" (skeep) (("" (use "merge_sort_lex_sorted") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ((merge_sort_lex_sorted formula-decl nil radix_sort nil) (below type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (T formal-type-decl nil radix_sort nil) (list type-decl nil list_adt nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (lex inductive-decl "bool" radix_sort nil) (is_sorted? const-decl "bool" sorting nil) (l skolem-const-decl "list[T]" radix_sort nil) (i skolem-const-decl "{i: upto[N] | is_sorted?[T, lex(i)](l)}" radix_sort nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (radix_sort_is_sorted_ subtype "(number_fields.+)(radix_sort.i, 1)" "{i_1: nat_types[radix_sort.N].upto | sorting[radix_sort.T, radix_sort.lex(i_1)].is_sorted?(mergesort[radix_sort.T, radix_sort.leq(radix_sort.i)].merge_sort(radix_sort.l))}")) (radix_sort_is_sorted_TCC5-1 nil 3783775400 ("" (recursive-judgement-tcc) nil nil) nil nil (radix_sort_is_sorted_ subtype "(number_fields.+)(radix_sort.i, 1)" "{i_1: nat_types[radix_sort.N].upto | sorting[radix_sort.T, radix_sort.lex(i_1)].is_sorted?(mergesort[radix_sort.T, radix_sort.leq(radix_sort.i)].merge_sort(radix_sort.l))}"))) (radixsort_sorts 0 (radixsort_sorts-3 "" 3783775456 ("" (skeep) (("" (expand "radixsort") (("" (use "radix_sort_is_sorted") (("" (hide 2) (("" (expand "is_sorted?") (("" (expand "lex") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (radixsort const-decl "list[T]" radix_sort nil) (T formal-type-decl nil radix_sort nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" radix_sort nil) (upto nonempty-type-eq-decl nil nat_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (lex inductive-decl "bool" radix_sort nil) (is_sorted? const-decl "bool" sorting nil) (l skolem-const-decl "list[T]" radix_sort nil) (radix_sort_is_sorted recursive-judgement-axiom nil radix_sort nil)) shostak) (radixsort_sorts-2 nil 3778351998 ("" (skeep) (("" (expand "radixsort") (("" (rewrite "radixsort_aux_sorts") nil nil)) nil)) nil) ((is_sorted? const-decl "bool" sorting nil)) nil) (radixsort_sorts-1 nil 3778238628 ("" (skeep) (("" (expand "radixsort") (("" (lemma "merge_sort_is_sorted[T, <=]") (("" (inst?) (("" (lemma "merge_sort_is_sorted[T, <<]") (("" (inst -1 "merge_sort[T, <=](l)") (("" (expand "is_sorted?" 1) (("" (skeep) (("" (expand "lex") (("" (prop) (("1" (expand "is_sorted?" -1) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "is_sorted?" -1) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (expand "is_sorted?" -1) (("3" (inst?) (("3" (assert) nil nil)) nil)) nil) ("4" (expand "is_sorted?" -2) (("4" (inst?) (("4" (assert) nil nil)) nil)) nil) ("5" (expand "is_sorted?" -2) (("5" (inst -2 "k") (("5" (lemma "merge_sort_is_conservative[T, <<]") (("5" (inst -1 "merge_sort[T, <=](l)" "k" "1 + k") (("5" (assert) (("5" (assert) (("5" (skeep) (("5" (lemma "is_sorted_implies_all_sorted[T,<=]") (("5" (inst?) (("5" (assert) (("5" (inst -1 "j" "i") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((total_preorder? const-decl "bool" total_preorder nil) (merge_sort_is_sorted formula-decl nil mergesort nil) (is_sorted? const-decl "bool" sorting nil) (merge_sort_is_conservative formula-decl nil mergesort nil) (merge_sort def-decl "list[T]" mergesort nil)) shostak)))
