(|robinsonunificationEF| (|IMP_robinsonunification_TCC1| 0 (|IMP_robinsonunification_TCC1-1| |nil| 3522686037 ("" (LEMMA VAR_COUNTABLE) (("" (PROPAX) NIL NIL)) NIL) ((|var_countable| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|IMP_robinsonunification| ASSUMING "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification" "var_countable: ASSUMPTION countability[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].is_countably_infinite(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)"))) (|IMP_robinsonunification_TCC2| 0 (|IMP_robinsonunification_TCC2-1| |nil| 3522686037 ("" (LEMMA VAR_NONEMPTY) (("" (PROPAX) NIL NIL)) NIL) ((|var_nonempty| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|IMP_robinsonunification| ASSUMING "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification" "var_nonempty: ASSUMPTION sets[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].nonempty?(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)"))) (|IMP_robinsonunification_TCC3| 0 (|IMP_robinsonunification_TCC3-1| |nil| 3522686037 ("" (LEMMA SYMBOL_NONEMPTY) (("" (PROPAX) NIL NIL)) NIL) ((|symbol_nonempty| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|IMP_robinsonunification| ASSUMING "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification" "symbol_nonempty: ASSUMPTION sets[robinsonunification.symbol].nonempty?({f: robinsonunification.symbol | robinsonunification.arity(f) = 1})"))) (|right_pos_TCC1| 0 (|right_pos_TCC1-2| "" 3884909417 ("" (SKOSIMP) (("" (SKOSIMP) (("" (ASSERT) (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|right_pos| SUBTYPE "robinsonunificationEF.p" "not_empty_seq[posnat]")) (|right_pos_TCC1-1| |nil| 3506350454 ("" (SKOSIMP) (("" (SKOSIMP) (("" (ASSERT) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|right_pos| SUBTYPE "robinsonunificationEF.p" "not_empty_seq[posnat]"))) (|right_pos_TCC2| 0 (|right_pos_TCC2-2| "" 3884909443 ("" (SKOSIMP*) (("" (LEMMA "delete_is_position") (("" (INST -1 "p!1" "s!1") (("" (ASSERT) (("" (FLATTEN) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|right_pos| SUBTYPE "robinsonunificationEF.p1" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)")) (|right_pos_TCC2-1| |nil| 3506350454 ("" (SKOSIMP*) (("" (LEMMA DELETE_IS_POSITION) (("" (INST -1 P!1 S!1) (("" (ASSERT) (("" (FLATTEN) (("" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|right_pos| SUBTYPE "robinsonunificationEF.p1" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)"))) (|right_pos_TCC3| 0 (|right_pos_TCC3-2| "" 3884909467 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST -1 "p!1" "s!1") (("" (ASSERT) (("" (FLATTEN) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|right_pos| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|right_pos_TCC3-1| |nil| 3506350454 ("" (SKOSIMP*) (("" (LEMMA SUBTERM_IS_APP) (("" (INST -1 P!1 S!1) (("" (ASSERT) (("" (FLATTEN) (("" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|right_pos| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|right_pos_TCC4| 0 (|right_pos_TCC4-2| "" 3884909487 ("" (SKOSIMP*) (("" (HIDE -1 -3 -4) (("" (REPLACES -1) (("" (EXPAND DELETE 2) (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|right_pos| TERMINATION "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p1)" "NIL")) (|right_pos_TCC4-1| |nil| 3506350454 ("" (SKOSIMP*) (("" (HIDE -1 -3 -4) (("" (REPLACES -1) (("" (EXPAND DELETE 2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|right_pos| TERMINATION "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p1)" "NIL"))) (|right_pos_TCC5| 0 (|right_pos_TCC5-2| "" 3884909540 ("" (SKOSIMP*) (("" (LEMMA "positions_of_arg") (("" (INST -1 "subtermOF(s!1, p1!1)" "j!1 + i!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1") (("1" (LEMMA "delete_is_position") (("1" (INST -1 "p!1" "s!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 3)) (("1" (CASE "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (TYPEPRED "args(subtermOF(s!1, p1!1))") (("2" (REPLACE -1 1) (("2" (REPLACE -6 1 RL) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|positions_of_arg| FORMULA-DECL NIL |positions| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (O CONST-DECL "finseq" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i!1| SKOLEM-CONST-DECL "nat" |robinsonunificationEF| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |robinsonunificationEF| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|j!1| SKOLEM-CONST-DECL "below(n!1 - i!1)" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|p1!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|right_pos| SUBTYPE "seq_extras[posnat].add_last(robinsonunificationEF.p1, (number_fields.+)((number_fields.+)(robinsonunificationEF.i, robinsonunificationEF.j), 1))" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)")) (|right_pos_TCC5-1| |nil| 3506350454 ("" (SKOSIMP*) (("" (LEMMA POSITIONS_OF_ARG) (("" (INST -1 "subtermOF(s!1, p1!1)" "j!1 + i!1") (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1") (("1" (LEMMA DELETE_IS_POSITION) (("1" (INST -1 P!1 S!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 3)) (("1" (CASE "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED J!1) (("2" (TYPEPRED "args(subtermOF(s!1, p1!1))") (("2" (REPLACE -1 1) (("2" (REPLACE -6 1 RL) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|positions_of_arg| FORMULA-DECL NIL |positions| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (O CONST-DECL "finseq" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) NIL (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) NIL (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|right_pos| SUBTYPE "seq_extras[posnat].add_last(robinsonunificationEF.p1, (number_fields.+)((number_fields.+)(robinsonunificationEF.i, robinsonunificationEF.j), 1))" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)"))) (|right_pos_TCC6| 0 (|right_pos_TCC6-3| "" 3884909577 ("" (SKOSIMP*) (("" (LEMMA "positions_of_arg") (("" (LEMMA "pos_o_term") (("" (LEMMA "delete_is_position") (("" (INST -1 "p!1" "s!1") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|positions_of_arg| FORMULA-DECL NIL |positions| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL)) SHOSTAK (|right_pos| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.p), 1)" "below[length(p)]")) (|right_pos_TCC6-2| "" 3790333618 ("" (SKOSIMP*) (("" (LEMMA POSITIONS_OF_ARG) (("" (LEMMA POS_O_TERM) (("" (LEMMA DELETE_IS_POSITION) (("" (INST -1 P!1 S!1) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|positions_of_arg| FORMULA-DECL NIL |positions| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL)) SHOSTAK (|right_pos| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.p), 1)" "below[length(p)]")) (|right_pos_TCC6-1| |nil| 3506350454 ("" (SKOSIMP*) (("" (LEMMA POSITIONS_OF_ARG) (("" (INST -1 "subtermOF(s!1, p1!1)" "j!1 + i!1") (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1") (("1" (LEMMA DELETE_IS_POSITION) (("1" (INST -1 P!1 S!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 3)) (("1" (CASE "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED J!1) (("2" (TYPEPRED "args(subtermOF(s!1, p1!1))") (("2" (REPLACE -1 1) (("2" (REPLACE -6 1 RL) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|right_pos| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.p), 1)" "below[length(p)]"))) (|next_position_TCC1| 0 (|next_position_TCC1-2| "" 3884909601 ("" (SKOSIMP) (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK (|next_position| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.p), 1)" "below[length(p)]")) (|next_position_TCC1-1| |nil| 3488040223 ("" (SKOSIMP) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|next_position| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.p), 1)" "below[length(p)]"))) (|next_position_TCC2| 0 (|next_position_TCC2-1| |nil| 3488040223 ("" (SKOSIMP) (("" (REWRITE DELETE_IS_POSITION) (("" (HIDE 3) (("" (FLATTEN) (("" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) NIL (|next_position| SUBTYPE "seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)"))) (|next_position_TCC3| 0 (|next_position_TCC3-2| "" 3884909619 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST -1 "p!1" "s!1") (("" (ASSERT) (("" (HIDE 3) (("" (FLATTEN) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|next_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1)))" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|next_position_TCC3-1| |nil| 3488040223 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST -1 P!1 S!1) (("" (ASSERT) (("" (HIDE 3) (("" (FLATTEN) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1)))" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_position_TCC4| 0 (|next_position_TCC4-1| |nil| 3488040223 ("" (SKOSIMP*) (("" (REWRITE "empty_0") NIL NIL)) NIL) ((|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|next_position| SUBTYPE "robinsonunificationEF.p" "not_empty_seq[posnat]"))) (|next_position_TCC5| 0 (|next_position_TCC5-2| "" 3884910093 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(p!1, length(p!1) - 1)" :HIDE? NIL) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (TYPEPRED "args(subtermOF(s!1, q!1))") (("1" (REPLACE -1 3 RL) (("1" (HIDE -1) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (REPLACE -2 -1) (("1" (LEMMA "add_last_delete_is_o[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (REPLACE -3 -1) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "q!1" "#(p!1`seq(p!1`length - 1))" "s!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE-ALL-BUT -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND* "union" "IUnion" "member") (("3" (SPLIT) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "catenate") (("2" (SKOSIMP) (("2" (EXPAND "member") (("2" (TYPEPRED "i!1") (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (DECOMPOSE-EQUALITY -4) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "#" -1) (("2" (EXPAND "#" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST?) (("2" (CASE "p!1`seq(p!1`length - 1) = last(p!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (<= CONST-DECL "bool" |reals| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|catenate| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|add_last_delete_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK (|next_position| SUBTYPE "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))))), seq_extras[posnat].last(robinsonunificationEF.p))" "nat")) (|next_position_TCC5-1| |nil| 3496419653 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(p!1, length(p!1) - 1)" :HIDE? NIL) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (TYPEPRED "args(subtermOF(s!1, q!1))") (("1" (REPLACE -1 3 RL) (("1" (HIDE -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (REPLACE -2 -1) (("1" (LEMMA ADD_LAST_DELETE_IS_O[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -3 -1) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "q!1" "#(p!1`seq(p!1`length - 1))" "s!1") (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE-ALL-BUT -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND* UNION IUNION MEMBER) (("3" (SPLIT) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND CATENATE) (("2" (SKOSIMP) (("2" (EXPAND MEMBER) (("2" (TYPEPRED I!1) (("2" (EXPAND ADD_FIRST) (("2" (EXPAND INSERT?) (("2" (DECOMPOSE-EQUALITY -4) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND "#" -1) (("2" (EXPAND "#" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST?) (("2" (CASE "p!1`seq(p!1`length - 1) = last(p!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (<= CONST-DECL "bool" |reals| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|catenate| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|add_last_delete_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) NIL (|next_position| SUBTYPE "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))))), seq_extras[posnat].last(robinsonunificationEF.p))" "nat"))) (|next_position_TCC6| 0 (|next_position_TCC6-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (TYPEPRED "length(z!1`3)") (("" (CASE "length(z!1`3)=0") (("1" (REWRITE "empty_0") NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) NIL (|next_position| SUBTYPE "(number_fields.-)(length(robinsonunificationEF.z`3), 1)" "below[length(z`3)]"))) (|next_position_TCC7| 0 (|next_position_TCC7-1| |nil| 3496419653 ("" (SKOSIMP) (("" (REWRITE DELETE_IS_POSITION) (("" (HIDE 3) (("" (FLATTEN) (("" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) NIL (|next_position| SUBTYPE "seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.z`1)"))) (|next_position_TCC8| 0 (|next_position_TCC8-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST?) (("" (ASSERT) (("" (PROP) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1)))" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_position_TCC9| 0 (|next_position_TCC9-3| "" 3884910299 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(z!1`3, length(z!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "z!1`3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "z!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.z`3" "not_empty_seq[posnat]")) (|next_position_TCC9-2| "" 3790333621 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(z!1`3, length(z!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 "z!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.z`3" "not_empty_seq[posnat]")) (|next_position_TCC9-1| |nil| 3496419653 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(z!1`3, length(z!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (TYPEPRED "args(subtermOF(z!1`1, q!1))") (("1" (REPLACE -1 3 RL) (("1" (HIDE -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (REPLACE -2 -1) (("1" (LEMMA ADD_LAST_DELETE_IS_O[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -3 -1) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "q!1" "#(z!1`3`seq(z!1`3`length - 1))" "z!1`1") (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE-ALL-BUT -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND* UNION IUNION MEMBER) (("3" (SPLIT) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND CATENATE) (("2" (SKOSIMP) (("2" (EXPAND MEMBER) (("2" (TYPEPRED I!1) (("2" (EXPAND ADD_FIRST) (("2" (EXPAND INSERT?) (("2" (DECOMPOSE-EQUALITY -4) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND "#" -1) (("2" (EXPAND "#" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST?) (("2" (CASE "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 "z!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|next_position| SUBTYPE "robinsonunificationEF.z`3" "not_empty_seq[posnat]"))) (|next_position_TCC10| 0 (|next_position_TCC10-2| "" 3884910398 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(z!1`3, length(z!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (TYPEPRED "args(subtermOF(z!1`1, q!1))") (("1" (REPLACE -1 3 RL) (("1" (HIDE -1) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (REPLACE -2 -1) (("1" (LEMMA "add_last_delete_is_o[posnat]") (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (REPLACE -3 -1) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "q!1" "#(z!1`3`seq(z!1`3`length - 1))" "z!1`1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE-ALL-BUT -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND* "union" "IUnion" "member") (("3" (SPLIT) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "catenate") (("2" (SKOSIMP) (("2" (EXPAND "member") (("2" (TYPEPRED "i!1") (("2" (EXPAND "add_first") (("2" (EXPAND "insert?") (("2" (DECOMPOSE-EQUALITY -4) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "#" -1) (("2" (EXPAND "#" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST?) (("2" (CASE "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "z!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (<= CONST-DECL "bool" |reals| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|catenate| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|add_last_delete_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK (|next_position| SUBTYPE "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))))), seq_extras[posnat].last(robinsonunificationEF.z`3))" "nat")) (|next_position_TCC10-1| |nil| 3496419653 ("" (SKOSIMP) (("" (NAME-REPLACE "q!1" "delete(z!1`3, length(z!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (TYPEPRED "args(subtermOF(z!1`1, q!1))") (("1" (REPLACE -1 3 RL) (("1" (HIDE -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (REPLACE -2 -1) (("1" (LEMMA ADD_LAST_DELETE_IS_O[POSNAT]) (("1" (INST -1 "z!1`3") (("1" (ASSERT) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -3 -1) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "q!1" "#(z!1`3`seq(z!1`3`length - 1))" "z!1`1") (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE-ALL-BUT -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND* UNION IUNION MEMBER) (("3" (SPLIT) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND CATENATE) (("2" (SKOSIMP) (("2" (EXPAND MEMBER) (("2" (TYPEPRED I!1) (("2" (EXPAND ADD_FIRST) (("2" (EXPAND INSERT?) (("2" (DECOMPOSE-EQUALITY -4) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND "#" -1) (("2" (EXPAND "#" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST?) (("2" (CASE "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 "z!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (<= CONST-DECL "bool" |reals| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|catenate| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|add_last_delete_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) NIL (|next_position| SUBTYPE "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))))), seq_extras[posnat].last(robinsonunificationEF.z`3))" "nat"))) (|next_position_TCC11| 0 (|next_position_TCC11-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (REPLACES -1) (("" (REWRITE "delete_is_position") (("" (PROP) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|next_position| SUBTYPE "robinsonunificationEF.pi0" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)"))) (|next_position_TCC12| 0 (|next_position_TCC12-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST?) (("" (INST -1 "s!1") (("" (ASSERT) (("" (PROP) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.pi0)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_position_TCC13| 0 (|next_position_TCC13-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (REPLACES -1) (("" (REWRITE DELETE_IS_POSITION) (("" (HIDE 3) (("" (FLATTEN) (("" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|next_position| SUBTYPE "robinsonunificationEF.pi0" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.t)"))) (|next_position_TCC14| 0 (|next_position_TCC14-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (LEMMA "subterm_is_app") (("" (INST?) (("" (ASSERT) (("" (INST -1 "t!1") (("" (ASSERT) (("" (PROP) (("" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.pi0)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_position_TCC15| 0 (|next_position_TCC15-3| "" 3884910624 ("" (SKOSIMP*) (("" (REPLACE -1 -3 RL) (("" (CASE "pi!1 = pi0!1 o #(last(p!1) + 1)") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "pi0!1" "#(last(p!1) + 1)" "t!1") (("1" (ASSERT) (("1" (HIDE 3) (("1" (SPLIT) (("1" (LEMMA "delete_is_position") (("1" (INST -1 "p!1" "t!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "pi0!1" "#(last(p!1) + 1)" "s!1") (("2" (ASSERT) (("2" (EXPAND "positionsOF" 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (LEMMA "subterm_is_app") (("1" (INST -1 "p!1" "t!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("2" (REPLACE -7 -2) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (CASE "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq") (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "pi0!1" "#(1 + last(p!1))" "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "positionsOF") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "union") (("3" (EXPAND "member") (("3" (FLATTEN) (("3" (EXPAND "IUnion") (("3" (EXPAND "finseq_appl") (("3" (INST 3 "last(p!1) + 1") (("1" (EXPAND "catenate") (("1" (INST 3 "empty_seq") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND* "member" "only_empty_seq") NIL NIL) ("2" (EXPAND* "member" "only_empty_seq") NIL NIL) ("3" (EXPAND* "union" "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "s!1" "s!1" "pi!1") (("2" (SPLIT) (("1" (CASE "delete(pi!1, length(pi!1) - 1) = pi0!1") (("1" (REPLACE -1 -2) (("1" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("1" (REPLACE -8 -1 RL) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -2 -1 RL) (("1" (REPLACE -1 -4 RL) (("1" (CASE "1 + last(p!1) = last(pi!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -9 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1)) (("2" (EXPAND* "add_last" "insert?" "delete") (("2" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "finseq_appl") (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2) (("1" (TYPEPRED "x!1") (("1" (INST -2 "x!1") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -2) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (DECOMPOSE-EQUALITY -3) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "finseq_appl") (("3" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -6 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -6 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND* "add_last" "o" "insert?") (("2" (CASE "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length") (("1" (REPLACE -1 1 RL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "finseq_appl") (("1" (DECOMPOSE-EQUALITY -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pi0!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|catenate| CONST-DECL "positions" |positions| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|union| CONST-DECL "set" |sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.pi" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.t)")) (|next_position_TCC15-2| "" 3803828749 ("" (SKOSIMP*) (("" (REPLACE -1 -3 RL) (("" (CASE "pi!1 = pi0!1 o #(last(p!1) + 1)") (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "pi0!1" "#(last(p!1) + 1)" "t!1") (("1" (ASSERT) (("1" (HIDE 3) (("1" (SPLIT) (("1" (LEMMA DELETE_IS_POSITION) (("1" (INST -1 "p!1" "t!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "pi0!1" "#(last(p!1) + 1)" "s!1") (("2" (ASSERT) (("2" (EXPAND POSITIONSOF 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (LEMMA SUBTERM_IS_APP) (("1" (INST -1 P!1 T!1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("2" (REPLACE -7 -2) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (CASE "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq") (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "pi0!1" "#(1 + last(p!1))" "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND POSITIONSOF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND UNION) (("3" (EXPAND MEMBER) (("3" (FLATTEN) (("3" (EXPAND IUNION) (("3" (EXPAND FINSEQ_APPL) (("3" (INST 3 "last(p!1) + 1") (("1" (EXPAND CATENATE) (("1" (INST 3 EMPTY_SEQ) (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND* MEMBER ONLY_EMPTY_SEQ) NIL NIL) ("2" (EXPAND* MEMBER ONLY_EMPTY_SEQ) NIL NIL) ("3" (EXPAND* UNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 S!1 S!1 PI!1) (("2" (SPLIT) (("1" (CASE "delete(pi!1, length(pi!1) - 1) = pi0!1") (("1" (REPLACE -1 -2) (("1" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("1" (REPLACE -8 -1 RL) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -2 -1 RL) (("1" (REPLACE -1 -4 RL) (("1" (CASE "1 + last(p!1) = last(pi!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -9 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1)) (("2" (EXPAND* ADD_LAST INSERT? DELETE) (("2" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2) (("1" (TYPEPRED X!1) (("1" (INST -2 X!1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -2) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (DECOMPOSE-EQUALITY -3) (("2" (TYPEPRED X!1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -6 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -6 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND* ADD_LAST O INSERT?) (("2" (CASE "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length") (("1" (REPLACE -1 1 RL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) NIL NIL NIL NIL (<= CONST-DECL "bool" |reals| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|catenate| CONST-DECL "positions" |positions| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) NIL (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|union| CONST-DECL "set" |sets| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.pi" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.t)")) (|next_position_TCC15-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (REPLACE -2 -4 RL) (("" (CASE "pi!1 = pi0!1 o #(last(p!1) + 1)") (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "pi0!1" "#(last(p!1) + 1)" "t!1") (("1" (ASSERT) (("1" (HIDE 3) (("1" (SPLIT) (("1" (LEMMA DELETE_IS_POSITION) (("1" (INST -1 "p!1" "t!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "pi0!1" "#(last(p!1) + 1)" "s!1") (("2" (ASSERT) (("2" (EXPAND POSITIONSOF 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (LEMMA SUBTERM_IS_APP) (("1" (INST -1 P!1 T!1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("2" (REPLACE -6 -2) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (CASE "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq") (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "pi0!1" "#(1 + last(p!1))" "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND POSITIONSOF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND UNION) (("3" (EXPAND MEMBER) (("3" (FLATTEN) (("3" (EXPAND IUNION) (("3" (EXPAND FINSEQ_APPL) (("3" (INST 3 "last(p!1) + 1") (("1" (EXPAND CATENATE) (("1" (INST 3 EMPTY_SEQ) (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND* MEMBER ONLY_EMPTY_SEQ) NIL NIL) ("2" (EXPAND* MEMBER ONLY_EMPTY_SEQ) NIL NIL) ("3" (EXPAND* UNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 S!1 S!1 PI!1) (("2" (SPLIT) (("1" (CASE "delete(pi!1, length(pi!1) - 1) = pi0!1") (("1" (REPLACE -1 -2) (("1" (TYPEPRED "args(subtermOF(t!1, pi0!1))" "args(subtermOF(s!1, pi0!1))") (("1" (REPLACE -7 -1 RL) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -2 -1 RL) (("1" (REPLACE -1 -4 RL) (("1" (CASE "1 + last(p!1) = last(pi!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -10 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (EXPAND* ADD_LAST INSERT? DELETE) (("2" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2) (("1" (TYPEPRED X!1) (("1" (INST -2 X!1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -2) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (DECOMPOSE-EQUALITY -3) (("2" (TYPEPRED X!1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -7 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -5 -7 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND* ADD_LAST O INSERT?) (("2" (CASE "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length") (("1" (REPLACE -1 1 RL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|next_position| SUBTYPE "robinsonunificationEF.pi" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.t)"))) (|next_position_TCC16| 0 (|next_position_TCC16-2| "" 3884910661 ("" (SKOSIMP*) (("" (LEMMA "next_position_tcc15") (("" (INST -1 "s!1" "t!1" "p!1") (("" (ASSERT) (("" (INST -1 "pi0!1") (("" (ASSERT) (("" (INST -1 "pi!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")) (|next_position_TCC16-1| |nil| 3497078571 ("" (SKOSIMP*) (("" (LEMMA NEXT_POSITION_TCC15) (("" (INST -1 S!1 T!1 P!1) (("" (ASSERT) (("" (INST -1 PI0!1) (("" (ASSERT) (("" (INST -1 PI!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|next_position| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}"))) (|next_position_TCC17| 0 (|next_position_TCC17-3| "" 3884910878 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("2" (REWRITE "lex2_lt") (("1" (FLATTEN) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (EXPAND* "add_last" "delete" "insert?") (("1" (EXPAND "finseq_appl") (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (REVEAL 3) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 3) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL 3) (("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)") (("1" (REPLACE -1 1) (("1" (REPLACE -2 1 RL) (("1" (REWRITE "both_sides_minus_lt2") (("1" (CASE "last(pi!1) = last(p!1) + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (REPLACE -1 -3 RL) (("2" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("2" (EXPAND "delete" 1) (("2" (EXPAND "finseq_appl") (("2" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "pi!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "add_last" "insert?") (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "pi!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND* "add_last" "insert?") (("1" (EXPAND "finseq_appl") (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* "add_last" "insert?" "finseq_appl") (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "pi!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 6)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 5)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "pi!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "next_position_tcc5") NIL NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "next_position_tcc5") (("4" (INST -1 "s!1" "s!1" "pi!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "pi!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|both_sides_minus_lt2| FORMULA-DECL NIL |real_props| NIL) (|pi!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|pi0!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)" "NIL")) (|next_position_TCC17-2| "" 3803830755 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("2" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-3 1)) (("1" (EXPAND* ADD_LAST DELETE INSERT?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (REVEAL 3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 3) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL 3) (("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)") (("1" (REPLACE -1 1) (("1" (REPLACE -2 1 RL) (("1" (REWRITE BOTH_SIDES_MINUS_LT2) (("1" (CASE "last(pi!1) = last(p!1) + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (REPLACE -1 -3 RL) (("2" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("2" (EXPAND DELETE 1) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 PI!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* ADD_LAST INSERT?) (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 PI!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND* ADD_LAST INSERT?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!1) (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 PI!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 6)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 5)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 PI!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE NEXT_POSITION_TCC5) NIL NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 S!1 S!1 PI!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 PI!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|both_sides_minus_lt2| FORMULA-DECL NIL |real_props| NIL) NIL (TRUE CONST-DECL "bool" |booleans| NIL) NIL (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)" "NIL")) (|next_position_TCC17-1| |nil| 3497078571 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-1 -6 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("2" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (EXPAND* ADD_LAST DELETE INSERT?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (REVEAL 3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 3) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL 3) (("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)") (("1" (REPLACE -1 1) (("1" (REPLACE -3 1 RL) (("1" (REWRITE BOTH_SIDES_MINUS_LT2) (("1" (CASE "last(pi!1) = last(p!1) + 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (REPLACE -2 -5 RL) (("2" (HIDE-ALL-BUT (-2 -5 1 5 6)) (("2" (EXPAND DELETE 1) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 PI!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* ADD_LAST INSERT?) (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 PI!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND* ADD_LAST INSERT?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!1) (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 PI!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 6)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 5)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 PI!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE NEXT_POSITION_TCC5) NIL NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 S!1 S!1 PI!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 PI!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)" "NIL"))) (|next_position_TCC18| 0 (|next_position_TCC18-2| "" 3884910926 ("" (SKOSIMP*) (("" (TYPEPRED "p!1") (("" (LEMMA "delete_is_position") (("" (INST-CP -1 "p!1" "s!1") (("" (INST -1 "p!1" "t!1") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL)) SHOSTAK (|next_position| SUBTYPE "robinsonunificationEF.pi0" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")) (|next_position_TCC18-1| |nil| 3497078571 ("" (SKOSIMP*) (("" (TYPEPRED P!1) (("" (LEMMA DELETE_IS_POSITION) (("" (INST-CP -1 P!1 S!1) (("" (INST -1 P!1 T!1) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL)) NIL (|next_position| SUBTYPE "robinsonunificationEF.pi0" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}"))) (|next_position_TCC19| 0 (|next_position_TCC19-3| "" 3884911037 ("" (SKOSIMP*) (("" (ASSERT) (("" (REWRITE "lex2_lt") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 1 4)) (("1" (EXPAND* "delete" "finseq_appl") (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 5) (("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -2 -3 3 5) (("4" (LEMMA "next_position_tcc5") (("4" (INST -1 "s!1" "t!1" "pi0!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "delete_is_position") (("2" (INST-CP -1 "p!1" "s!1") (("2" (INST -1 "p!1" "t!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "pi0!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|pi0!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)" "NIL")) (|next_position_TCC19-2| "" 3803831565 ("" (SKOSIMP*) (("" (ASSERT) (("" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 1 4)) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 3 5) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 S!1 T!1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -2 -3 3 5) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 S!1 T!1 PI0!1) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA DELETE_IS_POSITION) (("2" (INST-CP -1 P!1 S!1) (("2" (INST -1 P!1 T!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 PI0!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL NIL (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)" "NIL")) (|next_position_TCC19-1| |nil| 3506626310 ("" (SKOSIMP*) (("" (ASSERT) (("" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-2 1 4)) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 4 5) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 S!1 T!1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -3 4 5) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 S!1 T!1 PI0!1) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA DELETE_IS_POSITION) (("2" (INST-CP -1 P!1 S!1) (("2" (INST -1 P!1 T!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 3)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 PI0!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|next_position| TERMINATION "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)" "NIL"))) (|right_pos_subset| 0 (|right_pos_subset-5| "" 3884911393 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (EXPAND* "subset?" "member") (("" (SKOSIMP) (("" (EXPAND "right_pos" -2) (("" (EXPAND* "union" "IUnion" "member") (("" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND "only_empty_seq") (("1" (REPLACES -1) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND "only_empty_seq") (("1" (PROP) (("1" (EXPAND "union") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "singleton") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (EXPAND "delete" -2 1) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!2") (("1" (ASSERT) (("1" (INST -2 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "delete_is_position") (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -3) (("4" (NAME-REPLACE "pi" "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))" :HIDE? NIL) (("1" (CASE "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))") (("1" (REPLACE -1 -4 RL) (("1" (HIDE -2) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "pi" "q1!1" "x!1") (("1" (ASSERT) (("1" (LEMMA "right_pos_tcc5") (("1" (INST -1 "x!1" "x!2") (("1" (ASSERT) (("1" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)" "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))") (("1" (INST -1 "i!1") (("1" (REVEAL -5) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "right_pos_tcc3") (("2" (INST -1 "x!1" "x!2") (("2" (ASSERT) (("2" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)") (("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "delete_is_position") (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "x!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE - 2 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) (("1" (REVEAL 1) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!2") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) (("1" (TYPEPRED "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (REVEAL 1) (("3" (HIDE 2) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (REVEAL 1) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "x!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (REVEAL 1) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "x!2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKOSIMP) (("6" (TYPEPRED "i!2") (("6" (LEMMA "empty_0[posnat]") (("6" (REVEAL 1) (("6" (INST -1 "x!2") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOSIMP) (("7" (REVEAL 1) (("7" (LEMMA "empty_0[posnat]") (("7" (INST -1 "x!2") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKOSIMP) (("8" (REVEAL 1) (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "x!2") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (REVEAL 1) (("9" (LEMMA "empty_0[posnat]") (("9" (INST -1 "x!2") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p)}" |robinsonunificationEF| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|right_pos_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|right_pos_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|union| CONST-DECL "set" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|right_pos_subset-4| "" 3804364481 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (EXPAND* SUBSET? MEMBER) (("" (SKOSIMP) (("" (EXPAND RIGHT_POS -2) (("" (EXPAND* UNION IUNION MEMBER) (("" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (REPLACES -1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND UNION) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND SINGLETON) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (EXPAND DELETE -2 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -2 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -3) (("4" (NAME-REPLACE "pi" "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))" :HIDE? NIL) (("1" (CASE "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))") (("1" (REPLACE -1 -4 RL) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI Q1!1 X!1) (("1" (ASSERT) (("1" (LEMMA RIGHT_POS_TCC5) (("1" (INST -1 X!1 X!2) (("1" (ASSERT) (("1" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)" "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))") (("1" (INST -1 "i!1") (("1" (REVEAL -5) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA RIGHT_POS_TCC3) (("2" (INST -1 X!1 X!2) (("2" (ASSERT) (("2" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)") (("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE DELETE_IS_POSITION) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE - 2 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) (("1" (REVEAL 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) (("1" (TYPEPRED X!4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (REVEAL 1) (("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (REVEAL 1) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (REVEAL 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKOSIMP) (("6" (TYPEPRED I!2) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (REVEAL 1) (("6" (INST -1 X!2) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOSIMP) (("7" (REVEAL 1) (("7" (LEMMA EMPTY_0[POSNAT]) (("7" (INST -1 X!2) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKOSIMP) (("8" (REVEAL 1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (REVEAL 1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 X!2) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL NIL (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|right_pos_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|right_pos_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|union| CONST-DECL "set" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|right_pos_subset-3| "" 3803835823 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (EXPAND* SUBSET? MEMBER) (("" (SKOSIMP) (("" (EXPAND RIGHT_POS -2) (("" (EXPAND* UNION IUNION MEMBER) (("" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (REPLACES -1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND UNION) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND SINGLETON) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (EXPAND DELETE -2 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -2 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -3) (("4" (NAME-REPLACE "pi" "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))" :HIDE? NIL) (("1" (CASE "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))") (("1" (REPLACE -1 -4 RL) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI Q1!1 X!1) (("1" (ASSERT) (("1" (LEMMA RIGHT_POS_TCC5) (("1" (INST -1 X!1 X!2) (("1" (ASSERT) (("1" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)" "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))" "i!1") (("1" (ASSERT) (("1" (REVEAL -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA RIGHT_POS_TCC3) (("2" (INST -1 X!1 X!2) (("2" (ASSERT) (("2" (INST -1 "delete(x!2, length(x!2) - 1)" "last(x!2)") (("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE DELETE_IS_POSITION) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE - 2 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) (("1" (REVEAL 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) (("1" (TYPEPRED X!4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (REVEAL 1) (("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (REVEAL 1) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (REVEAL 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKOSIMP) (("6" (TYPEPRED I!2) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (REVEAL 1) (("6" (INST -1 X!2) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOSIMP) (("7" (REVEAL 1) (("7" (LEMMA EMPTY_0[POSNAT]) (("7" (INST -1 X!2) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKOSIMP) (("8" (REVEAL 1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (REVEAL 1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 X!2) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|right_pos_subset-2| "" 3790333635 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (EXPAND* SUBSET? MEMBER) (("" (SKOSIMP) (("" (EXPAND RIGHT_POS -2) (("" (EXPAND* UNION IUNION MEMBER) (("" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (REPLACES -1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND UNION) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND SINGLETON) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (EXPAND DELETE -2 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -2 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -3) (("4" (NAME-REPLACE "pi" "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))" :HIDE? NIL) (("1" (CASE "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))") (("1" (REPLACE -1 -4 RL) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI Q1!1 X!1) (("1" (ASSERT) (("1" (LEMMA RIGHT_POS_TCC5) (("1" (INST -1 X!1 X!2) (("1" (ASSERT) (("1" (INST -1 "delete(x!2, length(x!2) - 1)") (("1" (INST -1 "last(x!2)") (("1" (INST -1 "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))") (("1" (INST -1 I!1) (("1" (ASSERT) (("1" (REVEAL -7) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA RIGHT_POS_TCC3) (("2" (INST -1 X!1 X!2) (("2" (ASSERT) (("2" (INST -1 "delete(x!2, length(x!2) - 1)") (("1" (INST -1 "last(x!2)") NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE DELETE_IS_POSITION) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE - 2 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) (("1" (REVEAL 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) (("1" (TYPEPRED X!4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (REVEAL 1) (("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (REVEAL 1) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (REVEAL 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKOSIMP) (("6" (TYPEPRED I!2) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (REVEAL 1) (("6" (INST -1 X!2) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOSIMP) (("7" (REVEAL 1) (("7" (LEMMA EMPTY_0[POSNAT]) (("7" (INST -1 X!2) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKOSIMP) (("8" (REVEAL 1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (REVEAL 1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 X!2) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|right_pos_subset-1| |nil| 3506439585 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (EXPAND* SUBSET? MEMBER) (("" (SKOSIMP) (("" (EXPAND RIGHT_POS -2) (("" (EXPAND* UNION IUNION MEMBER) (("" (PROP) (("1" (HIDE -1 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (REPLACES -1) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND UNION) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND SINGLETON) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (EXPAND DELETE -2 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -2 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -3) (("4" (NAME-REPLACE "pi" "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))" :HIDE? NIL) (("1" (CASE "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))") (("1" (REPLACE -1 -4 RL) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI Q1!1 X!1) (("1" (ASSERT) (("1" (LEMMA RIGHT_POS_TCC5) (("1" (INST -1 X!1 X!2) (("1" (ASSERT) (("1" (INST -1 "delete(x!2, length(x!2) - 1)") (("1" (INST -1 "last(x!2)") (("1" (INST -1 "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))") (("1" (INST -1 I!1) (("1" (ASSERT) (("1" (REVEAL -7) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA RIGHT_POS_TCC3) (("2" (INST -1 X!1 X!2) (("2" (ASSERT) (("2" (INST -1 "delete(x!2, length(x!2) - 1)") (("1" (INST -1 "last(x!2)") NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE DELETE_IS_POSITION) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE - 2 3) (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) (("1" (REVEAL 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) (("1" (TYPEPRED X!4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (REVEAL 1) (("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (REVEAL 1) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (REVEAL 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKOSIMP) (("6" (TYPEPRED I!2) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (REVEAL 1) (("6" (INST -1 X!2) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOSIMP) (("7" (REVEAL 1) (("7" (LEMMA EMPTY_0[POSNAT]) (("7" (INST -1 X!2) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKOSIMP) (("8" (REVEAL 1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (REVEAL 1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 X!2) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|next_position_commute| 0 (|next_position_commute-2| "" 3884916617 ("" (MEASURE-INDUCT+ "IF p = empty_seq
                  THEN lex2(0,0)
                  ELSE  lex2(length(p),
                             arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                  ENDIF" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2) (("1" (EXPAND "next_position") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "next_position" 2 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "next_position" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3) (("2" (EXPAND "next_position" 2) (("2" (ASSERT) (("2" (CASE "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "next_position_tcc15") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "x!1" "x!2" " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = empty_seq") (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "next_position_tcc17") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (EXPAND "next_position" 2 2) (("1" (CASE "positionsOF(x!2)
                                          (add_last(delete(x!3, length(x!3) - 1),
                                                    1 + last(x!3)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -5 2 3) (("2" (LEMMA "next_position_tcc15") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -2 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (EXPAND "next_position" 2 2) (("1" (ASSERT) (("1" (CASE "positionsOF(x!2)
                                      (add_last(delete(x!3, length(x!3) - 1),
                                                1 + last(x!3)))") (("1" (HIDE -2 1 2) (("1" (LEMMA "next_position_tcc15") (("1" (INST -1 "x!2" "x!1" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "lex2_lt") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 6)) (("1" (EXPAND "delete") (("1" (REWRITE "empty_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4 5) (("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 4 5) (("3" (LEMMA "next_position_tcc5") (("3" (INST -1 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE "delete_is_position") (("1" (REWRITE "delete_is_position") (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 2 4 5) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 6)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "x!3") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "next_position" 1) (("5" (ASSERT) (("5" (CASE "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))") (("1" (HIDE -2 -4 1) (("1" (LEMMA "next_position_tcc15") (("1" (INST -1 "x!2" "x!1" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE "empty_0") NIL NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA "next_position_tcc3") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 3) (("5" (REWRITE "delete_is_position") (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA "empty_0[posnat]") (("6" (INST -1 "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 "y!1" "y!2" "y!3") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (REWRITE "empty_0") NIL NIL)) NIL) ("9" (HIDE 3) (("9" (LEMMA "next_position_tcc3") (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 3) (("10" (REWRITE "delete_is_position") (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 3) (("11" (LEMMA "empty_0[posnat]") (("11" (INST -1 "y!3") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA "next_position_tcc5") (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE "empty_0") NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA "next_position_tcc3") (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE "delete_is_position") (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA "next_position_tcc5") (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE "empty_0") NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA "next_position_tcc3") (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE "delete_is_position") (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA "empty_0[posnat]") (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA "next_position_tcc5") (("22" (INST -1 "s!1" "t!1" "p!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE "empty_0") NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA "next_position_tcc3") (("24" (INST -1 "s!1" "t!1" "p!1") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE "delete_is_position") (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA "empty_0[posnat]") (("26" (INST -1 "p!1") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|next_position_commute-1| |nil| 3503335634 ("" (MEASURE-INDUCT+ "IF p = empty_seq
                  THEN lex2(0,0)
                  ELSE  lex2(length(p),
                             arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                  ENDIF" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2) (("1" (EXPAND NEXT_POSITION) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION 2 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND NEXT_POSITION 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3) (("2" (EXPAND NEXT_POSITION 2) (("2" (ASSERT) (("2" (CASE "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 X!1 X!2 " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = empty_seq") (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA NEXT_POSITION_TCC17) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (EXPAND NEXT_POSITION 2 2) (("1" (CASE "positionsOF(x!2)
                                          (add_last(delete(x!3, length(x!3) - 1),
                                                    1 + last(x!3)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -5 2 3) (("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -2 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (EXPAND NEXT_POSITION 2 2) (("1" (ASSERT) (("1" (CASE "positionsOF(x!2)
                                      (add_last(delete(x!3, length(x!3) - 1),
                                                1 + last(x!3)))") (("1" (HIDE -2 1 2) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!2 X!1 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 6)) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4 5) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2 4 5) (("3" (LEMMA NEXT_POSITION_TCC5) (("3" (INST -1 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 2 4 5) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 6)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!3) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND NEXT_POSITION 1) (("5" (ASSERT) (("5" (CASE "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))") (("1" (HIDE -2 -4 1) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!2 X!1 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA NEXT_POSITION_TCC3) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 3) (("5" (REWRITE DELETE_IS_POSITION) (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 Y!1 Y!2 Y!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL) ("9" (HIDE 3) (("9" (LEMMA NEXT_POSITION_TCC3) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 3) (("10" (REWRITE DELETE_IS_POSITION) (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 3) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA NEXT_POSITION_TCC5) (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE EMPTY_0) NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA NEXT_POSITION_TCC3) (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE DELETE_IS_POSITION) (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA NEXT_POSITION_TCC5) (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE EMPTY_0) NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA NEXT_POSITION_TCC3) (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE DELETE_IS_POSITION) (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA EMPTY_0[POSNAT]) (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA NEXT_POSITION_TCC5) (("22" (INST -1 "s!1" "t!1" "p!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE EMPTY_0) NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA NEXT_POSITION_TCC3) (("24" (INST -1 "s!1" "t!1" "p!1") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE DELETE_IS_POSITION) (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA EMPTY_0[POSNAT]) (("26" (INST -1 "p!1") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) NIL NIL NIL (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|next_position_is_position| 0 (|next_position_is_position-2| "" 3881764896 ("" (MEASURE-INDUCT+ "IF p = empty_seq
                THEN lex2(0,0)
                ELSE  lex2(length(p),
                           arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                ENDIF" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4) (("1" (EXPAND NEXT_POSITION) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION 2) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -1) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!1" "x!2" " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 -3 -4 -5 -6 1 2 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC17) (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (INST -2 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (HIDE -1 2) (("1" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (HIDE 1 4) (("1" (EXPAND DELETE) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (LEMMA NEXT_POSITION_TCC5) (("3" (INST -1 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 4) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2 4) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "x!3") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND POSITIONSOF) (("4" (LIFT-IF) (("4" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA NEXT_POSITION_TCC3) (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 3) (("5" (REWRITE DELETE_IS_POSITION) (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA "empty_0[posnat]") (("6" (INST -1 "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 "y!1" "y!2" "y!3") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL) ("9" (HIDE 3) (("9" (LEMMA NEXT_POSITION_TCC3) (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 3) (("10" (REWRITE DELETE_IS_POSITION) (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 3) (("11" (LEMMA "empty_0[posnat]") (("11" (INST -1 "y!3") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA NEXT_POSITION_TCC5) (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE EMPTY_0) NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA NEXT_POSITION_TCC3) (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE DELETE_IS_POSITION) (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA NEXT_POSITION_TCC5) (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE EMPTY_0) NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA NEXT_POSITION_TCC3) (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE DELETE_IS_POSITION) (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA "empty_0[posnat]") (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA NEXT_POSITION_TCC5) (("22" (INST -1 "s!1" "t!1" "p!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE EMPTY_0) NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA NEXT_POSITION_TCC3) (("24" (INST -1 "s!1" "t!1" "p!1") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE DELETE_IS_POSITION) (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA "empty_0[posnat]") (("26" (INST -1 "p!1") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|next_position_is_position-1| |nil| 3503157274 ("" (MEASURE-INDUCT+ "IF p = empty_seq
                THEN lex2(0,0)
                ELSE  lex2(length(p),
                           arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                ENDIF" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4) (("1" (EXPAND NEXT_POSITION) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION 2) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -1) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 X!1 X!2 " add_last(delete(x!3, length(x!3) - 1),
                                                         1 + last(x!3))") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 -3 -4 -5 -6 1 2 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC17) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (INST -2 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (HIDE -1 2) (("1" (REWRITE LEX2_LT) (("1" (FLATTEN) (("1" (HIDE 1 4) (("1" (EXPAND DELETE) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (LEMMA NEXT_POSITION_TCC5) (("3" (INST -1 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 4) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2 4) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!3) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND POSITIONSOF) (("4" (LIFT-IF) (("4" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA NEXT_POSITION_TCC3) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 3) (("5" (REWRITE DELETE_IS_POSITION) (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 Y!1 Y!2 Y!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL) ("9" (HIDE 3) (("9" (LEMMA NEXT_POSITION_TCC3) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 3) (("10" (REWRITE DELETE_IS_POSITION) (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 3) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA NEXT_POSITION_TCC5) (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE EMPTY_0) NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA NEXT_POSITION_TCC3) (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE DELETE_IS_POSITION) (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA NEXT_POSITION_TCC5) (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE EMPTY_0) NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA NEXT_POSITION_TCC3) (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE DELETE_IS_POSITION) (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA EMPTY_0[POSNAT]) (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA NEXT_POSITION_TCC5) (("22" (INST -1 "s!1" "t!1" "p!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE EMPTY_0) NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA NEXT_POSITION_TCC3) (("24" (INST -1 "s!1" "t!1" "p!1") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE DELETE_IS_POSITION) (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA EMPTY_0[POSNAT]) (("26" (INST -1 "p!1") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL)) SHOSTAK)) (|next_pos_length_and_last_TCC1| 0 (|next_pos_length_and_last_TCC1-2| "" 3884916641 ("" (SKOSIMP) (("" (HIDE 1) (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK (|next_pos_length_and_last| SUBTYPE "robinsonunificationEF.p" "not_empty_seq[posnat]")) (|next_pos_length_and_last_TCC1-1| |nil| 3506181251 ("" (SKOSIMP) (("" (HIDE 1) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|next_pos_length_and_last| SUBTYPE "robinsonunificationEF.p" "not_empty_seq[posnat]"))) (|next_pos_length_and_last_TCC2| 0 (|next_pos_length_and_last_TCC2-2| "" 3884916664 ("" (SKOSIMP) (("" (TYPEPRED "p!1") (("" (HIDE -1 -2) (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|next_pos_length_and_last| SUBTYPE "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p)" "not_empty_seq[posnat]")) (|next_pos_length_and_last_TCC2-1| |nil| 3506259641 ("" (SKOSIMP) (("" (TYPEPRED P!1) (("" (HIDE -1 -2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|next_pos_length_and_last| SUBTYPE "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p)" "not_empty_seq[posnat]"))) (|next_pos_length_and_last| 0 (|next_pos_length_and_last-3| "" 3881768290 ("" (LEMMA "empty_0[posnat]") (("" (MEASURE-INDUCT+ "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (NAME-REPLACE "p!1" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (INST -3 "x!3") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "x!1" "x!2" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 2 3) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE-ALL-BUT (-1 2)) (("3" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "empty_seq") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "empty_seq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (REPLACE -1 -3) (("1" (SPLIT -3) (("1" (EXPAND DELETE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 4 5) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 1) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "p!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION -1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "x!1" "x!2" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (HIDE-ALL-BUT (-1 2 3)) (("1" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1 -3 -4 -5 -6 2) (("2" (CASE "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE -2 -3 -4 -5 -6 1 2 4) (("3" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA "empty_0[posnat]") (("3" (ASSERT) (("3" (LEMMA NEXT_POSITION_TCC15) (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (HIDE - 2 3) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "empty_seq") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "empty_seq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -1 -3) (("1" (PROP) (("1" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3 4)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "p!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 1 2) (("2" (INST -3 "y!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -4)) (("3" (INST -2 "y!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (INST -2 "x!3") (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA NEXT_POSITION_TCC12) (("6" (INST -1 "x!1" "x!2" "x!3") (("6" (ASSERT) (("6" (INST -1 "delete(x!3, length(x!3) - 1)") (("6" (INST -1 "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (INST -1 "x!3") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (INST -1 "x!3") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (INST -2 "y!3") (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA NEXT_POSITION_TCC12) (("11" (INST -1 "y!1" "y!2" "y!3") (("11" (ASSERT) (("11" (INST -1 "delete(y!3, length(y!3) - 1)") (("11" (INST -1 "y!3") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (INST -1 "y!3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (INST -1 "y!3") (("13" (ASSERT) NIL NIL)) NIL)) NIL) ("14" (HIDE -2 2) (("14" (INST -3 "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT (-3 -4)) (("15" (INST -2 "x!1`3") (("15" (ASSERT) NIL NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 -3 -4)) (("16" (INST -3 "y!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT (-3 -4)) (("17" (INST -2 "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (INST -2 "x!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA NEXT_POSITION_TCC12) (("20" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("20" (ASSERT) (("20" (INST -1 "delete(x!1`3, length(x!1`3) - 1)") (("20" (INST -1 "x!1`3") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (INST -1 "x!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (INST -2 "y!1`3") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA NEXT_POSITION_TCC12) (("25" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("25" (ASSERT) (("25" (INST -1 "delete(y!1`3, length(y!1`3) - 1)") (("25" (INST -1 "y!1`3") (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (INST -1 "y!1`3") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL) ("28" (HIDE +) (("28" (INST -3 "p!1") (("28" (ASSERT) NIL NIL)) NIL)) NIL) ("29" (HIDE -1 +) (("29" (INST -2 "p!1") (("29" (ASSERT) NIL NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 "s!1" "t!1" "p!1") (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (INST -2 "p!1") (("31" (ASSERT) NIL NIL)) NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA NEXT_POSITION_TCC12) (("32" (INST -1 "s!1" "t!1" "p!1") (("32" (ASSERT) (("32" (INST -1 "delete(p!1, length(p!1) - 1)") (("32" (INST -1 "p!1") (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (INST -1 "p!1") (("33" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("34" (INST -1 "p!1") (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (< DEF-DECL "bool" |ordinals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC12| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(y!1)(p) AND positionsOF(y!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term,
 {p: position | positionsOF(s)(p) AND positionsOF(t)(p) AND p /= empty_seq}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term,
 {p: position | positionsOF(s)(p) AND positionsOF(t)(p) AND p /= empty_seq}]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK) (|next_pos_length_and_last-2| "" 3803838273 ("" (LEMMA EMPTY_0[POSNAT]) (("" (MEASURE-INDUCT+ "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (NAME-REPLACE "p!1" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (INST -3 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "x!1" "x!2" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 2 3) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE-ALL-BUT (-1 2)) (("3" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (REPLACE -1 -3) (("1" (SPLIT -3) (("1" (EXPAND DELETE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 4 5) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 P!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION -1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 X!1 X!2 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (HIDE-ALL-BUT (-1 2 3)) (("1" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1 -3 -4 -5 -6 2) (("2" (CASE "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE -2 -3 -4 -5 -6 1 2 4) (("3" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -1 -3) (("1" (PROP) (("1" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 P!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 1 2) (("2" (INST -3 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -4)) (("3" (INST -2 Y!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (INST -2 X!3) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA NEXT_POSITION_TCC12) (("6" (INST -1 X!1 X!2 X!3) (("6" (ASSERT) (("6" (INST -1 "delete(x!3, length(x!3) - 1)") (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (INST -1 X!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (INST -2 Y!3) (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA NEXT_POSITION_TCC12) (("11" (INST -1 Y!1 Y!2 Y!3) (("11" (ASSERT) (("11" (INST -1 "delete(y!3, length(y!3) - 1)") (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (INST -1 Y!3) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL) ("14" (HIDE -2 2) (("14" (INST -3 "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT (-3 -4)) (("15" (INST -2 "x!1`3") (("15" (ASSERT) NIL NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT (-2 -3 -4)) (("16" (INST -3 "y!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT (-3 -4)) (("17" (INST -2 "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (INST -2 "x!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA NEXT_POSITION_TCC12) (("20" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("20" (ASSERT) (("20" (INST -1 "delete(x!1`3, length(x!1`3) - 1)") (("20" (INST -1 "x!1`3") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (INST -1 "x!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (INST -2 "y!1`3") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA NEXT_POSITION_TCC12) (("25" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("25" (ASSERT) (("25" (INST -1 "delete(y!1`3, length(y!1`3) - 1)") (("25" (INST -1 "y!1`3") (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (INST -1 "y!1`3") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL) ("28" (HIDE +) (("28" (INST -3 P!1) (("28" (ASSERT) NIL NIL)) NIL)) NIL) ("29" (HIDE -1 +) (("29" (INST -2 P!1) (("29" (ASSERT) NIL NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (INST -2 P!1) (("31" (ASSERT) NIL NIL)) NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA NEXT_POSITION_TCC12) (("32" (INST -1 S!1 T!1 P!1) (("32" (ASSERT) (("32" (INST -1 "delete(p!1, length(p!1) - 1)") (("32" (INST -1 P!1) (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (INST -1 P!1) (("33" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|term| TYPE-DECL NIL |term_adt| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK) (|next_pos_length_and_last-1| |nil| 3506181434 ("" (LEMMA EMPTY_0[POSNAT]) (("" (MEASURE-INDUCT+ "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (NAME-REPLACE "p!1" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (INST -3 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "x!1" "x!2" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 2 3) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE-ALL-BUT (-1 2)) (("3" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (REPLACE -1 -3) (("1" (SPLIT -3) (("1" (EXPAND DELETE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 4 5) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 1) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 P!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION -1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (HIDE -2 1 2) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND DELETE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1 3) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 X!1 X!2 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (REPLACE -2 -5) (("1" (SPLIT -5) (("1" (HIDE-ALL-BUT (-1 2 3)) (("1" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1 -3 -4 -5 -6 2) (("2" (CASE "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("3" (ASSERT) (("3" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("3" (HIDE -2 -3 -4 -5 -6 1 2 4) (("3" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("3" (DECOMPOSE-EQUALITY) (("3" (HIDE -2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("2" (ASSERT) (("2" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE - 2 3) (("2" (EXPAND* ADD_LAST DELETE INSERT? FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -1 -3) (("1" (PROP) (("1" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(delete(x!3, length(x!3) - 1)) < length(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 P!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1 2) (("2" (INST -3 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -4)) (("3" (INST -2 Y!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (INST -2 X!3) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA NEXT_POSITION_TCC12) (("6" (INST -1 X!1 X!2 X!3) (("6" (ASSERT) (("6" (INST -1 "delete(x!3, length(x!3) - 1)") (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (INST -1 X!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (INST -2 Y!3) (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA NEXT_POSITION_TCC12) (("11" (INST -1 Y!1 Y!2 Y!3) (("11" (ASSERT) (("11" (INST -1 "delete(y!3, length(y!3) - 1)") (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (INST -1 Y!3) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL) ("14" (HIDE -2 2) (("14" (INST -3 "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT (-3 -4)) (("15" (INST -2 "x!1`3") (("15" (ASSERT) NIL NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT (-1 -3 -4)) (("16" (INST -3 "y!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT (-3 -4)) (("17" (INST -2 "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (INST -2 "x!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA NEXT_POSITION_TCC12) (("20" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("20" (ASSERT) (("20" (INST -1 "delete(x!1`3, length(x!1`3) - 1)") (("20" (INST -1 "x!1`3") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (INST -1 "x!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (INST -2 "y!1`3") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA NEXT_POSITION_TCC12) (("25" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("25" (ASSERT) (("25" (INST -1 "delete(y!1`3, length(y!1`3) - 1)") (("25" (INST -1 "y!1`3") (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (INST -1 "y!1`3") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL) ("28" (HIDE +) (("28" (INST -3 P!1) (("28" (ASSERT) NIL NIL)) NIL)) NIL) ("29" (HIDE -1 +) (("29" (INST -2 P!1) (("29" (ASSERT) NIL NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (INST -2 P!1) (("31" (ASSERT) NIL NIL)) NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA NEXT_POSITION_TCC12) (("32" (INST -1 S!1 T!1 P!1) (("32" (ASSERT) (("32" (INST -1 "delete(p!1, length(p!1) - 1)") (("32" (INST -1 P!1) (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (INST -1 P!1) (("33" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|next_pos_is_a_diff_pos| 0 (|next_pos_is_a_diff_pos-2| "" 3884916684 ("" (SKOSIMP) (("" (LEMMA "next_pos_length_and_last") (("" (INST -1 "s!1" "t!1" "p!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|next_pos_length_and_last| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}" |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK) (|next_pos_is_a_diff_pos-1| |nil| 3504615157 ("" (SKOSIMP) (("" (LEMMA "next_pos_length_and_last") (("" (INST -1 S!1 T!1 P!1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|next_pos_length_and_last| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) NIL NIL NIL (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)) SHOSTAK)) (|member_right_pos| 0 (|member_right_pos-3| "" 3881771047 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (SKOSIMP) (("" (EXPAND MEMBER) (("" (PROP) (("1" (EXPAND RIGHT_POS -1) (("1" (PROP) (("1" (HIDE 2 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND UNION) (("2" (PROP) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (HIDE -2 1 3) (("1" (EXPAND SINGLETON) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (INST -2 "q!1") (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -2) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 "r!1" "p1!1 o #(last(x!2))" "q1!1") (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE O_ASSOC) (("2" (REPLACE -2 1 RL) (("2" (HIDE - 2 3 5) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 6 "r!1" "p1!1 o #(last(x!2))" "q1!1") (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (REWRITE O_ASSOC) (("1" (REPLACE -2 1 RL) (("1" (HIDE - 2 3 4 6) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REWRITE FIRST_COMPO) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 3) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND* MEMBER IUNION) (("2" (SKOSIMP*) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" "#(1 + i!1 + last(x!2)) o q1!1") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (PROP) (("1" (HIDE -1 3) (("1" (REPLACES -1) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 = empty_seq") (("1" (HIDE -3) (("1" (EXPAND* LEFT_POS RIGHT_POS ONLY_EMPTY_SEQ) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (PROP) (("1" (REPLACES -3) (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "r!1" "p1!1") (("1" (ASSERT) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "r!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (HIDE -1 -3) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "r!1" "p1!1") (("2" (ASSERT) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "q!1 = delete(x!2, length(x!2) - 1)") (("1" (HIDE -2 -3) (("1" (EXPAND RIGHT_POS) (("1" (ASSERT) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE 4) (("1" (REPLACE -1 3 RL) (("1" (EXPAND* RIGHT_POS ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!1" "delete(x!2, length(x!2) - 1)") (("1" (INST -2 "q!1") (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND RIGHT_POS 3) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN 3) (("1" (ASSERT) (("1" (HIDE 4 5) (("1" (EXPAND* SINGLETON LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 "r!1" "delete(p1!1, length(p1!1) - 1)" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -3) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (EXPAND EMPTY_SEQ -3) (("1" (DECOMPOSE-EQUALITY -3) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!1") (("1" (ASSERT) (("1" (REPLACES -5) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -4) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE 1) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND O) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY -2) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3") NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "p1!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "x!2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 6 "r!1" "delete(p1!1, length(p1!1) - 1)" "q1!1") (("1" (FLATTEN) (("1" (HIDE 6) (("1" (PROP) (("1" (HIDE -1 -3 4) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (REWRITE EMPTY_0) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!3") NIL NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "p1!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA "empty_0[posnat]") (("5" (INST -1 "x!2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 4) (("2" (EXPAND IUNION) (("2" (INST 1 "first(q1!1) - 1 - last(x!2)") (("1" (ASSERT) (("1" (INST 1 "rest(q1!1)") (("1" (PROP) (("1" (CASE "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1") (("1" (TYPEPRED "q!1") (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "add_last(delete(x!2, length(x!2) - 1), first(q1!1))" "rest(q1!1)" "x!1") (("1" (REPLACE -3 -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "q1!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "q1!1") (("1" (ASSERT) (("1" (CASE "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (EXPAND O) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND EMPTY_SEQ -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 -5 3 4 5 6) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "q1!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "q1!1") (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!3") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (LEMMA "seq_first_rest_1[posnat]") (("2" (INST -1 "q1!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (REWRITE EMPTY_0) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKOSIMP) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL) ("8" (HIDE -) (("8" (FLATTEN) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (CASE "last(x!2) = first(p1!1)") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND* LAST FIRST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "x!2`length - 1") (("1" (EXPAND DELETE -3) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND EMPTY_SEQ -3) (("1" (FLATTEN) (("1" (HIDE -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "pi" "r!1 o #(first(q1!1))") (("2" (CASE "delete(x!2, length(x!2) - 1) = r!1") (("1" (REPLACES -1) (("1" (CASE "first(q1!1) =  last(pi)") (("1" (REPLACES -1) (("1" (LEMMA NEXT_POSITION_TCC5) (("1" (INST -1 "x!1" "x!1" "pi") (("1" (PROP) (("1" (CASE "delete(pi, length(pi) - 1) = r!1") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "x!3") (("1" (TYPEPRED "x!3") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (LEMMA "seq_first_rest_1[posnat]") (("2" (INST -1 "q1!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) (("2" (REPLACE -1 -5) (("2" (LEMMA POS_AX) (("2" (REWRITE O_ASSOC) (("2" (INST -1 "r!1 o  #(first(q1!1))" "rest(q1!1)" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* FIRST LAST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "pi`length - 1") (("1" (EXPAND "#" -2) (("1" (ASSERT) (("1" (REPLACE -2 -1 RL) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -5 2 3 5 7) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND O) (("3" (DECOMPOSE-EQUALITY -2) (("3" (HIDE -2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "x!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1 2 3)) (("3" (EXPAND* DELETE FINSEQ_APPL) (("3" (REWRITE EMPTY_0) (("3" (ASSERT) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3) (("3" (EXPAND LEFT_POS) (("3" (SKOSIMP) (("3" (PROP) (("1" (REPLACES -1) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (REPLACES -1) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(r!1)") (("1" (ASSERT) (("1" (EXPAND FIRST) (("1" (EXPAND FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p)}" |robinsonunificationEF| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|union| CONST-DECL "set" |sets| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[position[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|q!1| SKOLEM-CONST-DECL "{q: position | positionsOF(x!1)(q)}" |robinsonunificationEF| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|seq_first_rest_1| FORMULA-DECL NIL |seq_extras| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|pi| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|x!3| SKOLEM-CONST-DECL "below[length(pi) - 1]" |robinsonunificationEF| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|left_pos| CONST-DECL "bool" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|member_right_pos-2| "" 3790333668 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (SKOSIMP) (("" (EXPAND MEMBER) (("" (PROP) (("1" (EXPAND RIGHT_POS -1) (("1" (PROP) (("1" (HIDE 2 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND UNION) (("2" (PROP) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (HIDE -2 1 3) (("1" (EXPAND SINGLETON) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 X!1 "delete(x!2, length(x!2) - 1)") (("1" (INST -2 Q!1) (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -2) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 R!1 "p1!1 o #(last(x!2))" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE O_ASSOC) (("2" (REPLACE -2 1 RL) (("2" (HIDE - 2 3 5) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 6 R!1 "p1!1 o #(last(x!2))" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (REWRITE O_ASSOC) (("1" (REPLACE -2 1 RL) (("1" (HIDE - 2 3 4 6) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REWRITE FIRST_COMPO) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND* MEMBER IUNION) (("2" (SKOSIMP*) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" "#(1 + i!1 + last(x!2)) o q1!1") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (PROP) (("1" (HIDE -1 3) (("1" (REPLACES -1) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 = empty_seq") (("1" (HIDE -3) (("1" (EXPAND* LEFT_POS RIGHT_POS ONLY_EMPTY_SEQ) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (PROP) (("1" (REPLACES -3) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 R!1 P1!1) (("1" (ASSERT) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (HIDE -1 -3) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "q!1 = delete(x!2, length(x!2) - 1)") (("1" (HIDE -2 -3) (("1" (EXPAND RIGHT_POS) (("1" (ASSERT) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE 4) (("1" (REPLACE -1 3 RL) (("1" (EXPAND* RIGHT_POS ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 "delete(x!2, length(x!2) - 1)") (("1" (INST -2 Q!1) (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND RIGHT_POS 3) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN 3) (("1" (ASSERT) (("1" (HIDE 4 5) (("1" (EXPAND* SINGLETON LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 R!1 "delete(p1!1, length(p1!1) - 1)" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -3) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (EXPAND EMPTY_SEQ -3) (("1" (DECOMPOSE-EQUALITY -3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) (("1" (REPLACES -5) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -4) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE 1) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND O) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY -2) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!3) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 6 R!1 "delete(p1!1, length(p1!1) - 1)" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (PROP) (("1" (HIDE -1 -3 4) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (REWRITE EMPTY_0) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) NIL NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 4) (("2" (EXPAND IUNION) (("2" (INST 1 "first(q1!1) - 1 - last(x!2)") (("1" (ASSERT) (("1" (INST 1 "rest(q1!1)") (("1" (PROP) (("1" (CASE "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1") (("1" (TYPEPRED Q!1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "add_last(delete(x!2, length(x!2) - 1), first(q1!1))" "rest(q1!1)" X!1) (("1" (REPLACE -3 -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (CASE "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (EXPAND O) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND EMPTY_SEQ -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 -5 3 4 5 6) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 Q1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (REWRITE EMPTY_0) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKOSIMP) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL) ("8" (HIDE -) (("8" (FLATTEN) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (CASE "last(x!2) = first(p1!1)") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND* LAST FIRST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "x!2`length - 1") (("1" (EXPAND DELETE -3) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND EMPTY_SEQ -3) (("1" (FLATTEN) (("1" (HIDE -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "pi" "r!1 o #(first(q1!1))") (("2" (CASE "delete(x!2, length(x!2) - 1) = r!1") (("1" (REPLACES -1) (("1" (CASE "first(q1!1) =  last(pi)") (("1" (REPLACES -1) (("1" (LEMMA NEXT_POSITION_TCC5) (("1" (INST -1 X!1 X!1 PI) (("1" (PROP) (("1" (CASE "delete(pi, length(pi) - 1) = r!1") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 X!3) (("1" (TYPEPRED X!3) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 Q1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) (("2" (REPLACE -1 -5) (("2" (LEMMA POS_AX) (("2" (REWRITE O_ASSOC) (("2" (INST -1 "r!1 o  #(first(q1!1))" "rest(q1!1)" X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* FIRST LAST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "pi`length - 1") (("1" (EXPAND "#" -2) (("1" (ASSERT) (("1" (REPLACE -2 -1 RL) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -5 2 3 5 7) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND O) (("3" (DECOMPOSE-EQUALITY -2) (("3" (HIDE -2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1 2 3)) (("3" (EXPAND* DELETE FINSEQ_APPL) (("3" (REWRITE EMPTY_0) (("3" (ASSERT) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3) (("3" (EXPAND LEFT_POS) (("3" (SKOSIMP) (("3" (PROP) (("1" (REPLACES -1) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (REPLACES -1) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(r!1)") (("1" (ASSERT) (("1" (EXPAND FIRST) (("1" (EXPAND FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|union| CONST-DECL "set" |sets| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|seq_first_rest_1| FORMULA-DECL NIL |seq_extras| |structures|) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|left_pos| CONST-DECL "bool" |positions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL)) SHOSTAK) (|member_right_pos-1| |nil| 3506959387 ("" (MEASURE-INDUCT+ "length(p)" ("s" "p")) (("" (SKOSIMP) (("" (EXPAND MEMBER) (("" (PROP) (("1" (EXPAND RIGHT_POS -1) (("1" (PROP) (("1" (HIDE 2 -3) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND UNION) (("2" (PROP) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (HIDE -2 1 3) (("1" (EXPAND SINGLETON) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 X!1 "delete(x!2, length(x!2) - 1)") (("1" (INST -2 Q!1) (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -2) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 R!1 "p1!1 o #(last(x!2))" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE O_ASSOC) (("2" (REPLACE -2 1 RL) (("2" (HIDE - 2 3 5) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 6 R!1 "p1!1 o #(last(x!2))" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (ASSERT) (("1" (PROP) (("1" (REWRITE O_ASSOC) (("1" (REPLACE -2 1 RL) (("1" (HIDE - 2 3 4 6) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REWRITE FIRST_COMPO) (("3" (HIDE-ALL-BUT (1 4)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND* MEMBER IUNION) (("2" (SKOSIMP*) (("2" (EXPAND LEFT_POS) (("2" (INST 3 "delete(x!2, length(x!2) - 1)" "#(last(x!2))" "#(1 + i!1 + last(x!2)) o q1!1") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (PROP) (("1" (HIDE -1 3) (("1" (REPLACES -1) (("1" (EXPAND DELETE) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 = empty_seq") (("1" (HIDE -3) (("1" (EXPAND* LEFT_POS RIGHT_POS ONLY_EMPTY_SEQ) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (PROP) (("1" (REPLACES -3) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 R!1 P1!1) (("1" (ASSERT) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (HIDE -1 -3) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "q!1 = delete(x!2, length(x!2) - 1)") (("1" (HIDE -2 -3) (("1" (EXPAND RIGHT_POS) (("1" (ASSERT) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE 4) (("1" (REPLACE -1 3 RL) (("1" (EXPAND* RIGHT_POS ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 "delete(x!2, length(x!2) - 1)") (("1" (INST -2 Q!1) (("1" (EXPAND DELETE -2 1) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND RIGHT_POS 3) (("1" (EXPAND* UNION MEMBER) (("1" (FLATTEN 3) (("1" (ASSERT) (("1" (HIDE 4 5) (("1" (EXPAND* SINGLETON LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 5 R!1 "delete(p1!1, length(p1!1) - 1)" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -3) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (EXPAND EMPTY_SEQ -3) (("1" (DECOMPOSE-EQUALITY -3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) (("1" (REPLACES -5) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -4) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE 1) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND O) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY -2) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!3) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 6 R!1 "delete(p1!1, length(p1!1) - 1)" Q1!1) (("1" (FLATTEN) (("1" (HIDE 6) (("1" (PROP) (("1" (HIDE -1 -3 4) (("1" (EXPAND* DELETE FINSEQ_APPL) (("1" (REWRITE EMPTY_0) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) NIL NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 4)) (("5" (LEMMA EMPTY_0[POSNAT]) (("5" (INST -1 X!2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 4) (("2" (EXPAND IUNION) (("2" (INST 1 "first(q1!1) - 1 - last(x!2)") (("1" (ASSERT) (("1" (INST 1 "rest(q1!1)") (("1" (PROP) (("1" (CASE "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1") (("1" (TYPEPRED Q!1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "add_last(delete(x!2, length(x!2) - 1), first(q1!1))" "rest(q1!1)" X!1) (("1" (REPLACE -3 -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (CASE "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (EXPAND O) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND EMPTY_SEQ -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (SKOSIMP) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = delete(x!2, length(x!2) - 1)") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 -5 3 4 5 6) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 Q1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (REWRITE EMPTY_0) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKOSIMP) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL) ("8" (HIDE -) (("8" (FLATTEN) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 2 3 5 7) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (CASE "last(x!2) = first(p1!1)") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND* LAST FIRST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "x!2`length - 1") (("1" (EXPAND DELETE -3) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) (("1" (EXPAND EMPTY_SEQ -3) (("1" (FLATTEN) (("1" (HIDE -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "pi" "r!1 o #(first(q1!1))") (("2" (CASE "delete(x!2, length(x!2) - 1) = r!1") (("1" (REPLACES -1) (("1" (CASE "first(q1!1) =  last(pi)") (("1" (REPLACES -1) (("1" (LEMMA NEXT_POSITION_TCC5) (("1" (INST -1 X!1 X!1 PI) (("1" (PROP) (("1" (CASE "delete(pi, length(pi) - 1) = r!1") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (GRIND) (("1" (REPLACE -1 1 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 X!3) (("1" (TYPEPRED X!3) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 Q1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) (("2" (REPLACE -1 -5) (("2" (LEMMA POS_AX) (("2" (REWRITE O_ASSOC) (("2" (INST -1 "r!1 o  #(first(q1!1))" "rest(q1!1)" X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* FIRST LAST FINSEQ_APPL) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "pi`length - 1") (("1" (EXPAND "#" -2) (("1" (ASSERT) (("1" (REPLACE -2 -1 RL) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -5 2 3 5 7) (("2" (EXPAND DELETE) (("2" (REWRITE EMPTY_0) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND EMPTY_SEQ -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND O) (("3" (DECOMPOSE-EQUALITY -2) (("3" (HIDE -2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 5)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1 2 3)) (("3" (EXPAND* DELETE FINSEQ_APPL) (("3" (REWRITE EMPTY_0) (("3" (ASSERT) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3) (("3" (EXPAND LEFT_POS) (("3" (SKOSIMP) (("3" (PROP) (("1" (REPLACES -1) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (REPLACES -1) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(r!1)") (("1" (ASSERT) (("1" (EXPAND FIRST) (("1" (EXPAND FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|next_pos_member_right_pos| 0 (|next_pos_member_right_pos-2| "" 3884918259 ("" (LEMMA "empty_0[posnat]") (("" (MEASURE-INDUCT+ "lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -3) (("1" (REPLACES -1) (("1" (EXPAND* "member" "right_pos" "next_position" "emptyset" "only_empty_seq") (("1" (PROP) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND "only_empty_seq") (("1" (PROP) (("1" (EXPAND "union") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "member_right_pos") (("2" (INST -1 "x!1" "x!3" "next_position(x!1, x!2, x!3)") (("1" (ASSERT) (("1" (NAME-REPLACE "q!1" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (HIDE 3) (("1" (EXPAND "next_position" -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND "left_pos") (("1" (INST 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -2 -3 1) (("1" (EXPAND "empty_seq") (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND* "delete" "finseq_appl") (("2" (REWRITE "empty_0") (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "o") (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "o") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1) (("2" (EXPAND "left_pos") (("2" (INST 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))" "#(1 + last(x!3))") (("1" (FLATTEN) (("1" (HIDE 1) (("1" (PROP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND* "add_last" "insert?" "delete" "finseq_appl") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND DELETE) (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (EXPAND* "first" "finseq_appl" "#") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "x!1" "x!2" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (LEMMA "next_position_tcc17") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (CASE "NOT add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) =
                               empty_seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -4 -5 1) (("1" (REPLACE -1) (("1" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (LEMMA "member_right_pos") (("1" (INST -1 "x!1" "pi" "q!1") (("1" (ASSERT) (("1" (LEMMA "next_pos_is_a_diff_pos") (("1" (INST -1 "x!1" "x!2" "pi") (("1" (ASSERT) (("1" (HIDE -1 -4 -5) (("1" (EXPAND "left_pos") (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 2 "r!1" "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -2) (("2" (EXPAND* "add_last" "insert?" "delete" "finseq_appl" "o") (("2" (FLATTEN) (("2" (INST-CP -4 "p1!1") (("2" (INST -4 "x!3") (("2" (ASSERT) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 "x!4") (("1" (ASSERT) (("1" (TYPEPRED "x!4") (("1" (EXPAND* "last" "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "delete" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last(p1!1) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACES -2) (("2" (EXPAND* "add_last" "insert?" "delete" "last" "finseq_appl" "o") (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -4 -1) (("1" (INST -5 "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "delete" 1) (("2" (INST -3 "x!3") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "delete" -1) (("2" (INST -5 "x!3") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -6 "p1!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -5 "p1!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "p1!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -4 "p1!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -4 "p1!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 3 "r!1" "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)" "q1!1") (("1" (FLATTEN) (("1" (HIDE 3) (("1" (ASSERT) (("1" (PROP) (("1" (REPLACE -2) (("1" (HIDE -1 -2 -3 2) (("1" (INST-CP -2 "x!3") (("1" (INST -2 "p1!1") (("1" (ASSERT) (("1" (EXPAND* "add_last" "insert?" "delete" "last" "finseq_appl" "o") (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 "x!4") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "delete" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -2 -4) (("3" (EXPAND* "add_last" "insert?" "delete" "first" "finseq_appl") (("3" (INST -2 "p1!1") (("3" (ASSERT) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last(p1!1) - 1 = last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (HIDE -1 -2 -3 2 3) (("2" (INST-CP -2 "x!3") (("2" (INST -2 "p1!1") (("2" (ASSERT) (("2" (EXPAND* "add_last" "insert?" "delete" "last" "finseq_appl" "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "delete" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "p1!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "next_position_is_position") (("2" (INST -1 "x!1" "x!2" "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REVEAL -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-7 1 3)) (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 3)) (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 3)) (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA "next_position_tcc15") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-5 1 4)) (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1 4)) (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-5 1 3)) (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (LEMMA "next_position_tcc19") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE -1 -3 1 2) (("1" (REPLACE -1) (("1" (LEMMA "member_right_pos") (("1" (INST -1 "x!1" "delete(x!3, length(x!3) - 1)" "q!1") (("1" (ASSERT) (("1" (LEMMA "next_pos_is_a_diff_pos") (("1" (INST -1 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (HIDE -1 -3 -4) (("1" (NAME-REPLACE "pi" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (EXPAND "left_pos") (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 2 "r!1" "add_last(p1!1, last(x!3))" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -2) (("2" (HIDE -1) (("2" (INST-CP -2 "p1!1") (("2" (INST -2 "x!3") (("2" (ASSERT) (("2" (EXPAND* "delete" "add_last" "insert?" "last" "finseq_appl" "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!4") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 3 "r!1" "add_last(p1!1, last(x!3))" "q1!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (PROP) (("1" (REPLACES -2) (("1" (HIDE -1 -2 2) (("1" (INST-CP -2 "x!3") (("1" (INST -2 "p1!1") (("1" (ASSERT) (("1" (EXPAND* "delete" "add_last" "insert?" "last" "o" "finseq_appl") (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!4 = x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "x!4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REWRITE "first_add_last") (("3" (INST -5 "p1!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "next_position_is_position") (("2" (INST -1 "x!1" "x!2" "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (INST -3 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "delete_is_position") (("3" (INST -3 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST -3 "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "delete_is_position") (("1" (REWRITE "delete_is_position") (("1" (INST -3 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -3 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -3 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 1) (("5" (EXPAND "left_pos") (("5" (INST 1 "empty_seq" "x!3" "empty_seq") (("5" (ASSERT) (("5" (REWRITE "empty_o_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "next_position_is_position") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 1) (("3" (INST -2 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "next_position_tcc3") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "delete_is_position") (("5" (INST -1 "x!3") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (INST -1 "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (LEMMA "next_position_tcc5") (("7" (INST -1 "y!1" "y!2" "y!3") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 1) (("8" (INST -2 "y!3") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA "next_position_tcc3") (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (REWRITE "delete_is_position") (("10" (INST -1 "y!3") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (INST -1 "y!3") (("11" (ASSERT) NIL NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA "next_position_tcc5") (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 1) (("13" (INST -2 "x!1`3") (("13" (ASSERT) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA "next_position_tcc3") (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE "delete_is_position") (("15" (INST -1 "x!1`3") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE 2) (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (HIDE 2) (("17" (LEMMA "next_position_tcc5") (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 1) (("18" (INST -2 "y!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (LEMMA "next_position_tcc3") (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE "delete_is_position") (("20" (INST -1 "y!1`3") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA "next_position_tcc5") (("22" (INST -1 "s!1" "t!1" "p!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 1) (("23" (INST -2 "p!1") (("23" (ASSERT) NIL NIL)) NIL)) NIL) ("24" (HIDE 2) (("24" (LEMMA "next_position_tcc3") (("24" (INST -1 "s!1" "t!1" "p!1") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE "delete_is_position") (("25" (INST -1 "p!1") (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (INST -1 "p!1") (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (< DEF-DECL "bool" |ordinals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!4| SKOLEM-CONST-DECL "below[x!3`length]" |robinsonunificationEF| NIL) (|first_add_last| FORMULA-DECL NIL |seq_extras| |structures|) (|x!4| SKOLEM-CONST-DECL "below[x!3`length]" |robinsonunificationEF| NIL) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|pi| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|q!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_pos_is_a_diff_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|x!4| SKOLEM-CONST-DECL "below[x!3`length]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!4| SKOLEM-CONST-DECL "below[x!3`length]" |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|left_pos| CONST-DECL "bool" |positions| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK) (|next_pos_member_right_pos-1| |nil| 3507041072 ("" (LEMMA EMPTY_0[POSNAT]) (("" (MEASURE-INDUCT+ "lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -3) (("1" (REPLACES -1) (("1" (EXPAND* MEMBER RIGHT_POS NEXT_POSITION EMPTYSET ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND UNION) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA MEMBER_RIGHT_POS) (("2" (INST -1 X!1 X!3 "next_position(x!1, x!2, x!3)") (("1" (ASSERT) (("1" (NAME-REPLACE "q!1" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (HIDE 3) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND LEFT_POS) (("1" (INST 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -2 -3 1) (("1" (EXPAND EMPTY_SEQ) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND* DELETE FINSEQ_APPL) (("2" (REWRITE EMPTY_0) (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND O) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND O) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 1) (("2" (EXPAND LEFT_POS) (("2" (INST 1 "delete(x!3, length(x!3) - 1)" "#(last(x!3))" "#(1 + last(x!3))") (("1" (FLATTEN) (("1" (HIDE 1) (("1" (PROP) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND* ADD_LAST INSERT? DELETE FINSEQ_APPL) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND DELETE) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (EXPAND* FIRST FINSEQ_APPL "#") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 X!1 X!2 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (LEMMA NEXT_POSITION_TCC17) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (CASE "NOT add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) =
                               empty_seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -4 -5 1) (("1" (REPLACE -1) (("1" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (LEMMA MEMBER_RIGHT_POS) (("1" (INST -1 X!1 PI Q!1) (("1" (ASSERT) (("1" (LEMMA NEXT_POS_IS_A_DIFF_POS) (("1" (INST -1 X!1 X!2 PI) (("1" (ASSERT) (("1" (HIDE -1 -4 -5) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 2 R!1 "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -2) (("2" (EXPAND* ADD_LAST INSERT? DELETE FINSEQ_APPL O) (("2" (FLATTEN) (("2" (INST-CP -4 P1!1) (("2" (INST -4 X!3) (("2" (ASSERT) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 X!4) (("1" (ASSERT) (("1" (TYPEPRED X!4) (("1" (EXPAND* LAST FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last(p1!1) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACES -2) (("2" (EXPAND* ADD_LAST INSERT? DELETE LAST FINSEQ_APPL O) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -4 -1) (("1" (INST -5 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE 1) (("2" (INST -3 X!3) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DELETE -1) (("2" (INST -5 X!3) (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -6 P1!1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -5 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 P1!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -4 P1!1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (INST -4 P1!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 3 R!1 "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)" Q1!1) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (ASSERT) (("1" (PROP) (("1" (REPLACE -2) (("1" (HIDE -1 -2 -3 2) (("1" (INST-CP -2 X!3) (("1" (INST -2 P1!1) (("1" (ASSERT) (("1" (EXPAND* ADD_LAST INSERT? DELETE LAST FINSEQ_APPL O) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST -1 X!4) (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -2 -4) (("3" (EXPAND* ADD_LAST INSERT? DELETE FIRST FINSEQ_APPL) (("3" (INST -2 P1!1) (("3" (ASSERT) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last(p1!1) - 1 = last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (HIDE -1 -2 -3 2 3) (("2" (INST-CP -2 X!3) (("2" (INST -2 P1!1) (("2" (ASSERT) (("2" (EXPAND* ADD_LAST INSERT? DELETE LAST FINSEQ_APPL O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND DELETE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 P1!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST -1 X!1 X!2 PI) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REVEAL -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-7 1 3)) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 3)) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 3)) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-5 1 4)) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1 4)) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-5 1 3)) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -3 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE -1 -3 1 2) (("1" (REPLACE -1) (("1" (LEMMA MEMBER_RIGHT_POS) (("1" (INST -1 X!1 "delete(x!3, length(x!3) - 1)" Q!1) (("1" (ASSERT) (("1" (LEMMA NEXT_POS_IS_A_DIFF_POS) (("1" (INST -1 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (HIDE -1 -3 -4) (("1" (NAME-REPLACE "pi" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP) (("1" (PROP) (("1" (INST 2 R!1 "add_last(p1!1, last(x!3))" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -2) (("2" (HIDE -1) (("2" (INST-CP -2 P1!1) (("2" (INST -2 X!3) (("2" (ASSERT) (("2" (EXPAND* DELETE ADD_LAST INSERT? LAST FINSEQ_APPL O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!4) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST 3 R!1 "add_last(p1!1, last(x!3))" Q1!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE 3) (("1" (PROP) (("1" (REPLACES -2) (("1" (HIDE -1 -2 2) (("1" (INST-CP -2 X!3) (("1" (INST -2 P1!1) (("1" (ASSERT) (("1" (EXPAND* DELETE ADD_LAST INSERT? LAST O FINSEQ_APPL) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!4 = x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (INST -1 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REWRITE FIRST_ADD_LAST) (("3" (INST -5 P1!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST -1 X!1 X!2 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) NIL NIL) ("2" (INST -3 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (REWRITE DELETE_IS_POSITION) (("3" (INST -3 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST -3 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -4 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (INST -3 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -3 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -3 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 1) (("5" (EXPAND LEFT_POS) (("5" (INST 1 EMPTY_SEQ X!3 EMPTY_SEQ) (("5" (ASSERT) (("5" (REWRITE EMPTY_O_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE NEXT_POSITION_IS_POSITION) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 1) (("3" (INST -2 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC3) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE DELETE_IS_POSITION) (("5" (INST -1 X!3) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 Y!1 Y!2 Y!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 1) (("8" (INST -2 Y!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC3) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (REWRITE DELETE_IS_POSITION) (("10" (INST -1 Y!3) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA NEXT_POSITION_TCC5) (("12" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 1) (("13" (INST -2 "x!1`3") (("13" (ASSERT) NIL NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA NEXT_POSITION_TCC3) (("14" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE DELETE_IS_POSITION) (("15" (INST -1 "x!1`3") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE 2) (("16" (INST -1 "x!1`3") (("16" (ASSERT) NIL NIL)) NIL)) NIL) ("17" (HIDE 2) (("17" (LEMMA NEXT_POSITION_TCC5) (("17" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 1) (("18" (INST -2 "y!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (LEMMA NEXT_POSITION_TCC3) (("19" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE DELETE_IS_POSITION) (("20" (INST -1 "y!1`3") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (INST -1 "y!1`3") (("21" (ASSERT) NIL NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA NEXT_POSITION_TCC5) (("22" (INST -1 S!1 T!1 P!1) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 1) (("23" (INST -2 P!1) (("23" (ASSERT) NIL NIL)) NIL)) NIL) ("24" (HIDE 2) (("24" (LEMMA NEXT_POSITION_TCC3) (("24" (INST -1 S!1 T!1 P!1) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE DELETE_IS_POSITION) (("25" (INST -1 P!1) (("25" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (INST -1 P!1) (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (< DEF-DECL "bool" |ordinals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) NIL NIL (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) NIL (|first_add_last| FORMULA-DECL NIL |seq_extras| |structures|) NIL (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) NIL NIL (|next_pos_is_a_diff_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) NIL (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) NIL NIL NIL (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|left_pos| CONST-DECL "bool" |positions| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) NIL NIL NIL (|emptyset| CONST-DECL "set" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK)) (|equal_right_pos| 0 (|equal_right_pos-2| "" 3884918789 ("" (SKOSIMP) (("" (CASE "subset?(right_pos(s!1, p!1), right_pos(s!1, q!1)) AND
             subset?(right_pos(s!1, q!1), right_pos(s!1, p!1))") (("1" (HIDE -2) (("1" (FLATTEN) (("1" (EXPAND "subset?") (("1" (INST -1 "p!1") (("1" (INST -2 "q!1") (("1" (CASE "p!1 = empty_seq") (("1" (HIDE -2) (("1" (EXPAND "right_pos" -2 2) (("1" (ASSERT) (("1" (CASE "member(q!1, right_pos(s!1, q!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND* "member" "only_empty_seq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "right_pos" "member") (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (HIDE 2 3) (("2" (EXPAND "singleton") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "q!1 = empty_seq") (("1" (HIDE -3) (("1" (EXPAND "right_pos" -2 2) (("1" (ASSERT) (("1" (CASE "member(p!1, right_pos(s!1, p!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND* "member" "only_empty_seq") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "right_pos" "union" "member") (("2" (FLATTEN) (("2" (HIDE 2 3) (("2" (EXPAND "singleton") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "member(p!1, right_pos(s!1, p!1)) AND member(q!1, right_pos(s!1, q!1))") (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (LEMMA "member_right_pos") (("1" (INST-CP -1 "s!1" "p!1" "q!1") (("1" (INST -1 "s!1" "q!1" "p!1") (("1" (ASSERT) (("1" (HIDE -3 -4) (("1" (EXPAND "left_pos") (("1" (SKOSIMP*) (("1" (GROUND) (("1" (REPLACE -1 -4) (("1" (REPLACE -4 -2) (("1" (REPLACE -3 -2) (("1" (EXPAND "o" -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2 -3 -4 -5 3 4 5) (("1" (LEMMA "empty_0[posnat]") (("1" (INST-CP -1 "p1!2") (("1" (INST -1 "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 -1) (("2" (REPLACE -4 -2) (("2" (REPLACE -2 -1) (("2" (CASE "p1!2 o p1!1 = q1!2") (("1" (REPLACE -1 -4 RL) (("1" (REWRITE "first_compo") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -5 5 6 7) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!1 + r!2`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!1 + r!2`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 -1) (("3" (REPLACE -3 -2) (("3" (REPLACE -1 -2 RL) (("3" (CASE "q1!1 = p1!1 o p1!2") (("1" (REPLACE -1 -6) (("1" (REWRITE "first_compo") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -5 5 6 7) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!1 + r!1`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!1 + r!1`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -5 -1) (("4" (REPLACE -4 -2) (("4" (HIDE -4 -5) (("4" (EXPAND "o") (("4" (FLATTEN) (("4" (DECOMPOSE-EQUALITY -2) (("4" (DECOMPOSE-EQUALITY -4) (("4" (HIDE -3 -4) (("4" (CASE "r!1`length = r!2`length") (("1" (INST -2 "r!1`length") (("1" (INST -3 "r!1`length") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND* "first" "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1`length < r!2`length") (("1" (INST -2 "r!1`length") (("1" (INST -3 "r!1`length") (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (HIDE-ALL-BUT (-3 -5)) (("1" (EXPAND* "first" "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "r!2`length") (("1" (INST -2 "r!2`length") (("1" (ASSERT) (("1" (REPLACE -1 -2) (("1" (HIDE-ALL-BUT (-2 -3)) (("1" (EXPAND* "first" "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 3 7)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 3 6)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 4) (("2" (PROP) (("1" (EXPAND* "right_pos" "union" "member") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "singleton") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "right_pos" "union" "member") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "singleton") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND "member") (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "subset?" "member") (("2" (DECOMPOSE-EQUALITY -1) (("2" (SKOSIMP) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|positionsOF| DEF-DECL "positions" |positions| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|r!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|left_pos| CONST-DECL "bool" |positions| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[position[variable, symbol, arity]]" |robinsonunificationEF| NIL)) SHOSTAK) (|equal_right_pos-1| |nil| 3507387106 ("" (SKOSIMP) (("" (CASE "subset?(right_pos(s!1, p!1), right_pos(s!1, q!1)) AND
             subset?(right_pos(s!1, q!1), right_pos(s!1, p!1))") (("1" (HIDE -2) (("1" (FLATTEN) (("1" (EXPAND SUBSET?) (("1" (INST -1 P!1) (("1" (INST -2 Q!1) (("1" (CASE "p!1 = empty_seq") (("1" (HIDE -2) (("1" (EXPAND RIGHT_POS -2 2) (("1" (ASSERT) (("1" (CASE "member(q!1, right_pos(s!1, q!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND* MEMBER ONLY_EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* RIGHT_POS MEMBER) (("2" (EXPAND* UNION MEMBER) (("2" (FLATTEN) (("2" (HIDE 2 3) (("2" (EXPAND SINGLETON) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "q!1 = empty_seq") (("1" (HIDE -3) (("1" (EXPAND RIGHT_POS -2 2) (("1" (ASSERT) (("1" (CASE "member(p!1, right_pos(s!1, p!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND* MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* RIGHT_POS UNION MEMBER) (("2" (FLATTEN) (("2" (HIDE 2 3) (("2" (EXPAND SINGLETON) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "member(p!1, right_pos(s!1, p!1)) AND member(q!1, right_pos(s!1, q!1))") (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (LEMMA MEMBER_RIGHT_POS) (("1" (INST-CP -1 S!1 P!1 Q!1) (("1" (INST -1 S!1 Q!1 P!1) (("1" (ASSERT) (("1" (HIDE -3 -4) (("1" (EXPAND LEFT_POS) (("1" (SKOSIMP*) (("1" (GROUND) (("1" (REPLACE -1 -4) (("1" (REPLACE -4 -2) (("1" (REPLACE -3 -2) (("1" (EXPAND O -2) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE -2 -3 -4 -5 3 4 5) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST-CP -1 P1!2) (("1" (INST -1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 -1) (("2" (REPLACE -4 -2) (("2" (REPLACE -2 -1) (("2" (CASE "p1!2 o p1!1 = q1!2") (("1" (REPLACE -1 -4 RL) (("1" (REWRITE FIRST_COMPO) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -5 5 6 7) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!1 + r!2`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!1 + r!2`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 -1) (("3" (REPLACE -3 -2) (("3" (REPLACE -1 -2 RL) (("3" (CASE "q1!1 = p1!1 o p1!2") (("1" (REPLACE -1 -6) (("1" (REWRITE FIRST_COMPO) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -5 5 6 7) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!1 + r!1`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!1 + r!1`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -5 -1) (("4" (REPLACE -4 -2) (("4" (HIDE -4 -5) (("4" (EXPAND O) (("4" (FLATTEN) (("4" (DECOMPOSE-EQUALITY -2) (("4" (DECOMPOSE-EQUALITY -4) (("4" (HIDE -3 -4) (("4" (CASE "r!1`length = r!2`length") (("1" (INST -2 "r!1`length") (("1" (INST -3 "r!1`length") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND* FIRST FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1`length < r!2`length") (("1" (INST -2 "r!1`length") (("1" (INST -3 "r!1`length") (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (HIDE-ALL-BUT (-3 -5)) (("1" (EXPAND* FIRST FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "r!2`length") (("1" (INST -2 "r!2`length") (("1" (ASSERT) (("1" (REPLACE -1 -2) (("1" (HIDE-ALL-BUT (-2 -3)) (("1" (EXPAND* FIRST FINSEQ_APPL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 3 7)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 3 6)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 4) (("2" (PROP) (("1" (EXPAND* RIGHT_POS UNION MEMBER) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* RIGHT_POS UNION MEMBER) (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND SINGLETON) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (EXPAND SUBSET?) (("1" (SKOSIMP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND MEMBER) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* SUBSET? MEMBER) (("2" (DECOMPOSE-EQUALITY -1) (("2" (SKOSIMP) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|positionsOF| DEF-DECL "positions" |positions| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) NIL NIL NIL NIL NIL NIL (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|left_pos| CONST-DECL "bool" |positions| NIL) NIL) SHOSTAK)) (|subset_right_pos| 0 (|subset_right_pos-2| "" 3884922544 ("" (SKOSIMP) (("" (EXPAND* "strict_subset?" "subset?") (("" (PROP) (("1" (SKOSIMP) (("1" (LEMMA "member_right_pos") (("1" (INST-CP -1 "s!1" "q!1" "x!1") (("1" (INST-CP -1 "s!1" "p!1" "q!1") (("1" (INST -1 "s!1" "p!1" "x!1") (("1" (ASSERT) (("1" (HIDE -3 -4 2) (("1" (EXPAND "left_pos" -1) (("1" (SKOSIMP) (("1" (PROP) (("1" (EXPAND "left_pos" -3) (("1" (SKOSIMP) (("1" (PROP) (("1" (REPLACES -3) (("1" (REPLACES -2) (("1" (EXPAND "left_pos") (("1" (INST 3 "r!2" "p1!2 o p1!1" "empty_seq") (("1" (ASSERT) (("1" (PROP) (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "p1!2" "p1!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (EXPAND "o") (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (REPLACES -2) (("2" (EXPAND "left_pos") (("2" (INST 4 "r!2" "p1!2 o p1!1" "q1!2") (("2" (FLATTEN) (("2" (HIDE 4) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -1 -2 2 5) (("1" (EXPAND "o") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "p1!2" "p1!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "first_compo") (("3" (FLATTEN) (("3" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_pos" -4) (("2" (SKOSIMP) (("2" (PROP) (("1" (CASE "r!1 = r!2") (("1" (REPLACES -1) (("1" (EXPAND "left_pos") (("1" (INST 4 "r!2" "p1!1" "empty_seq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "<=(r!1, r!2) OR <=(r!2, r!1)") (("1" (PROP) (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (EXPAND "left_pos") (("1" (INST 5 "r!1" "p1!1" "p1!3") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL) ("2" (CASE "p1!3 o p1!2 = q1!1") (("1" (REPLACE -1 -6 RL) (("1" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE "empty_0") (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 1 4 5)) (("2" (REPLACES -2) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2 + r!1`length") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (SKOSIMP) (("2" (REPLACES -1) (("2" (EXPAND "left_pos") (("2" (INST 5 "r!2" "p1!3 o p1!1" "empty_seq") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "p1!3" "p1!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND "o") (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -3 1 2 3 4 5)) (("2" (REPLACES -1) (("2" (CASE "length(r!2) > length(r!1)") (("1" (HIDE 2) (("1" (EXPAND "<=") (("1" (NAME "pi" "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)") (("1" (INST 1 "pi") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND "o" 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "o" -5) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -6) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "o" -5) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -6) (("2" (INST -1 "x!2") (("1" (ASSERT) (("1" (INST -3 "x!2 - r!1`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "j!1") (("2" (HIDE -2 2 3 4 5) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(r!2) = length(r!1)") (("1" (DECOMPOSE-EQUALITY 4) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "<=") (("2" (NAME "pi" "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)") (("1" (INST 3 "pi") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND "o" 3) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "o" -4) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "o" -4) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -5) (("2" (INST -1 "x!2") (("1" (ASSERT) (("1" (INST -3 "x!2 - r!2`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -5 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -4 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "j!1") (("2" (HIDE 2 3 4 5 6) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = r!2") (("1" (REPLACES -1) (("1" (EXPAND "left_pos") (("1" (INST 5 "r!2" "p1!1" "q1!2") (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -4 -2) (("1" (HIDE-ALL-BUT (-2 -3 -6 1 2 3 4 6)) (("1" (EXPAND* "o" "first" "finseq_appl") (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "r!2`length") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "<=(r!1, r!2) OR <=(r!2, r!1)") (("1" (PROP) (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (EXPAND "left_pos") (("1" (INST 6 "r!1" "p1!1" "p1!3 o q1!2") (("1" (ASSERT) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REPLACES -1) (("1" (EXPAND "o") (("1" (DECOMPOSE-EQUALITY) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "p1!3" "q1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "p1!3 o p1!2 = q1!1") (("1" (REPLACE -1 -7 RL) (("1" (REWRITE "first_compo") (("1" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE "empty_0") (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 1 5 6)) (("2" (REPLACES -2) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST -2 "x!2 + r!1`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!2 + r!1`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (SKOSIMP) (("2" (REPLACES -1) (("2" (EXPAND "left_pos") (("2" (INST 6 "r!2" "p1!3 o p1!1" "q1!2") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 6) (("2" (PROP) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (REPLACES -1) (("1" (EXPAND "o") (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 5)) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "p1!3" "p1!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "p1!3 o q1!1 = p1!2") (("1" (REPLACE -1 -4 RL) (("1" (REWRITE "first_compo") (("1" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE "empty_0") (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 1 5 6)) (("2" (REPLACES -2) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2 + r!2`length") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -4 1 2 3 4 5)) (("2" (REPLACES -1) (("2" (CASE "length(r!2) > length(r!1)") (("1" (HIDE 2) (("1" (EXPAND "<=") (("1" (NAME "pi" "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)") (("1" (INST 1 "pi") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND "o" 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "o" -5) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -6) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "o" -5) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -6) (("2" (INST -1 "x!2") (("1" (ASSERT) (("1" (INST -3 "x!2 - r!1`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "j!1") (("2" (HIDE -2 2 3 4 5) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(r!2) = length(r!1)") (("1" (DECOMPOSE-EQUALITY 4) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "<=") (("2" (NAME "pi" "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)") (("1" (INST 3 "pi") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND "o" 3) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "o" -4) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST -1 "x!2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "o" -4) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -5) (("2" (INST -1 "x!2") (("1" (ASSERT) (("1" (INST -3 "x!2 - r!2`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -5 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -4 1)) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED "j!1") (("2" (HIDE 2 3 4 5 6) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (LEMMA "right_pos_subset") (("2" (INST -1 "s!1" "q!1") (("2" (EXPAND "subset?") (("2" (INST -1 "x!1") (("2" (ASSERT) (("2" (HIDE -2) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2 3) (("2" (LEMMA "right_pos_subset") (("2" (INST -1 "s!1" "q!1") (("2" (EXPAND "subset?") (("2" (INST -1 "x!1") (("2" (ASSERT) (("2" (HIDE -2) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "equal_right_pos") (("2" (INST -1 "s!1" "q!1" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|subset_right_pos-1| |nil| 3503741089 ("" (SKOSIMP) (("" (EXPAND* STRICT_SUBSET? SUBSET?) (("" (PROP) (("1" (SKOSIMP) (("1" (LEMMA MEMBER_RIGHT_POS) (("1" (INST-CP -1 S!1 Q!1 X!1) (("1" (INST-CP -1 S!1 P!1 Q!1) (("1" (INST -1 S!1 P!1 X!1) (("1" (ASSERT) (("1" (HIDE -3 -4 2) (("1" (EXPAND LEFT_POS -1) (("1" (SKOSIMP) (("1" (PROP) (("1" (EXPAND LEFT_POS -3) (("1" (SKOSIMP) (("1" (PROP) (("1" (REPLACES -3) (("1" (REPLACES -2) (("1" (EXPAND LEFT_POS) (("1" (INST 3 R!2 "p1!2 o p1!1" EMPTY_SEQ) (("1" (ASSERT) (("1" (PROP) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 P1!2 P1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -4) (("2" (REPLACES -2) (("2" (EXPAND LEFT_POS) (("2" (INST 4 R!2 "p1!2 o p1!1" Q1!2) (("2" (FLATTEN) (("2" (HIDE 4) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -1 -2 2 5) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 P1!2 P1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE FIRST_COMPO) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND LEFT_POS -4) (("2" (SKOSIMP) (("2" (PROP) (("1" (CASE "r!1 = r!2") (("1" (REPLACES -1) (("1" (EXPAND LEFT_POS) (("1" (INST 4 R!2 P1!1 EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "<=(r!1, r!2) OR <=(r!2, r!1)") (("1" (PROP) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (EXPAND LEFT_POS) (("1" (INST 5 R!1 P1!1 P1!3) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL) ("2" (CASE "p1!3 o p1!2 = q1!1") (("1" (REPLACE -1 -6 RL) (("1" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 1 4 5)) (("2" (REPLACES -2) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2 + r!1`length") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (SKOSIMP) (("2" (REPLACES -1) (("2" (EXPAND LEFT_POS) (("2" (INST 5 R!2 "p1!3 o p1!1" EMPTY_SEQ) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 P1!3 P1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY -1) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 X!2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -3 1 2 3 4 5)) (("2" (REPLACES -1) (("2" (CASE "length(r!2) > length(r!1)") (("1" (HIDE 2) (("1" (EXPAND <=) (("1" (NAME "pi" "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)") (("1" (INST 1 PI) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND O 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND O -5) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -6) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!2) (("2" (EXPAND O -5) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -6) (("2" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -3 "x!2 - r!1`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED J!1) (("2" (HIDE -2 2 3 4 5) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(r!2) = length(r!1)") (("1" (DECOMPOSE-EQUALITY 4) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND <=) (("2" (NAME "pi" "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)") (("1" (INST 3 PI) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND O 3) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND O -4) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!2) (("2" (EXPAND O -4) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -5) (("2" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -3 "x!2 - r!2`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -4 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED J!1) (("2" (HIDE 2 3 4 5 6) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = r!2") (("1" (REPLACES -1) (("1" (EXPAND LEFT_POS) (("1" (INST 5 R!2 P1!1 Q1!2) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -4 -2) (("1" (HIDE-ALL-BUT (-2 -3 -6 1 2 3 4 6)) (("1" (EXPAND* O FIRST FINSEQ_APPL) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "r!2`length") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "<=(r!1, r!2) OR <=(r!2, r!1)") (("1" (PROP) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (EXPAND LEFT_POS) (("1" (INST 6 R!1 P1!1 "p1!3 o q1!2") (("1" (ASSERT) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REPLACES -1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 P1!3 Q1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "p1!3 o p1!2 = q1!1") (("1" (REPLACE -1 -7 RL) (("1" (REWRITE FIRST_COMPO) (("1" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 1 5 6)) (("2" (REPLACES -2) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST -2 "x!2 + r!1`length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "x!2 + r!1`length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (SKOSIMP) (("2" (REPLACES -1) (("2" (EXPAND LEFT_POS) (("2" (INST 6 R!2 "p1!3 o p1!1" Q1!2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 6) (("2" (PROP) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (REPLACES -1) (("1" (EXPAND O) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 5)) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 P1!3 P1!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "p1!3 o q1!1 = p1!2") (("1" (REPLACE -1 -4 RL) (("1" (REWRITE FIRST_COMPO) (("1" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (1 3)) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 1 5 6)) (("2" (REPLACES -2) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "x!2 + r!2`length") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 -4 1 2 3 4 5)) (("2" (REPLACES -1) (("2" (CASE "length(r!2) > length(r!1)") (("1" (HIDE 2) (("1" (EXPAND <=) (("1" (NAME "pi" "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)") (("1" (INST 1 PI) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND O 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND O -5) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -6) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!2) (("2" (EXPAND O -5) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -6) (("2" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -3 "x!2 - r!1`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED J!1) (("2" (HIDE -2 2 3 4 5) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(r!2) = length(r!1)") (("1" (DECOMPOSE-EQUALITY 4) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND O) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND <=) (("2" (NAME "pi" "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)") (("1" (INST 3 PI) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND O 3) (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND O -4) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST -1 X!2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!2) (("2" (EXPAND O -4) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -5) (("2" (INST -1 X!2) (("1" (ASSERT) (("1" (INST -3 "x!2 - r!2`length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (PROP) (("1" (REPLACE -3 -1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -4 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (TYPEPRED J!1) (("2" (HIDE 2 3 4 5 6) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3) (("2" (LEMMA RIGHT_POS_SUBSET) (("2" (INST -1 S!1 Q!1) (("2" (EXPAND SUBSET?) (("2" (INST -1 X!1) (("2" (ASSERT) (("2" (HIDE -2) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 2 3) (("2" (LEMMA RIGHT_POS_SUBSET) (("2" (INST -1 S!1 Q!1) (("2" (EXPAND SUBSET?) (("2" (INST -1 X!1) (("2" (ASSERT) (("2" (HIDE -2) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EQUAL_RIGHT_POS) (("2" (INST -1 S!1 Q!1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset?| CONST-DECL "bool" |sets| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL) (|equal_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |positions| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|r!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!3| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|r!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!3| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|pi| SKOLEM-CONST-DECL "[# length: int, seq: [below[length(r!2) - length(r!1)] -> posnat] #]" |robinsonunificationEF| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!2`length]" |robinsonunificationEF| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!1`length]" |robinsonunificationEF| NIL) (|pi| SKOLEM-CONST-DECL "[# length: int, seq: [below[length(r!1) - length(r!2)] -> posnat] #]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!1`length]" |robinsonunificationEF| NIL) (|p1!3| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!3| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|pi| SKOLEM-CONST-DECL "[# length: int, seq: [below[length(r!2) - length(r!1)] -> posnat] #]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!2`length]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!1`length]" |robinsonunificationEF| NIL) (|pi| SKOLEM-CONST-DECL "[# length: int, seq: [below[length(r!1) - length(r!2)] -> posnat] #]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "below[r!1`length]" |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|r!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p)}" |robinsonunificationEF| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|left_pos| CONST-DECL "bool" |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK)) (|next_pos_to_the_right_TCC1| 0 (|next_pos_to_the_right_TCC1-2| "" 3884922763 ("" (SKOSIMP) (("" (LEMMA "right_pos_subset") (("" (INST -1 "s!1" "next_position(s!1, t!1, p!1)") (("1" (LEMMA "positions_of_terms_finite") (("1" (INST -1 "s!1") (("1" (LEMMA "finite_subset[position]") (("1" (INST -1 "positionsOF(s!1)" "right_pos(s!1, next_position(s!1, t!1, p!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "next_position_is_position") NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_to_the_right| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p))" "finite_set[position[variable, symbol, arity]]")) (|next_pos_to_the_right_TCC1-1| |nil| 3501322880 ("" (SKOSIMP) (("" (LEMMA RIGHT_POS_SUBSET) (("" (INST -1 S!1 "next_position(s!1, t!1, p!1)") (("1" (LEMMA POSITIONS_OF_TERMS_FINITE) (("1" (INST -1 S!1) (("1" (LEMMA FINITE_SUBSET[POSITION]) (("1" (INST -1 "positionsOF(s!1)" "right_pos(s!1, next_position(s!1, t!1, p!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE NEXT_POSITION_IS_POSITION) NIL NIL)) NIL)) NIL)) NIL) ((|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL)) NIL (|next_pos_to_the_right| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p))" "finite_set[position[variable, symbol, arity]]"))) (|next_pos_to_the_right_TCC2| 0 (|next_pos_to_the_right_TCC2-2| "" 3884922847 ("" (SKOSIMP) (("" (LEMMA "right_pos_subset") (("" (INST -1 "s!1" "p!1") (("" (LEMMA "positions_of_terms_finite") (("" (INST -1 "s!1") (("" (LEMMA "finite_subset[position]") (("" (INST -1 "positionsOF(s!1)" "right_pos(s!1, p!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_to_the_right| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)" "finite_set[position[variable, symbol, arity]]")) (|next_pos_to_the_right_TCC2-1| |nil| 3501322880 ("" (SKOSIMP) (("" (LEMMA RIGHT_POS_SUBSET) (("" (INST -1 S!1 P!1) (("" (LEMMA POSITIONS_OF_TERMS_FINITE) (("" (INST -1 S!1) (("" (LEMMA FINITE_SUBSET[POSITION]) (("" (INST -1 "positionsOF(s!1)" "right_pos(s!1, p!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|next_pos_to_the_right| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)" "finite_set[position[variable, symbol, arity]]"))) (|next_pos_to_the_right| 0 (|next_pos_to_the_right-2| "" 3884922989 ("" (SKOSIMP) (("" (LEMMA "subset_right_pos") (("" (INST -1 "s!1" "p!1" "next_position(s!1, t!1, p!1)") (("1" (LEMMA "next_pos_member_right_pos") (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (LEMMA "next_pos_is_a_diff_pos") (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (LEMMA "card_subset[position]") (("1" (INST -1 "right_pos(s!1, next_position(s!1, t!1, p!1))" "right_pos(s!1, p!1)") (("1" (EXPAND "strict_subset?") (("1" (FLATTEN) (("1" (ASSERT) (("1" (REWRITE "same_card_subset") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "next_position_is_position") NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|next_pos_to_the_right-1| |nil| 3503391279 ("" (SKOSIMP) (("" (LEMMA SUBSET_RIGHT_POS) (("" (INST -1 S!1 P!1 "next_position(s!1, t!1, p!1)") (("1" (LEMMA NEXT_POS_MEMBER_RIGHT_POS) (("1" (INST -1 S!1 T!1 P!1) (("1" (LEMMA NEXT_POS_IS_A_DIFF_POS) (("1" (INST -1 S!1 T!1 P!1) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (LEMMA CARD_SUBSET[POSITION]) (("1" (INST -1 "right_pos(s!1, next_position(s!1, t!1, p!1))" "right_pos(s!1, p!1)") (("1" (EXPAND STRICT_SUBSET?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REWRITE SAME_CARD_SUBSET) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE NEXT_POSITION_IS_POSITION) NIL NIL)) NIL)) NIL)) NIL) ((|subset_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_pos_member_right_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_pos_is_a_diff_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|strict_subset?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|same_card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL)) SHOSTAK)) (|ext_link_remove_x_TCC1| 0 (|ext_link_remove_x_TCC1-1| |nil| 3503824755 ("" (SUBTYPE-TCC) NIL NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|ext_link_remove_x| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)" "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}"))) (|ext_link_remove_x| 0 (|ext_link_remove_x-2| "" 3884923105 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (FLATTEN) (("" (PROP) (("1" (LEMMA "vars_subst_not_in") (("1" (INST -1 "s!1" "sig1" "x!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA "dom_ran_link_disjoint") (("1" (INST -1 "sp" "tp") (("1" (REPLACE -5) (("1" (ASSERT) (("1" (INST -1 "x!1" "r!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_subst_not_in") (("2" (INST -1 "t!1" "sig1" "x!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA "dom_ran_link_disjoint") (("2" (INST -1 "sp" "tp") (("2" (REPLACE -5) (("2" (ASSERT) (("2" (INST -1 "x!1" "r!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ext_link_remove_x-1| |nil| 3504359379 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (FLATTEN) (("" (PROP) (("1" (LEMMA "vars_subst_not_in") (("1" (INST -1 S!1 SIG1 X!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA "dom_ran_link_disjoint") (("1" (INST -1 SP TP) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (INST -1 "x!1" "r!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_subst_not_in") (("2" (INST -1 "t!1" "sig1" "x!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA "dom_ran_link_disjoint") (("2" (INST -1 SP TP) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (INST -1 "x!1" "r!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|r!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|vars_subst_not_in| FORMULA-DECL NIL |substitution| NIL) (|dom_ran_link_disjoint| FORMULA-DECL NIL |robinsonunification| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|Ran| CONST-DECL "set[term[variable, symbol, arity]]" |substitution| NIL) (|sig1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "(V)" |robinsonunificationEF| NIL) (|r!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL)) SHOSTAK)) (|vars_ext_link_s_subset| 0 (|vars_ext_link_s_subset-2| "" 3884924325 ("" (SKOSIMP) (("" (ASSERT) (("" (FLATTEN) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME "pi" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (EXPAND* "subset?") (("" (SKOSIMP) (("" (EXPAND* "union" "member") (("" (FLATTEN) (("" (CASE "member(x!1, VRan(sig1))") (("1" (EXPAND* "member" "VRan") (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "pi" "sp" "tp") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -5 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "pi o p!2" "t!1") (("1" (REPLACE -4) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "pi" "p!2" "tp") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "sp" "tp" "pi") (("1" (ASSERT) (("1" (INST 1 "p!1 o (pi o p!2)") (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "pi o p!2" "t!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "pi" "p!2" "tp") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 -7 1)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -5 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -5 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "pi o p!2" "s!1") (("1" (REPLACE -4) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "pi" "p!2" "sp") (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "sp" "tp" "pi") (("1" (ASSERT) (("1" (INST 1 "p!1 o (pi o p!2)") (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "pi o p!2" "s!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "pi" "p!2" "sp") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 -7 1 2)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "link_of_frst_diff") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "sp" "tp" "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (CASE "vars?(subtermOF(sp,pi))") (("1" (CASE "VRan(sig1) = Vars(subtermOF(tp,pi))") (("1" (REPLACES -1) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!1" "s!1" "t!1" "p!1") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (EXPAND "member") (("1" (ASSERT) (("1" (LEMMA "positions_of_ext") (("1" (INST -1 "sig1" "s!1") (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND "Vars" -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (PROP) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND "ext" -10) (("2" (ASSERT) (("2" (CASE "subtermOF(s!1, p1!1) = subtermOF(sp, pi)") (("1" (REPLACE -10 -11 RL) (("1" (EXPAND "link_of_frst_diff" -11) (("1" (ASSERT) (("1" (REPLACE -9) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "Vars") (("1" (INST 1 "p2!1") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -11 -12 3)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -9 -10 RL) (("2" (EXPAND "link_of_frst_diff" -10) (("2" (REPLACE -8) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "ext" -5) (("1" (REPLACE -10 -5 RL) (("1" (EXPAND "link_of_frst_diff" -5) (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (HIDE-ALL-BUT (-3 6)) (("1" (EXPAND "Vars") (("1" (INST 1 "p1!1 o p2!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -10 -11 4)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "pi" "sp" "tp") (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 3)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (INST 1 "subtermOF(sp, pi)") (("1" (REPLACE -6 1 RL) (("1" (EXPAND "link_of_frst_diff" 1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 3)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V") (("2" (EXPAND "Dom") (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "pi" "sp" "tp") (("2" (REPLACE -7) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (EXPAND* "restrict" "singleton") (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(sp, pi)") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1)) (("3" (LEMMA "position_t_first_diff") (("3" (INST -1 "sp" "tp" "pi") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vars?(subtermOF(tp, pi))") (("1" (CASE "VRan(sig1) = Vars(subtermOF(sp,pi))") (("1" (REPLACES -1) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!1" "s!1" "t!1" "p!1") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (EXPAND "member") (("1" (ASSERT) (("1" (LEMMA "positions_of_ext") (("1" (INST -1 "sig1" "s!1") (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND "Vars" -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (PROP) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND "ext" -10) (("2" (ASSERT) (("2" (CASE "subtermOF(s!1, p1!1) = subtermOF(tp, pi)") (("1" (REPLACE -10 -11 RL) (("1" (EXPAND "link_of_frst_diff" -11) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (EXPAND "Vars") (("1" (INST 1 "p2!1") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -11 -12 2 4)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -9 -10 RL) (("2" (EXPAND "link_of_frst_diff" -10) (("2" (REPLACE -8) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (EXPAND "ext" -7) (("1" (REPLACE -12 -7 RL) (("1" (EXPAND "link_of_frst_diff" -7) (("1" (REPLACE -11) (("1" (SPLIT -7) (("1" (ASSERT) (("1" (REPLACE -5 -2 RL) (("1" (REPLACE -5 -3 RL) (("1" (HIDE-ALL-BUT (-2 -3 -4 7)) (("1" (EXPAND "Vars") (("1" (INST 1 "p!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -10 -11 3 5)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "pi" "sp" "tp") (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 2 4)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (INST 1 "subtermOF(tp, pi)") (("1" (REPLACE -6 1 RL) (("1" (EXPAND "link_of_frst_diff" 1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 2 4)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V") (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "pi" "sp" "tp") (("2" (REPLACE -7) (("2" (REPLACE -6) (("2" (EXPAND* "restrict" "singleton") (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, pi)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 4)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA "position_t_first_diff") (("3" (INST -1 "sp" "tp" "pi") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA "position_s_first_diff") (("3" (INST -1 "sp" "tp" "pi") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|vars_ext_link_s_subset-1| |nil| 3503927962 ("" (SKOSIMP) (("" (ASSERT) (("" (FLATTEN) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME "pi" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (EXPAND* "subset?") (("" (SKOSIMP) (("" (EXPAND* "union" "member") (("" (FLATTEN) (("" (CASE "member(x!1, VRan(sig1))") (("1" (EXPAND* "member" "VRan") (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 PI SP TP) (("1" (ASSERT) (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -5 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 "pi o p!2" T!1) (("1" (REPLACE -4) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI P!2 TP) (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 SP TP PI) (("1" (ASSERT) (("1" (INST 1 "p!1 o (pi o p!2)") (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 P!1 "pi o p!2" T!1) (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 PI P!2 TP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 -7 1)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 I!1) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -5 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -5 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED P!2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 "pi o p!2" S!1) (("1" (REPLACE -4) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 PI P!2 SP) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 SP TP PI) (("1" (ASSERT) (("1" (INST 1 "p!1 o (pi o p!2)") (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 P!1 "pi o p!2" S!1) (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 PI P!2 SP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -6 -7 1 2)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND LINK_OF_FRST_DIFF) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 SP TP PI) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (CASE "vars?(subtermOF(sp,pi))") (("1" (CASE "VRan(sig1) = Vars(subtermOF(tp,pi))") (("1" (REPLACES -1) (("1" (LEMMA EXT_LINK_REMOVE_X) (("1" (INST -1 X!1 S!1 T!1 P!1) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (EXPAND "member") (("1" (ASSERT) (("1" (LEMMA "positions_of_ext") (("1" (INST -1 SIG1 S!1) (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND "Vars" -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (PROP) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND EXT -10) (("2" (ASSERT) (("2" (CASE "subtermOF(s!1, p1!1) = subtermOF(sp, pi)") (("1" (REPLACE -10 -11 RL) (("1" (EXPAND "link_of_frst_diff" -11) (("1" (ASSERT) (("1" (REPLACE -9) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "Vars") (("1" (INST 1 "p2!1") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -11 -12 3)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -9 -10 RL) (("2" (EXPAND LINK_OF_FRST_DIFF -10) (("2" (REPLACE -8) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND EXT -5) (("1" (REPLACE -10 -5 RL) (("1" (EXPAND LINK_OF_FRST_DIFF -5) (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (HIDE-ALL-BUT (-3 6)) (("1" (EXPAND "Vars") (("1" (INST 1 "p1!1 o p2!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -10 -11 4)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 PI SP TP) (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 3)) (("1" (EXPAND LINK_OF_FRST_DIFF) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (INST 1 "subtermOF(sp, pi)") (("1" (REPLACE -6 1 RL) (("1" (EXPAND "link_of_frst_diff" 1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 3)) (("1" (EXPAND LINK_OF_FRST_DIFF) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND V) (("2" (EXPAND "Dom") (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 PI SP TP) (("2" (REPLACE -7) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(sp, pi)") (("2" (EXPAND DOM) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1)) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 SP TP PI) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vars?(subtermOF(tp, pi))") (("1" (CASE "VRan(sig1) = Vars(subtermOF(sp,pi))") (("1" (REPLACES -1) (("1" (LEMMA EXT_LINK_REMOVE_X) (("1" (INST -1 X!1 S!1 T!1 P!1) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (EXPAND MEMBER) (("1" (ASSERT) (("1" (LEMMA "positions_of_ext") (("1" (INST -1 SIG1 S!1) (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND VARS -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (PROP) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND EXT -10) (("2" (ASSERT) (("2" (CASE "subtermOF(s!1, p1!1) = subtermOF(tp, pi)") (("1" (REPLACE -10 -11 RL) (("1" (EXPAND LINK_OF_FRST_DIFF -11) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (EXPAND VARS) (("1" (INST 1 P2!1) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -11 -12 2 4)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -9 -10 RL) (("2" (EXPAND LINK_OF_FRST_DIFF -10) (("2" (REPLACE -8) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 P1!1 P2!1 S!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P1!1 P2!1 S!1) (("1" (EXPAND EXT -7) (("1" (REPLACE -12 -7 RL) (("1" (EXPAND LINK_OF_FRST_DIFF -7) (("1" (REPLACE -11) (("1" (SPLIT -7) (("1" (ASSERT) (("1" (REPLACE -5 -2 RL) (("1" (REPLACE -5 -3 RL) (("1" (HIDE-ALL-BUT (-2 -3 -4 7)) (("1" (EXPAND VARS) (("1" (INST 1 P!2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -10 -11 3 5)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 PI SP TP) (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -6 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 2 4)) (("1" (EXPAND LINK_OF_FRST_DIFF) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (INST 1 "subtermOF(tp, pi)") (("1" (REPLACE -6 1 RL) (("1" (EXPAND "link_of_frst_diff" 1) (("1" (REPLACE -5) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 -7 2 4)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND V) (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 PI SP TP) (("2" (REPLACE -7) (("2" (REPLACE -6) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, pi)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 4)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 SP TP PI) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 1)) (("3" (LEMMA POSITION_S_FIRST_DIFF) (("3" (INST -1 SP TP PI) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|VRan| CONST-DECL "set[(V)]" |substitution| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|vars?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[term[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|sp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|pi| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sig1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|positions_of_ext| FORMULA-DECL NIL |substitution| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|v| ADT-ACCESSOR-DECL "[(vars?) -> variable]" |term_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (|ext_link_remove_x| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|tp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL)) SHOSTAK)) (|vars_ext_link_t_subset| 0 (|vars_ext_link_t_subset-2| "" 3884924881 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(sp, tp)" :HIDE? NIL) (("" (NAME "q!1" "first_diff(sp, tp)") (("" (ASSERT) (("" (FLATTEN) (("" (CASE "NOT vars?(subtermOF(sp, q!1))") (("1" (LEMMA "comutative_link_fd") (("1" (LEMMA "vars_ext_link_s_subset") (("1" (INST -1 "t!1" "s!1" "p!1") (("1" (INST -2 "sp" "tp") (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (REPLACE -4) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "union(Vars(t!1), Vars(s!1)) = union(Vars(s!1), Vars(t!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (DECOMPOSE-EQUALITY) (("2" (EXPAND "union") (("2" (IFF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "subset?") (("2" (SKOSIMP) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (CASE "member(x!1, VRan(sig!1))") (("1" (EXPAND* "member" "VRan") (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "q!1" "sp" "tp") (("1" (REPLACE -5) (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (TYPEPRED "i!1") (("1" (INST -3 "i!1") (("1" (ASSERT) (("1" (REPLACES -3) (("1" (HIDE -1) (("1" (REPLACE -5 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -6 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "q!1" "p!2" "tp") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "sp" "tp" "q!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "q!1 o p!2" "t!1") (("1" (REPLACE -7) (("1" (GROUND) (("1" (INST 1 "p!1 o (q!1 o p!2)") (("1" (LEMMA "pos_subterm") (("1" (INST -1 "q!1" "p!2" "tp") (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REPLACE -8 -6 RL) (("1" (HIDE-ALL-BUT (-4 -6 1)) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "q!1 o p!2" "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 -5 -6 1)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (CASE "VRan(sig!1) = Vars(subtermOF(tp,q!1))") (("1" (REPLACES -1) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!1" "s!1" "t!1" "p!1") (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (LEMMA "positions_of_ext") (("1" (INST -1 "sig!1" "t!1") (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND "Vars" -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (EXPAND "member") (("1" (PROP) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND "ext" -10) (("2" (ASSERT) (("2" (CASE "subtermOF(t!1, p1!1) = subtermOF(sp, q!1)") (("1" (REPLACE -8 -11 RL) (("1" (EXPAND "link_of_frst_diff" -11) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "Vars") (("1" (INST 1 "p2!1") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -9 -10 3)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACES -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 -10 RL) (("2" (EXPAND "link_of_frst_diff" -10) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACE -8 -5 RL) (("1" (EXPAND "link_of_frst_diff" -5) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND "ext" -5) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p1!1" "p2!1" "t!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p1!1" "p2!1" "t!1") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (REPLACE -4 -2 RL) (("1" (HIDE-ALL-BUT (-2 -3 7)) (("1" (EXPAND "Vars") (("1" (INST 1 "p!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -8 -9 4)) (("2" (EXPAND "link_of_frst_diff") (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "q!1" "sp" "tp") (("1" (REPLACE -4) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -4 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -3) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 3)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "q!1" "sp" "tp") (("2" (REPLACE -4) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (EXPAND* "restrict" "singleton") (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(sp, q!1)") (("1" (INST 1 "subtermOF(sp, q!1)") (("1" (REPLACE -5 1 RL) (("1" (EXPAND "link_of_frst_diff" 1) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -5 -6 3)) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "V") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 1)) (("3" (LEMMA "position_t_first_diff") (("3" (INST -1 "sp" "tp" "q!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (LEMMA "position_s_first_diff") (("3" (INST -1 "sp" "tp" "q!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|vars_ext_link_t_subset-1| |nil| 3503831830 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(sp, tp)" :HIDE? NIL) (("" (NAME "q!1" "first_diff(sp, tp)") (("" (ASSERT) (("" (FLATTEN) (("" (CASE "NOT vars?(subtermOF(sp, q!1))") (("1" (LEMMA COMUTATIVE_LINK_FD) (("1" (LEMMA VARS_EXT_LINK_S_SUBSET) (("1" (INST -1 T!1 S!1 P!1) (("1" (INST -2 SP TP) (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (REPLACE -4) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "union(Vars(t!1), Vars(s!1)) = union(Vars(s!1), Vars(t!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (DECOMPOSE-EQUALITY) (("2" (EXPAND UNION) (("2" (IFF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "subset?") (("2" (SKOSIMP) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (CASE "member(x!1, VRan(sig!1))") (("1" (EXPAND* "member" "VRan") (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 Q!1 SP TP) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (TYPEPRED "i!1") (("1" (INST -3 "i!1") (("1" (ASSERT) (("1" (REPLACES -3) (("1" (HIDE -1) (("1" (REPLACE -5 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -6 4)) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "q!1" "p!2" "tp") (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 SP TP Q!1) (("1" (LEMMA "pos_o_term") (("1" (INST -1 P!1 "q!1 o p!2" T!1) (("1" (REPLACE -7) (("1" (GROUND) (("1" (INST 1 "p!1 o (q!1 o p!2)") (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 Q!1 P!2 TP) (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REPLACE -8 -6 RL) (("1" (HIDE-ALL-BUT (-4 -6 1)) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 P!1 "q!1 o p!2" T!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 -5 -6 1)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (CASE "VRan(sig!1) = Vars(subtermOF(tp,q!1))") (("1" (REPLACES -1) (("1" (LEMMA EXT_LINK_REMOVE_X) (("1" (INST -1 X!1 S!1 T!1 P!1) (("1" (REPLACE -6) (("1" (REPLACE -5) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (LEMMA "positions_of_ext") (("1" (INST -1 "sig!1" "t!1") (("1" (DECOMPOSE-EQUALITY -1) (("1" (EXPAND VARS -7) (("1" (SKOSIMP) (("1" (INST -1 "p!2") (("1" (ASSERT) (("1" (EXPAND "union") (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (REWRITE "subterm_ext_commute") (("1" (DECOMPOSE-EQUALITY -7) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "ext") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -2) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (REPLACE -1 -10) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (EXPAND "ext" -10) (("2" (ASSERT) (("2" (CASE "subtermOF(t!1, p1!1) = subtermOF(sp, q!1)") (("1" (REPLACE -8 -11 RL) (("1" (EXPAND "link_of_frst_diff" -11) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND VARS) (("1" (INST 1 P2!1) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 -9 -10 3)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACES -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 -10 RL) (("2" (EXPAND "link_of_frst_diff" -10) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (REPLACE -8 -5 RL) (("1" (EXPAND LINK_OF_FRST_DIFF -5) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND EXT -5) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P1!1 P2!1 T!1) (("1" (ASSERT) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 P1!1 P2!1 T!1) (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (REPLACE -4 -2 RL) (("1" (HIDE-ALL-BUT (-2 -3 7)) (("1" (EXPAND VARS) (("1" (INST 1 P!2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 -8 -9 4)) (("2" (EXPAND LINK_OF_FRST_DIFF) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (IFF) (("2" (PROP) (("1" (EXPAND "VRan" -1) (("1" (EXPAND "IUnion") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 Q!1 SP TP) (("1" (REPLACE -4) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACE -4 -1 RL) (("1" (EXPAND "link_of_frst_diff" -1) (("1" (REPLACE -3) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 3)) (("1" (EXPAND LINK_OF_FRST_DIFF) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "VRan" 1) (("2" (EXPAND "IUnion") (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 Q!1 SP TP) (("2" (REPLACE -4) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(sp, q!1)") (("1" (INST 1 "subtermOF(sp, q!1)") (("1" (REPLACE -5 1 RL) (("1" (EXPAND LINK_OF_FRST_DIFF 1) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 -5 -6 3)) (("1" (EXPAND LINK_OF_FRST_DIFF) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND V) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 1)) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 SP TP Q!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (LEMMA POSITION_S_FIRST_DIFF) (("3" (INST -1 SP TP Q!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|vars?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vars_ext_link_s_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|comutative_link_fd| FORMULA-DECL NIL |robinsonunification| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[term[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|q!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|v| ADT-ACCESSOR-DECL "[(vars?) -> variable]" |term_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|positions_of_ext| FORMULA-DECL NIL |substitution| NIL) (|ext_link_remove_x| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|VRan| CONST-DECL "set[(V)]" |substitution| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL)) SHOSTAK)) (|union_vars_ext_link_subterm| 0 (|union_vars_ext_link_subterm-1| |nil| 3503402991 ("" (SKOSIMP*) (("" (ASSERT) (("" (FLATTEN) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (DECOMPOSE-EQUALITY 2) (("" (IFF) (("" (PROP) (("1" (EXPAND "difference") (("1" (EXPAND "union") (("1" (EXPAND "member") (("1" (PROP) (("1" (LEMMA VARS_EXT_LINK_S_SUBSET) (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (REPLACE -3 -1) (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (INST -1 "x!1") (("1" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EXT_LINK_REMOVE_X) (("2" (INST -1 "x!1" "s!1" "t!1" "p!1") (("2" (REPLACE -4 -1) (("2" (ASSERT) (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA VARS_EXT_LINK_T_SUBSET) (("3" (INST -1 "s!1" "t!1" "p!1") (("3" (REPLACE -3 -1) (("3" (ASSERT) (("3" (EXPAND "subset?") (("3" (INST -1 "x!1") (("3" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA EXT_LINK_REMOVE_X) (("4" (INST -1 "x!1" "s!1" "t!1" "p!1") (("4" (REPLACE -4 -1) (("4" (ASSERT) (("4" (ASSERT) (("4" (PROP) (("4" (EXPAND MEMBER) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "difference" "union" "member") (("2" (PROP) (("1" (HIDE 3) (("1" (EXPAND "Vars") (("1" (SKOSIMP) (("1" (INST 2 "p!2") (("1" (REWRITE "subterm_ext_commute") (("1" (REPLACES -1) (("1" (TYPEPRED "x!1") (("1" (EXPAND* "V" "Dom" "ext") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Vars") (("2" (SKOSIMP) (("2" (INST 2 "p!2") (("1" (REWRITE "subterm_ext_commute") (("1" (REPLACES -1) (("1" (TYPEPRED "x!1") (("1" (EXPAND* "V" "Dom" "ext") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!2| SKOLEM-CONST-DECL "positions?[variable, symbol, arity](t!1)" |robinsonunificationEF| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!2| SKOLEM-CONST-DECL "positions?[variable, symbol, arity](s!1)" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|vars_ext_link_t_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|ext_link_remove_x| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vars_ext_link_s_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL)) SHOSTAK)) (|termination_lemma_subterm_TCC1| 0 (|termination_lemma_subterm_TCC1-1| |nil| 3503156263 ("" (SKOSIMP) (("" (HIDE -1 1) (("" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)) NIL (|termination_lemma_subterm| SUBTYPE "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s)), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t)))" "finite_set[(V[variable, symbol, arity])]"))) (|termination_lemma_subterm_TCC2| 0 (|termination_lemma_subterm_TCC2-1| |nil| 3503156263 ("" (SKOSIMP) (("" (HIDE -1 1) (("" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)) NIL (|termination_lemma_subterm| SUBTYPE "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))" "finite_set[(V[variable, symbol, arity])]"))) (|termination_lemma_subterm| 0 (|termination_lemma_subterm-1| |nil| 3503302874 ("" (SKOSIMP*) (("" (ASSERT) (("" (PROP) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (LEMMA "card_diff_subset[(V)]") (("" (LEMMA "union_vars_ext_link_subterm") (("" (INST -1 "s!1" "t!1" "p!1") (("" (ASSERT) (("" (REPLACE -3 -1) (("" (ASSERT) (("" (REPLACES -1) (("" (INST -1 "Dom(sig1)" "union(Vars(s!1), Vars(t!1))") (("1" (PROP) (("1" (CASE-REPLACE "card(Dom(sig1)) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (REWRITE "card_one") (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)") (("2" (REPLACE -2 -1) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "restrict") (("1" (INST 1 "subtermOF(subtermOF(s!1, p!1),
                             first_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1") (("1" (HIDE -2 -3 2) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (CASE "vars?(subtermOF(subtermOF(t!1, p!1),
                      first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))") (("1" (INST 2 "subtermOF(subtermOF(t!1, p!1),
                             first_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1)))") (("1" (DECOMPOSE-EQUALITY -2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (INST -1 "x!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND SINGLETON) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (EXPAND "link_of_frst_diff") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "position_s_first_diff") (("3" (INST -1 "subtermOF(t!1, p!1)" "subtermOF(s!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("3" (ASSERT) (("3" (HIDE 2) (("3" (LEMMA "comutative_first_diff") (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)") (("2" (REPLACE -2 -1) (("2" (ASSERT) (("2" (EXPAND "restrict") (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (HIDE 3) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (IFF) (("1" (ASSERT) (("1" (EXPAND "singleton") (("1" (EXPAND "union") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND* "member" "Vars") (("1" (INST 1 "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("1" (REWRITE POS_SUBTERM) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REWRITE POS_O_TERM) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REWRITE POS_O_TERM) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vars?(subtermOF(subtermOF(t!1, p!1),
                      first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))") (("1" (HIDE 1 4) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (IFF) (("1" (ASSERT) (("1" (HIDE -2 -3) (("1" (EXPAND* "union" "member") (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "Vars") (("1" (INST 1 "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("1" (EXPAND SINGLETON) (("1" (REWRITE POS_SUBTERM) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REWRITE POS_O_TERM) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REWRITE POS_O_TERM) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3 5) (("2" (EXPAND "link_of_frst_diff") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 3) (("2" (TYPEPRED "sig1") (("2" (EXPAND "Sub?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|union_vars_ext_link_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|sig1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (|comutative_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|vars?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[(V)]" |robinsonunificationEF| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[term[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}" |robinsonunificationEF| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|subtermOF_next_position_TCC1| 0 (|subtermOF_next_position_TCC1-1| |nil| 3509290215 ("" (SKOSIMP*) (("" (LEMMA "next_position_is_position") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|subtermOF_next_position| SUBTYPE "robinsonunificationEF.q" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.s)"))) (|subtermOF_next_position_TCC2| 0 (|subtermOF_next_position_TCC2-1| |nil| 3509290215 ("" (SKOSIMP*) (("" (LEMMA "next_position_is_position") (("" (INST -1 "t!1" "s!1" "p!1") (("" (LEMMA "next_position_commute") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|subtermOF_next_position| SUBTYPE "robinsonunificationEF.q" "positions?[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity](robinsonunificationEF.t)"))) (|subtermOF_next_position| 0 (|subtermOF_next_position-2| "" 3884925158 ("" (SKOLEM 1 ("s!1" "t!1" "_")) (("" (MEASURE-INDUCT+ "IF p = empty_seq 
                         THEN lex2(0,0)
                         ELSE lex2(length(p), 
                         arity(f(subtermOF(s!1,delete(p,length(p) - 1)))) - last(p))
                         ENDIF" ("p")) (("1" (NAME-REPLACE "p!1" "next_position(s!1, t!1, x!1)" :HIDE? NIL) (("1" (CASE "x!1 = empty_seq") (("1" (HIDE -3) (("1" (REPLACES -1) (("1" (EXPAND "next_position") (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND "subtermOF") (("1" (REWRITE "empty_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "next_position" -1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -5 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (REPLACE -2) (("1" (PROP) (("1" (HIDE -2 -5) (("1" (LEMMA "next_position_tcc17") (("1" (INST -1 "s!1" "t!1" "x!1") (("1" (ASSERT) (("1" (INST -1 "delete(x!1, length(x!1) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (3 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "delete(x!1, length(x!1) - 1)") (("1" (REPLACE -1) (("1" (PROP) (("1" (HIDE -3 -1) (("1" (LEMMA "next_position_tcc19") (("1" (INST -1 "s!1" "t!1" "x!1") (("1" (ASSERT) (("1" (INST -1 "delete(x!1, length(x!1) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (HIDE-ALL-BUT (1 5)) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -5)) (("3" (REPLACE -1 -2 RL) (("3" (HIDE -1) (("3" (EXPAND "subtermOF") (("3" (REWRITE "empty_0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "next_position_is_position") (("2" (INST -1 "t!1" "s!1" "p!1") (("2" (LEMMA "next_position_commute") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REPLACES -1) (("3" (REWRITE "next_position_is_position") NIL NIL)) NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA "next_position_tcc5") (("4" (INST -1 "s!1" "t!1" "p!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "empty_0") NIL NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA "next_position_tcc3") (("6" (INST -1 "s!1" "t!1" "p!1") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (REWRITE "delete_is_position") (("7" (HIDE 3) (("7" (FLATTEN) (("7" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 3) (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "p!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|subtermOF_next_position-1| |nil| 3509290246 ("" (SKOLEM 1 ("s!1" "t!1" "_")) (("" (MEASURE-INDUCT+ "IF p = empty_seq 
                         THEN lex2(0,0)
                         ELSE lex2(length(p), 
                         arity(f(subtermOF(s!1,delete(p,length(p) - 1)))) - last(p))
                         ENDIF" ("p")) (("1" (NAME-REPLACE "p!1" "next_position(s!1, t!1, x!1)" :HIDE? NIL) (("1" (CASE "x!1 = empty_seq") (("1" (HIDE -3) (("1" (REPLACES -1) (("1" (EXPAND NEXT_POSITION) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND NEXT_POSITION -1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -5 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (REPLACE -2) (("1" (PROP) (("1" (HIDE -2 -5) (("1" (LEMMA NEXT_POSITION_TCC17) (("1" (INST -1 S!1 T!1 X!1) (("1" (ASSERT) (("1" (INST -1 "delete(x!1, length(x!1) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (3 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "delete(x!1, length(x!1) - 1)") (("1" (REPLACE -1) (("1" (PROP) (("1" (HIDE -3 -1) (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 S!1 T!1 X!1) (("1" (ASSERT) (("1" (INST -1 "delete(x!1, length(x!1) - 1)") (("1" (ASSERT) (("1" (INST -1 "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))") (("1" (HIDE-ALL-BUT (1 5)) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -5)) (("3" (REPLACE -1 -2 RL) (("3" (HIDE -1) (("3" (EXPAND SUBTERMOF) (("3" (REWRITE EMPTY_0) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST -1 T!1 S!1 P!1) (("2" (LEMMA NEXT_POSITION_COMMUTE) (("2" (INST -1 S!1 T!1 P!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REPLACES -1) (("3" (REWRITE NEXT_POSITION_IS_POSITION) NIL NIL)) NIL)) NIL) ("4" (HIDE 3) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 S!1 T!1 P!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 3) (("6" (LEMMA NEXT_POSITION_TCC3) (("6" (INST -1 S!1 T!1 P!1) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 3) (("7" (REWRITE DELETE_IS_POSITION) (("7" (HIDE 3) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 3) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P!1) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "{t: term | s!1 /= t}" |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (< CONST-DECL "bool" |reals| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (< DEF-DECL "bool" |ordinals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|x!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}" |robinsonunificationEF| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL)) SHOSTAK)) (|np_o_fd_is_position_TCC1| 0 (|np_o_fd_is_position_TCC1-2| "" 3884925187 ("" (SKOSIMP) (("" (LEMMA "subtermof_next_position") (("" (INST -1 "s!1" "t!1" "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|np_o_fd_is_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)" "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q) /= t}")) (|np_o_fd_is_position_TCC1-1| |nil| 3510656190 ("" (SKOSIMP) (("" (LEMMA SUBTERMOF_NEXT_POSITION) (("" (INST -1 S!1 T!1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|subtermOF_next_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|np_o_fd_is_position| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)" "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q) /= t}"))) (|np_o_fd_is_position| 0 (|np_o_fd_is_position-2| "" 3884925277 ("" (SKOSIMP) (("" (ASSERT) (("" (NAME-REPLACE "pi" "next_position(s!1, t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "qi" "first_diff(subtermOF(s!1, pi), subtermOF(t!1, pi))" :HIDE? NIL) (("" (LEMMA "position_s_first_diff") (("" (LEMMA "position_t_first_diff") (("" (INST -1 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" "qi") (("" (INST -2 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" "qi") (("" (ASSERT) (("" (LEMMA "next_position_is_position") (("" (INST-CP -1 "s!1" "t!1" "p!1") (("" (INST -1 "t!1" "s!1" "p!1") (("" (LEMMA "next_position_commute") (("" (INST -1 "s!1" "t!1" "p!1") (("" (REPLACE -1 -2 RL) (("" (HIDE -1) (("" (REPLACE -6) (("" (HIDE -5 -6) (("" (LEMMA "pos_o_term") (("" (INST-CP -1 "pi" "qi" "s!1") (("" (INST -1 "pi" "qi" "t!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|np_o_fd_is_position-1| |nil| 3510656191 ("" (SKOSIMP) (("" (ASSERT) (("" (NAME-REPLACE "pi" "next_position(s!1, t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "qi" "first_diff(subtermOF(s!1, pi), subtermOF(t!1, pi))" :HIDE? NIL) (("" (LEMMA POSITION_S_FIRST_DIFF) (("" (LEMMA POSITION_T_FIRST_DIFF) (("" (INST -1 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" QI) (("" (INST -2 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" QI) (("" (ASSERT) (("" (LEMMA NEXT_POSITION_IS_POSITION) (("" (INST-CP -1 S!1 T!1 P!1) (("" (INST -1 T!1 S!1 P!1) (("" (LEMMA NEXT_POSITION_COMMUTE) (("" (INST -1 S!1 T!1 P!1) (("" (REPLACE -1 -2 RL) (("" (HIDE -1) (("" (REPLACE -6) (("" (HIDE -5 -6) (("" (LEMMA POS_O_TERM) (("" (INST-CP -1 PI QI S!1) (("" (INST -1 PI QI T!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|child_np_child_p| 0 (|child_np_child_p-2| "" 3884926058 ("" (MEASURE-INDUCT+ "IF p = empty_seq 
          THEN lex2(0,0)
          ELSE lex2(length(p), 
                    arity(f(subtermOF(s, 
                                   delete(p,length(p) - 1)))) - last(p))
          ENDIF" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (EXPAND "next_position" -1) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 -4)) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND "child") (("1" (SKOSIMP) (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "q!1" "p1!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (INST 3 "p1!1 o #(last(x!3))") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "#" "o" "empty_seq") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "o_assoc") (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA "add_last_delete[posnat]") (("2" (INST -1 "x!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE "add_last_is_o") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 1) (("3" (LEMMA "add_last_delete[posnat]") (("3" (INST -1 "x!3") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) (("3" (NAME-REPLACE "dp" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("3" (REWRITE "add_last_is_o") (("3" (REWRITE "add_last_is_o") (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (CASE "dp = q!1") (("1" (INST 4 "#(last(x!3))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -6) (("1" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(q!1) < length(dp)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -4) (("1" (INST 5 "seq!1 o  #(last(x!3))") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (FLATTEN) (("1" (EXPAND* "#" "o" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 5)) (("2" (REPLACES -2) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE 3) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) (("2" (HIDE 4) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -7 "x!1" "x!2" "pi") (("1" (INST -7 "q!1") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -5 -6 -7 -8) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REWRITE "add_last_is_o") (("1" (REWRITE "add_last_is_o") (("1" (EXPAND "child") (("1" (SKOSIMP) (("1" (REPLACE -2 -4) (("1" (CASE "dp = q!1") (("1" (INST 4 "#(last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 4) (("1" (FLATTEN) (("1" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(dp) > length(q!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -3) (("1" (INST 5 "seq!1 o  #(last(x!3))") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (EXPAND* "#" "o" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 2 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("2" (ASSERT) (("2" (EXPAND "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACE -2 -1 RL) (("1" (HIDE -2) (("1" (EXPAND* "add_last" "insert?" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -7 4) (("2" (LEMMA "next_position_tcc17") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "dp") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (INST -1 "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 "x!1" "x!2" "dp") (("1" (REPLACE -2) (("1" (INST -4 "q!1") (("1" (ASSERT) (("1" (LEMMA "next_position_tcc19") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "dp") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (INST -1 "add_last(dp, 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -5 3 4)) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE "add_last_is_o") (("1" (EXPAND "child") (("1" (SKOSIMP) (("1" (REPLACE -3 -1) (("1" (INST 4 "p1!1 o  #(last(x!3))") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 4) (("1" (FLATTEN) (("1" (EXPAND* "#" "o" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-2 -5)) (("6" (REPLACE -1 -2 RL) (("6" (HIDE -1) (("6" (EXPAND "child") (("6" (SKOSIMP) (("6" (LEMMA "seq_empty[posnat]") (("6" (INST -1 "q!1" "p1!1") (("6" (ASSERT) (("6" (FLATTEN) (("6" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "next_position_tcc5") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (REWRITE "empty_0") NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA "next_position_tcc3") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 2)) (("5" (REWRITE "delete_is_position") (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 3) (("6" (LEMMA "empty_0[posnat]") (("6" (INST -1 "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE -1 3) (("7" (LEMMA "next_position_tcc5") (("7" (INST -1 "y!1" "y!2" "y!3") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE -2 2) (("8" (REWRITE "empty_0") NIL NIL)) NIL) ("9" (HIDE -1 3) (("9" (LEMMA "next_position_tcc3") (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE -1 3) (("10" (REWRITE "delete_is_position") (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE -1 3) (("11" (LEMMA "empty_0[posnat]") (("11" (INST -1 "y!3") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA "next_position_tcc5") (("12" (INST -1 "x!1" "x!2" "x!3") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE "empty_0") NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA "next_position_tcc3") (("14" (INST -1 "x!1" "x!2" "x!3") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE "delete_is_position") (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "x!3") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA "next_position_tcc5") (("17" (INST -1 "y!1" "y!2" "y!3") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE "empty_0") NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA "next_position_tcc3") (("19" (INST -1 "y!1" "y!2" "y!3") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE "delete_is_position") (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA "empty_0[posnat]") (("21" (INST -1 "y!3") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA "next_position_tcc5") (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE "empty_0") NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA "next_position_tcc3") (("24" (INST?) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE "delete_is_position") (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA "empty_0[posnat]") (("26" (INST?) (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 3) (("27" (LEMMA "next_position_tcc5") (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE 2) (("28" (REWRITE "empty_0") NIL NIL)) NIL) ("29" (HIDE 3) (("29" (LEMMA "next_position_tcc3") (("29" (INST?) (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("30" (HIDE 3) (("30" (REWRITE "delete_is_position") (("30" (HIDE 3) (("30" (FLATTEN) (("30" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("31" (HIDE 3) (("31" (LEMMA "empty_0[posnat]") (("31" (INST?) (("31" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("32" (HIDE 3) (("32" (LEMMA "next_position_tcc5") (("32" (INST?) (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE "empty_0") NIL NIL)) NIL) ("34" (HIDE 3) (("34" (LEMMA "next_position_tcc3") (("34" (INST?) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("35" (HIDE 3) (("35" (REWRITE "delete_is_position") (("35" (HIDE 3) (("35" (FLATTEN) (("35" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("36" (HIDE 3) (("36" (LEMMA "empty_0[posnat]") (("36" (INST?) (("36" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|child_np_child_p-1| |nil| 3514657234 ("" (MEASURE-INDUCT+ "IF p = empty_seq 
          THEN lex2(0,0)
          ELSE lex2(length(p), 
                    arity(f(subtermOF(s, 
                                   delete(p,length(p) - 1)))) - last(p))
          ENDIF" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 -4)) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 Q!1 P1!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 3 "p1!1 o #(last(x!3))") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE O_ASSOC) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE ADD_LAST_IS_O) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 1) (("3" (LEMMA ADD_LAST_DELETE[POSNAT]) (("3" (INST -1 X!3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) (("3" (NAME-REPLACE "dp" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("3" (REWRITE ADD_LAST_IS_O) (("3" (REWRITE ADD_LAST_IS_O) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (CASE "dp = q!1") (("1" (INST 4 "#(last(x!3))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -6) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(q!1) < length(dp)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 Q!1 P1!1 DP "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -4) (("1" (INST 5 "seq!1 o  #(last(x!3))") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (FLATTEN) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 5)) (("2" (REPLACES -2) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 Q!1 P1!1 DP "#(1 + last(x!3))") (("2" (ASSERT) (("2" (HIDE 3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) (("2" (HIDE 4) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -7 X!1 X!2 PI) (("1" (INST -7 Q!1) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -4 -5 -6 -7 -8) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REWRITE ADD_LAST_IS_O) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (REPLACE -2 -4) (("1" (CASE "dp = q!1") (("1" (INST 4 "#(last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 4) (("1" (FLATTEN) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(dp) > length(q!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -3) (("1" (INST 5 "seq!1 o  #(last(x!3))") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 2 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 "q!1" "p1!1" "dp" "#(1 + last(x!3))") (("2" (ASSERT) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACE -2 -1 RL) (("1" (HIDE -2) (("1" (EXPAND* ADD_LAST INSERT? EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -7 4) (("2" (LEMMA NEXT_POSITION_TCC17) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 DP) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (INST -1 PI) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 X!1 X!2 DP) (("1" (REPLACE -2) (("1" (INST -4 Q!1) (("1" (ASSERT) (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 DP) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (INST -1 "add_last(dp, 1 + last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -5 3 4)) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE ADD_LAST_IS_O) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (REPLACE -3 -1) (("1" (INST 4 "p1!1 o  #(last(x!3))") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 4) (("1" (FLATTEN) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT (-2 -5)) (("6" (REPLACE -1 -2 RL) (("6" (HIDE -1) (("6" (EXPAND CHILD) (("6" (SKOSIMP) (("6" (LEMMA SEQ_EMPTY[POSNAT]) (("6" (INST -1 Q!1 P1!1) (("6" (ASSERT) (("6" (FLATTEN) (("6" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA NEXT_POSITION_TCC5) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA NEXT_POSITION_TCC3) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 2)) (("5" (REWRITE DELETE_IS_POSITION) (("5" (HIDE 3) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 3) (("6" (LEMMA EMPTY_0[POSNAT]) (("6" (INST -1 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE -1 3) (("7" (LEMMA NEXT_POSITION_TCC5) (("7" (INST -1 Y!1 Y!2 Y!3) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE -2 2) (("8" (REWRITE EMPTY_0) NIL NIL)) NIL) ("9" (HIDE -1 3) (("9" (LEMMA NEXT_POSITION_TCC3) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE -1 3) (("10" (REWRITE DELETE_IS_POSITION) (("10" (HIDE 3) (("10" (FLATTEN) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE -1 3) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 Y!3) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 3) (("12" (LEMMA NEXT_POSITION_TCC5) (("12" (INST -1 X!1 X!2 X!3) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE EMPTY_0) NIL NIL)) NIL) ("14" (HIDE 3) (("14" (LEMMA NEXT_POSITION_TCC3) (("14" (INST -1 X!1 X!2 X!3) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE 3) (("15" (REWRITE DELETE_IS_POSITION) (("15" (HIDE 3) (("15" (FLATTEN) (("15" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE 3) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 X!3) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("17" (HIDE 3) (("17" (LEMMA NEXT_POSITION_TCC5) (("17" (INST -1 Y!1 Y!2 Y!3) (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (REWRITE EMPTY_0) NIL NIL)) NIL) ("19" (HIDE 3) (("19" (LEMMA NEXT_POSITION_TCC3) (("19" (INST -1 Y!1 Y!2 Y!3) (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 3) (("20" (REWRITE DELETE_IS_POSITION) (("20" (HIDE 3) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 3) (("21" (LEMMA EMPTY_0[POSNAT]) (("21" (INST -1 Y!3) (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 3) (("22" (LEMMA NEXT_POSITION_TCC5) (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (REWRITE EMPTY_0) NIL NIL)) NIL) ("24" (HIDE 3) (("24" (LEMMA NEXT_POSITION_TCC3) (("24" (INST?) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE 3) (("25" (REWRITE DELETE_IS_POSITION) (("25" (HIDE 3) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 3) (("26" (LEMMA EMPTY_0[POSNAT]) (("26" (INST?) (("26" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 3) (("27" (LEMMA NEXT_POSITION_TCC5) (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE 2) (("28" (REWRITE EMPTY_0) NIL NIL)) NIL) ("29" (HIDE 3) (("29" (LEMMA NEXT_POSITION_TCC3) (("29" (INST?) (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("30" (HIDE 3) (("30" (REWRITE DELETE_IS_POSITION) (("30" (HIDE 3) (("30" (FLATTEN) (("30" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("31" (HIDE 3) (("31" (LEMMA EMPTY_0[POSNAT]) (("31" (INST?) (("31" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("32" (HIDE 3) (("32" (LEMMA NEXT_POSITION_TCC5) (("32" (INST?) (("32" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL) ("34" (HIDE 3) (("34" (LEMMA NEXT_POSITION_TCC3) (("34" (INST?) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("35" (HIDE 3) (("35" (REWRITE DELETE_IS_POSITION) (("35" (HIDE 3) (("35" (FLATTEN) (("35" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("36" (HIDE 3) (("36" (LEMMA EMPTY_0[POSNAT]) (("36" (INST?) (("36" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|add_last_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|next_pos_empty_equal_subterm_TCC1| 0 (|next_pos_empty_equal_subterm_TCC1-2| "" 3884926169 ("" (SKOSIMP*) (("" (HIDE -1) (("" (EXPAND "child") (("" (SKOSIMP) (("" (LEMMA "pos_subterm_ax") (("" (INST -1 "p1!1" "p1!2" "s!1") (("" (ASSERT) (("" (LEMMA "not_var") (("" (LEMMA "seq_first_rest[posnat]") (("" (INST -1 "p1!2") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p1!2") (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_empty_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|next_pos_empty_equal_subterm_TCC1-1| |nil| 3511709362 ("" (SKOSIMP*) (("" (HIDE -1) (("" (EXPAND CHILD) (("" (SKOSIMP) (("" (LEMMA POS_SUBTERM_AX) (("" (INST -1 P1!1 P1!2 S!1) (("" (ASSERT) (("" (LEMMA NOT_VAR) (("" (LEMMA SEQ_FIRST_REST[POSNAT]) (("" (INST -1 P1!2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P1!2) (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|child| CONST-DECL "bool" |positions| NIL)) NIL (|next_pos_empty_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_pos_empty_equal_subterm_TCC2| 0 (|next_pos_empty_equal_subterm_TCC2-2| "" 3884926219 ("" (SKOSIMP*) (("" (HIDE -1) (("" (EXPAND "child") (("" (SKOSIMP) (("" (LEMMA "pos_subterm_ax") (("" (INST -1 "p1!1" "p1!2" "t!1") (("" (ASSERT) (("" (LEMMA "not_var") (("" (LEMMA "seq_first_rest[posnat]") (("" (INST -1 "p1!2") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p1!2") (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_empty_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|next_pos_empty_equal_subterm_TCC2-1| |nil| 3511709362 ("" (SKOSIMP*) (("" (HIDE -1) (("" (EXPAND CHILD) (("" (SKOSIMP) (("" (LEMMA POS_SUBTERM_AX) (("" (INST -1 P1!1 P1!2 T!1) (("" (ASSERT) (("" (LEMMA NOT_VAR) (("" (LEMMA SEQ_FIRST_REST[POSNAT]) (("" (INST -1 P1!2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P1!2) (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|child| CONST-DECL "bool" |positions| NIL)) NIL (|next_pos_empty_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_pos_empty_equal_subterm| 0 (|next_pos_empty_equal_subterm-4| "" 3884928287 ("" (MEASURE-INDUCT+ "lex2(length(p),
                            arity(f(subtermOF(s,
                                           delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (EXPAND "next_position" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (REPLACES -1) (("1" (INST -1 "empty_seq") (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "child") (("1" (INST 1 "x!3") (("1" (ASSERT) (("1" (REWRITE "empty_o_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (NAME-REPLACE "nx3" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 "x!1" "x!2" "nx3") (("1" (PROP) (("1" (CASE "q!1 = nx3") (("1" (ASSERT) NIL NIL) ("2" (CASE "child(q!1, nx3)") (("1" (HIDE-ALL-BUT (-1 -4 2)) (("1" (EXPAND "child") (("1" (SKOSIMP) (("1" (REPLACE -1 2) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "left_without_children(nx3, q!1)") (("1" (INST -2 "q!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2 3)) (("2" (LEMMA "lwc_add_last_delete") (("2" (INST -1 "x!3" "q!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -7 "p1!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 2)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (INST 2 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)") (("1" (REPLACES -1) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_delete_is_o") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "p1!2") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!2") (("1" (ASSERT) (("1" (REWRITE "add_last_delete_is_o") (("1" (EXPAND "finseq_appl") (("1" (REWRITE "o_assoc") (("1" (EXPAND* "last" "finseq_appl") (("1" (ASSERT) (("1" (REPLACE -1 -3) (("1" (REWRITE "o_assoc") (("1" (NAME-REPLACE "pi1" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi2" "(p1!1 o delete(p1!2, p1!2`length - 1))" :HIDE? NIL) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "pi1" "#(1 + x!3`seq(x!3`length - 1))" "pi2" "#(p1!2`seq(p1!2`length - 1))") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "pi1" "#(1 + x!3`seq(x!3`length - 1))" "#(p1!2`seq(p1!2`length - 1))") (("2" (ASSERT) (("2" (EXPAND "#" -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "nth_add_last[posnat]") (("2" (INST?) (("1" (EXPAND "finseq_appl") (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "x!4") (("1" (INST -2 "x!4") (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "o") (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "o") (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "p1!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "nth_add_last[posnat]") (("2" (EXPAND "finseq_appl") (("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "add_last" "insert?" "o" "#") NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "x!4") (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "o") (("1" (ASSERT) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "o") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "add_last" "insert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND* "add_last" "insert?") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST-CP -1 "p1!2") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (CASE "last(p1!2) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (HIDE 4) (("2" (EXPAND* "add_last" "insert?" "o" "finseq_appl") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(delete(x!3, length(x!3) - 1))") (("2" (ASSERT) (("2" (EXPAND LAST 1 1) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (FLATTEN) (("3" (REWRITE "empty_0") NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "p1!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6 -7 2) (("3" (LEMMA "next_position_tcc17") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "nx3") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA "next_position_tcc15") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "nx3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 "x!1" "x!2" "px3") (("1" (PROP) (("1" (CASE "left_without_children(px3, q!1)") (("1" (INST -2 "q!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -3 -4 -5 4) (("2" (CASE "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)") (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 -4 -5 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (REPLACES -1) (("1" (EXPAND "left_without_children") (("1" (SKOSIMP) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_delete_is_o") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -2 -1) (("1" (REPLACE -1 -4) (("1" (REPLACE -3 -4) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "r!2" "q1!1 o  #(x!3`seq(x!3`length - 1))" "p1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE -2 -3 -4 -5) (("1" (EXPAND* "first" "o" "finseq_appl") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "seq_first_rest_1[posnat]") (("2" (INST -1 "r!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "r!1") (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (REWRITE "o_assoc") (("2" (NAME-REPLACE "q!2" "px3 o  #(first(r!1))" :HIDE? NIL) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!2" "rest(r!1)" "x!1") (("2" (ASSERT) (("2" (HIDE -3 -4 -6 -7 3) (("2" (CASE "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "px3" "#(first(r!1))" "x!1") (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "px3" "#(1 + last(x!3))" "x!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (REVEAL -10) (("1" (REPLACE -1 1 RL) (("1" (REWRITE "delete_is_position") (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (LEMMA "subterms_acc_arity") (("2" (INST -1 "first(r!1)" "1 + last(x!3)" "subtermOF(x!1, px3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2 3 5) (("2" (EXPAND "o") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND* "add_last" "insert?" "#" "finseq_appl") NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "nth_add_last[posnat]") (("1" (EXPAND "finseq_appl") (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "px3" "1 + last(x!3)" "x!4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "px3" "1 + last(x!3)" "x!4") (("1" (GROUND) (("1" (REPLACES -2) (("1" (REPLACE -1 2) (("1" (ASSERT) (("1" (EXPAND* "last" "finseq_appl" "#") NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!4") (("2" (HIDE -2 3 4) (("2" (EXPAND* "add_last" "insert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!4") (("2" (HIDE 3 4) (("2" (EXPAND* "add_last" "insert?") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* "add_last" "insert?" "last" "#" "finseq_appl") NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (CASE "length(r!1) = length(px3)") (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_delete_is_o") (("1" (REPLACE -3 -1) (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1 -5) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "px3" "#(x!3`seq(x!3`length - 1))" "r!1" "p1!1") (("1" (ASSERT) (("1" (INST 2 "q1!1") (("1" (ASSERT) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -6 1 2 5 7)) (("2" (REPLACES -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND* "o" "last" "first" "delete" "#" "finseq_appl") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2 4 5) (("2" (EXPAND* "#" "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* "#" "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "x!4") (("3" (EXPAND* "#" "delete") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "add_last_delete[posnat]") (("2" (INST -1 "x!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (REWRITE "add_last_delete_is_o") (("2" (EXPAND "finseq_appl") (("2" (REPLACE -2 -1) (("2" (REPLACE -1 -4) (("2" (CASE "length(r!1) > length(px3)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "px3" "#(x!3`seq(x!3`length - 1))" "r!1" "p1!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -5) (("1" (INST 3 "seq!1 o q1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (CASE "seq!1 = empty_seq") (("1" (REPLACE -1 -2) (("1" (REWRITE "seq_o_empty") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "px3" "#(x!3`seq(x!3`length - 1))" "r!1" "p1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "seq!1") (("2" (ASSERT) (("2" (REWRITE "first_compo") (("2" (REPLACE -1 -6) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "px3" "#(x!3`seq(x!3`length - 1))" "seq!1 o p1!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 9)) (("2" (EXPAND* "#" "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!1" "px3" "#(x!3`seq(x!3`length - 1))") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 3)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 -5) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "seq!1 o  #(x!3`seq(x!3`length - 1))" "p1!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (INST 6 "r!1" "seq!1" "q1!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -7 1 6)) (("2" (CASE "first(seq!1) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (REPLACE -1 1 RL) (("2" (REWRITE "first_compo") (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "r!1") (("3" (ASSERT) (("3" (REPLACE -1 -2) (("3" (REWRITE "seq_o_empty") (("3" (HIDE -1 -3 1 3) (("3" (REPLACES -1) (("3" (EXPAND "left_without_children") (("3" (SKOSIMP) (("3" (LEMMA "add_last_delete[posnat]") (("3" (INST -1 "x!3") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) (("3" (REWRITE "add_last_delete_is_o") (("3" (EXPAND "finseq_appl") (("3" (REPLACE -2 -1) (("3" (REPLACE -1 -4) (("3" (REPLACE -3 -4) (("3" (LEMMA "equal_prefix[posnat]") (("3" (INST -1 "r!2" "q1!1 o  #(x!3`seq(x!3`length - 1))" "p1!1") (("3" (REWRITE "o_assoc") (("3" (ASSERT) (("3" (REPLACE -1 -6 RL) (("3" (HIDE-ALL-BUT (-6 3)) (("3" (REWRITE "first_compo") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -5 "p1!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 4)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (INST 2 "add_last(p1!2, last(x!3))") (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST-CP -1 "x!3") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (EXPAND* "delete" "o" "add_last" "insert?" "finseq_appl") (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 "x!4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (TYPEPRED "x!4") (("3" (EXPAND* "last" "finseq_appl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* "add_last" "insert?" "finseq_appl") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* "add_last" "insert?" "finseq_appl") NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5 4) (("3" (LEMMA "next_position_tcc19") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "px3") (("3" (ASSERT) (("3" (INST -1 "add_last(px3, 1 + last(x!3))") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE "delete_is_position") (("1" (REWRITE "delete_is_position") (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 -3 -4 2) (("5" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (TYPEPRED "q!1") (("1" (HIDE -2) (("1" (EXPAND "left_without_children") (("1" (SKOSIMP) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_delete_is_o") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -3 -1) (("1" (REPLACE -1 -6) (("1" (REPLACE -4) (("1" (REWRITE "empty_o_seq") (("1" (COPY -6) (("1" (EXPAND "#" -1) (("1" (EXPAND "o" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!1") (("1" (ASSERT) (("1" (CASE "p1!1`length = 1 AND r!1`length = 0") (("1" (FLATTEN) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "r!1") (("1" (ASSERT) (("1" (REPLACE -1 (-9 -10)) (("1" (REWRITE "empty_o_seq") (("1" (REWRITE "empty_o_seq") (("1" (REPLACE -9 -11 RL) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "q!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "q!1") (("1" (ASSERT) (("1" (LEMMA "pos_ax") (("1" (INST -1 "#(first(q!1))" "rest(q!1)" "x!1") (("1" (ASSERT) (("1" (CASE "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "first(p1!1) = last(x!3)") (("1" (REPLACE -1 4 RL) (("1" (HIDE-ALL-BUT (-2 -14 4)) (("1" (LEMMA "subterms_acc_arity") (("1" (INST -1 "first(q!1)" "1 + first(p1!1)" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-12 1)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* "first" "last" "#" "finseq_appl") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "add_last" "insert?" "#") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP) (("3" (LEMMA "app_term") (("3" (INST -1 "y!3" "p1!1" "y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "next_position_tcc5") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE "empty_0") NIL NIL)) NIL) ("6" (HIDE 2) (("6" (REWRITE "subterm_is_app") (("6" (FLATTEN) (("6" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "delete_is_position") (("7" (FLATTEN) (("7" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "x!3") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA "next_position_tcc5") (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE "empty_0") NIL NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE "subterm_is_app") (("11" (FLATTEN) (("11" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE "delete_is_position") (("12" (FLATTEN) (("12" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA "empty_0[posnat]") (("13" (INST -1 "y!3") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKOSIMP) (("14" (EXPAND "child") (("14" (SKOSIMP) (("14" (LEMMA "pos_subterm_ax") (("14" (INST?) (("14" (INST?) (("14" (ASSERT) (("14" (LEMMA "seq_first_rest[posnat]") (("14" (INST -1 "p1!2") (("14" (LEMMA "empty_0[posnat]") (("14" (INST -1 "p1!2") (("14" (ASSERT) (("14" (LEMMA "not_var") (("14" (INST?) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (EXPAND "child") (("15" (SKOSIMP) (("15" (LEMMA "pos_subterm_ax") (("15" (INST?) (("15" (INST?) (("15" (ASSERT) (("15" (LEMMA "seq_first_rest[posnat]") (("15" (INST -1 "p1!2") (("15" (LEMMA "empty_0[posnat]") (("15" (INST -1 "p1!2") (("15" (ASSERT) (("15" (LEMMA "not_var") (("15" (INST?) (("15" (INST?) (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (EXPAND "child") (("16" (SKOSIMP) (("16" (LEMMA "pos_subterm_ax") (("16" (INST?) (("16" (INST?) (("16" (ASSERT) (("16" (LEMMA "seq_first_rest[posnat]") (("16" (INST -1 "p1!2") (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "p1!2") (("16" (ASSERT) (("16" (LEMMA "not_var") (("16" (INST?) (("16" (INST?) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (EXPAND "child") (("17" (SKOSIMP) (("17" (LEMMA "pos_subterm_ax") (("17" (INST?) (("17" (INST?) (("17" (ASSERT) (("17" (LEMMA "seq_first_rest[posnat]") (("17" (INST -1 "p1!2") (("17" (LEMMA "empty_0[posnat]") (("17" (INST -1 "p1!2") (("17" (ASSERT) (("17" (LEMMA "not_var") (("17" (INST?) (("17" (INST?) (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA "next_position_tcc5") (("18" (INST?) (("18" (INST?) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE "empty_0") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE "subterm_is_app") (("20" (FLATTEN) (("20" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE "delete_is_position") (("21" (FLATTEN) (("21" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA "empty_0[posnat]") (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA "next_position_tcc5") (("23" (INST?) (("23" (INST?) (("23" (INST?) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE "empty_0") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE "subterm_is_app") (("25" (FLATTEN) (("25" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE "delete_is_position") (("26" (FLATTEN) (("26" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA "empty_0[posnat]") (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE -1 2) (("28" (SKOSIMP) (("28" (EXPAND "child") (("28" (SKOSIMP) (("28" (LEMMA "pos_subterm_ax") (("28" (INST -1 "p1!1" "p1!2" "t!1") (("28" (ASSERT) (("28" (LEMMA "seq_first_rest[posnat]") (("28" (INST -1 "p1!2") (("28" (LEMMA "empty_0[posnat]") (("28" (INST -1 "p1!2") (("28" (ASSERT) (("28" (LEMMA "not_var") (("28" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("29" (HIDE -1 2) (("29" (SKOSIMP) (("29" (EXPAND "child") (("29" (SKOSIMP) (("29" (LEMMA "pos_subterm_ax") (("29" (INST -1 "p1!1" "p1!2" "s!1") (("29" (ASSERT) (("29" (LEMMA "seq_first_rest[posnat]") (("29" (INST -1 "p1!2") (("29" (LEMMA "empty_0[posnat]") (("29" (INST -1 "p1!2") (("29" (ASSERT) (("29" (LEMMA "not_var") (("29" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA "next_position_tcc5") (("30" (INST -1 "s!1" "t!1" "p!1") (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE "empty_0") NIL NIL)) NIL) ("32" (HIDE 2) (("32" (REWRITE "subterm_is_app") (("32" (FLATTEN) (("32" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE "delete_is_position") (("33" (FLATTEN) (("33" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA "empty_0[posnat]") (("34" (INST -1 "p!1") (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|next_pos_empty_equal_subterm-3| "" 3803841310 ("" (MEASURE-INDUCT+ "lex2(length(p),
                            arity(f(subtermOF(s,
                                           delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (EXPAND NEXT_POSITION -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (REPLACES -1) (("1" (INST -1 EMPTY_SEQ) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND CHILD) (("1" (INST 1 X!3) (("1" (ASSERT) (("1" (REWRITE EMPTY_O_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (NAME-REPLACE "nx3" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 X!1 X!2 NX3) (("1" (PROP) (("1" (CASE "q!1 = nx3") (("1" (ASSERT) NIL NIL) ("2" (CASE "child(q!1, nx3)") (("1" (HIDE-ALL-BUT (-1 -4 2)) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (REPLACE -1 2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "left_without_children(nx3, q!1)") (("1" (INST -2 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2 3)) (("2" (LEMMA LWC_ADD_LAST_DELETE) (("2" (INST -1 X!3 Q!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -7 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)") (("1" (REPLACES -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 P1!2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!2) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REWRITE O_ASSOC) (("1" (EXPAND* LAST FINSEQ_APPL) (("1" (ASSERT) (("1" (REPLACE -1 -3) (("1" (REWRITE O_ASSOC) (("1" (NAME-REPLACE "pi1" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi2" "(p1!1 o delete(p1!2, p1!2`length - 1))" :HIDE? NIL) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" PI2 "#(p1!2`seq(p1!2`length - 1))") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" "#(p1!2`seq(p1!2`length - 1))") (("2" (ASSERT) (("2" (EXPAND "#" -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (INST?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST -2 X!4) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* ADD_LAST INSERT? O "#") NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* ADD_LAST INSERT?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND* ADD_LAST INSERT?) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 P1!2) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (CASE "last(p1!2) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (HIDE 4) (("2" (EXPAND* ADD_LAST INSERT? O FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(delete(x!3, length(x!3) - 1))") (("2" (ASSERT) (("2" (EXPAND LAST 1 1) (("2" (EXPAND FINSEQ_APPL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6 -7 2) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 X!1 X!2 PX3) (("1" (PROP) (("1" (CASE "left_without_children(px3, q!1)") (("1" (INST -2 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -3 -4 -5 4) (("2" (CASE "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)") (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 -4 -5 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REPLACES -1) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -2 -1) (("1" (REPLACE -1 -4) (("1" (REPLACE -3 -4) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 R!2 "q1!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE -2 -3 -4 -5) (("1" (EXPAND* FIRST O FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (REWRITE O_ASSOC) (("2" (NAME-REPLACE "q!2" "px3 o  #(first(r!1))" :HIDE? NIL) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!2 "rest(r!1)" X!1) (("2" (ASSERT) (("2" (HIDE -3 -4 -6 -7 3) (("2" (CASE "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 PX3 "#(first(r!1))" X!1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "px3" "#(1 + last(x!3))" "x!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (REVEAL -10) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (LEMMA SUBTERMS_ACC_ARITY) (("2" (INST -1 "first(r!1)" "1 + last(x!3)" "subtermOF(x!1, px3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2 3 5) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND* ADD_LAST INSERT? "#" FINSEQ_APPL) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA NTH_ADD_LAST[POSNAT]) (("1" (EXPAND FINSEQ_APPL) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 PX3 "1 + last(x!3)" X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 PX3 "1 + last(x!3)" X!4) (("1" (GROUND) (("1" (REPLACES -2) (("1" (REPLACE -1 2) (("1" (ASSERT) (("1" (EXPAND* LAST FINSEQ_APPL "#") NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!4) (("2" (HIDE -2 3 4) (("2" (EXPAND* ADD_LAST INSERT?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!4) (("2" (HIDE 3 4) (("2" (EXPAND* ADD_LAST INSERT?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* ADD_LAST INSERT? LAST "#" FINSEQ_APPL) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (CASE "length(r!1) = length(px3)") (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (REPLACE -3 -1) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -1 -5) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) (("1" (INST 2 Q1!1) (("1" (ASSERT) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -6 1 2 5 7)) (("2" (REPLACES -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND* O LAST FIRST DELETE "#" FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2 4 5) (("2" (EXPAND* "#" DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* "#" DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED X!4) (("3" (EXPAND* "#" DELETE) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_DELETE_IS_O) (("2" (EXPAND FINSEQ_APPL) (("2" (REPLACE -2 -1) (("2" (REPLACE -1 -4) (("2" (CASE "length(r!1) > length(px3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -5) (("1" (INST 3 "seq!1 o q1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (CASE "seq!1 = empty_seq") (("1" (REPLACE -1 -2) (("1" (REWRITE SEQ_O_EMPTY) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 SEQ!1) (("2" (ASSERT) (("2" (REWRITE FIRST_COMPO) (("2" (REPLACE -1 -6) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" "seq!1 o p1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 9)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!1 PX3 "#(x!3`seq(x!3`length - 1))") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 3)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 -5) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 "seq!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (INST 6 R!1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -7 1 6)) (("2" (CASE "first(seq!1) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (REPLACE -1 1 RL) (("2" (REWRITE FIRST_COMPO) (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 R!1) (("3" (ASSERT) (("3" (REPLACE -1 -2) (("3" (REWRITE SEQ_O_EMPTY) (("3" (HIDE -1 -3 1 3) (("3" (REPLACES -1) (("3" (EXPAND LEFT_WITHOUT_CHILDREN) (("3" (SKOSIMP) (("3" (LEMMA ADD_LAST_DELETE[POSNAT]) (("3" (INST -1 X!3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) (("3" (REWRITE ADD_LAST_DELETE_IS_O) (("3" (EXPAND FINSEQ_APPL) (("3" (REPLACE -2 -1) (("3" (REPLACE -1 -4) (("3" (REPLACE -3 -4) (("3" (LEMMA EQUAL_PREFIX[POSNAT]) (("3" (INST -1 R!2 "q1!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("3" (REWRITE O_ASSOC) (("3" (ASSERT) (("3" (REPLACE -1 -6 RL) (("3" (HIDE-ALL-BUT (-6 3)) (("3" (REWRITE FIRST_COMPO) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -5 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 4)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(p1!2, last(x!3))") (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 X!3) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (EXPAND* DELETE O ADD_LAST INSERT? FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (TYPEPRED X!4) (("3" (EXPAND* LAST FINSEQ_APPL) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5 4) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 PX3) (("3" (ASSERT) (("3" (INST -1 "add_last(px3, 1 + last(x!3))") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 -3 -4 2) (("5" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (TYPEPRED Q!1) (("1" (HIDE -2) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -3 -1) (("1" (REPLACE -1 -6) (("1" (REPLACE -4) (("1" (REWRITE EMPTY_O_SEQ) (("1" (COPY -6) (("1" (EXPAND "#" -1) (("1" (EXPAND O -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) (("1" (CASE "p1!1`length = 1 AND r!1`length = 0") (("1" (FLATTEN) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) (("1" (REPLACE -1 (-9 -10)) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REPLACE -9 -11 RL) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q!1) (("1" (ASSERT) (("1" (LEMMA POS_AX) (("1" (INST -1 "#(first(q!1))" "rest(q!1)" X!1) (("1" (ASSERT) (("1" (CASE "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "first(p1!1) = last(x!3)") (("1" (REPLACE -1 4 RL) (("1" (HIDE-ALL-BUT (-2 -14 4)) (("1" (LEMMA SUBTERMS_ACC_ARITY) (("1" (INST -1 "first(q!1)" "1 + first(p1!1)" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-12 1)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* FIRST LAST "#" FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* ADD_LAST INSERT? "#") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!3) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP) (("3" (LEMMA APP_TERM) (("3" (INST -1 Y!3 P1!1 Y!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (REWRITE SUBTERM_IS_APP) (("6" (FLATTEN) (("6" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE SUBTERM_IS_APP) (("11" (FLATTEN) (("11" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (FLATTEN) (("12" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA EMPTY_0[POSNAT]) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKOSIMP) (("14" (EXPAND CHILD) (("14" (SKOSIMP) (("14" (LEMMA POS_SUBTERM_AX) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) (("14" (LEMMA SEQ_FIRST_REST[POSNAT]) (("14" (INST -1 P1!2) (("14" (LEMMA EMPTY_0[POSNAT]) (("14" (INST -1 P1!2) (("14" (ASSERT) (("14" (LEMMA NOT_VAR) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (EXPAND CHILD) (("15" (SKOSIMP) (("15" (LEMMA POS_SUBTERM_AX) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) (("15" (LEMMA SEQ_FIRST_REST[POSNAT]) (("15" (INST -1 P1!2) (("15" (LEMMA EMPTY_0[POSNAT]) (("15" (INST -1 P1!2) (("15" (ASSERT) (("15" (LEMMA NOT_VAR) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST?) (("18" (INST?) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE EMPTY_0) (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE SUBTERM_IS_APP) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (FLATTEN) (("21" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA EMPTY_0[POSNAT]) (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST?) (("23" (INST?) (("23" (INST?) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE EMPTY_0) (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE SUBTERM_IS_APP) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (FLATTEN) (("26" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA EMPTY_0[POSNAT]) (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE -1 2) (("28" (SKOSIMP) (("28" (EXPAND CHILD) (("28" (SKOSIMP) (("28" (LEMMA POS_SUBTERM_AX) (("28" (INST -1 P1!1 P1!2 T!1) (("28" (ASSERT) (("28" (LEMMA SEQ_FIRST_REST[POSNAT]) (("28" (INST -1 P1!2) (("28" (LEMMA EMPTY_0[POSNAT]) (("28" (INST -1 P1!2) (("28" (ASSERT) (("28" (LEMMA NOT_VAR) (("28" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("29" (HIDE -1 2) (("29" (SKOSIMP) (("29" (EXPAND CHILD) (("29" (SKOSIMP) (("29" (LEMMA POS_SUBTERM_AX) (("29" (INST -1 P1!1 P1!2 S!1) (("29" (ASSERT) (("29" (LEMMA SEQ_FIRST_REST[POSNAT]) (("29" (INST -1 P1!2) (("29" (LEMMA EMPTY_0[POSNAT]) (("29" (INST -1 P1!2) (("29" (ASSERT) (("29" (LEMMA NOT_VAR) (("29" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE EMPTY_0) NIL NIL)) NIL) ("32" (HIDE 2) (("32" (REWRITE SUBTERM_IS_APP) (("32" (FLATTEN) (("32" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (FLATTEN) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA EMPTY_0[POSNAT]) (("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_is_app| FORMULA-DECL NIL |subterm| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|not_var| FORMULA-DECL NIL |positions| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest_1| FORMULA-DECL NIL |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subterms_acc_arity| FORMULA-DECL NIL |positions| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|x!4| SKOLEM-CONST-DECL "below[add_last(px3, 1 + last(x!3))`length]" |robinsonunificationEF| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|x!4| SKOLEM-CONST-DECL "below[x!3`length]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "{p1: position | positionsOF(x!1)(p1) AND positionsOF(x!2)(p1)}" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|px3| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|lwc_add_last_delete| FORMULA-DECL NIL |positions| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_delete_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|nth_add_last| FORMULA-DECL NIL |seq_extras| |structures|) (|x!4| SKOLEM-CONST-DECL "below[add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)`length]" |robinsonunificationEF| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|x!4| SKOLEM-CONST-DECL "below[add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))`length]" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|nx3| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|next_pos_empty_equal_subterm-2| |nil| 3513029724 ("" (MEASURE-INDUCT+ "lex2(length(p),
                          arity(f(subtermOF(s,
                                         delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (EXPAND NEXT_POSITION -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (REPLACES -1) (("1" (INST -1 EMPTY_SEQ) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND CHILD) (("1" (INST 1 X!3) (("1" (ASSERT) (("1" (REWRITE EMPTY_O_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (NAME-REPLACE "nx3" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 X!1 X!2 NX3) (("1" (PROP) (("1" (CASE "q!1 = nx3") (("1" (ASSERT) NIL NIL) ("2" (CASE "child(q!1, nx3)") (("1" (HIDE-ALL-BUT (-1 -4 2)) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (REPLACE -1 2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "left_without_children(nx3, q!1)") (("1" (INST -2 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2 3)) (("2" (LEMMA LWC_ADD_LAST_DELETE) (("2" (INST -1 X!3 Q!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -7 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)") (("1" (REPLACES -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 P1!2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!2) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REWRITE O_ASSOC) (("1" (EXPAND* LAST FINSEQ_APPL) (("1" (ASSERT) (("1" (REPLACE -1 -3) (("1" (REWRITE O_ASSOC) (("1" (NAME-REPLACE "pi1" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi2" "(p1!1 o delete(p1!2, p1!2`length - 1))" :HIDE? NIL) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" PI2 "#(p1!2`seq(p1!2`length - 1))") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" "#(p1!2`seq(p1!2`length - 1))") (("2" (ASSERT) (("2" (EXPAND "#" -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (INST?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST -2 X!4) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* ADD_LAST INSERT? O "#") NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* ADD_LAST INSERT?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND* ADD_LAST INSERT?) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 P1!2) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (CASE "last(p1!2) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (HIDE 4) (("2" (EXPAND* ADD_LAST INSERT? O FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(delete(x!3, length(x!3) - 1))") (("2" (ASSERT) (("2" (EXPAND LAST 1 1) (("2" (EXPAND FINSEQ_APPL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6 -7 2) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 X!1 X!2 PX3) (("1" (PROP) (("1" (CASE "left_without_children(px3, q!1)") (("1" (INST -2 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -3 -4 -5 4) (("2" (CASE "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)") (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 -4 -5 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REPLACES -1) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -2 -1) (("1" (REPLACE -1 -4) (("1" (REPLACE -3 -4) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 R!2 "q1!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE -2 -3 -4 -5) (("1" (EXPAND* FIRST O FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (REWRITE O_ASSOC) (("2" (NAME-REPLACE "q!2" "px3 o  #(first(r!1))" :HIDE? NIL) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!2 "rest(r!1)" X!1) (("2" (ASSERT) (("2" (HIDE -3 -4 -6 -7 3) (("2" (CASE "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 PX3 "#(first(r!1))" X!1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 "px3" "#(1 + last(x!3))" "x!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (REVEAL -10) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (LEMMA SUBTERMS_ACC_ARITY) (("2" (INST -1 "first(r!1)" "1 + last(x!3)" "subtermOF(x!1, px3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2 3 5) (("2" (EXPAND O) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND* ADD_LAST INSERT? "#" FINSEQ_APPL) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA NTH_ADD_LAST[POSNAT]) (("1" (EXPAND FINSEQ_APPL) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 PX3 "1 + last(x!3)" X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 PX3 "1 + last(x!3)" X!4) (("1" (GROUND) (("1" (REPLACES -2) (("1" (REPLACE -1 2) (("1" (ASSERT) (("1" (EXPAND* LAST FINSEQ_APPL "#") NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!4) (("2" (HIDE -2 3 4) (("2" (EXPAND* ADD_LAST INSERT?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!4) (("2" (HIDE 3 4) (("2" (EXPAND* ADD_LAST INSERT?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND* ADD_LAST INSERT? LAST "#" FINSEQ_APPL) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (CASE "length(r!1) = length(px3)") (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (REPLACE -3 -1) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -1 -5) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) (("1" (INST 2 Q1!1) (("1" (ASSERT) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -6 1 2 5 7)) (("2" (REPLACES -1) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND* O LAST FIRST DELETE "#" FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!3`length - 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2 4 5) (("2" (EXPAND* "#" DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* "#" DELETE) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED X!4) (("3" (EXPAND* "#" DELETE) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_DELETE_IS_O) (("2" (EXPAND FINSEQ_APPL) (("2" (REPLACE -2 -1) (("2" (REPLACE -1 -4) (("2" (CASE "length(r!1) > length(px3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -5) (("1" (INST 3 "seq!1 o q1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (CASE "seq!1 = empty_seq") (("1" (REPLACE -1 -2) (("1" (REWRITE SEQ_O_EMPTY) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" R!1 P1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 SEQ!1) (("2" (ASSERT) (("2" (REWRITE FIRST_COMPO) (("2" (REPLACE -1 -6) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 PX3 "#(x!3`seq(x!3`length - 1))" "seq!1 o p1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 9)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!1 PX3 "#(x!3`seq(x!3`length - 1))") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 3)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 -5) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 "seq!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (INST 6 R!1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -7 1 6)) (("2" (CASE "first(seq!1) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (REPLACE -1 1 RL) (("2" (REWRITE FIRST_COMPO) (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 R!1) (("3" (ASSERT) (("3" (REPLACE -1 -2) (("3" (REWRITE SEQ_O_EMPTY) (("3" (HIDE -1 -3 1 3) (("3" (REPLACES -1) (("3" (EXPAND LEFT_WITHOUT_CHILDREN) (("3" (SKOSIMP) (("3" (LEMMA ADD_LAST_DELETE[POSNAT]) (("3" (INST -1 X!3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) (("3" (REWRITE ADD_LAST_DELETE_IS_O) (("3" (EXPAND FINSEQ_APPL) (("3" (REPLACE -2 -1) (("3" (REPLACE -1 -4) (("3" (REPLACE -3 -4) (("3" (LEMMA EQUAL_PREFIX[POSNAT]) (("3" (INST -1 R!2 "q1!1 o  #(x!3`seq(x!3`length - 1))" P1!1) (("3" (REWRITE O_ASSOC) (("3" (ASSERT) (("3" (REPLACE -1 -6 RL) (("3" (HIDE-ALL-BUT (-6 3)) (("3" (REWRITE FIRST_COMPO) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -5 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 4)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(p1!2, last(x!3))") (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 X!3) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (EXPAND* DELETE O ADD_LAST INSERT? FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (TYPEPRED X!4) (("3" (EXPAND* LAST FINSEQ_APPL) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5 4) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 PX3) (("3" (ASSERT) (("3" (INST -1 "add_last(px3, 1 + last(x!3))") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 -3 -4 2) (("5" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (TYPEPRED Q!1) (("1" (HIDE -2) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REPLACE -3 -1) (("1" (REPLACE -1 -6) (("1" (REPLACE -4) (("1" (REWRITE EMPTY_O_SEQ) (("1" (COPY -6) (("1" (EXPAND "#" -1) (("1" (EXPAND O -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!1) (("1" (ASSERT) (("1" (CASE "p1!1`length = 1 AND r!1`length = 0") (("1" (FLATTEN) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) (("1" (REPLACE -1 (-9 -10)) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REPLACE -9 -11 RL) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q!1) (("1" (ASSERT) (("1" (LEMMA POS_AX) (("1" (INST -1 "#(first(q!1))" "rest(q!1)" X!1) (("1" (ASSERT) (("1" (CASE "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "first(p1!1) = last(x!3)") (("1" (REPLACE -1 4 RL) (("1" (HIDE-ALL-BUT (-2 -14 4)) (("1" (LEMMA SUBTERMS_ACC_ARITY) (("1" (INST -1 "first(q!1)" "1 + first(p1!1)" "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-12 1)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* FIRST LAST "#" FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* ADD_LAST INSERT? "#") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED X!3) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP) (("3" (LEMMA APP_TERM) (("3" (INST -1 Y!3 P1!1 Y!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (REWRITE SUBTERM_IS_APP) (("6" (FLATTEN) (("6" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE SUBTERM_IS_APP) (("11" (FLATTEN) (("11" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (FLATTEN) (("12" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA EMPTY_0[POSNAT]) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKOSIMP) (("14" (EXPAND CHILD) (("14" (SKOSIMP) (("14" (LEMMA POS_SUBTERM_AX) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) (("14" (LEMMA SEQ_FIRST_REST[POSNAT]) (("14" (INST -1 P1!1) (("14" (LEMMA EMPTY_0[POSNAT]) (("14" (INST -1 P1!1) (("14" (ASSERT) (("14" (LEMMA NOT_VAR) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (EXPAND CHILD) (("15" (SKOSIMP) (("15" (LEMMA POS_SUBTERM_AX) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) (("15" (LEMMA SEQ_FIRST_REST[POSNAT]) (("15" (INST -1 P1!1) (("15" (LEMMA EMPTY_0[POSNAT]) (("15" (INST -1 P1!1) (("15" (ASSERT) (("15" (LEMMA NOT_VAR) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST?) (("18" (INST?) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE EMPTY_0) (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE SUBTERM_IS_APP) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (FLATTEN) (("21" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA EMPTY_0[POSNAT]) (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST?) (("23" (INST?) (("23" (INST?) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE EMPTY_0) (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE SUBTERM_IS_APP) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (FLATTEN) (("26" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA EMPTY_0[POSNAT]) (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE -1 2) (("28" (SKOSIMP) (("28" (EXPAND CHILD) (("28" (SKOSIMP) (("28" (LEMMA POS_SUBTERM_AX) (("28" (INST -1 P1!1 P1!2 T!1) (("28" (ASSERT) (("28" (LEMMA SEQ_FIRST_REST[POSNAT]) (("28" (INST -1 P1!2) (("28" (LEMMA EMPTY_0[POSNAT]) (("28" (INST -1 P1!2) (("28" (ASSERT) (("28" (LEMMA NOT_VAR) (("28" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("29" (HIDE -1 2) (("29" (SKOSIMP) (("29" (EXPAND CHILD) (("29" (SKOSIMP) (("29" (LEMMA POS_SUBTERM_AX) (("29" (INST -1 P1!1 P1!2 S!1) (("29" (ASSERT) (("29" (LEMMA SEQ_FIRST_REST[POSNAT]) (("29" (INST -1 P1!2) (("29" (LEMMA EMPTY_0[POSNAT]) (("29" (INST -1 P1!2) (("29" (ASSERT) (("29" (LEMMA NOT_VAR) (("29" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE EMPTY_0) NIL NIL)) NIL) ("32" (HIDE 2) (("32" (REWRITE SUBTERM_IS_APP) (("32" (FLATTEN) (("32" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (FLATTEN) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA EMPTY_0[POSNAT]) (("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|next_pos_empty_equal_subterm-1| |nil| 3511874617 ("" (MEASURE-INDUCT+ "lex2(length(p),
                      arity(f(subtermOF(s,
                                     delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (EXPAND NEXT_POSITION -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (REPLACES -1) (("1" (INST -1 EMPTY_SEQ) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND CHILD) (("1" (INST 1 X!3) (("1" (ASSERT) (("1" (REWRITE EMPTY_O_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (NAME-REPLACE "nx3" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 X!1 X!2 NX3) (("1" (PROP) (("1" (CASE "q!1 = nx3") (("1" (ASSERT) NIL NIL) ("2" (CASE "child(q!1, nx3)") (("1" (HIDE-ALL-BUT (-1 -4 2)) (("1" (EXPAND CHILD) (("1" (SKOSIMP) (("1" (REPLACE -1 2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "left_without_children(nx3, q!1)") (("1" (INST -2 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2 3)) (("2" (LEMMA LWC_ADD_LAST_DELETE) (("2" (INST -1 X!3 Q!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -7 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))") (("1" (REPLACES -1) (("1" (CASE "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)") (("1" (REPLACES -1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 P1!2) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!2) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_DELETE_IS_O) (("1" (EXPAND FINSEQ_APPL) (("1" (REWRITE O_ASSOC) (("1" (EXPAND* LAST FINSEQ_APPL) (("1" (ASSERT) (("1" (REPLACE -1 -3) (("1" (REWRITE O_ASSOC) (("1" (NAME-REPLACE "pi1" "delete(x!3, x!3`length - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi2" "(p1!1 o delete(p1!2, p1!2`length - 1))" :HIDE? NIL) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" PI2 "#(p1!2`seq(p1!2`length - 1))") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 PI1 "#(1 + x!3`seq(x!3`length - 1))" "#(p1!2`seq(p1!2`length - 1))") (("2" (ASSERT) (("2" (EXPAND "#" -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (EXPAND O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (INST?) (("1" (EXPAND FINSEQ_APPL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST -2 X!4) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 3)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA NTH_ADD_LAST[POSNAT]) (("2" (EXPAND FINSEQ_APPL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED X!4) (("1" (INST?) (("1" (INST?) (("1" (PROP) (("1" (REPLACES -2) (("1" (EXPAND O) (("1" (ASSERT) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (EXPAND "#") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND O) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 P1!2) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (CASE "last(p1!2) = 1 + last(x!3)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (HIDE 4) (("2" (EXPAND* ADD_LAST INSERT? O FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -1 "length(delete(x!3, length(x!3) - 1))") (("2" (ASSERT) (("2" (EXPAND LAST 1 1) (("2" (EXPAND FINSEQ_APPL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 P1!2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6 -7 2) (("3" (LEMMA NEXT_POSITION_TCC17) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (LEMMA NEXT_POSITION_TCC15) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 NX3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2)) (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "px3" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (INST -4 X!1 X!2 PX3) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 -6 2)) (("1" (TYPEPRED X!3 Q!1) (("1" (HIDE -2 -5) (("1" (FLATTEN) (("1" (LEMMA LWC_MORE_LEFT_NOT_POS) (("1" (INST -1 X!3 Q!1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -5 P1!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 4)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (INST 2 "add_last(p1!2, last(x!3))") (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 X!3) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (EXPAND* DELETE O ADD_LAST INSERT? FINSEQ_APPL) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -2) (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 X!4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -1) (("3" (TYPEPRED X!4) (("3" (EXPAND* LAST FINSEQ_APPL) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE -1) (("2" (EXPAND* ADD_LAST INSERT? FINSEQ_APPL) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -4 -5 4) (("3" (LEMMA NEXT_POSITION_TCC19) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (INST -1 PX3) (("3" (ASSERT) (("3" (INST -1 "add_last(px3, 1 + last(x!3))") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-5 1)) (("5" (TYPEPRED X!3 Q!1) (("5" (HIDE -2 -5) (("5" (FLATTEN) (("5" (LEMMA LWC_MORE_LEFT_NOT_POS) (("5" (INST -1 X!3 Q!1 X!1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 "p1!1" "p1!2" "y!1") (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (REWRITE SUBTERM_IS_APP) (("6" (FLATTEN) (("6" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE SUBTERM_IS_APP) (("11" (FLATTEN) (("11" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (FLATTEN) (("12" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA EMPTY_0[POSNAT]) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKOSIMP) (("14" (EXPAND CHILD) (("14" (SKOSIMP) (("14" (LEMMA POS_SUBTERM_AX) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) (("14" (LEMMA SEQ_FIRST_REST[POSNAT]) (("14" (INST -1 P1!1) (("14" (LEMMA EMPTY_0[POSNAT]) (("14" (INST -1 P1!1) (("14" (ASSERT) (("14" (LEMMA NOT_VAR) (("14" (INST?) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (EXPAND CHILD) (("15" (SKOSIMP) (("15" (LEMMA POS_SUBTERM_AX) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) (("15" (LEMMA SEQ_FIRST_REST[POSNAT]) (("15" (INST -1 P1!1) (("15" (LEMMA EMPTY_0[POSNAT]) (("15" (INST -1 P1!1) (("15" (ASSERT) (("15" (LEMMA NOT_VAR) (("15" (INST?) (("15" (INST?) (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (INST?) (("16" (INST?) (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (INST?) (("17" (INST?) (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST?) (("18" (INST?) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE EMPTY_0) (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (REWRITE SUBTERM_IS_APP) (("20" (FLATTEN) (("20" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (FLATTEN) (("21" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA EMPTY_0[POSNAT]) (("22" (INST?) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST?) (("23" (INST?) (("23" (INST?) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE EMPTY_0) (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (REWRITE SUBTERM_IS_APP) (("25" (FLATTEN) (("25" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (FLATTEN) (("26" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA EMPTY_0[POSNAT]) (("27" (INST?) (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE -1 2) (("28" (SKOSIMP) (("28" (EXPAND CHILD) (("28" (SKOSIMP) (("28" (LEMMA POS_SUBTERM_AX) (("28" (INST -1 P1!1 P1!2 T!1) (("28" (ASSERT) (("28" (LEMMA SEQ_FIRST_REST[POSNAT]) (("28" (INST -1 P1!2) (("28" (LEMMA EMPTY_0[POSNAT]) (("28" (INST -1 P1!2) (("28" (ASSERT) (("28" (LEMMA NOT_VAR) (("28" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("29" (HIDE -1 2) (("29" (SKOSIMP) (("29" (EXPAND CHILD) (("29" (SKOSIMP) (("29" (LEMMA POS_SUBTERM_AX) (("29" (INST -1 P1!1 P1!2 S!1) (("29" (ASSERT) (("29" (LEMMA SEQ_FIRST_REST[POSNAT]) (("29" (INST -1 P1!2) (("29" (LEMMA EMPTY_0[POSNAT]) (("29" (INST -1 P1!2) (("29" (ASSERT) (("29" (LEMMA NOT_VAR) (("29" (INST -1 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE EMPTY_0) NIL NIL)) NIL) ("32" (HIDE 2) (("32" (REWRITE SUBTERM_IS_APP) (("32" (FLATTEN) (("32" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (FLATTEN) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA EMPTY_0[POSNAT]) (("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|next_pos_equal_subterm_TCC1| 0 (|next_pos_equal_subterm_TCC1-2| "" 3884928358 ("" (SKOSIMP*) (("" (EXPAND "child") (("" (SKOSIMP) (("" (LEMMA "pos_subterm_ax") (("" (INST -1 "p1!1" "p1!2" "s!1") (("" (ASSERT) (("" (LEMMA "not_var") (("" (LEMMA "seq_first_rest[posnat]") (("" (INST -1 "p1!2") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p1!2") (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|next_pos_equal_subterm_TCC1-1| |nil| 3511984083 ("" (SKOSIMP*) (("" (EXPAND CHILD) (("" (SKOSIMP) (("" (LEMMA POS_SUBTERM_AX) (("" (INST -1 P1!1 P1!2 S!1) (("" (ASSERT) (("" (LEMMA NOT_VAR) (("" (LEMMA SEQ_FIRST_REST[POSNAT]) (("" (INST -1 P1!2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P1!2) (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|child| CONST-DECL "bool" |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_pos_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_pos_equal_subterm_TCC2| 0 (|next_pos_equal_subterm_TCC2-2| "" 3884928405 ("" (SKOSIMP*) (("" (EXPAND "child") (("" (SKOSIMP) (("" (LEMMA "pos_subterm_ax") (("" (INST -1 "p1!1" "p1!2" "t!1") (("" (ASSERT) (("" (LEMMA "not_var") (("" (LEMMA "seq_first_rest[posnat]") (("" (INST -1 "p1!2") (("" (LEMMA "empty_0[posnat]") (("" (INST -1 "p1!2") (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|next_pos_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|next_pos_equal_subterm_TCC2-1| |nil| 3511984083 ("" (SKOSIMP*) (("" (EXPAND CHILD) (("" (SKOSIMP) (("" (LEMMA POS_SUBTERM_AX) (("" (INST -1 P1!1 P1!2 T!1) (("" (ASSERT) (("" (LEMMA NOT_VAR) (("" (LEMMA SEQ_FIRST_REST[POSNAT]) (("" (INST -1 P1!2) (("" (LEMMA EMPTY_0[POSNAT]) (("" (INST -1 P1!2) (("" (ASSERT) (("" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|child| CONST-DECL "bool" |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|next_pos_equal_subterm| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|next_pos_equal_subterm| 0 (|next_pos_equal_subterm-3| "" 3884930750 ("" (MEASURE-INDUCT+ "lex2(length(p),
                                arity(f(subtermOF(s,
                                               delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (TYPEPRED "x!3") (("1" (HIDE -1 -2) (("1" (FLATTEN) (("1" (SKOSIMP) (("1" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (EXPAND "next_position" -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1 2 3)) (("1" (INST -2 "np") (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "child") (("1" (INST 2 "#(last(x!3))") (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_is_o") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -3) (("1" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (REPLACE -1 1 RL) (("2" (REWRITE "delete_is_position") (("1" (REWRITE "delete_is_position") (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -3 -4 -5 1) (("2" (CASE "left_without_children(q!1, x!3)") (("1" (INST -4 "q!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!1") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 4) (("2" (LEMMA "pos_subterm") (("2" (INST-CP -1 "x!3" "p1!1" "x!2") (("2" (INST -1 "x!3" "p1!1" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 2 3)) (("2" (LEMMA "lwc_add_last_delete1") (("2" (INST -1 "q!1" "x!3") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* "child" "<=") (("1" (SKOSIMP) (("1" (INST 2 "p1!1") NIL NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (INST 1 "empty_seq") (("2" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 "x!1" "x!2" "pi") (("1" (LEMMA "next_position_tcc17") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "pi") (("1" (ASSERT) (("1" (CASE "pi = empty_seq") (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (EXPAND* "add_last" "insert?" "empty_seq") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACE -3) (("2" (PROP) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -5 -7 -8 -9 4 5) (("2" (SKOSIMP) (("2" (INST -4 "p1!1") (("2" (ASSERT) (("2" (HIDE 1) (("2" (LEMMA "add_last_delete[posnat]") (("2" (INST -1 "x!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (REWRITE "add_last_is_o") (("2" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)") (("2" (REWRITE "add_last_is_o") (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (CASE "length(p1!1) = length(dp)") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "dp" "#(1 + last(x!3))" "p1!1" "p1!2") (("1" (ASSERT) (("1" (INST 5 "#(last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (FLATTEN) (("1" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(dp)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "p1!1" "p1!2" "dp" "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -3) (("1" (INST 6 "seq!1 o  #(last(x!3))") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* "o" "#" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 5 7) (("2" (REPLACES -1) (("2" (EXPAND* "#" "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -5 -6 -9 4 5) (("3" (SKOSIMP) (("3" (CASE "left_without_children(q!2, x!3)") (("1" (INST -5 "q!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!2") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 3) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "pos_subterm") (("2" (HIDE-ALL-BUT (-6 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1 2 5)) (("2" (LEMMA "lwc_add_last_delete1") (("2" (INST -1 "q!2" "x!3") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* "child" "<=") (("1" (SKOSIMP) (("1" (INST 2 "p1!1") NIL NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (INST 1 "empty_seq") (("2" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -6 -7 -8 -9 4) (("2" (LEMMA "next_position_tcc15") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 "pi") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (EXPAND* "add_last" "insert?" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi" "add_last(dp, 1 + last(x!3))" :HIDE? NIL) (("1" (INST -5 "x!1" "x!2" "dp") (("1" (LEMMA "next_position_tcc19") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (INST -1 "dp") (("1" (ASSERT) (("1" (INST -1 "pi") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -3 -6 1 2 4)) (("2" (INST -3 "p1!1") (("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "add_last_delete[posnat]") (("2" (INST -1 "x!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (REWRITE "add_last_is_o") (("2" (REPLACE -3) (("2" (REPLACE -2 -1) (("2" (INST 5 "p1!2 o  #(last(x!3))") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 5) (("2" (FLATTEN) (("2" (EXPAND* "#" "o" "empty_seq") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -6 1 2 4)) (("3" (SKOSIMP) (("3" (INST -3 "q!2") (("3" (ASSERT) (("3" (HIDE 1) (("3" (EXPAND "left_without_children") (("3" (SKOSIMP) (("3" (LEMMA "add_last_delete[posnat]") (("3" (INST -1 "x!3") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "x!3") (("3" (ASSERT) (("3" (REPLACE -5) (("3" (REWRITE "add_last_is_o") (("3" (REPLACE -2 -1) (("3" (INST 6 "r!1" "p1!1" "q1!1 o  #(last(x!3))") (("3" (REWRITE "o_assoc") (("3" (REWRITE "first_compo") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* "#" "o" "empty_seq") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "equal_term") (("4" (INST -1 "subtermOF(x!1, dp)" "subtermOF(x!2, dp)" "#(last(x!3))") (("1" (GROUND) (("1" (SKOSIMP) (("1" (TYPEPRED "q!2") (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 3 4 5)) (("1" (EXPAND "left_without_children") (("1" (SKOSIMP) (("1" (REWRITE "add_last_is_o") (("1" (REPLACE -5 4 RL) (("1" (REWRITE "pos_o_term") (("1" (HIDE-ALL-BUT (-6 1 3)) (("1" (REPLACE -1 1 RL) (("1" (REWRITE "delete_is_position") (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE "empty_o_seq") (("1" (REWRITE "empty_o_seq") (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "q1!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "q1!1") (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE "first_compo") (("1" (REPLACES -3) (("1" (EXPAND "first" -4 2) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "#" -4) (("1" (LEMMA "pos_ax") (("1" (INST -1 "#(first(q1!1))" "rest(q1!1)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (LEMMA "subterms_acc_arity") (("1" (INST -1 "first(q1!1)" "1 + last(x!3)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* "first" "finseq_appl") (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (EXPAND* "#" "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST-CP -1 "r!1") (("2" (INST -1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (CASE "left_without_children(dp o q!2, x!3)") (("1" (INST -8 "dp o q!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -8 1)) (("1" (TYPEPRED "q!2") (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (HIDE -4 2) (("1" (REWRITE "pos_o_term") (("1" (REPLACE -3 1 RL) (("1" (REWRITE "delete_is_position") (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (REWRITE "pos_o_term") (("2" (REPLACE -3 1 RL) (("2" (REWRITE "delete_is_position") (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED "q!2") (("2" (REWRITE "pos_o_term") (("1" (REWRITE "pos_o_term") (("1" (REPLACE -3 1 RL) (("1" (REWRITE "delete_is_position") (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (REWRITE "delete_is_position") (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE "empty_o_seq") (("1" (REWRITE "empty_o_seq") (("1" (INST 1 "dp" "p1!1" "q1!1") (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REWRITE "add_last_is_o") (("1" (REPLACE -5) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST-CP -1 "r!1") (("2" (INST -1 "q1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA "pos_subterm") (("3" (INST-CP -1 "dp" "p1!1" "x!1") (("3" (INST -1 "dp" "p1!1" "x!2") (("3" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE -1 -2 -4 -6 -7 -9 -10 -11 2 4 6 7) (("1" (CASE "child(x!3, dp o p1!1)") (("1" (INST -4 "dp o p1!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (TYPEPRED "p1!1") (("2" (REWRITE "pos_o_term") (("1" (REWRITE "pos_o_term") (("1" (HIDE -1 -2 2) (("1" (REPLACE -1 1 RL) (("1" (REWRITE "delete_is_position") (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (REPLACE -1 1 RL) (("2" (REWRITE "delete_is_position") (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE "empty_o_seq") (("1" (REWRITE "seq_o_empty") (("1" (INST 1 "p1!2") (("1" (ASSERT) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!3") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REWRITE "add_last_is_o") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" "o") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST-CP -1 "p1!1") (("2" (INST -1 "p1!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED "p1!1") (("2" (HIDE -2) (("2" (REWRITE "pos_o_term") (("2" (REPLACE -2 1 RL) (("2" (REWRITE "delete_is_position") (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED "p1!1") (("2" (HIDE -1) (("2" (REWRITE "pos_o_term") (("2" (REPLACE -2 1 RL) (("2" (REWRITE "delete_is_position") (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-2 -7 1 5)) (("4" (LEMMA "add_last_delete[posnat]") (("4" (INST -1 "x!3") (("4" (LEMMA "empty_0[posnat]") (("4" (INST -1 "x!3") (("4" (ASSERT) (("4" (REPLACE -2) (("4" (REWRITE "add_last_is_o") (("4" (LEMMA "pos_subterm") (("4" (INST-CP -1 "dp" "#(last(x!3))" "x!2") (("4" (INST -1 "dp" "#(last(x!3))" "x!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -1) (("5" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 5)) (("2" (LEMMA "add_last_delete[posnat]") (("2" (INST -1 "x!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE "add_last_is_o") (("2" (REWRITE "pos_subterm_ax") (("2" (REWRITE "pos_subterm_ax") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 2 4)) (("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE "delete_is_position") (("1" (REWRITE "delete_is_position") (("1" (HIDE-ALL-BUT (1 4)) (("1" (FLATTEN) (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3)) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP) (("2" (LEMMA "app_term") (("2" (INST -1 "y!3" "p1!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (SKOSIMP) (("3" (LEMMA "app_term") (("3" (INST -1 "y!3" "p1!1" "y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "next_position_tcc5") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE "empty_0") NIL NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "next_position_tcc3") (("6" (INST -1 "x!1" "x!2" "x!3") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "delete_is_position") (("7" (HIDE 2) (("7" (FLATTEN) (("7" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "x!3") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA "next_position_tcc5") (("9" (INST -1 "y!1" "y!2" "y!3") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE "empty_0") NIL NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA "app_term") (("11" (INST -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (REWRITE "delete_is_position") (("1" (NAME-REPLACE "dp" "delete(y!3, length(y!3) - 1)" :HIDE? NIL) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "y!3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "y!3") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE "add_last_is_o") (("1" (EXPAND "child") (("1" (INST 2 "#(last(y!3))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "y!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "y!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE "delete_is_position") (("12" (FLATTEN) (("12" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA "empty_0[posnat]") (("13" (INST -1 "y!3") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE -1 2) (("14" (SKOSIMP) (("14" (LEMMA "app_term") (("14" (INST -1 "x!1`3" "p1!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE -1 2) (("15" (SKOSIMP) (("15" (LEMMA "app_term") (("15" (INST -1 "x!1`3" "p1!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE -1 2) (("16" (SKOSIMP) (("16" (LEMMA "app_term") (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE -1 2) (("17" (SKOSIMP) (("17" (LEMMA "app_term") (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA "next_position_tcc5") (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE "empty_0") (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (NAME-REPLACE "dp" "delete(x!1`3, length(x!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA "add_last_delete[posnat]") (("1" (INST -1 "x!1`3") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "x!1`3") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE "add_last_is_o") (("1" (LEMMA "app_term") (("1" (INST -1 "x!1`3" "dp" "x!1`1") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE "delete_is_position") NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "child") (("2" (INST 1 "#(last(x!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "x!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE "delete_is_position") (("21" (FLATTEN) (("21" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA "empty_0[posnat]") (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA "next_position_tcc5") (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE "empty_0") (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA "empty_0[posnat]") (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (NAME-REPLACE "dp" "delete(y!1`3, length(y!1`3) - 1)" :HIDE? NIL) (("25" (LEMMA "add_last_delete[posnat]") (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (REPLACE -2) (("25" (REWRITE "add_last_is_o") (("25" (LEMMA "app_term") (("25" (INST -1 "y!1`3" "dp" "y!1`1") (("25" (ASSERT) (("25" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE "delete_is_position") NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "child") (("2" (INST 1 "#(last(y!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE "delete_is_position") (("26" (FLATTEN) (("26" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA "empty_0[posnat]") (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE 2) (("28" (LEMMA "app_term") (("28" (INST -1 "p!1" "p1!1" "t!1") (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("29" (HIDE 2) (("29" (LEMMA "app_term") (("29" (INST -1 "p!1" "p1!1" "s!1") (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA "next_position_tcc5") (("30" (INST -1 "s!1" "t!1" "p!1") (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE "empty_0") NIL NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA "empty_0[posnat]") (("32" (INST -1 "p!1") (("32" (ASSERT) (("32" (NAME-REPLACE "dp" "delete(p!1, length(p!1) - 1)" :HIDE? NIL) (("32" (LEMMA "add_last_delete[posnat]") (("32" (INST -1 "p!1") (("32" (ASSERT) (("32" (REPLACE -2) (("32" (REWRITE "add_last_is_o") (("32" (LEMMA "app_term") (("32" (INST -1 "p!1" "dp" "s!1") (("32" (ASSERT) (("32" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE "delete_is_position") NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "child") (("2" (INST 1 "#(last(p!1))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE "delete_is_position") (("33" (FLATTEN) (("33" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA "empty_0[posnat]") (("34" (INST -1 "p!1") (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|next_pos_equal_subterm-2| "" 3804372563 ("" (MEASURE-INDUCT+ "lex2(length(p),
                                arity(f(subtermOF(s,
                                               delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (TYPEPRED X!3) (("1" (HIDE -1 -2) (("1" (FLATTEN) (("1" (SKOSIMP) (("1" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1 2 3)) (("1" (INST -2 NP) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND CHILD) (("1" (INST 2 "#(last(x!3))") (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -3) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -3 -4 -5 1) (("2" (CASE "left_without_children(q!1, x!3)") (("1" (INST -4 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!1") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 4) (("2" (LEMMA POS_SUBTERM) (("2" (INST-CP -1 X!3 P1!1 X!2) (("2" (INST -1 X!3 P1!1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 2 3)) (("2" (LEMMA LWC_ADD_LAST_DELETE1) (("2" (INST -1 Q!1 X!3) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* CHILD <=) (("1" (SKOSIMP) (("1" (INST 2 P1!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (INST 1 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 X!1 X!2 PI) (("1" (LEMMA NEXT_POSITION_TCC17) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (CASE "pi = empty_seq") (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (EXPAND* ADD_LAST INSERT? EMPTY_SEQ) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACE -3) (("2" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -5 -7 -8 -9 4 5) (("2" (SKOSIMP) (("2" (INST -4 P1!1) (("2" (ASSERT) (("2" (HIDE 1) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_IS_O) (("2" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)") (("2" (REWRITE ADD_LAST_IS_O) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) = length(dp)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 DP "#(1 + last(x!3))" P1!1 P1!2) (("1" (ASSERT) (("1" (INST 5 "#(last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (FLATTEN) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(dp)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 DP "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -3) (("1" (INST 6 "seq!1 o  #(last(x!3))") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* O "#" EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 5 7) (("2" (REPLACES -1) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -5 -6 -9 4 5) (("3" (SKOSIMP) (("3" (CASE "left_without_children(q!2, x!3)") (("1" (INST -5 Q!2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!2") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 3) (("2" (REWRITE POS_SUBTERM) (("2" (REWRITE POS_SUBTERM) (("2" (HIDE-ALL-BUT (-6 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1 2 5)) (("2" (LEMMA LWC_ADD_LAST_DELETE1) (("2" (INST -1 Q!2 X!3) (("2" (ASSERT) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* CHILD <=) (("1" (SKOSIMP) (("1" (INST 2 P1!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (INST 1 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -6 -7 -8 -9 4) (("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (EXPAND* ADD_LAST INSERT? EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi" "add_last(dp, 1 + last(x!3))" :HIDE? NIL) (("1" (INST -5 X!1 X!2 DP) (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 DP) (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -3 -6 1 2 4)) (("2" (INST -3 P1!1) (("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_IS_O) (("2" (REPLACE -3) (("2" (REPLACE -2 -1) (("2" (INST 5 "p1!2 o  #(last(x!3))") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 5) (("2" (FLATTEN) (("2" (EXPAND* "#" O EMPTY_SEQ) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -6 1 2 4)) (("3" (SKOSIMP) (("3" (INST -3 Q!2) (("3" (ASSERT) (("3" (HIDE 1) (("3" (EXPAND "left_without_children") (("3" (SKOSIMP) (("3" (LEMMA ADD_LAST_DELETE[POSNAT]) (("3" (INST -1 X!3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) (("3" (REPLACE -5) (("3" (REWRITE ADD_LAST_IS_O) (("3" (REPLACE -2 -1) (("3" (INST 6 R!1 P1!1 "q1!1 o  #(last(x!3))") (("3" (REWRITE O_ASSOC) (("3" (REWRITE FIRST_COMPO) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA EQUAL_TERM) (("4" (INST -1 "subtermOF(x!1, dp)" "subtermOF(x!2, dp)" "#(last(x!3))") (("1" (GROUND) (("1" (SKOSIMP) (("1" (TYPEPRED Q!2) (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 3 4 5)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -5 4 RL) (("1" (REWRITE POS_O_TERM) (("1" (HIDE-ALL-BUT (-6 1 3)) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE FIRST_COMPO) (("1" (REPLACES -3) (("1" (EXPAND FIRST -4 2) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND "#" -4) (("1" (LEMMA POS_AX) (("1" (INST -1 "#(first(q1!1))" "rest(q1!1)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (LEMMA SUBTERMS_ACC_ARITY) (("1" (INST -1 "first(q1!1)" "1 + last(x!3)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* FIRST FINSEQ_APPL) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 R!1) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (CASE "left_without_children(dp o q!2, x!3)") (("1" (INST -8 "dp o q!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -8 1)) (("1" (TYPEPRED Q!2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (HIDE -4 2) (("1" (REWRITE POS_O_TERM) (("1" (REPLACE -3 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -3 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED Q!2) (("2" (REWRITE POS_O_TERM) (("1" (REWRITE POS_O_TERM) (("1" (REPLACE -3 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (INST 1 DP P1!1 Q1!1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -5) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 R!1) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM) (("3" (INST-CP -1 DP P1!1 X!1) (("3" (INST -1 DP P1!1 X!2) (("3" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE -1 -2 -4 -6 -7 -9 -10 -11 2 4 6 7) (("1" (CASE "child(x!3, dp o p1!1)") (("1" (INST -4 "dp o p1!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (TYPEPRED P1!1) (("2" (REWRITE POS_O_TERM) (("1" (REWRITE POS_O_TERM) (("1" (HIDE -1 -2 2) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (INST 1 P1!2) (("1" (ASSERT) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REWRITE ADD_LAST_IS_O) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 P1!1) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED P1!1) (("2" (HIDE -2) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -2 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED P1!1) (("2" (HIDE -1) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -2 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-2 -7 1 5)) (("4" (LEMMA ADD_LAST_DELETE[POSNAT]) (("4" (INST -1 X!3) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!3) (("4" (ASSERT) (("4" (REPLACE -2) (("4" (REWRITE ADD_LAST_IS_O) (("4" (LEMMA POS_SUBTERM) (("4" (INST-CP -1 DP "#(last(x!3))" X!2) (("4" (INST -1 DP "#(last(x!3))" X!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -1) (("5" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 5)) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE ADD_LAST_IS_O) (("2" (REWRITE POS_SUBTERM_AX) (("2" (REWRITE POS_SUBTERM_AX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 2 4)) (("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE-ALL-BUT (1 4)) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3)) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP) (("2" (LEMMA APP_TERM) (("2" (INST -1 Y!3 P1!1 Y!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (SKOSIMP) (("3" (LEMMA APP_TERM) (("3" (INST -1 Y!3 P1!1 Y!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA NEXT_POSITION_TCC3) (("6" (INST -1 X!1 X!2 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (HIDE 2) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA APP_TERM) (("11" (INST -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (REWRITE DELETE_IS_POSITION) (("1" (NAME-REPLACE "dp" "delete(y!3, length(y!3) - 1)" :HIDE? NIL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 Y!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Y!3) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE ADD_LAST_IS_O) (("1" (EXPAND CHILD) (("1" (INST 2 "#(last(y!3))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (FLATTEN) (("12" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA EMPTY_0[POSNAT]) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE -1 2) (("14" (SKOSIMP) (("14" (LEMMA APP_TERM) (("14" (INST -1 "x!1`3" "p1!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE -1 2) (("15" (SKOSIMP) (("15" (LEMMA APP_TERM) (("15" (INST -1 "x!1`3" "p1!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE -1 2) (("16" (SKOSIMP) (("16" (LEMMA APP_TERM) (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE -1 2) (("17" (SKOSIMP) (("17" (LEMMA APP_TERM) (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE EMPTY_0) (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (NAME-REPLACE "dp" "delete(x!1`3, length(x!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 "x!1`3") (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 "x!1`3") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE ADD_LAST_IS_O) (("1" (LEMMA APP_TERM) (("1" (INST -1 "x!1`3" "dp" "x!1`1") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(x!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 "x!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (FLATTEN) (("21" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA EMPTY_0[POSNAT]) (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE EMPTY_0) (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA EMPTY_0[POSNAT]) (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (NAME-REPLACE "dp" "delete(y!1`3, length(y!1`3) - 1)" :HIDE? NIL) (("25" (LEMMA ADD_LAST_DELETE[POSNAT]) (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (REPLACE -2) (("25" (REWRITE ADD_LAST_IS_O) (("25" (LEMMA APP_TERM) (("25" (INST -1 "y!1`3" "dp" "y!1`1") (("25" (ASSERT) (("25" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(y!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (FLATTEN) (("26" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA EMPTY_0[POSNAT]) (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE 2) (("28" (LEMMA APP_TERM) (("28" (INST -1 P!1 P1!1 T!1) (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("29" (HIDE 2) (("29" (LEMMA APP_TERM) (("29" (INST -1 P!1 P1!1 S!1) (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE EMPTY_0) NIL NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA EMPTY_0[POSNAT]) (("32" (INST -1 P!1) (("32" (ASSERT) (("32" (NAME-REPLACE "dp" "delete(p!1, length(p!1) - 1)" :HIDE? NIL) (("32" (LEMMA ADD_LAST_DELETE[POSNAT]) (("32" (INST -1 P!1) (("32" (ASSERT) (("32" (REPLACE -2) (("32" (REWRITE ADD_LAST_IS_O) (("32" (LEMMA APP_TERM) (("32" (INST -1 P!1 DP S!1) (("32" (ASSERT) (("32" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(p!1))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (FLATTEN) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA EMPTY_0[POSNAT]) (("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|y!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(y!1)(p) AND positionsOF(y!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|y!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_TCC3| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC5| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|dp| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|p1!1| SKOLEM-CONST-DECL "{p: position[variable, symbol, arity] |
   positionsOF(subtermOF(x!1, dp))(p) AND
    positionsOF(subtermOF(x!2, dp))(p)}" |robinsonunificationEF| NIL) (|q!2| SKOLEM-CONST-DECL "{p: position[variable, symbol, arity] |
   positionsOF(subtermOF(x!1, dp))(p) AND
    positionsOF(subtermOF(x!2, dp))(p)}" |robinsonunificationEF| NIL) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest_1| FORMULA-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|subterms_acc_arity| FORMULA-DECL NIL |positions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|equal_term| FORMULA-DECL NIL |subterm| NIL) (|next_position_TCC19| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|add_last| CONST-DECL "finseq" |seq_extras| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|next_position_TCC15| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_TCC17| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pi| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|lwc_add_last_delete1| FORMULA-DECL NIL |positions| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (<= CONST-DECL "bool" |positions| NIL) (|delete_is_position| FORMULA-DECL NIL |positions| NIL) (|add_last_delete| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|add_last_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|np| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|delete| CONST-DECL "finseq" |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|child| CONST-DECL "bool" |positions| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|next_pos_equal_subterm-1| |nil| 3514113068 ("" (MEASURE-INDUCT+ "lex2(length(p),
                                arity(f(subtermOF(s,
                                               delete(p,length(p) - 1)))) - last(p))" ("s" "t" "p")) (("1" (TYPEPRED X!3) (("1" (HIDE -1 -2) (("1" (FLATTEN) (("1" (SKOSIMP) (("1" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("1" (EXPAND NEXT_POSITION -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1 2 3)) (("1" (INST -2 NP) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND CHILD) (("1" (INST 2 "#(last(x!3))") (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -3) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -3 -4 -5 1) (("2" (CASE "left_without_children(q!1, x!3)") (("1" (INST -4 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!1") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 4) (("2" (LEMMA POS_SUBTERM) (("2" (INST-CP -1 X!3 P1!1 X!2) (("2" (INST -1 X!3 P1!1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 2 3)) (("2" (LEMMA LWC_ADD_LAST_DELETE1) (("2" (INST -1 Q!1 X!3) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* CHILD <=) (("1" (SKOSIMP) (("1" (INST 2 P1!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (INST 1 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (NAME-REPLACE "pi" "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :HIDE? NIL) (("1" (INST -6 X!1 X!2 PI) (("1" (LEMMA NEXT_POSITION_TCC17) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (CASE "pi = empty_seq") (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (REPLACES -1) (("1" (EXPAND* ADD_LAST INSERT? EMPTY_SEQ) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACE -3) (("2" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -5 -7 -8 -9 4 5) (("2" (SKOSIMP) (("2" (INST -4 P1!1) (("2" (ASSERT) (("2" (HIDE 1) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_IS_O) (("2" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)") (("2" (REWRITE ADD_LAST_IS_O) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) = length(dp)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 DP "#(1 + last(x!3))" P1!1 P1!2) (("1" (ASSERT) (("1" (INST 5 "#(last(x!3))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 5) (("1" (FLATTEN) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(dp)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 DP "#(1 + last(x!3))") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -3) (("1" (INST 6 "seq!1 o  #(last(x!3))") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* O "#" EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 5 7) (("2" (REPLACES -1) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -5 -6 -9 4 5) (("3" (SKOSIMP) (("3" (CASE "left_without_children(q!2, x!3)") (("1" (INST -5 Q!2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!3 <= q!2") (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 3) (("2" (REWRITE POS_SUBTERM) (("2" (REWRITE POS_SUBTERM) (("2" (HIDE-ALL-BUT (-6 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1 2 5)) (("2" (LEMMA LWC_ADD_LAST_DELETE1) (("2" (INST -1 Q!2 X!3) (("2" (ASSERT) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND* CHILD <=) (("1" (SKOSIMP) (("1" (INST 2 P1!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND <=) (("2" (INST 1 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -6 -7 -8 -9 4) (("2" (LEMMA NEXT_POSITION_TCC15) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "delete(x!3, length(x!3) - 1)") (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (EXPAND* ADD_LAST INSERT? EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "dp" "delete(x!3, length(x!3) - 1)" :HIDE? NIL) (("1" (NAME-REPLACE "pi" "add_last(dp, 1 + last(x!3))" :HIDE? NIL) (("1" (INST -5 X!1 X!2 DP) (("1" (LEMMA NEXT_POSITION_TCC19) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (INST -1 DP) (("1" (ASSERT) (("1" (INST -1 PI) (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -3 -6 1 2 4)) (("2" (INST -3 P1!1) (("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REWRITE ADD_LAST_IS_O) (("2" (REPLACE -3) (("2" (REPLACE -2 -1) (("2" (INST 5 "p1!2 o  #(last(x!3))") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 5) (("2" (FLATTEN) (("2" (EXPAND* "#" O EMPTY_SEQ) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -6 1 2 4)) (("3" (SKOSIMP) (("3" (INST -3 Q!2) (("3" (ASSERT) (("3" (HIDE 1) (("3" (EXPAND "left_without_children") (("3" (SKOSIMP) (("3" (LEMMA ADD_LAST_DELETE[POSNAT]) (("3" (INST -1 X!3) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 X!3) (("3" (ASSERT) (("3" (REPLACE -5) (("3" (REWRITE ADD_LAST_IS_O) (("3" (REPLACE -2 -1) (("3" (INST 6 R!1 P1!1 "q1!1 o  #(last(x!3))") (("3" (REWRITE O_ASSOC) (("3" (REWRITE FIRST_COMPO) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 6) (("1" (FLATTEN) (("1" (EXPAND* "#" O EMPTY_SEQ) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA EQUAL_TERM) (("4" (INST -1 "subtermOF(x!1, dp)" "subtermOF(x!2, dp)" "#(last(x!3))") (("1" (GROUND) (("1" (SKOSIMP) (("1" (TYPEPRED Q!2) (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 3 4 5)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -5 4 RL) (("1" (REWRITE POS_O_TERM) (("1" (HIDE-ALL-BUT (-6 1 3)) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 Q1!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Q1!1) (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE FIRST_COMPO) (("1" (REPLACES -3) (("1" (EXPAND FIRST -4 2) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND "#" -4) (("1" (LEMMA POS_AX) (("1" (INST -1 "#(first(q1!1))" "rest(q1!1)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (LEMMA SUBTERMS_ACC_ARITY) (("1" (INST -1 "first(q1!1)" "1 + last(x!3)" "subtermOF(x!1, dp)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (CASE "last(x!3) = first(p1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (EXPAND* FIRST FINSEQ_APPL) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 R!1) (("2" (INST -1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (CASE "left_without_children(dp o q!2, x!3)") (("1" (INST -8 "dp o q!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 -8 1)) (("1" (TYPEPRED Q!2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (HIDE -4 2) (("1" (REWRITE POS_O_TERM) (("1" (REPLACE -3 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 2) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -3 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED Q!2) (("2" (REWRITE POS_O_TERM) (("1" (REWRITE POS_O_TERM) (("1" (REPLACE -3 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1 4 6)) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (CASE "r!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (INST 1 DP P1!1 Q1!1) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REWRITE ADD_LAST_IS_O) (("1" (REPLACE -5) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 R!1) (("2" (INST -1 Q1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM) (("3" (INST-CP -1 DP P1!1 X!1) (("3" (INST -1 DP P1!1 X!2) (("3" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE -1 -2 -4 -6 -7 -9 -10 -11 2 4 6 7) (("1" (CASE "child(x!3, dp o p1!1)") (("1" (INST -4 "dp o p1!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (TYPEPRED P1!1) (("2" (REWRITE POS_O_TERM) (("1" (REWRITE POS_O_TERM) (("1" (HIDE -1 -2 2) (("1" (REPLACE -1 1 RL) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE -1 2) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (CASE "p1!1 = empty_seq") (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (INST 1 P1!2) (("1" (ASSERT) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 X!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REWRITE ADD_LAST_IS_O) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND* "#" O) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST-CP -1 P1!1) (("2" (INST -1 P1!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED P1!1) (("2" (HIDE -2) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -2 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1 6)) (("2" (TYPEPRED P1!1) (("2" (HIDE -1) (("2" (REWRITE POS_O_TERM) (("2" (REPLACE -2 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-2 -7 1 5)) (("4" (LEMMA ADD_LAST_DELETE[POSNAT]) (("4" (INST -1 X!3) (("4" (LEMMA EMPTY_0[POSNAT]) (("4" (INST -1 X!3) (("4" (ASSERT) (("4" (REPLACE -2) (("4" (REWRITE ADD_LAST_IS_O) (("4" (LEMMA POS_SUBTERM) (("4" (INST-CP -1 DP "#(last(x!3))" X!2) (("4" (INST -1 DP "#(last(x!3))" X!1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -1) (("5" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 5)) (("2" (LEMMA ADD_LAST_DELETE[POSNAT]) (("2" (INST -1 X!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE ADD_LAST_IS_O) (("2" (REWRITE POS_SUBTERM_AX) (("2" (REWRITE POS_SUBTERM_AX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 2 4)) (("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REWRITE DELETE_IS_POSITION) (("1" (REWRITE DELETE_IS_POSITION) (("1" (HIDE-ALL-BUT (1 4)) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 X!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-2 3)) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP) (("2" (LEMMA APP_TERM) (("2" (INST -1 Y!3 P1!1 Y!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (SKOSIMP) (("3" (LEMMA APP_TERM) (("3" (INST -1 Y!3 P1!1 Y!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA NEXT_POSITION_TCC5) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1) (("5" (REWRITE EMPTY_0) NIL NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA NEXT_POSITION_TCC3) (("6" (INST -1 X!1 X!2 X!3) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE DELETE_IS_POSITION) (("7" (HIDE 2) (("7" (FLATTEN) (("7" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 X!3) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (LEMMA NEXT_POSITION_TCC5) (("9" (INST -1 Y!1 Y!2 Y!3) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE 1) (("10" (REWRITE EMPTY_0) NIL NIL)) NIL) ("11" (HIDE 2) (("11" (LEMMA APP_TERM) (("11" (INST -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (REWRITE DELETE_IS_POSITION) (("1" (NAME-REPLACE "dp" "delete(y!3, length(y!3) - 1)" :HIDE? NIL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 Y!3) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 Y!3) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE ADD_LAST_IS_O) (("1" (EXPAND CHILD) (("1" (INST 2 "#(last(y!3))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 Y!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (REWRITE DELETE_IS_POSITION) (("12" (FLATTEN) (("12" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (LEMMA EMPTY_0[POSNAT]) (("13" (INST -1 Y!3) (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE -1 2) (("14" (SKOSIMP) (("14" (LEMMA APP_TERM) (("14" (INST -1 "x!1`3" "p11!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE -1 2) (("15" (SKOSIMP) (("15" (LEMMA APP_TERM) (("15" (INST -1 "x!1`3" "p11!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE -1 2) (("16" (SKOSIMP) (("16" (LEMMA APP_TERM) (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE -1 2) (("17" (SKOSIMP) (("17" (LEMMA APP_TERM) (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA NEXT_POSITION_TCC5) (("18" (INST -1 "x!1`1" "x!1`2" "x!1`3") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE 1) (("19" (REWRITE EMPTY_0) (("19" (ASSERT) NIL NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (NAME-REPLACE "dp" "delete(x!1`3, length(x!1`3) - 1)" :HIDE? NIL) (("1" (LEMMA ADD_LAST_DELETE[POSNAT]) (("1" (INST -1 "x!1`3") (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 "x!1`3") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REWRITE ADD_LAST_IS_O) (("1" (LEMMA APP_TERM) (("1" (INST -1 "x!1`3" "dp" "x!1`1") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(x!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 "x!1`3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE DELETE_IS_POSITION) (("21" (FLATTEN) (("21" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE 2) (("22" (LEMMA EMPTY_0[POSNAT]) (("22" (INST -1 "x!1`3") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("23" (HIDE 2) (("23" (LEMMA NEXT_POSITION_TCC5) (("23" (INST -1 "y!1`1" "y!1`2" "y!1`3") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("24" (HIDE 1) (("24" (REWRITE EMPTY_0) (("24" (ASSERT) NIL NIL)) NIL)) NIL) ("25" (HIDE 2) (("25" (LEMMA EMPTY_0[POSNAT]) (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (NAME-REPLACE "dp" "delete(y!1`3, length(y!1`3) - 1)" :HIDE? NIL) (("25" (LEMMA ADD_LAST_DELETE[POSNAT]) (("25" (INST -1 "y!1`3") (("25" (ASSERT) (("25" (REPLACE -2) (("25" (REWRITE ADD_LAST_IS_O) (("25" (LEMMA APP_TERM) (("25" (INST -1 "y!1`3" "dp" "y!1`1") (("25" (ASSERT) (("25" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(y!1`3))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("26" (HIDE 2) (("26" (REWRITE DELETE_IS_POSITION) (("26" (FLATTEN) (("26" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("27" (HIDE 2) (("27" (LEMMA EMPTY_0[POSNAT]) (("27" (INST -1 "y!1`3") (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE 2) (("28" (LEMMA APP_TERM) (("28" (INST -1 P!1 P1!1 T!1) (("28" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("29" (HIDE 2) (("29" (LEMMA APP_TERM) (("29" (INST -1 P!1 P1!1 S!1) (("29" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("30" (HIDE 2) (("30" (LEMMA NEXT_POSITION_TCC5) (("30" (INST -1 S!1 T!1 P!1) (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE 1) (("31" (REWRITE EMPTY_0) NIL NIL)) NIL) ("32" (HIDE 2) (("32" (LEMMA EMPTY_0[POSNAT]) (("32" (INST -1 P!1) (("32" (ASSERT) (("32" (NAME-REPLACE "dp" "delete(p!1, length(p!1) - 1)" :HIDE? NIL) (("32" (LEMMA ADD_LAST_DELETE[POSNAT]) (("32" (INST -1 P!1) (("32" (ASSERT) (("32" (REPLACE -2) (("32" (REWRITE ADD_LAST_IS_O) (("32" (LEMMA APP_TERM) (("32" (INST -1 P!1 DP S!1) (("32" (ASSERT) (("32" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (REWRITE DELETE_IS_POSITION) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND CHILD) (("2" (INST 1 "#(last(p!1))") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND* "#" EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("33" (HIDE 2) (("33" (REWRITE DELETE_IS_POSITION) (("33" (FLATTEN) (("33" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("34" (HIDE 2) (("34" (LEMMA EMPTY_0[POSNAT]) (("34" (INST -1 P!1) (("34" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|fd_equal_subterm| 0 (|fd_equal_subterm-3| "" 3884968095 ("" (MEASURE-INDUCT+ "length(first_diff(s, t))" ("s" "t")) (("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(x!1, x!2)" :HIDE? NIL) (("" (EXPAND "first_diff" -1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-2 -4)) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND "left_without_children") (("1" (SKOSIMP) (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "r!1" "q1!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4)) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "r!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -4)) (("3" (REPLACE -1 -2 RL) (("3" (HIDE -1) (("3" (EXPAND "left_without_children") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST -1 "r!1" "q1!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})" :HIDE? NIL) (("1" (ASSERT) (("1" (EXPAND "left_without_children") (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE -5) (("1" (REPLACES -1) (("1" (REWRITE "empty_o_seq") (("1" (REWRITE "empty_o_seq") (("1" (REPLACE -4 (-6 4) RL) (("1" (REPLACE -5 (-6 5) RL) (("1" (HIDE -4 -5) (("1" (REWRITE "add_first_is_o") (("1" (REPLACE -3 -4 RL) (("1" (REWRITE "first_compo") (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "p!1") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE "first_compo") (("1" (EXPAND "first" -5 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "#" -5 1) (("1" (REPLACE -1 7) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (CASE "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 8) (("2" (EXPAND "first" -5 2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "#" -5) (("2" (NAME-REPLACE "B" "length(args(x!2))" :HIDE? NIL) (("2" (LEMMA "min_def[below[B]]") (("2" (INST -1 "k1" "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}") (("1" (EXPAND "minimum?") (("1" (PROP) (("1" (INST -2 "first(p!1) -1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (SKOSIMP*) (("2" (TYPEPRED "k1") (("2" (TYPEPRED "x!3") (("2" (REPLACE -4 -1 RL) (("2" (INST -3 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "k1") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "k1") (("2" (REPLACES -3 -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (SKOSIMP*) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "positions_of_arg") (("4" (INST -1 "x!2" "kk!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REWRITE "positions_of_arg") NIL NIL)) NIL) ("6" (TYPEPRED "k1") (("6" (HIDE-ALL-BUT (-1 -3 2)) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (EXPAND* "#" "first" "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "subtermOF(x!1,  #(1 + k1))" "subtermOF(x!2,  #(1 + k1))") (("2" (REPLACE -3 -4 RL) (("2" (EXPAND "add_first" -4) (("2" (EXPAND "insert?" -4) (("2" (INST -4 "rest(p!1)") (("1" (SPLIT) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (CASE "first(p!1) = 1 + k1") (("1" (REPLACE -1 -2) (("1" (REPLACE -2 7) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -8 3 4 5 8) (("2" (REPLACE -3 1) (("2" (REWRITE "first_compo") (("1" (REPLACE -2 -1) (("1" (REWRITE "add_first_is_o") (("1" (EXPAND* "first" "finseq_appl") (("1" (EXPAND "#" -1 1) (("1" (EXPAND O -1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (ASSERT) (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "r!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 2 7)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "r!1" "p1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 -6 1 2 6 7)) (("2" (LEMMA "seq_first_rest_1[posnat]") (("2" (INST -1 "r!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "r!1") (("2" (ASSERT) (("2" (INST 2 "rest(r!1)" "p1!1" "q1!1") (("2" (ASSERT) (("2" (REWRITE "add_first_is_o") (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (SPLIT) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "rest(r!1) o q1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE -1 -2 -4 -5 4) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (REPLACE -1 -3) (("1" (REPLACE -2 -3) (("1" (HIDE -1 -2) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(first(r!1))" "rest(r!1) o p1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACES -1) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "#(first(r!1))" "rest(p!1)" "rest(r!1) o p1!1") (("1" (ASSERT) (("1" (REWRITE "o_assoc") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" "first" "finseq_appl") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4 5)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "r!1" "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" "first" "finseq_appl") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "p!1 = #(1 + k1) o rest(p!1)") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REWRITE "pos_subterm_ax") (("1" (REWRITE "pos_subterm_ax") NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 2 4 5 6 9) (("2" (REWRITE "add_first_is_o") (("2" (LEMMA "seq_first_rest_1[posnat]") (("2" (INST -1 "r!1") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "r!1") (("2" (ASSERT) (("2" (REPLACE -1 (-3 -4)) (("2" (REPLACE -3 -2) (("2" (HIDE -3) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (SPLIT) (("1" (REPLACE -1 -4 RL) (("1" (HIDE -1 -2 -3 1) (("1" (LEMMA "seq_first_rest_1[posnat]") (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(1 + k1)" "rest(r!1) o p1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "#" "first" "finseq_appl") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "#(1 + k1) o rest(r!1)" "p1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" "first" "finseq_appl") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 4)) (("2" (LEMMA "first_diff_tcc3") (("2" (INST -1 "x!1" "x!2" "f(x!1)" "args(x!1)") (("2" (ASSERT) (("2" (CASE "x!1 = app(f(x!1), args(x!1))") (("1" (ASSERT) (("1" (INST -2 "f(x!2)" "args(x!2)") (("1" (CASE "x!2 = app(f(x!2), args(x!2))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (REWRITE "positions_of_arg") NIL NIL)) NIL) ("4" (HIDE -2 -3 -4 5) (("4" (SKOSIMP) (("4" (REWRITE "positions_of_arg") (("4" (TYPEPRED "kk!1") (("4" (TYPEPRED "args(x!2)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 -3)) (("5" (REPLACE -1 -2 RL) (("5" (HIDE -1) (("5" (EXPAND "left_without_children") (("5" (SKOSIMP) (("5" (LEMMA "seq_empty[posnat]") (("5" (INST -1 "r!1" "q1!1") (("5" (ASSERT) (("5" (FLATTEN) (("5" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|fd_equal_subterm-2| "" 3790333763 ("" (MEASURE-INDUCT+ "length(first_diff(s, t))" ("s" "t")) (("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(x!1, x!2)" :HIDE? NIL) (("" (EXPAND FIRST_DIFF -1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-2 -4)) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 R!1 Q1!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4)) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -4)) (("3" (REPLACE -1 -2 RL) (("3" (HIDE -1) (("3" (EXPAND LEFT_WITHOUT_CHILDREN) (("3" (SKOSIMP) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST -1 R!1 Q1!1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})" :HIDE? NIL) (("1" (ASSERT) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE -5) (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REPLACE -4 (-6 4) RL) (("1" (REPLACE -5 (-6 5) RL) (("1" (HIDE -4 -5) (("1" (REWRITE ADD_FIRST_IS_O) (("1" (REPLACE -3 -4 RL) (("1" (REWRITE FIRST_COMPO) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE FIRST_COMPO) (("1" (EXPAND FIRST -5 1) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND "#" -5 1) (("1" (REPLACE -1 7) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (CASE "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 8) (("2" (EXPAND FIRST -5 2) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND "#" -5) (("2" (NAME-REPLACE "B" "length(args(x!2))" :HIDE? NIL) (("2" (LEMMA "min_def[below[B]]") (("2" (INST -1 "k1" "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}") (("1" (EXPAND "minimum?") (("1" (PROP) (("1" (INST -2 "first(p!1) -1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (SKOSIMP*) (("2" (TYPEPRED "k1") (("2" (TYPEPRED "x!3") (("2" (REPLACE -4 -1 RL) (("2" (INST -3 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "k1") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "k1") (("2" (REPLACES -3 -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (SKOSIMP*) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "positions_of_arg") (("4" (INST -1 "x!2" "kk!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REWRITE "positions_of_arg") NIL NIL)) NIL) ("6" (TYPEPRED "k1") (("6" (HIDE-ALL-BUT (-1 -3 2)) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "subtermOF(x!1,  #(1 + k1))" "subtermOF(x!2,  #(1 + k1))") (("2" (REPLACE -3 -4 RL) (("2" (EXPAND ADD_FIRST -4) (("2" (EXPAND INSERT? -4) (("2" (INST -4 "rest(p!1)") (("1" (SPLIT) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (CASE "first(p!1) = 1 + k1") (("1" (REPLACE -1 -2) (("1" (REPLACE -2 7) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -8 3 4 5 8) (("2" (REPLACE -3 1) (("2" (REWRITE FIRST_COMPO) (("1" (REPLACE -2 -1) (("1" (REWRITE ADD_FIRST_IS_O) (("1" (EXPAND* FIRST FINSEQ_APPL) (("1" (EXPAND "#" -1 1) (("1" (EXPAND O -1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (ASSERT) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 2 7)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 -6 1 2 6 7)) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (INST 2 "rest(r!1)" "p1!1" "q1!1") (("2" (ASSERT) (("2" (REWRITE ADD_FIRST_IS_O) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (SPLIT) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "rest(r!1) o q1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE -1 -2 -4 -5 4) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (REPLACE -1 -3) (("1" (REPLACE -2 -3) (("1" (HIDE -1 -2) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(first(r!1))" "rest(r!1) o p1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACES -1) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 "#(first(r!1))" "rest(p!1)" "rest(r!1) o p1!1") (("1" (ASSERT) (("1" (REWRITE O_ASSOC) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4 5)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "p!1 = #(1 + k1) o rest(p!1)") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REWRITE POS_SUBTERM_AX) (("1" (REWRITE POS_SUBTERM_AX) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 2 4 5 6 9) (("2" (REWRITE ADD_FIRST_IS_O) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (REPLACE -1 (-3 -4)) (("2" (REPLACE -3 -2) (("2" (HIDE -3) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (SPLIT) (("1" (REPLACE -1 -4 RL) (("1" (HIDE -1 -2 -3 1) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(1 + k1)" "rest(r!1) o p1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 "#(1 + k1) o rest(r!1)" "p1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 4)) (("2" (LEMMA FIRST_DIFF_TCC3) (("2" (INST -1 X!1 X!2 "f(x!1)" "args(x!1)") (("2" (ASSERT) (("2" (CASE "x!1 = app(f(x!1), args(x!1))") (("1" (ASSERT) (("1" (INST -2 "f(x!2)" "args(x!2)") (("1" (CASE "x!2 = app(f(x!2), args(x!2))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (REWRITE POSITIONS_OF_ARG) NIL NIL)) NIL) ("4" (HIDE -2 -3 -4 5) (("4" (SKOSIMP) (("4" (REWRITE POSITIONS_OF_ARG) (("4" (TYPEPRED KK!1) (("4" (TYPEPRED "args(x!2)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 -3)) (("5" (REPLACE -1 -2 RL) (("5" (HIDE -1) (("5" (EXPAND LEFT_WITHOUT_CHILDREN) (("5" (SKOSIMP) (("5" (LEMMA SEQ_EMPTY[POSNAT]) (("5" (INST -1 R!1 Q1!1) (("5" (ASSERT) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app| ADT-CONSTRUCTOR-DECL "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" |term_adt| NIL) (|term_app_extensionality| FORMULA-DECL NIL |term_adt| NIL) (|first_diff_TCC3| SUBTYPE-TCC NIL |robinsonunification| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest_1| FORMULA-DECL NIL |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (B SKOLEM-CONST-DECL "nat" |robinsonunificationEF| NIL) (|k1| SKOLEM-CONST-DECL "{a |
   NOT subtermOF[variable, symbol, arity](x!1,  #(1 + a)) =
        subtermOF[variable, symbol, arity](x!2,  #(1 + a))
    AND
    FORALL (x: below[length(args(x!2))]):
      NOT subtermOF[variable, symbol, arity](x!1,  #(1 + x)) =
           subtermOF[variable, symbol, arity](x!2,  #(1 + x))
       IMPLIES a <= x}" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "{t: term | x!1 /= t}" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x!3| SKOLEM-CONST-DECL "below[B]" |robinsonunificationEF| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minimum?| CONST-DECL "bool" |min_nat| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|positions_of_arg| FORMULA-DECL NIL |positions| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|min_def| FORMULA-DECL NIL |min_nat| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|add_first_is_o| FORMULA-DECL NIL |seq_extras| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|fd_equal_subterm-1| |nil| 3516551572 ("" (MEASURE-INDUCT+ "length(first_diff(s, t))" ("s" "t")) (("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(x!1, x!2)" :HIDE? NIL) (("" (EXPAND FIRST_DIFF -1) (("" (LIFT-IF) (("" (PROP) (("1" (HIDE-ALL-BUT (-2 -4)) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 R!1 Q1!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4)) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -4)) (("3" (REPLACE -1 -2 RL) (("3" (HIDE -1) (("3" (EXPAND LEFT_WITHOUT_CHILDREN) (("3" (SKOSIMP) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST -1 R!1 Q1!1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})" :HIDE? NIL) (("1" (ASSERT) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (SKOSIMP) (("1" (CASE "r!1 = empty_seq") (("1" (HIDE -5) (("1" (REPLACES -1) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REWRITE EMPTY_O_SEQ) (("1" (REPLACE -4 (-6 4) RL) (("1" (REPLACE -5 (-6 5) RL) (("1" (HIDE -4 -5) (("1" (REWRITE ADD_FIRST_IS_O) (("1" (REPLACE -3 -4 RL) (("1" (REWRITE FIRST_COMPO) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P!1) (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (REWRITE FIRST_COMPO) (("1" (EXPAND FIRST -5 1) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND "#" -5 1) (("1" (REPLACE -1 7) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (CASE "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 8) (("2" (EXPAND FIRST -5 2) (("2" (EXPAND FINSEQ_APPL) (("2" (EXPAND "#" -5) (("2" (NAME-REPLACE "B" "length(args(x!2))" :HIDE? NIL) (("2" (LEMMA "min_def[below[B]]") (("2" (INST -1 "k1" "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}") (("1" (EXPAND "minimum?") (("1" (PROP) (("1" (INST -2 "first(p!1) -1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (SKOSIMP*) (("2" (TYPEPRED "k1") (("2" (TYPEPRED "x!3") (("2" (REPLACE -4 -1 RL) (("2" (INST -3 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "k1") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "k1") (("2" (REPLACES -3 -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (SKOSIMP*) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "positions_of_arg") (("4" (INST -1 "x!2" "kk!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REWRITE "positions_of_arg") NIL NIL)) NIL) ("6" (TYPEPRED "k1") (("6" (HIDE-ALL-BUT (-1 -3 2)) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "subtermOF(x!1,  #(1 + k1))" "subtermOF(x!2,  #(1 + k1))") (("2" (REPLACE -3 -4 RL) (("2" (EXPAND ADD_FIRST -4) (("2" (EXPAND INSERT? -4) (("2" (INST -4 "rest(p!1)") (("1" (SPLIT) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (CASE "first(p!1) = 1 + k1") (("1" (REPLACE -1 -2) (("1" (REPLACE -2 7) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -8 3 4 5 8) (("2" (REPLACE -3 1) (("2" (REWRITE FIRST_COMPO) (("1" (REPLACE -2 -1) (("1" (REWRITE ADD_FIRST_IS_O) (("1" (EXPAND* FIRST FINSEQ_APPL) (("1" (EXPAND "#" -1 1) (("1" (EXPAND O -1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 0) (("1" (ASSERT) (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 R!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1 2 7)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 -6 1 2 6 7)) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (INST 2 "rest(r!1)" "p1!1" "q1!1") (("2" (ASSERT) (("2" (REWRITE ADD_FIRST_IS_O) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (SPLIT) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "rest(r!1) o q1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE -1 -2 -4 -5 4) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (REPLACE -1 -3) (("1" (REPLACE -2 -3) (("1" (HIDE -1 -2) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(first(r!1))" "rest(r!1) o p1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACES -1) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 "#(first(r!1))" "rest(p!1)" "rest(r!1) o p1!1") (("1" (ASSERT) (("1" (REWRITE O_ASSOC) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4 5)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 R!1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "p!1 = #(1 + k1) o rest(p!1)") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (REWRITE POS_SUBTERM_AX) (("1" (REWRITE POS_SUBTERM_AX) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 2 4 5 6 9) (("2" (REWRITE ADD_FIRST_IS_O) (("2" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("2" (INST -1 R!1) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 R!1) (("2" (ASSERT) (("2" (REPLACE -1 (-3 -4)) (("2" (REPLACE -3 -2) (("2" (HIDE -3) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 "#(1 + k1)" "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))" "#(first(r!1))" "rest(r!1) o q1!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (SPLIT) (("1" (REPLACE -1 -4 RL) (("1" (HIDE -1 -2 -3 1) (("1" (LEMMA SEQ_FIRST_REST_1[POSNAT]) (("1" (INST -1 P!1) (("1" (SPLIT) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 "#(first(p!1))" "rest(p!1)" "#(1 + k1)" "rest(r!1) o p1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 "#(1 + k1) o rest(r!1)" "p1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* "#" FIRST FINSEQ_APPL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 4)) (("2" (LEMMA FIRST_DIFF_TCC3) (("2" (INST -1 X!1 X!2 "f(x!1)" "args(x!1)") (("2" (ASSERT) (("2" (CASE "x!1 = app(f(x!1), args(x!1))") (("1" (ASSERT) (("1" (INST -2 "f(x!2)" "args(x!2)") (("1" (CASE "x!2 = app(f(x!2), args(x!2))") (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "first_diff_TCC7") (("1" (INST -1 "x!1" "x!2" "f(x!1)" "args(x!1)") (("1" (ASSERT) (("1" (INST -1 "f(x!2)" "args(x!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (REWRITE POSITIONS_OF_ARG) NIL NIL)) NIL) ("4" (HIDE -2 -3 -4 5) (("4" (SKOSIMP) (("4" (REWRITE POSITIONS_OF_ARG) (("4" (TYPEPRED KK!1) (("4" (TYPEPRED "args(x!2)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 -3)) (("5" (REPLACE -1 -2 RL) (("5" (HIDE -1) (("5" (EXPAND LEFT_WITHOUT_CHILDREN) (("5" (SKOSIMP) (("5" (LEMMA SEQ_EMPTY[POSNAT]) (("5" (INST -1 R!1 Q1!1) (("5" (ASSERT) (("5" (FLATTEN) (("5" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|child_p_o_fd_TCC1| 0 (|child_p_o_fd_TCC1-2| "" 3884968194 ("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA "app_term") (("" (INST -1 "p!1" "q!1" "s!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC1-1| |nil| 3516271212 ("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA APP_TERM) (("" (INST -1 P!1 Q!1 S!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL)) NIL (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|child_p_o_fd_TCC2| 0 (|child_p_o_fd_TCC2-2| "" 3884968239 ("" (SKOSIMP*) (("" (LEMMA "app_term") (("" (INST -1 "p!1" "q!1" "t!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC2-1| |nil| 3516271212 ("" (SKOSIMP*) (("" (LEMMA APP_TERM) (("" (INST -1 P!1 Q!1 T!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) NIL (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|child_p_o_fd_TCC3| 0 (|child_p_o_fd_TCC3-3| "" 3884968517 ("" (SKOSIMP*) (("" (LEMMA "app_term") (("" (INST -1 "p!1 o fd!1" "q!1" "ext(sig!1)(s!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED "p!1") (("" (HIDE -2 -3) (("" (LEMMA "position_s_first_diff") (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA "pos_o_term") (("" (INST -1 "p!1" "fd!1" "s!1") (("" (ASSERT) (("" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC3-2| "" 3803841629 ("" (SKOSIMP*) (("" (LEMMA APP_TERM) (("" (INST -1 "p!1 o fd!1" Q!1 "ext(sig!1)(s!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED P!1) (("" (HIDE -2 -3) (("" (LEMMA POSITION_S_FIRST_DIFF) (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA POS_O_TERM) (("" (INST -1 P!1 FD!1 S!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC3-1| |nil| 3516271212 ("" (SKOSIMP*) (("" (LEMMA APP_TERM) (("" (INST -1 "p!1 o fd!1" Q1!1 "ext(sig!1)(s!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED P!1) (("" (HIDE -2 -3) (("" (LEMMA POSITION_S_FIRST_DIFF) (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA POS_O_TERM) (("" (INST -1 P!1 FD!1 S!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|child_p_o_fd_TCC4| 0 (|child_p_o_fd_TCC4-3| "" 3884968614 ("" (SKOSIMP*) (("" (LEMMA "app_term") (("" (INST -1 "p!1 o fd!1" "q!1" "ext(sig!1)(t!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED "p!1") (("" (HIDE -1 -3) (("" (LEMMA "position_t_first_diff") (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA "pos_o_term") (("" (INST -1 "p!1" "fd!1" "t!1") (("" (ASSERT) (("" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC4-2| "" 3803841660 ("" (SKOSIMP*) (("" (LEMMA APP_TERM) (("" (INST -1 "p!1 o fd!1" Q!1 "ext(sig!1)(t!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED P!1) (("" (HIDE -1 -3) (("" (LEMMA POSITION_T_FIRST_DIFF) (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA POS_O_TERM) (("" (INST -1 P!1 FD!1 T!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL)) SHOSTAK (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|child_p_o_fd_TCC4-1| |nil| 3516271212 ("" (SKOSIMP*) (("" (LEMMA APP_TERM) (("" (INST -1 "p!1 o fd!1" Q1!1 "ext(sig!1)(t!1)") (("" (ASSERT) (("" (HIDE -1 -3 2) (("" (TYPEPRED P!1) (("" (HIDE -1 -3) (("" (LEMMA POSITION_T_FIRST_DIFF) (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd!1") (("" (ASSERT) (("" (LEMMA POS_O_TERM) (("" (INST -1 P!1 FD!1 T!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|child_p_o_fd| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|child_p_o_fd| 0 (|child_p_o_fd-2| "" 3884970047 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "fd" "first_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (SKOSIMP) (("" (CASE "child(p!1, q!1)") (("1" (INST -5 "q!1") (("1" (ASSERT) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "t!1" "sig!1" "q!1") (("1" (INST -1 "s!1" "sig!1" "q!1") (("1" (LEMMA "app_term") (("1" (INST-CP -1 "p!1" "q!1" "t!1") (("1" (INST -1 "p!1" "q!1" "s!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "t!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "q!1" "p1!1" "t!1") (("2" (INST -1 "q!1" "p1!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (LEMMA "fd_equal_symbol") (("2" (EXPAND "child" -5) (("2" (SKOSIMP) (("2" (CASE "length(p!1) < length(q!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "p!1" "fd" "q!1" "p1!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -7) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "p!1" "fd" "seq!1 o  p1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (INST -4 "sp" "tp" "seq!1") (("1" (REPLACE -5) (("1" (SPLIT) (("1" (REPLACE -7 -1 RL) (("1" (REPLACE -6 -1 RL) (("1" (LEMMA "pos_subterm") (("1" (INST-CP -1 "p!1" "seq!1" "s!1") (("1" (INST -1 "p!1" "seq!1" "t!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -5 -3 RL) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "s!1" "sig!1" "q!1") (("1" (INST -1 "t!1" "sig!1" "q!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -8 -9 -10 -11 1 3)) (("2" (REPLACE -1 -5 RL) (("2" (HIDE -1) (("2" (LEMMA "app_term") (("2" (INST -1 "p!1 o fd" "q!1" "s!1") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -4 2 3) (("1" (TYPEPRED "p!1") (("1" (HIDE -2 -3) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "fd" "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "p!1") (("2" (HIDE -2 -3) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "s!1") (("2" (ASSERT) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1 3)) (("3" (EXPAND "child") (("3" (INST 1 "p1!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -8 -9 -10 -11 1 3)) (("2" (REPLACE -1 -5 RL) (("2" (HIDE -1) (("2" (LEMMA "app_term") (("2" (INST -1 "p!1 o fd" "q!1" "t!1") (("2" (ASSERT) (("2" (TYPEPRED "p!1") (("2" (HIDE -1 -3) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "t!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-8 1 3)) (("2" (EXPAND "child") (("2" (INST 1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -9 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (HIDE -1) (("2" (TYPEPRED "p!1") (("2" (HIDE -2 -3) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "s!1") (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -9 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (HIDE -1) (("2" (TYPEPRED "p!1") (("2" (HIDE -1 -3) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "t!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND "child") (("2" (INST 1 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6 1 RL) (("2" (REPLACE -5 1 RL) (("2" (REWRITE "pos_subterm_ax") (("1" (REWRITE "pos_subterm_ax") (("1" (HIDE-ALL-BUT (-2 -4 -5 -6 -7 1)) (("1" (REPLACE -1 (-5 1) RL) (("1" (TYPEPRED "p!1") (("1" (HIDE -1 -3 -4) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "fd" "t!1") (("1" (ASSERT) (("1" (REPLACE -7 -1) (("1" (LEMMA "pos_ax") (("1" (INST -1 "q!1" "p1!1" "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 -5 -6 -7 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (TYPEPRED "p!1") (("2" (HIDE -2 -3 -4) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "s!1") (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA "pos_ax") (("2" (INST -1 "q!1" "p1!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(q!1) < length(p!1)") (("1" (HIDE-ALL-BUT (-1 -6 1 2)) (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "q!1" "p1!1" "p!1" "fd") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND "child") (("1" (INST 2 "seq!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "q!1" "p1!1" "p!1" "fd") (("2" (ASSERT) (("2" (INST -2 "sp" "tp" "empty_seq") (("1" (REPLACE -3) (("1" (SPLIT) (("1" (REWRITE "subterm_empty_seq") (("1" (REWRITE "subterm_empty_seq") (("1" (REPLACE -5 -1 RL) (("1" (REPLACE -4 -1 RL) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "s!1" "sig!1" "p!1") (("1" (INST -1 "t!1" "sig!1" "p!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (CASE "fd /= empty_seq") (("1" (LEMMA "app_term") (("1" (INST -1 "p!1 o fd" "p!1" "s!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "fd" "s!1") (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (EXPAND "child" 1) (("1" (INST 1 "fd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "p!1" "empty_seq" "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "fd /= empty_seq") (("1" (LEMMA "app_term") (("1" (INST -1 "p!1 o fd" "p!1" "t!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "fd" "t!1") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (EXPAND "child" 1) (("1" (INST 1 "fd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "p!1" "empty_seq" "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "fd /= empty_seq") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND "child") (("1" (INST 1 "fd") (("1" (ASSERT) (("1" (REWRITE "empty_o_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "p!1" "empty_seq" "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|child_p_o_fd-1| |nil| 3516287505 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "fd" "first_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (SKOSIMP) (("" (CASE "child(p!1, q!1)") (("1" (INST -5 Q!1) (("1" (ASSERT) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 T!1 SIG!1 Q!1) (("1" (INST -1 S!1 SIG!1 Q!1) (("1" (LEMMA APP_TERM) (("1" (INST-CP -1 P!1 Q!1 T!1) (("1" (INST -1 P!1 Q!1 S!1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 T!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 Q!1 P1!1 T!1) (("2" (INST -1 Q!1 P1!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (LEMMA FD_EQUAL_SYMBOL) (("2" (EXPAND CHILD -5) (("2" (SKOSIMP) (("2" (CASE "length(p!1) < length(q!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P!1 FD Q!1 P1!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (REPLACE -1 -7) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 P!1 FD "seq!1 o  p1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (INST -4 SP TP SEQ!1) (("1" (REPLACE -5) (("1" (SPLIT) (("1" (REPLACE -7 -1 RL) (("1" (REPLACE -6 -1 RL) (("1" (LEMMA POS_SUBTERM) (("1" (INST-CP -1 P!1 SEQ!1 S!1) (("1" (INST -1 P!1 SEQ!1 T!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -5 -3 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 S!1 SIG!1 Q!1) (("1" (INST -1 T!1 SIG!1 Q!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -8 -9 -10 -11 1 3)) (("2" (REPLACE -1 -5 RL) (("2" (HIDE -1) (("2" (LEMMA APP_TERM) (("2" (INST -1 "p!1 o fd" "q!1" "s!1") (("2" (ASSERT) (("2" (PROP) (("1" (HIDE -4 2 3) (("1" (TYPEPRED P!1) (("1" (HIDE -2 -3) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 FD S!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED P!1) (("2" (HIDE -2 -3) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD S!1) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1 3)) (("3" (EXPAND CHILD) (("3" (INST 1 P1!1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -8 -9 -10 -11 1 3)) (("2" (REPLACE -1 -5 RL) (("2" (HIDE -1) (("2" (LEMMA APP_TERM) (("2" (INST -1 "p!1 o fd" "q!1" "t!1") (("2" (ASSERT) (("2" (TYPEPRED P!1) (("2" (HIDE -1 -3) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 T!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-8 1 3)) (("2" (EXPAND CHILD) (("2" (INST 1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -9 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (HIDE -1) (("2" (TYPEPRED P!1) (("2" (HIDE -2 -3) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD S!1) (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -9 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (HIDE -1) (("2" (TYPEPRED P!1) (("2" (HIDE -1 -3) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 T!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 3)) (("2" (EXPAND CHILD) (("2" (INST 1 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6 1 RL) (("2" (REPLACE -5 1 RL) (("2" (REWRITE POS_SUBTERM_AX) (("1" (REWRITE POS_SUBTERM_AX) (("1" (HIDE-ALL-BUT (-2 -4 -5 -6 -7 1)) (("1" (REPLACE -1 (-5 1) RL) (("1" (TYPEPRED P!1) (("1" (HIDE -1 -3 -4) (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 FD T!1) (("1" (ASSERT) (("1" (REPLACE -7 -1) (("1" (LEMMA POS_AX) (("1" (INST -1 Q!1 P1!1 T!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -4 -5 -6 -7 1)) (("2" (REPLACE -1 (-5 1) RL) (("2" (TYPEPRED P!1) (("2" (HIDE -2 -3 -4) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD S!1) (("2" (ASSERT) (("2" (REPLACE -7 -1) (("2" (LEMMA POS_AX) (("2" (INST -1 Q!1 P1!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(q!1) < length(p!1)") (("1" (HIDE-ALL-BUT (-1 -6 1 2)) (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 Q!1 P1!1 P!1 FD) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND CHILD) (("1" (INST 2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 Q!1 P1!1 P!1 FD) (("2" (ASSERT) (("2" (INST -2 SP TP EMPTY_SEQ) (("1" (REPLACE -3) (("1" (SPLIT) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REPLACE -5 -1 RL) (("1" (REPLACE -4 -1 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 S!1 SIG!1 P!1) (("1" (INST -1 T!1 SIG!1 P!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (CASE "fd /= empty_seq") (("1" (LEMMA APP_TERM) (("1" (INST -1 "p!1 o fd" P!1 S!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 FD S!1) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (EXPAND CHILD 1) (("1" (INST 1 FD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 P!1 EMPTY_SEQ P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "fd /= empty_seq") (("1" (LEMMA APP_TERM) (("1" (INST -1 "p!1 o fd" P!1 T!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 FD T!1) (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (EXPAND CHILD 1) (("1" (INST 1 FD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 P!1 EMPTY_SEQ P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "fd /= empty_seq") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND CHILD) (("1" (INST 1 FD) (("1" (ASSERT) (("1" (REWRITE EMPTY_O_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 6)) (("2" (REPLACES -1) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 P!1 EMPTY_SEQ P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|ext_preserve_symbol| FORMULA-DECL NIL |substitution| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q!1| SKOLEM-CONST-DECL "{q: position |
   positionsOF(ext(sig!1)(s!1))(q) AND positionsOF(ext(sig!1)(t!1))(q)}" |robinsonunificationEF| NIL) (|fd_equal_symbol| FORMULA-DECL NIL |robinsonunification| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|subterm_empty_seq| FORMULA-DECL NIL |subterm| NIL) (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|tp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|seq!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|sp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (< CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|separation_lwc_pos| 0 (|separation_lwc_pos-2| "" 3884970179 ("" (SKOSIMP) (("" (EXPAND "left_without_children" -1) (("" (SKOSIMP) (("" (CASE "length(p!1) > length(r!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "r!1" "q1!1" "p!1" "p1!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "r!1" "seq!1 o p1!1" "q1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REWRITE "first_compo") (("1" (EXPAND "left_without_children" 3) (("1" (INST 3 "r!1" "p1!2" "seq!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -7 -2) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0" -1) (("2" (REPLACE -1 -3) (("2" (REWRITE "seq_o_empty") (("2" (DECOMPOSE-EQUALITY -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "EXISTS (seq : position) : r!1 = p!1 o seq") (("1" (SKOSIMP) (("1" (INST 5 "seq!1 o p1!2") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "p!1" "p1!1" "seq!1 o q1!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (EXPAND "left_without_children" 5) (("1" (INST 5 "seq!1" "p1!2" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p!1" "p1!1" "r!1" "q1!1") (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "p!1" "p1!1" "r!1" "q1!1") (("2" (ASSERT) (("2" (INST 2 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|separation_lwc_pos-1| |nil| 3517238341 ("" (SKOSIMP) (("" (EXPAND LEFT_WITHOUT_CHILDREN -1) (("" (SKOSIMP) (("" (CASE "length(p!1) > length(r!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 R!1 Q1!1 P!1 P1!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 R!1 "seq!1 o p1!1" Q1!1) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REWRITE FIRST_COMPO) (("1" (EXPAND LEFT_WITHOUT_CHILDREN 3) (("1" (INST 3 R!1 P1!2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -7 -2) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -1) (("2" (REPLACE -1 -3) (("2" (REWRITE SEQ_O_EMPTY) (("2" (DECOMPOSE-EQUALITY -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "EXISTS (seq : position) : r!1 = p!1 o seq") (("1" (SKOSIMP) (("1" (INST 5 "seq!1 o p1!2") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 P!1 P1!1 "seq!1 o q1!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (EXPAND LEFT_WITHOUT_CHILDREN 5) (("1" (INST 5 SEQ!1 P1!2 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P!1 P1!1 R!1 Q1!1) (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 P!1 P1!1 R!1 Q1!1) (("2" (ASSERT) (("2" (INST 2 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|left_without_children| CONST-DECL "bool" |positions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|)) SHOSTAK)) (|lwc_o_fd_empty_seq| 0 (|lwc_o_fd_empty_seq-2| "" 3884970410 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(s!1, t!1)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (NAME-REPLACE "x1" "subtermOF(t!1, p1!1)" :HIDE? NIL) (("" (COPY -3) (("" (EXPAND "left_without_children" -1) (("" (SKOSIMP) (("" (CASE "length(p1!1) > length(r!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "r!1" "p1!2" "p1!1" "p2!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "r!1" "seq!1 o p2!1" "p1!2") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REWRITE "first_compo") (("1" (LEMMA "fd_equal_subterm") (("1" (INST -1 "s!1" "t!1" "p1!1") (("1" (REPLACE -9) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -8) (("1" (HIDE-ALL-BUT (-1 -11 -12 -14 3)) (("1" (REPLACES -3) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "p2!1" "s!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 -4 -6 1 2)) (("2" (EXPAND "left_without_children") (("2" (INST 1 "r!1" "seq!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 -11 1)) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p2!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 1)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "EXISTS(seq : position): r!1 = p1!1 o seq") (("1" (SKOSIMP) (("1" (REPLACE -1 -2) (("1" (HIDE-ALL-BUT (-2 -5 -6 -11 2)) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "s!1" "t!1" "fd") (("1" (ASSERT) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "seq!1" "q1!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2)) (("2" (REPLACES -1) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("2" (ASSERT) (("2" (INST 2 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|lwc_o_fd_empty_seq-1| |nil| 3517238602 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(s!1, t!1)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (NAME-REPLACE "x1" "subtermOF(t!1, p1!1)" :HIDE? NIL) (("" (COPY -3) (("" (EXPAND LEFT_WITHOUT_CHILDREN -1) (("" (SKOSIMP) (("" (CASE "length(p1!1) > length(r!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 R!1 P1!2 P1!1 P2!1) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 R!1 "seq!1 o p2!1" P1!2) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (REPLACE -1 -6 RL) (("1" (REWRITE FIRST_COMPO) (("1" (LEMMA FD_EQUAL_SUBTERM) (("1" (INST -1 S!1 T!1 P1!1) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -8) (("1" (HIDE-ALL-BUT (-1 -11 -12 -14 3)) (("1" (REPLACES -3) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!1 P2!1 S!1) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 -4 -6 1 2)) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (INST 1 R!1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 -11 1)) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P2!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 1)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "EXISTS(seq : position): r!1 = p1!1 o seq") (("1" (SKOSIMP) (("1" (REPLACE -1 -2) (("1" (HIDE-ALL-BUT (-2 -5 -6 -11 2)) (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 S!1 T!1 FD) (("1" (ASSERT) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 SEQ!1 Q1!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -8 1 2)) (("2" (REPLACES -1) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!2) (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!2) (("2" (ASSERT) (("2" (INST 2 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|fd_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL)) SHOSTAK)) (|lwc_p_o_fd| 0 (|lwc_p_o_fd-2| "" 3884972123 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "fd" "first_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (SKOSIMP) (("" (CASE "left_without_children(q!1, p!1)") (("1" (LEMMA "positions_of_ext") (("1" (INST-CP -1 "sig!1" "s!1") (("1" (INST -1 "sig!1" "t!1") (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "q!1") (("1" (INST -2 "q!1") (("1" (ASSERT) (("1" (EXPAND* "union" "member") (("1" (PROP) (("1" (INST -7 "q!1") (("1" (ASSERT) (("1" (REWRITE "subterm_ext_commute") (("1" (REWRITE "subterm_ext_commute") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "left_without_children" -6) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) <= length(r!1)") (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -7 -8 2 3)) (("1" (TYPEPRED "p!1") (("1" (HIDE -1 -3) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "q1!1" "t!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -12 "p1!1") (("1" (SPLIT) (("1" (REPLACE -2 5) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (LEMMA "subterm_ext_commute") (("1" (INST-CP -1 "p1!1" "t!1" "sig!1") (("1" (INST -1 "p1!1" "s!1" "sig!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -7 1)) (("2" (REPLACES -1) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p2!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 -7 -8 1 2 4 5)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "p1!2" "seq!1 o p2!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND "left_without_children") (("1" (INST 2 "r!1" "seq!1" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (REPLACES -1) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p2!1" "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "left_without_children" -6) (("3" (SKOSIMP) (("3" (CASE "length(p1!1) <= length(r!1)") (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 -7 -8 2 3)) (("1" (TYPEPRED "p!1") (("1" (HIDE -2 -3) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "q1!1" "s!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!2") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "seq!1 o q1!1" "s!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -12 "p1!1") (("1" (SPLIT) (("1" (REPLACE -3 5) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (LEMMA "subterm_ext_commute") (("1" (INST-CP -1 "p1!1" "t!1" "sig!1") (("1" (INST -1 "p1!1" "s!1" "sig!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 -4 1)) (("1" (REPLACES -2) (("1" (LEMMA "pos_ax") (("1" (INST -1 "p1!1" "p2!1" "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -6 -7 -8 1 2 4 5)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "p1!2" "seq!1 o p2!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND "left_without_children") (("1" (INST 2 "r!1" "seq!1" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -2) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p2!1" "t!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND "left_without_children" -9) (("4" (SKOSIMP) (("4" (CASE "length(p1!1) <= length(r!1) OR length(p1!2) <= length(r!1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -10 -11 1 2)) (("1" (TYPEPRED "p!1") (("1" (HIDE -1 -3) (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "r!1" "p1!3") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "q1!1" "t!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!3") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 -7 -8 -10 -11 1 2)) (("2" (TYPEPRED "p!1") (("2" (HIDE -2 -3) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("2" (ASSERT) (("2" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!2" "q1!1" "s!1") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!2" "seq!1 o q1!1" "s!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1" "q1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "length(p1!1) <= length(p1!2)") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "p1!2" "p2!2") (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACES -1) (("1" (INST -16 "p1!2") (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -3 -4 -6 -8 -10 5)) (("1" (REPLACE -2) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (LEMMA "subterm_ext_commute") (("1" (INST-CP -1 "p1!2" "s!1" "sig!1") (("1" (INST -1 "p1!2" "t!1" "sig!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -10 -11 -12 1 2 4 5)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!2" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "p1!3" "seq!1 o p2!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND "left_without_children") (("1" (INST 2 "r!1" "seq!1" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "p1!2" "p2!2") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "seq!1" "s!1") (("2" (ASSERT) (("2" (INST -18 "p1!1") (("2" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -5 -6 -8 -12 6)) (("1" (REPLACE -3) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (LEMMA "subterm_ext_commute") (("1" (INST-CP -1 "p1!1" "s!1" "sig!1") (("1" (INST -1 "p1!1" "t!1" "sig!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -12 -13 -14 1 3 5 6)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!2 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "p1!3" "seq!2 o p2!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND "left_without_children") (("1" (INST 2 "r!1" "seq!2" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!2" "seq!1" "t!1") (("2" (ASSERT) (("2" (INST -17 "p1!2") (("2" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -7 -8 -9 -11 6)) (("1" (REPLACE -4) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (LEMMA "subterm_ext_commute") (("1" (INST-CP -1 "p1!2" "s!1" "sig!1") (("1" (INST -1 "p1!2" "t!1" "sig!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 -11 -12 -13 1 4 5 6)) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!2" "p2!2") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!2 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "p1!3" "seq!2 o p2!2") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE "first_compo") (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND "left_without_children") (("1" (INST 2 "r!1" "seq!2" "q1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "separation_lwc_pos") (("2" (INST -1 "p!1" "fd" "q!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE -6) (("2" (LEMMA "fd_equal_subterm") (("2" (LEMMA "positions_of_ext") (("2" (REPLACE -3 2) (("2" (REWRITE "pos_subterm") (("2" (REWRITE "pos_subterm") (("2" (REWRITE "subterm_ext_commute") (("2" (LEMMA "subterm_ext_commute") (("2" (INST -1 "p!1" "t!1" "sig!1") (("2" (ASSERT) (("2" (REPLACE -1 2) (("2" (HIDE -1) (("2" (REPLACE -7 2) (("2" (REPLACE -6 2) (("2" (LEMMA "pos_subterm_ax") (("2" (INST-CP -1 "p!1" "q1!1" "ext(sig!1)(s!1)") (("2" (INST -1 "p!1" "q1!1" "ext(sig!1)(t!1)") (("2" (ASSERT) (("2" (REWRITE "subterm_ext_commute") (("2" (REWRITE "subterm_ext_commute") (("2" (REPLACE -8 -1) (("2" (REPLACE -9 -2) (("2" (HIDE -5 -8 -9 -10 1) (("2" (INST-CP -3 "sig!1" "sp") (("2" (INST -3 "sig!1" "tp") (("2" (DECOMPOSE-EQUALITY -3) (("2" (DECOMPOSE-EQUALITY -4) (("2" (INST -1 "q1!1") (("2" (INST -2 "q1!1") (("2" (EXPAND* "union" "member") (("2" (ASSERT) (("2" (PROP) (("1" (INST -5 "sp" "tp" "q1!1") (("1" (ASSERT) (("1" (REWRITE "subterm_ext_commute") (("1" (REWRITE "subterm_ext_commute") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (CASE "p2!1 = empty_seq") (("1" (REPLACE -1 -2) (("1" (REWRITE "seq_o_empty") (("1" (INST -9 "sp" "tp" "q1!1") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "subterm_ext_commute") (("2" (REPLACE -2 -3 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "lwc_o_fd_empty_seq") (("2" (INST -1 "q1!1" "p1!1" "p2!1" "sp" "tp") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (CASE "p2!1 = empty_seq") (("1" (REPLACE -1 -3) (("1" (REWRITE "seq_o_empty") (("1" (REPLACE -3 -4 RL) (("1" (INST -9 "sp" "tp" "q1!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "lwc_o_fd_empty_seq") (("2" (INST -1 "q1!1" "p1!1" "p2!1" "tp" "sp") (("2" (ASSERT) (("2" (LEMMA "comutative_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (CASE "length(p1!1) = length(p1!2)") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "p1!2" "p2!2") (("1" (ASSERT) (("1" (LEMMA "equal_prefix[posnat]") (("1" (INST -1 "p1!1" "p2!1" "p2!2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "left_without_children" -12) (("1" (SKOSIMP) (("1" (CASE "EXISTS(seq:position) : r!1 = p1!2 o seq") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT (-1 -7 -8 -13 -16 1)) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (REPLACE -5 -1) (("1" (REPLACE -2 -1) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!2" "seq!1 o q1!2" "sp") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "seq!1" "q1!2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!2" "p2!2") (("2" (ASSERT) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (INST -12 "sp" "tp" "p1!2") (("1" (SPLIT) (("1" (REPLACE -3 4) (("1" (REWRITE "pos_subterm") (("1" (REWRITE "pos_subterm") (("1" (REWRITE "subterm_ext_commute") (("1" (LEMMA "subterm_ext_commute") (("1" (INST -1 "p1!2" "tp" "sig!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -15) (("2" (HIDE-ALL-BUT (-1 -2 -12 -13 -14 1 2 3 4)) (("2" (REPLACE -1 -2) (("2" (REPLACE -2 -4) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "seq!1 o p2!2" "p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE "first_compo") (("1" (HIDE -1 -3 -5) (("1" (EXPAND "left_without_children") (("1" (INST 1 "r!1" "seq!1" "q1!2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (INST 1 "empty_seq") (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (HIDE-ALL-BUT (-1 -3 2)) (("2" (REPLACES -1) (("2" (INST 1 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -13 1 2)) (("2" (REPLACES -1) (("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("2" (ASSERT) (("2" (INST 3 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "p1!2" "p2!2") (("2" (ASSERT) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA "lwc_o_fd_empty_seq") (("1" (INST -1 "p1!2" "p1!1" "seq!1" "sp" "tp") (("1" (REPLACE -15) (("1" (ASSERT) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_without_children" -13) (("2" (SKOSIMP) (("2" (CASE "length(p1!2) <= length(r!1)") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -3 -5 -6 -15 3)) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (REPLACE -6 -1) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!1" "seq!1 o q1!2" "tp") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "seq!1" "q1!2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "r!1" "p1!3") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -3 -5 -6 -15 4)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (REPLACE -6 -1) (("2" (REPLACES -2) (("2" (REPLACES -2) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "seq!1 o seq!2 o q1!2" "tp") (("2" (REWRITE "o_assoc") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1 o seq!2" "q1!2") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!2" "p2!2") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -7 -14 -15 -16 1 2 4 5)) (("2" (EXPAND "left_without_children") (("2" (INST 2 "r!1" "seq!2" "q1!2") (("2" (ASSERT) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "seq!2 o p2!2" "p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE "first_compo") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") (("2" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!2" "p2!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA "lwc_o_fd_empty_seq") (("2" (INST -1 "p1!1" "p1!2" "seq!1" "tp" "sp") (("2" (LEMMA "comutative_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -1 -2 RL) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (REPLACES -1) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_without_children" -14) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) <= length(r!1)") (("1" (LEMMA "o_equals_o[posnat]") (("1" (INST -1 "p1!1" "p2!1" "r!1" "p1!3") (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -4 -10 -11 -16 4)) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "sp" "tp" "fd") (("1" (ASSERT) (("1" (REPLACE -6 -1) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA "pos_subterm_ax") (("1" (INST -1 "p1!2" "seq!1 o q1!2" "sp") (("1" (REWRITE "o_assoc") (("1" (ASSERT) (("1" (EXPAND "positionsOF" -1) (("1" (EXPAND "only_empty_seq") (("1" (LEMMA "seq_empty[posnat]") (("1" (INST -1 "seq!1" "q1!2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p2!1" "r!1" "p1!3") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -4 -10 -11 -16 5)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "sp" "tp" "fd") (("2" (ASSERT) (("2" (REPLACE -6 -1) (("2" (REPLACES -2) (("2" (REPLACES -2) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!2" "seq!1 o seq!2 o q1!2" "sp") (("2" (REWRITE "o_assoc") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (EXPAND "positionsOF" -1) (("2" (EXPAND "only_empty_seq") (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "seq!1 o seq!2" "q1!2") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "r!1" "p1!3" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -4 -15 -16 -17 1 2 5 6)) (("2" (EXPAND "left_without_children") (("2" (INST 2 "r!1" "seq!2" "q1!2") (("2" (ASSERT) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "r!1" "seq!2 o p2!1" "p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE "first_compo") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE "seq_o_empty") (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "empty_0") (("2" (REPLACES -1) (("2" (REWRITE "seq_o_empty") (("2" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|lwc_p_o_fd-1| |nil| 3516916753 ("" (SKOSIMP) (("" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)" :HIDE? NIL) (("" (NAME-REPLACE "fd" "first_diff(sp, tp)" :HIDE? NIL) (("" (ASSERT) (("" (PROP) (("" (SKOSIMP) (("" (CASE "left_without_children(q!1, p!1)") (("1" (LEMMA POSITIONS_OF_EXT) (("1" (INST-CP -1 SIG!1 S!1) (("1" (INST -1 SIG!1 T!1) (("1" (DECOMPOSE-EQUALITY -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 Q!1) (("1" (INST -2 Q!1) (("1" (ASSERT) (("1" (EXPAND* UNION MEMBER) (("1" (PROP) (("1" (INST -7 Q!1) (("1" (ASSERT) (("1" (REWRITE SUBTERM_EXT_COMMUTE) (("1" (REWRITE SUBTERM_EXT_COMMUTE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND LEFT_WITHOUT_CHILDREN -6) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) <= length(r!1)") (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -7 -8 2 3)) (("1" (TYPEPRED P!1) (("1" (HIDE -1 -3) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 R!1 P1!2) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!1 Q1!1 T!1) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -12 P1!1) (("1" (SPLIT) (("1" (REPLACE -2 5) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST-CP -1 P1!1 T!1 SIG!1) (("1" (INST -1 P1!1 S!1 SIG!1) (("1" (ASSERT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -7 1)) (("2" (REPLACES -1) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P2!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 -7 -8 1 2 4 5)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 "r!1" "p1!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 "r!1" "p1!2" "seq!1 o p2!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 2 R!1 SEQ!1 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (REPLACES -1) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P2!1 S!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND LEFT_WITHOUT_CHILDREN -6) (("3" (SKOSIMP) (("3" (CASE "length(p1!1) <= length(r!1)") (("1" (HIDE-ALL-BUT (-1 -3 -4 -5 -7 -8 2 3)) (("1" (TYPEPRED P!1) (("1" (HIDE -2 -3) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 R!1 P1!2) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!1 Q1!1 S!1) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "seq!1 o q1!1" "s!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -12 P1!1) (("1" (SPLIT) (("1" (REPLACE -3 5) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST-CP -1 P1!1 T!1 SIG!1) (("1" (INST -1 P1!1 S!1 SIG!1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 -4 1)) (("1" (REPLACES -2) (("1" (LEMMA POS_AX) (("1" (INST -1 P1!1 P2!1 T!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -6 -7 -8 1 2 4 5)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 "r!1" "p1!2" "p1!1" "p2!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 "r!1" "p1!2" "seq!1 o p2!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 2 R!1 SEQ!1 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -2) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P2!1 T!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND LEFT_WITHOUT_CHILDREN -9) (("4" (SKOSIMP) (("4" (CASE "length(p1!1) <= length(r!1) OR length(p1!2) <= length(r!1)") (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -10 -11 1 2)) (("1" (TYPEPRED P!1) (("1" (HIDE -1 -3) (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 R!1 P1!3) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!1 Q1!1 T!1) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!3) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!1" "seq!1 o q1!1" "t!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 -7 -8 -10 -11 1 2)) (("2" (TYPEPRED P!1) (("2" (HIDE -2 -3) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 R!1 P1!3) (("2" (ASSERT) (("2" (SPLIT) (("1" (REPLACE -1 -7 RL) (("1" (HIDE -1 -3 -4 -8) (("1" (REPLACE -4 -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!2 Q1!1 S!1) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 R!1 P1!3) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (REPLACE -1 -7) (("2" (HIDE -1 -3 -4 -8 1) (("2" (REPLACE -4 -1) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 "p1!2" "seq!1 o q1!1" "s!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 SEQ!1 Q1!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "length(p1!1) <= length(p1!2)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 P1!2 P2!2) (("1" (ASSERT) (("1" (SPLIT) (("1" (REPLACES -1) (("1" (INST -16 P1!2) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -3 -4 -6 -8 -10 5)) (("1" (REPLACE -2) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST-CP -1 P1!2 S!1 SIG!1) (("1" (INST -1 P1!2 T!1 SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -10 -11 -12 1 2 4 5)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!2 P2!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!1 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 P1!3 "seq!1 o p2!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 2 R!1 SEQ!1 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 P1!2 P2!2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 SEQ!1 S!1) (("2" (ASSERT) (("2" (INST -18 P1!1) (("2" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -5 -6 -8 -12 6)) (("1" (REPLACE -3) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST-CP -1 P1!1 S!1 SIG!1) (("1" (INST -1 P1!1 T!1 SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -12 -13 -14 1 3 5 6)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!1 P2!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!2 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 P1!3 "seq!2 o p2!1") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 2 R!1 SEQ!2 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 P1!1 P2!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!2 SEQ!1 T!1) (("2" (ASSERT) (("2" (INST -17 P1!2) (("2" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -2 -7 -8 -9 -11 6)) (("1" (REPLACE -4) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST-CP -1 P1!2 S!1 SIG!1) (("1" (INST -1 P1!2 T!1 SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 -11 -12 -13 1 4 5 6)) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!2 P2!2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "seq!2 = empty_seq") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -2) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 P1!3 "seq!2 o p2!2") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE-ALL-BUT (-2 -4 -6 1 2 4)) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 2 R!1 SEQ!2 Q1!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SEPARATION_LWC_POS) (("2" (INST -1 P!1 FD Q!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE -6) (("2" (LEMMA FD_EQUAL_SUBTERM) (("2" (LEMMA POSITIONS_OF_EXT) (("2" (REPLACE -3 2) (("2" (REWRITE POS_SUBTERM) (("2" (REWRITE POS_SUBTERM) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (LEMMA SUBTERM_EXT_COMMUTE) (("2" (INST -1 P!1 T!1 SIG!1) (("2" (ASSERT) (("2" (REPLACE -1 2) (("2" (HIDE -1) (("2" (REPLACE -7 2) (("2" (REPLACE -6 2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 P!1 Q1!1 "ext(sig!1)(s!1)") (("2" (INST -1 P!1 Q1!1 "ext(sig!1)(t!1)") (("2" (ASSERT) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REPLACE -8 -1) (("2" (REPLACE -9 -2) (("2" (HIDE -5 -8 -9 -10 1) (("2" (INST-CP -3 SIG!1 SP) (("2" (INST -3 SIG!1 TP) (("2" (DECOMPOSE-EQUALITY -3) (("2" (DECOMPOSE-EQUALITY -4) (("2" (INST -1 Q1!1) (("2" (INST -2 Q1!1) (("2" (EXPAND* UNION MEMBER) (("2" (ASSERT) (("2" (PROP) (("1" (INST -5 SP TP Q1!1) (("1" (ASSERT) (("1" (REWRITE SUBTERM_EXT_COMMUTE) (("1" (REWRITE SUBTERM_EXT_COMMUTE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (CASE "p2!1 = empty_seq") (("1" (REPLACE -1 -2) (("1" (REWRITE SEQ_O_EMPTY) (("1" (INST -9 SP TP Q1!1) (("1" (ASSERT) NIL NIL) ("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REPLACE -2 -3 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA LWC_O_FD_EMPTY_SEQ) (("2" (INST -1 Q1!1 P1!1 P2!1 SP TP) (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (CASE "p2!1 = empty_seq") (("1" (REPLACE -1 -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REPLACE -3 -4 RL) (("1" (INST -9 SP TP Q1!1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA LWC_O_FD_EMPTY_SEQ) (("2" (INST -1 Q1!1 P1!1 P2!1 TP SP) (("2" (ASSERT) (("2" (LEMMA COMUTATIVE_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (CASE "length(p1!1) = length(p1!2)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 P1!2 P2!2) (("1" (ASSERT) (("1" (LEMMA EQUAL_PREFIX[POSNAT]) (("1" (INST -1 P1!1 P2!1 P2!2) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND LEFT_WITHOUT_CHILDREN -12) (("1" (SKOSIMP) (("1" (CASE "EXISTS(seq:position) : r!1 = p1!2 o seq") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT (-1 -7 -8 -13 -16 1)) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (REPLACE -5 -1) (("1" (REPLACE -2 -1) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!2 "seq!1 o q1!2" SP) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 SEQ!1 Q1!2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!2 P2!2) (("2" (ASSERT) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (INST -12 SP TP P1!2) (("1" (SPLIT) (("1" (REPLACE -3 4) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE POS_SUBTERM) (("1" (REWRITE SUBTERM_EXT_COMMUTE) (("1" (LEMMA SUBTERM_EXT_COMMUTE) (("1" (INST -1 P1!2 TP SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -15) (("2" (HIDE-ALL-BUT (-1 -2 -12 -13 -14 1 2 3 4)) (("2" (REPLACE -1 -2) (("2" (REPLACE -2 -4) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 "seq!1 o p2!2" P1!3) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE FIRST_COMPO) (("1" (HIDE -1 -3 -5) (("1" (EXPAND LEFT_WITHOUT_CHILDREN) (("1" (INST 1 R!1 SEQ!1 Q1!2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (INST 1 EMPTY_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (HIDE-ALL-BUT (-1 -3 2)) (("2" (REPLACES -1) (("2" (INST 1 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -13 1 2)) (("2" (REPLACES -1) (("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 R!1 P1!3) (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 R!1 P1!3) (("2" (ASSERT) (("2" (INST 3 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 P1!2 P2!2) (("2" (ASSERT) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA LWC_O_FD_EMPTY_SEQ) (("1" (INST -1 P1!2 P1!1 SEQ!1 SP TP) (("1" (REPLACE -15) (("1" (ASSERT) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND LEFT_WITHOUT_CHILDREN -13) (("2" (SKOSIMP) (("2" (CASE "length(p1!2) <= length(r!1)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!2 P2!2 R!1 P1!3) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -3 -5 -6 -15 3)) (("1" (LEMMA POSITION_T_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (REPLACE -6 -1) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!1 "seq!1 o q1!2" TP) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 SEQ!1 Q1!2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 R!1 P1!3) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -3 -5 -6 -15 4)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (REPLACE -6 -1) (("2" (REPLACES -2) (("2" (REPLACES -2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 "seq!1 o seq!2 o q1!2" TP) (("2" (REWRITE O_ASSOC) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 "seq!1 o seq!2" Q1!2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!2 P2!2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -7 -14 -15 -16 1 2 4 5)) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (INST 2 R!1 SEQ!2 Q1!2) (("2" (ASSERT) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 "seq!2 o p2!2" P1!3) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE FIRST_COMPO) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) (("2" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!2 P2!2 P1!1 P2!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (LEMMA LWC_O_FD_EMPTY_SEQ) (("2" (INST -1 P1!1 P1!2 SEQ!1 TP SP) (("2" (LEMMA COMUTATIVE_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -1 -2 RL) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (REPLACES -1) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND LEFT_WITHOUT_CHILDREN -14) (("2" (SKOSIMP) (("2" (CASE "length(p1!1) <= length(r!1)") (("1" (LEMMA O_EQUALS_O[POSNAT]) (("1" (INST -1 P1!1 P2!1 R!1 P1!3) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 -4 -10 -11 -16 4)) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 SP TP FD) (("1" (ASSERT) (("1" (REPLACE -6 -1) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA POS_SUBTERM_AX) (("1" (INST -1 P1!2 "seq!1 o q1!2" SP) (("1" (REWRITE O_ASSOC) (("1" (ASSERT) (("1" (EXPAND POSITIONSOF -1) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (LEMMA SEQ_EMPTY[POSNAT]) (("1" (INST -1 SEQ!1 Q1!2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P2!1 R!1 P1!3) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -4 -10 -11 -16 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 SP TP FD) (("2" (ASSERT) (("2" (REPLACE -6 -1) (("2" (REPLACES -2) (("2" (REPLACES -2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!2 "seq!1 o seq!2 o q1!2" SP) (("2" (REWRITE O_ASSOC) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (EXPAND POSITIONSOF -1) (("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 "seq!1 o seq!2" Q1!2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 R!1 P1!3 P1!1 P2!1) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (HIDE-ALL-BUT (-1 -4 -15 -16 -17 1 2 5 6)) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (INST 2 R!1 SEQ!2 Q1!2) (("2" (ASSERT) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 R!1 "seq!2 o p2!1" P1!3) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (REPLACE -1 -6 RL) (("2" (REWRITE FIRST_COMPO) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE EMPTY_0) (("2" (REPLACES -1) (("2" (REWRITE SEQ_O_EMPTY) (("2" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|vars?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q!1| SKOLEM-CONST-DECL "{q: position |
   positionsOF(ext(sig!1)(s!1))(q) AND positionsOF(ext(sig!1)(t!1))(q)}" |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |reals| NIL) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|first_compo| FORMULA-DECL NIL |seq_extras| |structures|) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|p1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|positions_of_ext| FORMULA-DECL NIL |substitution| NIL) (|fd_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|sp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q1!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|tp| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|lwc_o_fd_empty_seq| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|comutative_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|separation_lwc_pos| FORMULA-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK)) (|np_p_o_fd_empty_unifiable_term_TCC1| 0 (|np_p_o_fd_empty_unifiable_term_TCC1-2| "" 3884972300 ("" (SKOSIMP*) (("" (LEMMA "position_s_first_diff") (("" (LEMMA "position_t_first_diff") (("" (INST?) (("" (INST?) (("" (ASSERT) (("" (TYPEPRED "p!1") (("" (HIDE -3) (("" (LEMMA "pos_o_term") (("" (INST-CP -1 "p!1" "fd!1" "t!1") (("" (INST -1 "p!1" "fd!1" "s!1") (("" (ASSERT) (("" (REWRITE "ext_preserv_pos") (("" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|np_p_o_fd_empty_unifiable_term| SUBTYPE "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.fd)" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")) (|np_p_o_fd_empty_unifiable_term_TCC1-1| |nil| 3512073554 ("" (SKOSIMP*) (("" (LEMMA POSITION_S_FIRST_DIFF) (("" (LEMMA POSITION_T_FIRST_DIFF) (("" (INST?) (("" (INST?) (("" (ASSERT) (("" (TYPEPRED P!1) (("" (HIDE -3) (("" (LEMMA POS_O_TERM) (("" (INST-CP -1 P!1 FD!1 T!1) (("" (INST -1 P!1 FD!1 S!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL)) NIL (|np_p_o_fd_empty_unifiable_term| SUBTYPE "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.fd)" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}"))) (|np_p_o_fd_empty_unifiable_term| 0 (|np_p_o_fd_empty_unifiable_term-2| "" 3884973801 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (ASSERT) (("" (NAME-REPLACE "np" "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :HIDE? NIL) (("" (PROP) (("" (LEMMA "child_p_o_fd") (("" (INST -1 "sig1" "s!1" "t!1" "p!1") (("" (REPLACE -4) (("" (ASSERT) (("" (GROUND) (("" (HIDE -7) (("" (LEMMA "lwc_p_o_fd") (("" (INST -1 "sig1" "s!1" "t!1" "p!1") (("" (REPLACE -5) (("" (ASSERT) (("" (GROUND) (("" (HIDE -7) (("" (LEMMA "next_pos_empty_equal_subterm") (("" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (GROUND) (("1" (CASE "NOT p!1 o fd = empty_seq") (("1" (CASE "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)") (("1" (LEMMA "equal_term") (("1" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -7 4) (("2" (TYPEPRED "p!1") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "p!1" "fd" "s!1") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (LEMMA "pos_subterm") (("2" (INST-CP -1 "p!1" "fd" "s!1") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REWRITE "subterm_ext_commute") (("2" (REWRITE "subterm_ext_commute") (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)") (("2" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)") (("2" (COPY -10) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -12) (("2" (EXPAND "member") (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "subtermOF(sp, fd)") (("1" (EXPAND "ext" 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA "idemp_sub_term_empty_inter") (("1" (INST -1 "subtermOF(tp, fd)" "sig1") (("1" (ASSERT) (("1" (EXPAND* "empty?" "intersection" "member") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "fd" "sp" "tp") (("1" (REPLACE -14) (("1" (EXPAND* "restrict" "singleton") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, fd)") (("2" (EXPAND "ext" 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA "idemp_sub_term_empty_inter") (("2" (INST -1 "subtermOF(sp, fd)" "sig1") (("2" (ASSERT) (("2" (EXPAND* "empty?" "intersection" "member") (("2" (SKOSIMP) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "fd" "sp" "tp") (("2" (EXPAND* "restrict" "singleton") (("2" (REPLACE -14) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 -5 -7 2 3 4) (("3" (TYPEPRED "p!1") (("3" (HIDE -3) (("3" (LEMMA "position_s_first_diff") (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("3" (LEMMA "position_t_first_diff") (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("3" (ASSERT) (("3" (LEMMA "pos_o_term") (("3" (INST-CP -1 "p!1" "fd" "s!1") (("3" (INST -1 "p!1" "fd" "t!1") (("3" (ASSERT) (("3" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -3 -4 -5 -7 2 3 4) (("4" (TYPEPRED "p!1") (("4" (HIDE -2 -3) (("4" (LEMMA "position_s_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "fd" "s!1") (("4" (ASSERT) (("4" (ASSERT) (("4" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -5 -8) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST -1 "p!1" "fd") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) (("2" (HIDE -3) (("2" (REWRITE "empty_0" -1) (("2" (REPLACES -1) (("2" (REWRITE "subterm_empty_seq") (("2" (REWRITE "subterm_empty_seq") (("2" (COPY -2) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -4) (("2" (REPLACE -2) (("2" (REWRITE "subterm_empty_seq") (("2" (REWRITE "subterm_empty_seq") (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "s!1") (("1" (EXPAND "ext" 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA "idemp_sub_term_empty_inter") (("1" (INST -1 "t!1" "sig1") (("1" (ASSERT) (("1" (EXPAND* "empty?" "intersection" "member") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "fd" "s!1" "t!1") (("1" (EXPAND* "restrict" "singleton") (("1" (REPLACE -6) (("1" (REWRITE "subterm_empty_seq") (("1" (REWRITE "subterm_empty_seq") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "t!1") (("2" (EXPAND "ext" 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA "idemp_sub_term_empty_inter") (("2" (INST -1 "s!1" "sig1") (("2" (ASSERT) (("2" (EXPAND* "empty?" "intersection" "member") (("2" (SKOSIMP) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "fd" "s!1" "t!1") (("2" (EXPAND* "restrict" "singleton") (("2" (REPLACE -6) (("2" (REWRITE "subterm_empty_seq") (("2" (REWRITE "subterm_empty_seq") (("2" (REPLACE -7) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (HIDE -1 -2 -3 -4 -6 2 3) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("1" (ASSERT) (("1" (TYPEPRED "p!1") (("1" (HIDE -2 -3) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "fd" "s!1") (("1" (ASSERT) (("1" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -6 2 3) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "p!1") (("2" (HIDE -1 -3) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 -7) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST -1 "p!1" "fd") (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE "empty_0" -2) (("3" (HIDE -3) (("3" (REWRITE "empty_0" -1) (("3" (REPLACES -1) (("3" (REWRITE "subterm_empty_seq") (("3" (REWRITE "subterm_empty_seq") (("3" (COPY -2) (("3" (EXPAND "link_of_frst_diff" -1) (("3" (REPLACE -4) (("3" (REPLACE -2) (("3" (REWRITE "subterm_empty_seq") (("3" (REWRITE "subterm_empty_seq") (("3" (LIFT-IF) (("3" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "s!1") (("1" (EXPAND "ext" 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA "idemp_sub_term_empty_inter") (("1" (INST -1 "t!1" "sig1") (("1" (ASSERT) (("1" (EXPAND* "empty?" "intersection" "member") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "fd" "s!1" "t!1") (("1" (EXPAND* "restrict" "singleton") (("1" (REPLACE -6) (("1" (REWRITE "subterm_empty_seq") (("1" (REWRITE "subterm_empty_seq") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "t!1") (("2" (EXPAND "ext" 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA "idemp_sub_term_empty_inter") (("2" (INST -1 "s!1" "sig1") (("2" (ASSERT) (("2" (EXPAND* "empty?" "intersection" "member") (("2" (SKOSIMP) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "fd" "s!1" "t!1") (("2" (EXPAND* "restrict" "singleton") (("2" (REPLACE -6) (("2" (REWRITE "subterm_empty_seq") (("2" (REWRITE "subterm_empty_seq") (("2" (REPLACE -7) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|np_p_o_fd_empty_unifiable_term-1| |nil| 3514628084 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (ASSERT) (("" (NAME-REPLACE "np" "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :HIDE? NIL) (("" (PROP) (("" (LEMMA CHILD_P_O_FD) (("" (INST -1 SIG1 S!1 T!1 P!1) (("" (REPLACE -4) (("" (ASSERT) (("" (GROUND) (("" (HIDE -7) (("" (LEMMA LWC_P_O_FD) (("" (INST -1 SIG1 S!1 T!1 P!1) (("" (REPLACE -5) (("" (ASSERT) (("" (GROUND) (("" (HIDE -7) (("" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (GROUND) (("1" (CASE "NOT p!1 o fd = empty_seq") (("1" (CASE "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)") (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -7 4) (("2" (TYPEPRED P!1) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 P!1 FD S!1) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM) (("2" (INST-CP -1 P!1 FD S!1) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)") (("2" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)") (("2" (COPY -10) (("2" (EXPAND LINK_OF_FRST_DIFF -1) (("2" (REPLACE -12) (("2" (EXPAND MEMBER) (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "subtermOF(sp, fd)") (("1" (EXPAND EXT 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("1" (INST -1 "subtermOF(tp, fd)" "sig1") (("1" (ASSERT) (("1" (EXPAND* EMPTY? INTERSECTION MEMBER) (("1" (SKOSIMP) (("1" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("1" (INST -1 FD SP TP) (("1" (REPLACE -14) (("1" (EXPAND* RESTRICT SINGLETON) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, fd)") (("2" (EXPAND EXT 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("2" (INST -1 "subtermOF(sp, fd)" "sig1") (("2" (ASSERT) (("2" (EXPAND* EMPTY? INTERSECTION MEMBER) (("2" (SKOSIMP) (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 FD SP TP) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (REPLACE -14) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 -5 -7 2 3 4) (("3" (TYPEPRED P!1) (("3" (HIDE -3) (("3" (LEMMA POSITION_S_FIRST_DIFF) (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" FD) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" FD) (("3" (ASSERT) (("3" (LEMMA POS_O_TERM) (("3" (INST-CP -1 P!1 FD S!1) (("3" (INST -1 P!1 FD T!1) (("3" (ASSERT) (("3" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -3 -4 -5 -7 2 3 4) (("4" (TYPEPRED P!1) (("4" (HIDE -2 -3) (("4" (LEMMA POSITION_S_FIRST_DIFF) (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" FD) (("4" (LEMMA POS_O_TERM) (("4" (INST -1 P!1 FD S!1) (("4" (ASSERT) (("4" (ASSERT) (("4" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -5 -8) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST -1 P!1 FD) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) (("2" (HIDE -3) (("2" (REWRITE EMPTY_0 -1) (("2" (REPLACES -1) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (COPY -2) (("2" (EXPAND LINK_OF_FRST_DIFF -1) (("2" (REPLACE -4) (("2" (REPLACE -2) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 S!1) (("1" (EXPAND EXT 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("1" (INST -1 T!1 SIG1) (("1" (ASSERT) (("1" (EXPAND* EMPTY? INTERSECTION MEMBER) (("1" (SKOSIMP) (("1" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("1" (INST -1 FD S!1 T!1) (("1" (EXPAND* RESTRICT SINGLETON) (("1" (REPLACE -6) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 T!1) (("2" (EXPAND EXT 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("2" (INST -1 S!1 SIG1) (("2" (ASSERT) (("2" (EXPAND* EMPTY? INTERSECTION MEMBER) (("2" (SKOSIMP) (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 FD S!1 T!1) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (REPLACE -6) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REPLACE -7) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (HIDE -1 -2 -3 -4 -6 2 3) (("1" (LEMMA POSITION_S_FIRST_DIFF) (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("1" (ASSERT) (("1" (TYPEPRED P!1) (("1" (HIDE -2 -3) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 P!1 FD S!1) (("1" (ASSERT) (("1" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -6 2 3) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (TYPEPRED P!1) (("2" (HIDE -1 -3) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 -7) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST -1 P!1 FD) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) (("3" (HIDE -3) (("3" (REWRITE EMPTY_0 -1) (("3" (REPLACES -1) (("3" (REWRITE SUBTERM_EMPTY_SEQ) (("3" (REWRITE SUBTERM_EMPTY_SEQ) (("3" (COPY -2) (("3" (EXPAND LINK_OF_FRST_DIFF -1) (("3" (REPLACE -4) (("3" (REPLACE -2) (("3" (REWRITE SUBTERM_EMPTY_SEQ) (("3" (REWRITE SUBTERM_EMPTY_SEQ) (("3" (LIFT-IF) (("3" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 S!1) (("1" (EXPAND EXT 3 1) (("1" (REPLACE -1 3 RL) (("1" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("1" (INST -1 T!1 SIG1) (("1" (ASSERT) (("1" (EXPAND* EMPTY? INTERSECTION MEMBER) (("1" (SKOSIMP) (("1" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("1" (INST -1 FD S!1 T!1) (("1" (EXPAND* RESTRICT SINGLETON) (("1" (REPLACE -6) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 T!1) (("2" (EXPAND EXT 4 2) (("2" (REPLACE -1 4 RL) (("2" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("2" (INST -1 S!1 SIG1) (("2" (ASSERT) (("2" (EXPAND* EMPTY? INTERSECTION MEMBER) (("2" (SKOSIMP) (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 FD S!1 T!1) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (REPLACE -6) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REPLACE -7) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|fd| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sig1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|subterm_empty_seq| FORMULA-DECL NIL |subterm| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|equal_term| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|idemp_sub_term_empty_inter| FORMULA-DECL NIL |substitution| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|next_pos_empty_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|lwc_p_o_fd| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|child_p_o_fd| FORMULA-DECL NIL |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)) SHOSTAK)) (|np_p_o_fd_equal_subterm| 0 (|np_p_o_fd_equal_subterm-2| "" 3884974425 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (ASSERT) (("" (NAME-REPLACE "np" "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :HIDE? NIL) (("" (PROP) (("" (LEMMA "child_p_o_fd") (("" (INST -1 "sig1" "s!1" "t!1" "p!1") (("" (REPLACE -4) (("" (ASSERT) (("" (GROUND) (("" (HIDE -6) (("" (LEMMA "lwc_p_o_fd") (("" (INST -1 "sig1" "s!1" "t!1" "p!1") (("" (REPLACE -5) (("" (ASSERT) (("" (GROUND) (("" (HIDE -6) (("" (CASE "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)") (("1" (LEMMA "next_pos_equal_subterm") (("1" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (REPLACE -5) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 3) (("2" (TYPEPRED "p!1") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "p!1" "fd" "s!1") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") (("2" (SKOSIMP) (("2" (REPLACE -7) (("2" (REWRITE "subterm_empty_seq") (("2" (REWRITE "subterm_empty_seq") (("2" (HIDE-ALL-BUT (-8 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3 4) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "p!1" "fd" "s!1") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REWRITE "subterm_ext_commute") (("2" (REWRITE "subterm_ext_commute") (("2" (LEMMA "pos_subterm") (("2" (INST-CP -1 "p!1" "fd" "s!1") (("2" (INST -1 "p!1" "fd" "t!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)") (("2" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)") (("2" (COPY -7) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -9) (("2" (EXPAND "member") (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "subtermOF(sp, fd)") (("1" (EXPAND "ext" 2 1) (("1" (REPLACE -1 2 RL) (("1" (LEMMA "idemp_sub_term_empty_inter") (("1" (INST -1 "subtermOF(tp, fd)" "sig1") (("1" (ASSERT) (("1" (EXPAND* "empty?" "intersection" "member") (("1" (SKOSIMP) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "fd" "sp" "tp") (("1" (EXPAND* "restrict" "singleton") (("1" (REPLACE -12) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, fd)") (("2" (EXPAND "ext" 3 2) (("2" (REPLACE -1 3 RL) (("2" (LEMMA "idemp_sub_term_empty_inter") (("2" (INST -1 "subtermOF(sp, fd)" "sig1") (("2" (ASSERT) (("2" (EXPAND* "empty?" "intersection" "member") (("2" (SKOSIMP) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "fd" "sp" "tp") (("2" (EXPAND* "restrict" "singleton") (("2" (REPLACE -12) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 2 3 4) (("3" (LEMMA "position_t_first_diff") (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("3" (ASSERT) (("3" (TYPEPRED "p!1") (("3" (HIDE -1 -3) (("3" (LEMMA "pos_o_term") (("3" (INST -1 "p!1" "fd" "t!1") (("3" (ASSERT) (("3" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -3 -4 2 3 4) (("4" (LEMMA "position_s_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("4" (ASSERT) (("4" (TYPEPRED "p!1") (("4" (HIDE -2 -3) (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "fd" "s!1") (("4" (ASSERT) (("4" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|np_p_o_fd_equal_subterm-1| |nil| 3516285690 ("" (SKOSIMP) (("" (NAME-REPLACE "fd" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "sig1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (ASSERT) (("" (NAME-REPLACE "np" "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :HIDE? NIL) (("" (PROP) (("" (LEMMA CHILD_P_O_FD) (("" (INST -1 SIG1 S!1 T!1 P!1) (("" (REPLACE -4) (("" (ASSERT) (("" (GROUND) (("" (HIDE -6) (("" (LEMMA LWC_P_O_FD) (("" (INST -1 SIG1 S!1 T!1 P!1) (("" (REPLACE -5) (("" (ASSERT) (("" (GROUND) (("" (HIDE -6) (("" (CASE "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)") (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 "ext(sig1)(s!1)" "ext(sig1)(t!1)" "p!1 o fd") (("1" (ASSERT) (("1" (REPLACE -5) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 3) (("2" (TYPEPRED P!1) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 P!1 FD S!1) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) (("2" (SKOSIMP) (("2" (REPLACE -7) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (REWRITE SUBTERM_EMPTY_SEQ) (("2" (HIDE-ALL-BUT (-8 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3 4) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" FD) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 P!1 FD S!1) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (REWRITE SUBTERM_EXT_COMMUTE) (("2" (LEMMA POS_SUBTERM) (("2" (INST-CP -1 P!1 FD S!1) (("2" (INST -1 P!1 FD T!1) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (NAME-REPLACE "sp" "subtermOF(s!1, p!1)") (("2" (NAME-REPLACE "tp" "subtermOF(t!1, p!1)") (("2" (COPY -7) (("2" (EXPAND LINK_OF_FRST_DIFF -1) (("2" (REPLACE -9) (("2" (EXPAND MEMBER) (("2" (LIFT-IF) (("2" (GROUND) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "subtermOF(sp, fd)") (("1" (EXPAND EXT 2 1) (("1" (REPLACE -1 2 RL) (("1" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("1" (INST -1 "subtermOF(tp, fd)" "sig1") (("1" (ASSERT) (("1" (EXPAND* EMPTY? INTERSECTION MEMBER) (("1" (SKOSIMP) (("1" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("1" (INST -1 FD SP TP) (("1" (EXPAND* RESTRICT SINGLETON) (("1" (REPLACE -12) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 X!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 "subtermOF(tp, fd)") (("2" (EXPAND EXT 3 2) (("2" (REPLACE -1 3 RL) (("2" (LEMMA IDEMP_SUB_TERM_EMPTY_INTER) (("2" (INST -1 "subtermOF(sp, fd)" "sig1") (("2" (ASSERT) (("2" (EXPAND* EMPTY? INTERSECTION MEMBER) (("2" (SKOSIMP) (("2" (LEMMA DOM_LINK_OF_FRST_DIFF_IS) (("2" (INST -1 FD SP TP) (("2" (EXPAND* RESTRICT SINGLETON) (("2" (REPLACE -12) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -1 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 2 3 4) (("3" (LEMMA POSITION_T_FIRST_DIFF) (("3" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("3" (ASSERT) (("3" (TYPEPRED P!1) (("3" (HIDE -1 -3) (("3" (LEMMA POS_O_TERM) (("3" (INST -1 P!1 FD T!1) (("3" (ASSERT) (("3" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -2 -3 -4 2 3 4) (("4" (LEMMA POSITION_S_FIRST_DIFF) (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "fd") (("4" (ASSERT) (("4" (TYPEPRED P!1) (("4" (HIDE -2 -3) (("4" (LEMMA POS_O_TERM) (("4" (INST -1 P!1 FD S!1) (("4" (ASSERT) (("4" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subterm_ext_commute| FORMULA-DECL NIL |substitution| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|idemp_sub_term_empty_inter| FORMULA-DECL NIL |substitution| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|next_pos_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|subterm_empty_seq| FORMULA-DECL NIL |subterm| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sig1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}" |robinsonunificationEF| NIL) (|fd| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|lwc_p_o_fd| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|child_p_o_fd| FORMULA-DECL NIL |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)) SHOSTAK)) (|robinson_unification_algorithm_aux_TCC1| 0 (|robinson_unification_algorithm_aux_TCC1-1| |nil| 3496419653 ("" (SKOSIMP) (("" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ((|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))" "finite_set[(V[variable, symbol, arity])]"))) (|robinson_unification_algorithm_aux_TCC2| 0 (|robinson_unification_algorithm_aux_TCC2-2| "" 3884974533 ("" (SKOSIMP) (("" (LEMMA "right_pos_subset") (("" (INST -1 "s!1" "p!1") (("" (LEMMA "finite_subset[position]") (("" (INST -1 "positionsOF(s!1)" "right_pos(s!1, p!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (REWRITE "positions_of_terms_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)" "finite_set[position[variable, symbol, arity]]")) (|robinson_unification_algorithm_aux_TCC2-1| |nil| 3496419653 ("" (SKOSIMP) (("" (LEMMA RIGHT_POS_SUBSET) (("" (INST -1 "s!1" "p!1") (("" (LEMMA FINITE_SUBSET[POSITION]) (("" (INST -1 "positionsOF(s!1)" "right_pos(s!1, p!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (REWRITE POSITIONS_OF_TERMS_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)" "finite_set[position[variable, symbol, arity]]"))) (|robinson_unification_algorithm_aux_TCC3| 0 (|robinson_unification_algorithm_aux_TCC3-1| |nil| 3496419653 ("" (SKOSIMP) (("" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ((|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`1), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`2))" "finite_set[(V[variable, symbol, arity])]"))) (|robinson_unification_algorithm_aux_TCC4| 0 (|robinson_unification_algorithm_aux_TCC4-2| "" 3884974553 ("" (SKOSIMP) (("" (LEMMA "right_pos_subset") (("" (INST -1 "z!1`1" "z!1`3") (("" (LEMMA "finite_subset[position]") (("" (INST -1 "positionsOF(z!1`1)" "right_pos(z!1`1, z!1`3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (REWRITE "positions_of_terms_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.z`1, robinsonunificationEF.z`3)" "finite_set[position[variable, symbol, arity]]")) (|robinson_unification_algorithm_aux_TCC4-1| |nil| 3496419653 ("" (SKOSIMP) (("" (LEMMA RIGHT_POS_SUBSET) (("" (INST -1 "z!1`1" "z!1`3") (("" (LEMMA FINITE_SUBSET[POSITION]) (("" (INST -1 "positionsOF(z!1`1)" "right_pos(z!1`1, z!1`3)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (REWRITE POSITIONS_OF_TERMS_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|z!1| SKOLEM-CONST-DECL "[s: term[variable, symbol, arity], t: term[variable, symbol, arity],
 {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.right_pos(robinsonunificationEF.z`1, robinsonunificationEF.z`3)" "finite_set[position[variable, symbol, arity]]"))) (|robinson_unification_algorithm_aux_TCC5| 0 (|robinson_unification_algorithm_aux_TCC5-1| |nil| 3496419653 ("" (SKOSIMP) (("" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ((|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))" "finite_set[(V[variable, symbol, arity])]"))) (|robinson_unification_algorithm_aux_TCC6| 0 (|robinson_unification_algorithm_aux_TCC6-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (HIDE -) (("" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|iden_subs| FORMULA-DECL NIL |substitution| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "identity[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].identity" "Sub[variable, symbol, arity]"))) (|robinson_unification_algorithm_aux_TCC7| 0 (|robinson_unification_algorithm_aux_TCC7-2| "" 3884979346 ("" (SKOSIMP*) (("" (LEMMA "next_position_is_position") (("" (INST-CP -1 "s!1" "t!1" "p!1") (("" (INST -1 "t!1" "s!1" "p!1") (("" (LEMMA "next_position_commute") (("" (INST -1 "s!1" "t!1" "p!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")) (|robinson_unification_algorithm_aux_TCC7-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (LEMMA NEXT_POSITION_IS_POSITION) (("" (INST-CP -1 S!1 T!1 P!1) (("" (INST -1 T!1 S!1 P!1) (("" (LEMMA NEXT_POSITION_COMMUTE) (("" (INST -1 S!1 T!1 P!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}"))) (|robinson_unification_algorithm_aux_TCC8| 0 (|robinson_unification_algorithm_aux_TCC8-2| "" 3884979472 ("" (SKOSIMP*) (("" (REWRITE "lex2_lt") (("" (LEMMA "next_pos_to_the_right") (("" (INST -1 "s!1" "t!1" "p!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "next_position" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| TERMINATION "robinsonunificationEF.robinson_unification_algorithm_aux(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)" "NIL")) (|robinson_unification_algorithm_aux_TCC8-1| |nil| 3496419653 ("" (SKOSIMP*) (("" (REWRITE LEX2_LT) (("" (LEMMA NEXT_POS_TO_THE_RIGHT) (("" (INST -1 S!1 T!1 P!1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND NEXT_POSITION -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|next_pos_to_the_right| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| TERMINATION "robinsonunificationEF.robinson_unification_algorithm_aux(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)" "NIL"))) (|robinson_unification_algorithm_aux_TCC9| 0 (|robinson_unification_algorithm_aux_TCC9-1| |nil| 3496419653 ("" (SKOSIMP) (("" (SKOSIMP) NIL NIL)) NIL) NIL NIL (|robinson_unification_algorithm_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)" "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}"))) (|robinson_unification_algorithm_aux_TCC10| 0 (|robinson_unification_algorithm_aux_TCC10-2| "" 3884979566 ("" (SKOSIMP*) (("" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (LEMMA "position_s_first_diff") (("" (LEMMA "position_t_first_diff") (("" (INST -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("" (ASSERT) (("" (TYPEPRED "p!1") (("" (LEMMA "pos_o_term") (("" (INST-CP -1 "p!1" "p!2" "s!1") (("" (INST -1 "p!1" "p!2" "t!1") (("" (ASSERT) (("" (REWRITE "ext_preserv_pos") (("" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| SUBTYPE "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].first_diff(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)))" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")) (|robinson_unification_algorithm_aux_TCC10-1| |nil| 3503934511 ("" (SKOSIMP*) (("" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (LEMMA POSITION_S_FIRST_DIFF) (("" (LEMMA POSITION_T_FIRST_DIFF) (("" (INST -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("" (ASSERT) (("" (TYPEPRED P!1) (("" (LEMMA POS_O_TERM) (("" (INST-CP -1 P!1 P!2 S!1) (("" (INST -1 P!1 P!2 T!1) (("" (ASSERT) (("" (REWRITE EXT_PRESERV_POS) (("" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].first_diff(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)))" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}"))) (|robinson_unification_algorithm_aux_TCC11| 0 (|robinson_unification_algorithm_aux_TCC11-2| "" 3884979613 ("" (SKOSIMP*) (("" (NAME-REPLACE "q!1" "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (LEMMA "next_position_is_position") (("" (INST-CP -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1") (("" (INST -1 "ext(sig!1)(t!1)" "ext(sig!1)(s!1)" "q!1") (("1" (LEMMA "next_position_commute") (("1" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "robinson_unification_algorithm_aux_tcc10") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -3 -1) (("2" (ASSERT) (("2" (INST -1 "sig!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")) (|robinson_unification_algorithm_aux_TCC11-1| |nil| 3503934511 ("" (SKOSIMP*) (("" (NAME-REPLACE "q!1" "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (LEMMA NEXT_POSITION_IS_POSITION) (("" (INST-CP -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1") (("" (INST -1 "ext(sig!1)(t!1)" "ext(sig!1)(s!1)" "q!1") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC10) (("2" (INST -1 S!1 T!1 P!1) (("2" (REPLACE -3 -1) (("2" (ASSERT) (("2" (INST -1 SIG!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|robinson_unification_algorithm_aux_TCC10| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|q!1| SKOLEM-CONST-DECL "finseq[posnat]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "robinsonunificationEF.pi" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}"))) (|robinson_unification_algorithm_aux_TCC12| 0 (|robinson_unification_algorithm_aux_TCC12-2| "" 3884979645 ("" (SKOSIMP*) (("" (REWRITE "lex2_lt") (("" (FLATTEN) (("" (HIDE 5) (("" (LEMMA "termination_lemma_subterm") (("" (INST -1 "s!1" "t!1" "p!1") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|robinson_unification_algorithm_aux| TERMINATION "robinsonunificationEF.robinson_unification_algorithm_aux(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.pi)" "NIL")) (|robinson_unification_algorithm_aux_TCC12-1| |nil| 3503934511 ("" (SKOSIMP*) (("" (REWRITE LEX2_LT) (("" (FLATTEN) (("" (HIDE 5) (("" (LEMMA TERMINATION_LEMMA_SUBTERM) (("" (INST -1 S!1 T!1 P!1) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|termination_lemma_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL)) NIL (|robinson_unification_algorithm_aux| TERMINATION "robinsonunificationEF.robinson_unification_algorithm_aux(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.pi)" "NIL"))) (|robinson_unification_algorithm_aux_TCC13| 0 (|robinson_unification_algorithm_aux_TCC13-1| |nil| 3503934511 ("" (SKOSIMP*) (("" (HIDE-ALL-BUT 5) (("" (REWRITE SUBS_O) NIL NIL)) NIL)) NIL) ((|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|subs_o| FORMULA-DECL NIL |substitution| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].comp(robinsonunificationEF.sigma, robinsonunificationEF.sig)" "Sub[variable, symbol, arity]"))) (|robinson_unification_algorithm_aux_TCC14| 0 (|robinson_unification_algorithm_aux_TCC14-1| |nil| 3516702576 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|robinson_unification_algorithm_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)" "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}"))) (|robinson_unification_algorithm_EF_TCC1| 0 (|robinson_unification_algorithm_EF_TCC1-1| |nil| 3495978980 ("" (SKOSIMP*) (("" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL)) NIL (|robinson_unification_algorithm_EF| SUBTYPE "finite_sequences[posnat].empty_seq" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}"))) (|unifiable_implies_not_fail1| 0 (|unifiable_implies_not_fail1-2| "" 3884980858 ("" (SKOSIMP) (("" (ASSERT) (("" (NAME "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("" (PROP) (("" (EXPAND "link_of_frst_diff" -3) (("" (LIFT-IF) (("" (PROP) (("1" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("1" (REPLACE -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (CASE "xx = subtermOF(subtermOF(s!1, p!1), p!2)") (("1" (INST -2 "xx") (("1" (ASSERT) (("1" (EXPAND "fail" -2) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "member" "Vars") (("1" (INST 1 "#(1)") (("1" (EXPAND "subtermOF" 1) (("1" (REWRITE "empty_0") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (CASE "#(xx)`seq(first( #(1)) - 1) = xx") (("1" (REPLACE -1 2) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND "subtermOF") (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "length_rest_0[posnat]") (("2" (INST -1 "#(1)") (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (REWRITE "empty_0") NIL NIL)) NIL) ("2" (EXPAND "#" -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "#" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (ASSERT) (("2" (EXPAND* "union" "IUnion" "member") (("2" (PROP) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 1 2) (("2" (INST 1 1) (("1" (EXPAND "catenate") (("1" (EXPAND "finseq_appl") (("1" (INST 1 "empty_seq") (("1" (SPLIT) (("1" (EXPAND "member") (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND* "union" I "union" "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "subtermOF(subtermOF(s!1, p!1), p!2)") (("2" (EXPAND FAIL) (("2" (ASSERT) (("2" (EXPAND "id") (("2" (HIDE 1 2) (("2" (LEMMA "first_diff_has_diff_argument") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "var_term_unifiable_not_var_in_term") (("2" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (INST -1 "subtermOF(subtermOF(s!1, p!1), p!2)" "subtermOF(subtermOF(t!1, p!1), p!2)") (("2" (ASSERT) (("2" (HIDE -1 -2) (("2" (SPLIT) (("1" (REVEAL -4) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "s!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "t!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "s!1") (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "t!1") (("1" (ASSERT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE-ALL-BUT (-9 1)) (("1" (LEMMA "unifiable_terms_unifiable_args") (("1" (EXPAND "unifiable") (("1" (SKOSIMP) (("1" (INST 1 "sigma!1") (("1" (INST -1 "sigma!1" "s!1" "t!1" "p!1 o p!2") (("1" (EXPAND* "member" "U") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (REVEAL -6) (("2" (LEMMA "first_diff_has_diff_argument") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("3" (REPLACE -1) (("3" (CASE "xx = subtermOF(subtermOF(t!1, p!1), p!2)") (("1" (INST -3 "subtermOF(subtermOF(t!1, p!1), p!2)") (("1" (EXPAND FAIL) (("1" (ASSERT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -3 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* "member" "Vars") (("1" (INST 1 "#(1)") (("1" (EXPAND "subtermOF" 1) (("1" (REWRITE "empty_0") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (CASE "#(xx)`seq(first( #(1)) - 1) = xx") (("1" (REPLACE -1 2) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND "subtermOF") (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "length_rest_0[posnat]") (("2" (INST -1 "#(1)") (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (REWRITE "empty_0") NIL NIL)) NIL) ("2" (EXPAND "#" -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "#" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (ASSERT) (("2" (EXPAND* "union" "IUnion" "member") (("2" (PROP) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1 2) (("2" (INST 1 1) (("1" (EXPAND "catenate") (("1" (EXPAND "finseq_appl") (("1" (INST 1 "empty_seq") (("1" (SPLIT) (("1" (EXPAND "member") (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND* "union" "IUnion" "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "subtermOF(subtermOF(t!1, p!1), p!2)") (("2" (EXPAND "fail") (("2" (ASSERT) (("2" (EXPAND "id") (("2" (HIDE 1 2 3 -3 -4) (("2" (LEMMA "first_diff_has_diff_argument") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "var_term_unifiable_not_var_in_term") (("4" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("4" (INST -2 "subtermOF(subtermOF(t!1, p!1), p!2)" "subtermOF(subtermOF(s!1, p!1), p!2)") (("4" (ASSERT) (("4" (HIDE (-2 -3 -4 2)) (("4" (LEMMA "position_s_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("4" (ASSERT) (("4" (LEMMA "position_t_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("4" (ASSERT) (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "p!2" "s!1") (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "p!2" "t!1") (("4" (ASSERT) (("4" (LEMMA "pos_subterm") (("4" (INST -1 "p!1" "p!2" "s!1") (("4" (LEMMA "pos_subterm") (("4" (INST -1 "p!1" "p!2" "t!1") (("4" (ASSERT) (("4" (REPLACE -1 1 RL) (("4" (REPLACE -2 1 RL) (("4" (HIDE-ALL-BUT (-8 1)) (("4" (LEMMA "unifiable_terms_unifiable_args") (("4" (EXPAND "unifiable") (("4" (SKOSIMP) (("4" (INST 1 "sigma!1") (("4" (INST -1 "sigma!1" "s!1" "t!1" "p!1 o p!2") (("4" (EXPAND* "member" "U") (("4" (ASSERT) (("4" (HIDE -2) (("4" (EXPAND "unifier") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("5" (LEMMA "first_diff_unifiable_vars") (("5" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("5" (ASSERT) (("5" (HIDE-ALL-BUT (-3 1)) (("5" (LEMMA "unifiable_terms_unifiable_args") (("5" (EXPAND "unifiable") (("5" (SKOSIMP) (("5" (INST 1 "sigma!1") (("5" (INST -1 "sigma!1" "s!1" "t!1" "p!1") (("5" (EXPAND* "member" "U") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|unifiable_implies_not_fail1-1| |nil| 3510532128 ("" (SKOSIMP) (("" (ASSERT) (("" (NAME "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("" (PROP) (("" (EXPAND LINK_OF_FRST_DIFF -3) (("" (LIFT-IF) (("" (PROP) (("1" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("1" (REPLACE -1) (("1" (DECOMPOSE-EQUALITY -2) (("1" (CASE "xx = subtermOF(subtermOF(s!1, p!1), p!2)") (("1" (INST -2 "xx") (("1" (ASSERT) (("1" (EXPAND FAIL -2) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* MEMBER VARS) (("1" (INST 1 "#(1)") (("1" (EXPAND SUBTERMOF 1) (("1" (REWRITE EMPTY_0) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (CASE "#(xx)`seq(first( #(1)) - 1) = xx") (("1" (REPLACE -1 2) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA LENGTH_REST_0[POSNAT]) (("2" (INST -1 "#(1)") (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL) ("2" (EXPAND "#" -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "#" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (ASSERT) (("2" (EXPAND* UNION IUNION MEMBER) (("2" (PROP) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 1 2) (("2" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (EXPAND FINSEQ_APPL) (("1" (INST 1 EMPTY_SEQ) (("1" (SPLIT) (("1" (EXPAND MEMBER) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "subtermOF(subtermOF(s!1, p!1), p!2)") (("2" (EXPAND FAIL) (("2" (ASSERT) (("2" (EXPAND ID) (("2" (HIDE 1 2) (("2" (LEMMA FIRST_DIFF_HAS_DIFF_ARGUMENT) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA VAR_TERM_UNIFIABLE_NOT_VAR_IN_TERM) (("2" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (INST -1 "subtermOF(subtermOF(s!1, p!1), p!2)" "subtermOF(subtermOF(t!1, p!1), p!2)") (("2" (ASSERT) (("2" (HIDE -1 -2) (("2" (SPLIT) (("1" (REVEAL -4) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "s!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "t!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "s!1") (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "t!1") (("1" (ASSERT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (HIDE-ALL-BUT (-9 1)) (("1" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("1" (EXPAND UNIFIABLE) (("1" (SKOSIMP) (("1" (INST 1 SIGMA!1) (("1" (INST -1 "sigma!1" "s!1" "t!1" "p!1 o p!2") (("1" (EXPAND* MEMBER U) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (REVEAL -6) (("2" (LEMMA FIRST_DIFF_HAS_DIFF_ARGUMENT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (NAME "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))") (("3" (REPLACE -1) (("3" (CASE "xx = subtermOF(subtermOF(t!1, p!1), p!2)") (("1" (INST -3 "subtermOF(subtermOF(t!1, p!1), p!2)") (("1" (EXPAND FAIL) (("1" (ASSERT) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -3 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND* MEMBER VARS) (("1" (INST 1 "#(1)") (("1" (EXPAND SUBTERMOF 1) (("1" (REWRITE EMPTY_0) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (CASE "#(xx)`seq(first( #(1)) - 1) = xx") (("1" (REPLACE -1 2) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT 2) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA LENGTH_REST_0[POSNAT]) (("2" (INST -1 "#(1)") (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL) ("2" (EXPAND "#" -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "#" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (ASSERT) (("2" (EXPAND* UNION IUNION MEMBER) (("2" (PROP) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 1 2) (("2" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (EXPAND FINSEQ_APPL) (("1" (INST 1 EMPTY_SEQ) (("1" (SPLIT) (("1" (EXPAND MEMBER) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND ONLY_EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND ONLY_EMPTY_SEQ) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "subtermOF(subtermOF(t!1, p!1), p!2)") (("2" (EXPAND FAIL) (("2" (ASSERT) (("2" (EXPAND ID) (("2" (HIDE 1 2 3 -3 -4) (("2" (LEMMA FIRST_DIFF_HAS_DIFF_ARGUMENT) (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA VAR_TERM_UNIFIABLE_NOT_VAR_IN_TERM) (("4" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("4" (INST -2 "subtermOF(subtermOF(t!1, p!1), p!2)" "subtermOF(subtermOF(s!1, p!1), p!2)") (("4" (ASSERT) (("4" (HIDE (-2 -3 -4 2)) (("4" (LEMMA "position_s_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("4" (ASSERT) (("4" (LEMMA "position_t_first_diff") (("4" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("4" (ASSERT) (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "p!2" "s!1") (("4" (LEMMA "pos_o_term") (("4" (INST -1 "p!1" "p!2" "t!1") (("4" (ASSERT) (("4" (LEMMA "pos_subterm") (("4" (INST -1 "p!1" "p!2" "s!1") (("4" (LEMMA "pos_subterm") (("4" (INST -1 "p!1" "p!2" "t!1") (("4" (ASSERT) (("4" (REPLACE -1 1 RL) (("4" (REPLACE -2 1 RL) (("4" (HIDE-ALL-BUT (-8 1)) (("4" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("4" (EXPAND UNIFIABLE) (("4" (SKOSIMP) (("4" (INST 1 SIGMA!1) (("4" (INST -1 "sigma!1" "s!1" "t!1" "p!1 o p!2") (("4" (EXPAND* MEMBER U) (("4" (ASSERT) (("4" (HIDE -2) (("4" (EXPAND "unifier") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("5" (LEMMA FIRST_DIFF_UNIFIABLE_VARS) (("5" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("5" (ASSERT) (("5" (HIDE-ALL-BUT (-3 1)) (("5" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("5" (EXPAND UNIFIABLE) (("5" (SKOSIMP) (("5" (INST 1 SIGMA!1) (("5" (INST -1 "sigma!1" "s!1" "t!1" "p!1") (("5" (EXPAND* MEMBER U) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|first_diff_unifiable_vars| FORMULA-DECL NIL |robinsonunification| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (|var_term_unifiable_not_var_in_term| FORMULA-DECL NIL |unification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|unifiable_terms_unifiable_args| FORMULA-DECL NIL |unification| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|fail| CONST-DECL "Sub" |robinsonunification| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|first_diff_has_diff_argument| FORMULA-DECL NIL |robinsonunification| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|catenate| CONST-DECL "positions" |positions| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|length_rest_0| FORMULA-DECL NIL |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|app| ADT-CONSTRUCTOR-DECL "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" |term_adt| NIL) (|ff| CONST-DECL "{f: symbol | arity(f) = 1}" |robinsonunification| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|xx| CONST-DECL "(V)" |robinsonunification| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|preserving_generality1| 0 (|preserving_generality1-2| "" 3884981300 ("" (SKOSIMP) (("" (ASSERT) (("" (INST 1 "rho!1") (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (DECOMPOSE-EQUALITY 1) (("" (COPY -1) (("" (EXPAND "link_of_frst_diff" -1) (("" (LIFT-IF) (("" (PROP) (("1" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "comp" 2) (("1" (REPLACE -2 2 RL) (("1" (REPLACE -1 2) (("1" (LEMMA "unifiable_terms_unifiable_args") (("1" (INST -1 "rho!1" "s!1" "t!1" "p!1") (("1" (ASSERT) (("1" (LEMMA "unifiable_terms_unifiable_args") (("1" (INST -1 "rho!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -5 2)) (("1" (EXPAND* "member" "U" "unifier") (("1" (EXPAND "ext" -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "comp" 3) (("2" (REPLACE -1 3 RL) (("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED "x!1") (("2" (EXPAND "V") (("2" (EXPAND "ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 1) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (REPLACES -3) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "member" "U" "unifiable") (("2" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("3" (DECOMPOSE-EQUALITY -2) (("3" (INST -1 "x!1") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "comp" 3) (("1" (REPLACE -2 3 RL) (("1" (REPLACE -1 3) (("1" (LEMMA "unifiable_terms_unifiable_args") (("1" (INST -1 "rho!1" "s!1" "t!1" "p!1") (("1" (ASSERT) (("1" (LEMMA "unifiable_terms_unifiable_args") (("1" (INST -1 "rho!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -6 3)) (("1" (EXPAND* "member" "U" "unifier") (("1" (EXPAND "ext" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND COMP 4) (("2" (REPLACE -1 4 RL) (("2" (HIDE-ALL-BUT 4) (("2" (TYPEPRED "x!1") (("2" (EXPAND V) (("2" (EXPAND "ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -3 1 2) (("4" (LEMMA "unifiable_implies_not_fail1") (("4" (INST?) (("4" (REPLACES -3) (("4" (ASSERT) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "member" "U" "unifiable") (("2" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-3 1 2)) (("5" (LEMMA "first_diff_unifiable_vars") (("5" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("5" (INST -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("5" (ASSERT) (("5" (HIDE (-1 2 3)) (("5" (LEMMA "unifiable_terms_unifiable_args") (("5" (INST -1 "rho!1" "s!1" "t!1" "p!1") (("5" (ASSERT) (("5" (EXPAND* "member" "U" "unifiable") (("5" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|preserving_generality1-1| |nil| 3510536726 ("" (SKOSIMP) (("" (ASSERT) (("" (INST 1 RHO!1) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (DECOMPOSE-EQUALITY 1) (("" (COPY -1) (("" (EXPAND LINK_OF_FRST_DIFF -1) (("" (LIFT-IF) (("" (PROP) (("1" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 X!1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND COMP 2) (("1" (REPLACE -2 2 RL) (("1" (REPLACE -1 2) (("1" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("1" (INST -1 RHO!1 S!1 T!1 P!1) (("1" (ASSERT) (("1" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("1" (INST -1 "rho!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -5 2)) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (EXPAND EXT -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND COMP 3) (("2" (REPLACE -1 3 RL) (("2" (HIDE-ALL-BUT 3) (("2" (TYPEPRED X!1) (("2" (EXPAND V) (("2" (EXPAND EXT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 1) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (REPLACES -3) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "member" "U" "unifiable") (("2" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("3" (DECOMPOSE-EQUALITY -2) (("3" (INST -1 X!1) (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND COMP 3) (("1" (REPLACE -2 3 RL) (("1" (REPLACE -1 3) (("1" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("1" (INST -1 RHO!1 S!1 T!1 P!1) (("1" (ASSERT) (("1" (LEMMA UNIFIABLE_TERMS_UNIFIABLE_ARGS) (("1" (INST -1 "rho!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -6 3)) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (EXPAND EXT -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND COMP 4) (("2" (REPLACE -1 4 RL) (("2" (HIDE-ALL-BUT 4) (("2" (TYPEPRED X!1) (("2" (EXPAND V) (("2" (EXPAND EXT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1 -3 1 2) (("4" (LEMMA "unifiable_implies_not_fail1") (("4" (INST?) (("4" (REPLACES -3) (("4" (ASSERT) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND* "member" "U" "unifiable") (("2" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-3 1 2)) (("5" (LEMMA FIRST_DIFF_UNIFIABLE_VARS) (("5" (NAME-REPLACE "p!2" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("5" (INST -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2") (("5" (ASSERT) (("5" (HIDE (-1 2 3)) (("5" (LEMMA "unifiable_terms_unifiable_args") (("5" (INST -1 "rho!1" "s!1" "t!1" "p!1") (("5" (ASSERT) (("5" (EXPAND* "member" "U" "unifiable") (("5" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|first_diff_unifiable_vars| FORMULA-DECL NIL |robinsonunification| NIL) (|p!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|unifiable_terms_unifiable_args| FORMULA-DECL NIL |unification| NIL) (|p!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|comp| CONST-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK)) (|unifiable_preserves_unifiability1| 0 (|unifiable_preserves_unifiability1-2| "" 3884987622 ("" (SKOSIMP) (("" (ASSERT) (("" (PROP) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1))") (("" (LEMMA "preserving_generality") (("" (EXPAND "unifiable" -2) (("" (SKOSIMP) (("" (INST -1 "sigma!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)") (("" (LEMMA "unifiable_terms_unifiable_args") (("" (INST?) (("" (EXPAND* "member" "U") (("" (ASSERT) (("" (SKOSIMP) (("" (EXPAND "unifiable") (("" (REVEAL -3) (("" (REPLACES -1) (("" (INST 1 "theta!1") (("" (HIDE -1) (("" (EXPAND "unifier") (("" (REPLACES -1) (("" (REWRITE "ext_o") (("" (EXPAND "o") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|unifiable_preserves_unifiability1-1| |nil| 3510434111 ("" (SKOSIMP) (("" (ASSERT) (("" (PROP) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1))") (("" (LEMMA PRESERVING_GENERALITY) (("" (EXPAND UNIFIABLE -2) (("" (SKOSIMP) (("" (INST -1 "sigma!1" "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)") (("" (LEMMA "unifiable_terms_unifiable_args") (("" (INST?) (("" (EXPAND* "member" "U") (("" (ASSERT) (("" (SKOSIMP) (("" (EXPAND UNIFIABLE) (("" (REVEAL -3) (("" (REPLACES -1) (("" (INST 1 THETA!1) (("" (HIDE -1) (("" (EXPAND UNIFIER) (("" (REPLACES -1) (("" (REWRITE EXT_O) (("" (EXPAND O) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (O CONST-DECL "T3" |function_props| NIL) (|ext_o| FORMULA-DECL NIL |substitution| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (|member| CONST-DECL "bool" |sets| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|unifiable_terms_unifiable_args| FORMULA-DECL NIL |unification| NIL) (|preserving_generality| FORMULA-DECL NIL |robinsonunification| NIL)) SHOSTAK)) (|dom_ruaEF_subset_union_vars_aux| 0 (|dom_ruaEF_subset_union_vars_aux-3| "" 3884988447 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                            Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND "robinson_unification_algorithm_aux" 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND* "subset?" "union" "member") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND "Dom") (("1" (FLATTEN) (("1" (EXPAND "identity") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)") (("2" (LEMMA "robinson_unification_algorithm_aux_tcc8") (("2" (INST -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "subset?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (EXPAND* "restrict" "union") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (HIDE 2) (("1" (EXPAND "singleton") (("1" (EXPAND "Vars") (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (REPLACE -3 -5 RL) (("1" (HIDE-ALL-BUT (-2 -5 1)) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "restrict" "union") (("2" (EXPAND "member") (("2" (FLATTEN) (("2" (HIDE (1 2)) (("2" (EXPAND "singleton") (("2" (EXPAND "Vars") (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (REPLACE -3 -4 RL) (("2" (HIDE-ALL-BUT (-2 -4 1)) (("2" (INST 1 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (REPLACES -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -6 1)) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (INST -3 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -5) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND "subset?") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* "union" "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -4 -1) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (LEMMA "unifiable_preserves_unifiability1") (("4" (INST?) (("4" (REPLACE -3) (("4" (ASSERT) (("4" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))") (("1" (CASE "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -2 -7 2)) (("1" (NAME-REPLACE "RU" "robinson_unification_algorithm_aux(ext(sig!1)(x!1),
                                                                                                    ext(sig!1)(x!2),
                                                                                                    np)") (("1" (CASE "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "dom_o") (("1" (INST?) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP*) (("2" (INST -2 "x!4") (("2" (INST -3 "x!4") (("2" (INST -4 "x!4") (("2" (ASSERT) (("2" (HIDE (1 3)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -6 -7 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (IFF) (("1" (PROP) (("1" (HIDE (-1 -4)) (("1" (EXPAND* "restrict" "singleton") (("1" (LEMMA "position_s_first_diff") (("1" (INST?) (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 (-4 -5) RL) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (EXPAND* "union" "member") (("1" (FLATTEN) (("1" (EXPAND "Vars" 1) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (IFF) (("2" (PROP) (("2" (HIDE (-1 -3)) (("2" (EXPAND* "restrict" "singleton") (("2" (LEMMA "position_t_first_diff") (("2" (INST?) (("2" (INST -1 "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 -4 RL) (("2" (HIDE-ALL-BUT (-4 2)) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (EXPAND "Vars" 2) (("2" (INST 2 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 2 3)) (("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST?) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!1" "sig!1") (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!2" "sig!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|dom_ruaEF_subset_union_vars_aux-2| "" 3803848142 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                            Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND* SUBSET? UNION MEMBER) (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND DOM) (("1" (FLATTEN) (("1" (EXPAND IDENTITY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3 "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "subset?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (EXPAND* "restrict" "union") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (HIDE 2) (("1" (EXPAND "singleton") (("1" (EXPAND "Vars") (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (REPLACE -3 -5 RL) (("1" (HIDE-ALL-BUT (-2 -5 1)) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "restrict" "union") (("2" (EXPAND "member") (("2" (FLATTEN) (("2" (HIDE (1 2)) (("2" (EXPAND "singleton") (("2" (EXPAND "Vars") (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (REPLACE -3 -4 RL) (("2" (HIDE-ALL-BUT (-2 -4 1)) (("2" (INST 1 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (REPLACES -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -6 1)) (("1" (EXPAND SUBSET?) (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (INST -3 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -5) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND "subset?") (("2" (SKOSIMP) (("2" (INST -1 X!4) (("2" (INST -2 X!4) (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* UNION MEMBER) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -4 -1) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (LEMMA "unifiable_preserves_unifiability1") (("4" (INST?) (("4" (REPLACE -3) (("4" (ASSERT) (("4" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))") (("1" (CASE "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -2 -7 2)) (("1" (NAME-REPLACE "RU" "robinson_unification_algorithm_aux(ext(sig!1)(x!1),
                                                                                                    ext(sig!1)(x!2),
                                                                                                    np)") (("1" (CASE "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "dom_o") (("1" (INST?) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP*) (("2" (INST -2 "x!4") (("2" (INST -3 "x!4") (("2" (INST -4 "x!4") (("2" (ASSERT) (("2" (HIDE (1 3)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -6 -7 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (IFF) (("1" (PROP) (("1" (HIDE (-1 -4)) (("1" (EXPAND* "restrict" "singleton") (("1" (LEMMA "position_s_first_diff") (("1" (INST?) (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 (-4 -5) RL) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (EXPAND* "union" "member") (("1" (FLATTEN) (("1" (EXPAND "Vars" 1) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (IFF) (("2" (PROP) (("2" (HIDE (-1 -3)) (("2" (EXPAND* "restrict" "singleton") (("2" (LEMMA "position_t_first_diff") (("2" (INST?) (("2" (INST -1 "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 -4 RL) (("2" (HIDE-ALL-BUT (-4 2)) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (EXPAND "Vars" 2) (("2" (INST 2 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 2 3)) (("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST?) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!1" "sig!1") (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!2" "sig!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ((|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|identity| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|robinson_unification_algorithm_aux_TCC8| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[term[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|dom_o| FORMULA-DECL NIL |substitution| NIL) (|vars_ext_link_s_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vars_ext_link_t_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifiable_preserves_unifiability1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC12| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|dom_ruaEF_subset_union_vars_aux-1| |nil| 3510458363 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                          Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND* SUBSET? UNION MEMBER) (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND DOM) (("1" (FLATTEN) (("1" (EXPAND IDENTITY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (REPLACES -2) (("1" (EXPAND "subset?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (EXPAND* "restrict" "union") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (HIDE 2) (("1" (EXPAND "singleton") (("1" (EXPAND "Vars") (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (REPLACE -3 -5 RL) (("1" (HIDE-ALL-BUT (-2 -5 1)) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "restrict" "union") (("2" (EXPAND "member") (("2" (FLATTEN) (("2" (HIDE (1 2)) (("2" (EXPAND "singleton") (("2" (EXPAND "Vars") (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (REPLACE -3 -4 RL) (("2" (HIDE-ALL-BUT (-2 -4 1)) (("2" (INST 1 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (REPLACES -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -6 1)) (("1" (EXPAND SUBSET?) (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (INST -3 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -5) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND "subset?") (("2" (SKOSIMP) (("2" (INST -1 X!4) (("2" (INST -2 X!4) (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* UNION MEMBER) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -4 -1) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (LEMMA "unifiable_preserves_unifiability1") (("4" (INST?) (("4" (REPLACE -3) (("4" (ASSERT) (("4" (CASE "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))") (("1" (CASE "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE-ALL-BUT (-1 -2 -7 2)) (("1" (NAME-REPLACE "RU" "robinson_unification_algorithm_aux(ext(sig!1)(x!1),
                                                                                      ext(sig!1)(x!2),
                                                                                      np)") (("1" (CASE "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))") (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "dom_o") (("1" (INST?) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP*) (("1" (INST -1 "x!4") (("1" (INST -2 "x!4") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP*) (("2" (INST -2 "x!4") (("2" (INST -3 "x!4") (("2" (INST -4 "x!4") (("2" (ASSERT) (("2" (HIDE (1 3)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -6 -7 2 3)) (("2" (LEMMA "dom_link_of_frst_diff_is") (("2" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("2" (REPLACE -3) (("2" (ASSERT) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (EXPAND* "subset?" "member") (("1" (SKOSIMP) (("1" (INST -1 "x!4") (("1" (IFF) (("1" (PROP) (("1" (HIDE (-1 -4)) (("1" (EXPAND* "restrict" "singleton") (("1" (LEMMA "position_s_first_diff") (("1" (INST?) (("1" (INST -1 "p!1") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 (-4 -5) RL) (("1" (HIDE-ALL-BUT (-4 -5 1)) (("1" (EXPAND* "union" "member") (("1" (FLATTEN) (("1" (EXPAND "Vars" 1) (("1" (INST 1 "x!3 o p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (IFF) (("2" (PROP) (("2" (HIDE (-1 -3)) (("2" (EXPAND* "restrict" "singleton") (("2" (LEMMA "position_t_first_diff") (("2" (INST?) (("2" (INST -1 "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "pos_subterm") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 -4 RL) (("2" (HIDE-ALL-BUT (-4 2)) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (EXPAND "Vars" 2) (("2" (INST 2 "x!3 o p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 2 3)) (("2" (LEMMA "vars_ext_link_s_subset") (("2" (INST?) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND* "subset?" "member") (("2" (SKOSIMP) (("2" (INST -1 "x!4") (("2" (INST -2 "x!4") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!1" "sig!1") (("2" (LEMMA "ext_preserv_pos") (("2" (INST -1 "x!3 o p!1" "x!2" "sig!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|dom_ruaEF_subset_union_vars| 0 (|dom_ruaEF_subset_union_vars-1| |nil| 3510458932 ("" (SKOSIMP) (("" (ASSERT) (("" (EXPAND "robinson_unification_algorithm_EF") (("" (LEMMA "dom_ruaEF_subset_union_vars_aux") (("" (INST -1 "s!1" "t!1" "empty_seq") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|dom_ruaEF_subset_union_vars_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_EF| CONST-DECL "Sub" |robinsonunificationEF| NIL)) SHOSTAK)) (|vran_ruaEF_subset_union_aux_TCC1| 0 (|vran_ruaEF_subset_union_aux_TCC1-1| |nil| 3510540476 ("" (SKOSIMP*) (("" (TYPEPRED "p!1") (("" (LEMMA "position_s_first_diff") (("" (INST?) (("" (ASSERT) (("" (LEMMA "position_t_first_diff") (("" (INST?) (("" (ASSERT) (("" (LEMMA "pos_o_term") (("" (INST -1 "p!1" "pi!1" "s!1") (("" (LEMMA "pos_o_term") (("" (INST -1 "p!1" "pi!1" "t!1") (("" (ASSERT) (("" (HIDE-ALL-BUT (-1 -2 1)) (("" (LEMMA "ext_preserv_pos") (("" (INST -1 "p!1 o pi!1" "s!1" "sig1!1") (("" (LEMMA "ext_preserv_pos") (("" (INST -1 "p!1 o pi!1" "t!1" "sig1!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL)) NIL (|vran_ruaEF_subset_union_aux| SUBTYPE "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.pi)" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}"))) (|vran_ruaEF_subset_union_aux_TCC2| 0 (|vran_ruaEF_subset_union_aux_TCC2-1| |nil| 3510618083 ("" (SKOSIMP*) (("" (LEMMA "next_position_is_position") (("" (INST -1 "ext(sig1!1)(s!1)" "ext(sig1!1)(t!1)" "p!1 o pi!1") (("" (REPLACE -4 -1 RL) (("" (ASSERT) (("" (LEMMA "next_position_is_position") (("" (INST -1 "ext(sig1!1)(t!1)" "ext(sig1!1)(s!1)" "p!1 o pi!1") (("1" (LEMMA "next_position_commute") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "vran_ruaEF_subset_union_aux_TCC1") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "sig1!1") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vran_ruaEF_subset_union_aux_TCC1| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|sig1!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p!1| SKOLEM-CONST-DECL "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}" |robinsonunificationEF| NIL) (|pi!1| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL)) NIL (|vran_ruaEF_subset_union_aux| SUBTYPE "robinsonunificationEF.np" "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}"))) (|vran_ruaEF_subset_union_aux| 0 (|vran_ruaEF_subset_union_aux-2| "" 3884988784 ("" (SKOSIMP) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "pi!1" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "np!1" "next_position(ext(sig!1)(s!1), ext(sig!1)(t!1), p!1 o pi!1)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(s!1), ext(sig!1)(t!1), np!1)" :HIDE? NIL) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (PROP) (("1" (EXPAND* "subset?" "union" "difference" "member") (("1" (SKOSIMP) (("1" (SPLIT) (("1" (EXPAND* "VRan" "IUnion") (("1" (SKOSIMP) (("1" (EXPAND "comp") (("1" (LEMMA "dom_o") (("1" (INST -1 "sig!2" "sig!1") (("1" (EXPAND* "subset?" "union" "member") (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "Dom(sig!1)(i!1)") (("1" (LEMMA "dom_ruaEF_subset_union_vars_aux") (("1" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (LEMMA "unifiable_preserves_unifiability1") (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (REPLACE -8) (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (INST -2 "i!1") (("1" (EXPAND* "union" "member") (("1" (SPLIT) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "i!1" "s!1" "t!1" "p!1") (("1" (REPLACE -9) (("1" (ASSERT) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (REPLACE -10) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "i!1" "s!1" "t!1" "p!1") (("2" (REPLACE -9) (("2" (ASSERT) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "V") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-4 -10 2)) (("2" (INST 1 "i!1") (("2" (EXPAND "ext") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT member(x!1, Vars(sig!1(i!1)))") (("1" (LEMMA "var_ext_term_exists_var_term") (("1" (INST -1 "sig!1(i!1)" "sig!2" "x!1") (("1" (EXPAND "member") (("1" (SKOSIMP) (("1" (TYPEPRED "y!1") (("1" (CASE "Dom(sig!2)(y!1)") (("1" (INST 3 "y!1") NIL NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1) (("2" (EXPAND "Vars" -4) (("2" (SKOSIMP) (("2" (CASE "p!2 = empty_seq") (("1" (REPLACE -1) (("1" (EXPAND " subtermOF" -5) (("1" (REWRITE "empty_0" -5) (("1" (REPLACE -5 -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (CASE "positionsOF(y!1) = only_empty_seq") (("1" (REPLACE -1 -2) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND* "V" "positionsOF") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "VRan" "IUnion") (("2" (SKOSIMP) (("2" (LEMMA "dom_o") (("2" (INST -1 "sig!2" "sig!1") (("2" (EXPAND* "subset?" "union" "member") (("2" (INST -1 "i!1") (("2" (ASSERT) (("2" (SPLIT) (("1" (CASE "NOT Dom(sig!1)(i!1)") (("1" (EXPAND "Dom" 1) (("1" (FLATTEN) (("1" (EXPAND "comp") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-2 -9 1)) (("1" (TYPEPRED "i!1") (("1" (HIDE -2) (("1" (EXPAND* "V" "ext") (("1" (ASSERT) (("1" (INST 1 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_ruaEF_subset_union_vars_aux") (("2" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1") (("2" (ASSERT) (("2" (REPLACE -5) (("2" (LEMMA "unifiable_preserves_unifiability1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -9) (("2" (ASSERT) (("2" (EXPAND* "subset?" "union" "member") (("2" (INST -2 "i!1") (("2" (ASSERT) (("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "i!1" "s!1" "t!1" "p!1") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -11) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "var_ext_term_exists_var_term") (("2" (EXPAND "comp" -9) (("2" (INST -1 "sig!1(i!1)" "sig!2" "x!1") (("2" (EXPAND "member") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "Dom(sig!2)(y!1)") (("1" (INST 1 "y!1") NIL NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1 -3) (("2" (EXPAND "Vars" -3) (("2" (SKOSIMP) (("2" (CASE "p!2 = empty_seq") (("1" (REPLACE -1 -4) (("1" (EXPAND "subtermOF" -4) (("1" (REWRITE "empty_0" -4) (("1" (EXPAND "Dom" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (CASE "positionsOF(y!1) = only_empty_seq") (("1" (REPLACE -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "y!1") (("2" (EXPAND* "V" "positionsOF") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 2) (("2" (LEMMA "robinson_unification_algorithm_aux_TCC11") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "sig!1") (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "np!1") (("2" (ASSERT) (("2" (PROP) (("1" (REPLACE -1 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "union") (("3" (FLATTEN) (("3" (HIDE (1 3 4)) (("3" (EXPAND* "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "union") (("3" (FLATTEN) (("3" (HIDE-ALL-BUT 2) (("3" (EXPAND* "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 2) (("2" (LEMMA "robinson_unification_algorithm_aux_TCC10") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "sig!1") (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACES -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|vran_ruaEF_subset_union_aux-1| |nil| 3510540476 ("" (SKOSIMP) (("" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "pi!1" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :HIDE? NIL) (("" (NAME-REPLACE "np!1" "next_position(ext(sig!1)(s!1), ext(sig!1)(t!1), p!1 o pi!1)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(s!1), ext(sig!1)(t!1), np!1)" :HIDE? NIL) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (PROP) (("1" (EXPAND* "subset?" "union" "difference" "member") (("1" (SKOSIMP) (("1" (SPLIT) (("1" (EXPAND* "VRan" "IUnion") (("1" (SKOSIMP) (("1" (EXPAND "comp") (("1" (LEMMA "dom_o") (("1" (INST -1 "sig!2" "sig!1") (("1" (EXPAND* "subset?" "union" "member") (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "Dom(sig!1)(i!1)") (("1" (LEMMA "dom_ruaEF_subset_union_vars_aux") (("1" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (LEMMA "unifiable_preserves_unifiability1") (("1" (INST -1 S!1 T!1 P!1) (("1" (REPLACE -8) (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (INST -2 "i!1") (("1" (EXPAND* "union" "member") (("1" (SPLIT) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "i!1" "s!1" "t!1" "p!1") (("1" (REPLACE -9) (("1" (ASSERT) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "s!1" "t!1" "p!1") (("1" (REPLACE -10) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "i!1" "s!1" "t!1" "p!1") (("2" (REPLACE -9) (("2" (ASSERT) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "V") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-4 -10 2)) (("2" (INST 1 "i!1") (("2" (EXPAND "ext") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT member(x!1, Vars(sig!1(i!1)))") (("1" (LEMMA "var_ext_term_exists_var_term") (("1" (INST -1 "sig!1(i!1)" "sig!2" "x!1") (("1" (EXPAND "member") (("1" (SKOSIMP) (("1" (TYPEPRED "y!1") (("1" (CASE "Dom(sig!2)(y!1)") (("1" (INST 3 "y!1") NIL NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1) (("2" (EXPAND "Vars" -4) (("2" (SKOSIMP) (("2" (CASE "p!2 = empty_seq") (("1" (REPLACE -1) (("1" (EXPAND " subtermOF" -5) (("1" (REWRITE "empty_0" -5) (("1" (REPLACE -5 -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (CASE "positionsOF(y!1) = only_empty_seq") (("1" (REPLACE -1 -2) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND* "V" "positionsOF") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "VRan" "IUnion") (("2" (SKOSIMP) (("2" (LEMMA "dom_o") (("2" (INST -1 "sig!2" "sig!1") (("2" (EXPAND* "subset?" "union" "member") (("2" (INST -1 "i!1") (("2" (ASSERT) (("2" (SPLIT) (("1" (CASE "NOT Dom(sig!1)(i!1)") (("1" (EXPAND "Dom" 1) (("1" (FLATTEN) (("1" (EXPAND "comp") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-2 -9 1)) (("1" (TYPEPRED "i!1") (("1" (HIDE -2) (("1" (EXPAND* "V" "ext") (("1" (ASSERT) (("1" (INST 1 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_ruaEF_subset_union_vars_aux") (("2" (INST -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "np!1") (("2" (ASSERT) (("2" (REPLACE -5) (("2" (LEMMA "unifiable_preserves_unifiability1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -9) (("2" (ASSERT) (("2" (EXPAND* "subset?" "union" "member") (("2" (INST -2 "i!1") (("2" (ASSERT) (("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "i!1" "s!1" "t!1" "p!1") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST -1 "s!1" "t!1" "p!1") (("2" (REPLACE -11) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "var_ext_term_exists_var_term") (("2" (EXPAND "comp" -9) (("2" (INST -1 "sig!1(i!1)" "sig!2" "x!1") (("2" (EXPAND "member") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (CASE "Dom(sig!2)(y!1)") (("1" (INST 1 "y!1") NIL NIL) ("2" (EXPAND "Dom" 1) (("2" (FLATTEN) (("2" (REPLACE -1 -3) (("2" (EXPAND "Vars" -3) (("2" (SKOSIMP) (("2" (CASE "p!2 = empty_seq") (("1" (REPLACE -1 -4) (("1" (EXPAND "subtermOF" -4) (("1" (REWRITE "empty_0" -4) (("1" (EXPAND "Dom" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (CASE "positionsOF(y!1) = only_empty_seq") (("1" (REPLACE -1) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "y!1") (("2" (EXPAND* "V" "positionsOF") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 2) (("2" (LEMMA "robinson_unification_algorithm_aux_TCC11") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "sig!1") (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "np!1") (("2" (ASSERT) (("2" (PROP) (("1" (REPLACE -1 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "union") (("3" (FLATTEN) (("3" (HIDE (1 3 4)) (("3" (EXPAND* "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "only_empty_seq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "only_empty_seq") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "union") (("3" (FLATTEN) (("3" (HIDE-ALL-BUT 2) (("3" (EXPAND* "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 2) (("2" (LEMMA "robinson_unification_algorithm_aux_TCC10") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "sig!1") (("2" (LEMMA "unifiable_implies_not_fail1") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACES -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|robinson_unification_algorithm_aux_TCC11| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|dom_o| FORMULA-DECL NIL |substitution| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|sig!2| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "(V)" |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|var_ext_term_exists_var_term| FORMULA-DECL NIL |robinsonunification| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|i!1| SKOLEM-CONST-DECL "{x | Dom[variable, symbol, arity](comp(sig!2, sig!1))(x)}" |robinsonunificationEF| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|ext_link_remove_x| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifiable_preserves_unifiability1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|dom_ruaEF_subset_union_vars_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|comp| CONST-DECL "term" |substitution| NIL) (|VRan| CONST-DECL "set[(V)]" |substitution| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|y!1| SKOLEM-CONST-DECL "(V)" |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC10| SUBTYPE-TCC NIL |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL)) SHOSTAK)) (|dom_ran_ruaEF_disjoint| 0 (|dom_ran_ruaEF_disjoint-3| "" 3884989815 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                              Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND "robinson_unification_algorithm_aux" 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND* "member" "VRan" "IUnion") (("1" (SKOSIMP) (("1" (TYPEPRED "i!1") (("1" (HIDE (-1 -3)) (("1" (EXPAND* "Dom" "identity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!1" "x!2" "next_position(x!1, x!2, x!3)") (("2" (LEMMA "robinson_unification_algorithm_aux_TCC8") (("2" (INST -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "VRan" "difference") (("2" (EXPAND "member") (("2" (EXPAND "IUnion") (("2" (SKOSIMP*) (("2" (EXPAND "union") (("2" (EXPAND "member") (("2" (PROP) (("1" (EXPAND "Vars") (("1" (SKOSIMP*) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -7) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "i!1") (("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!4") (("2" (EXPAND "V") (("2" (COPY -4) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -6) (("2" (LIFT-IF) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!4") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "member") (("1" (REPLACE -2 1) (("1" (REPLACE -1 1 RL) (("1" (TYPEPRED "i!1") (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -10 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "x!4") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "member") (("1" (HIDE -3) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7 -1) (("1" (REPLACE -8 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (REPLACE -1) (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (HIDE -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (EXPAND* "subset?" "difference" "union" "member") (("3" (SKOSIMP) (("3" (INST -6 "x!4") (("3" (ASSERT) (("3" (PROP) (("1" (LEMMA "vars_ext_link_s_subset") (("1" (INST?) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND* "subset?" "member") (("1" (INST -1 "x!4") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (EXPAND* "subset?" "member") (("2" (INST -1 "x!4") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA "robinson_unification_algorithm_aux_tcc12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -5) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -1) (("4" (LEMMA "unifiable_preserves_unifiability1") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* "subset?" "difference" "union" "member") (("4" (SKOSIMP) (("4" (LEMMA "vran_ruaef_subset_union_aux") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (REPLACE -7) (("4" (REPLACE -6) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -3) (("4" (EXPAND "subset?") (("4" (INST -1 "x!4") (("4" (EXPAND* "difference" "union" "member") (("4" (PROP) (("1" (INST -8 "x!4") (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -7 1 5)) (("1" (LEMMA "vars_ext_link_s_subset") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) (("1" (EXPAND "subset?") (("1" (INST -1 "x!4") (("1" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 2 5)) (("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -3) (("2" (ASSERT) (("2" (EXPAND "subset?") (("2" (INST -1 "x!4") (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "x!4") (("2" (ASSERT) (("2" (PROP) (("1" (LEMMA "dom_o") (("1" (INST -1 "sig!2" "sig!1") (("1" (EXPAND "subset?") (("1" (INST -1 "x!4") (("1" (EXPAND* "union" "member") (("1" (ASSERT) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!4" "x!1" "x!2" "x!3") (("1" (REPLACE -10) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_o") (("2" (INST -1 "sig!2" "sig!1") (("2" (EXPAND "subset?") (("2" (INST -1 "x!4") (("2" (EXPAND* "union" "member") (("2" (ASSERT) (("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "x!4" "x!1" "x!2" "x!3") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "dom_link_of_frst_diff_is") (("3" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("3" (ASSERT) (("3" (REPLACE -7) (("3" (EXPAND* "restrict" "singleton") (("3" (EXPAND "VRan" -2) (("3" (EXPAND "IUnion") (("3" (SKOSIMP) (("3" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -8 -3 RL) (("1" (EXPAND "link_of_frst_diff" -3) (("1" (REPLACE -9) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -11) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -7 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -8) (("1" (CASE "vars?(subtermOF(subtermOF(x!2, x!3), p!1))") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -10 1 2)) (("2" (LEMMA "first_diff_unifiable_vars") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "unifiable") (("2" (SKOSIMP*) (("2" (INST 1 "sigma!1") (("2" (LEMMA "unifiable_terms_unifiable_args") (("2" (INST -1 "sigma!1" "x!1" "x!2" "x!3") (("2" (EXPAND* "member" "U") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "dom_o") (("4" (INST -1 "sig!2" "sig!1") (("4" (EXPAND "subset?") (("4" (INST -1 "x!4") (("4" (EXPAND "member") (("4" (ASSERT) (("4" (EXPAND* "union" "member") (("4" (HIDE-ALL-BUT (-1 -3 -8 3 4)) (("4" (LEMMA "dom_ran_link_disjoint") (("4" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* "VRan" "IUnion") (("4" (SKOSIMP) (("4" (INST -1 "x!4" "sig!1(i!1)") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND* "member" "Ran") (("2" (INST 1 "i!1") (("2" (TYPEPRED "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE "finite_union") (("1" (REWRITE "vars_of_term_finite") NIL NIL) ("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|dom_ran_ruaEF_disjoint-2| "" 3803849894 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                              Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND "robinson_unification_algorithm_aux" 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND* "member" "VRan" "IUnion") (("1" (SKOSIMP) (("1" (TYPEPRED "i!1") (("1" (HIDE (-1 -3)) (("1" (EXPAND* "Dom" "identity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA "robinson_unification_algorithm_aux_TCC8") (("2" (INST -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "VRan" "difference") (("2" (EXPAND "member") (("2" (EXPAND "IUnion") (("2" (SKOSIMP*) (("2" (EXPAND "union") (("2" (EXPAND "member") (("2" (PROP) (("1" (EXPAND "Vars") (("1" (SKOSIMP*) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -7) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "i!1") (("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!4") (("2" (EXPAND "V") (("2" (COPY -4) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -6) (("2" (LIFT-IF) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!4") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "member") (("1" (REPLACE -2 1) (("1" (REPLACE -1 1 RL) (("1" (TYPEPRED "i!1") (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -10 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "x!4") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "member") (("1" (HIDE -3) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7 -1) (("1" (REPLACE -8 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (REPLACE -1) (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (HIDE -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (EXPAND* "subset?" "difference" "union" "member") (("3" (SKOSIMP) (("3" (INST -6 "x!4") (("3" (ASSERT) (("3" (PROP) (("1" (LEMMA "vars_ext_link_s_subset") (("1" (INST?) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND* "subset?" "member") (("1" (INST -1 "x!4") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (EXPAND* "subset?" "member") (("2" (INST -1 "x!4") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" NP) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -1) (("4" (LEMMA UNIFIABLE_PRESERVES_UNIFIABILITY1) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* SUBSET? DIFFERENCE UNION MEMBER) (("4" (SKOSIMP) (("4" (LEMMA VRAN_RUAEF_SUBSET_UNION_AUX) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -7) (("4" (REPLACE -6) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -3) (("4" (EXPAND SUBSET?) (("4" (INST -1 X!4) (("4" (EXPAND* DIFFERENCE UNION MEMBER) (("4" (PROP) (("1" (INST -8 X!4) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -7 1 5)) (("1" (LEMMA VARS_EXT_LINK_S_SUBSET) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (EXPAND SUBSET?) (("1" (INST -1 X!4) (("1" (EXPAND* UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 2 5)) (("2" (LEMMA VARS_EXT_LINK_T_SUBSET) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (INST -1 X!4) (("2" (EXPAND* UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "x!4") (("2" (ASSERT) (("2" (PROP) (("1" (LEMMA "dom_o") (("1" (INST -1 "sig!2" "sig!1") (("1" (EXPAND "subset?") (("1" (INST -1 "x!4") (("1" (EXPAND* "union" "member") (("1" (ASSERT) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!4" "x!1" "x!2" "x!3") (("1" (REPLACE -10) (("1" (ASSERT) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_o") (("2" (INST -1 "sig!2" "sig!1") (("2" (EXPAND "subset?") (("2" (INST -1 "x!4") (("2" (EXPAND* "union" "member") (("2" (ASSERT) (("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "x!4" "x!1" "x!2" "x!3") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "dom_link_of_frst_diff_is") (("3" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("3" (ASSERT) (("3" (REPLACE -7) (("3" (EXPAND* "restrict" "singleton") (("3" (EXPAND "VRan" -2) (("3" (EXPAND "IUnion") (("3" (SKOSIMP) (("3" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -8 -3 RL) (("1" (EXPAND "link_of_frst_diff" -3) (("1" (REPLACE -9) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -11) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -7 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -8) (("1" (CASE "vars?(subtermOF(subtermOF(x!2, x!3), p!1))") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -10 1 2)) (("2" (LEMMA "first_diff_unifiable_vars") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "unifiable") (("2" (SKOSIMP*) (("2" (INST 1 "sigma!1") (("2" (LEMMA "unifiable_terms_unifiable_args") (("2" (INST -1 "sigma!1" "x!1" "x!2" "x!3") (("2" (EXPAND* "member" "U") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "dom_o") (("4" (INST -1 "sig!2" "sig!1") (("4" (EXPAND "subset?") (("4" (INST -1 "x!4") (("4" (EXPAND "member") (("4" (ASSERT) (("4" (EXPAND* "union" "member") (("4" (HIDE-ALL-BUT (-1 -3 -8 3 4)) (("4" (LEMMA "dom_ran_link_disjoint") (("4" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* "VRan" "IUnion") (("4" (SKOSIMP) (("4" (INST -1 "x!4" "sig!1(i!1)") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND* "member" "Ran") (("2" (INST 1 "i!1") (("2" (TYPEPRED "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ((|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|identity| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|robinson_unification_algorithm_aux_TCC8| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|vran_ruaEF_subset_union_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|dom_o| FORMULA-DECL NIL |substitution| NIL) (|ext_link_remove_x| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vars?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|first_diff_unifiable_vars| FORMULA-DECL NIL |robinsonunification| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|unifiable_terms_unifiable_args| FORMULA-DECL NIL |unification| NIL) (|i!1| SKOLEM-CONST-DECL "{x | Dom[variable, symbol, arity](sig!1)(x)}" |robinsonunificationEF| NIL) (|Ran| CONST-DECL "set[term[variable, symbol, arity]]" |substitution| NIL) (|x!4| SKOLEM-CONST-DECL "(V[variable, symbol, arity])" |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|dom_ran_link_disjoint| FORMULA-DECL NIL |robinsonunification| NIL) (|robinson_unification_algorithm_aux_TCC12| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|unifiable_preserves_unifiability1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vars_ext_link_s_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|vars_ext_link_t_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|dom_link_of_frst_diff_is| FORMULA-DECL NIL |robinsonunification| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[term[variable, symbol, arity]]" |robinsonunificationEF| NIL) (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]" |restrict_set_props| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|VRan| CONST-DECL "set[(V)]" |substitution| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|dom_ran_ruaEF_disjoint-1| |nil| 3510565835 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                            Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (EXPAND "robinson_unification_algorithm_aux" 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3) (("1" (EXPAND "subset?") (("1" (SKOSIMP) (("1" (HIDE-ALL-BUT -2) (("1" (EXPAND* "member" "VRan" "IUnion") (("1" (SKOSIMP) (("1" (TYPEPRED "i!1") (("1" (HIDE (-1 -3)) (("1" (EXPAND* "Dom" "identity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA "robinson_unification_algorithm_aux_TCC8") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (INST -1 "next_position(x!1, x!2, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 -6 2)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1 2 3)) (("2" (EXPAND "subset?") (("2" (SKOSIMP*) (("2" (EXPAND "member") (("2" (EXPAND* "VRan" "difference") (("2" (EXPAND "member") (("2" (EXPAND "IUnion") (("2" (SKOSIMP*) (("2" (EXPAND "union") (("2" (EXPAND "member") (("2" (PROP) (("1" (EXPAND "Vars") (("1" (SKOSIMP*) (("1" (EXPAND "link_of_frst_diff") (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -7) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "i!1") (("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "p!2") (("1" (REPLACE -3 - RL) (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -6 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!4") (("2" (EXPAND "V") (("2" (COPY -4) (("2" (EXPAND "link_of_frst_diff" -1) (("2" (REPLACE -6) (("2" (LIFT-IF) (("2" (PROP) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "x!4") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "member") (("1" (REPLACE -2 1) (("1" (REPLACE -1 1 RL) (("1" (TYPEPRED "i!1") (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -10 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (DECOMPOSE-EQUALITY -1) (("3" (INST -1 "x!4") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "member") (("1" (HIDE -3) (("1" (LEMMA "dom_link_of_frst_diff_is") (("1" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7 -1) (("1" (REPLACE -8 -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (EXPAND* "restrict" "singleton") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Dom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("3" (REPLACE -1) (("3" (LEMMA "robinson_unification_algorithm_aux_TCC12") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (INST -1 "sig!1") (("3" (ASSERT) (("3" (REPLACE -5 -1) (("3" (INST -1 "np") (("3" (ASSERT) (("3" (HIDE -1) (("3" (HIDE -1) (("3" (LEMMA "unifiable_preserves_unifiability1") (("3" (INST?) (("3" (REPLACE -3) (("3" (ASSERT) (("3" (EXPAND* "subset?" "difference" "union" "member") (("3" (SKOSIMP) (("3" (INST -6 "x!4") (("3" (ASSERT) (("3" (PROP) (("1" (LEMMA "vars_ext_link_s_subset") (("1" (INST?) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND* "subset?" "member") (("1" (INST -1 "x!4") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vars_ext_link_t_subset") (("2" (INST?) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (EXPAND* "subset?" "member") (("2" (INST -1 "x!4") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND* "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" NP) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -1) (("4" (LEMMA UNIFIABLE_PRESERVES_UNIFIABILITY1) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* SUBSET? DIFFERENCE UNION MEMBER) (("4" (SKOSIMP) (("4" (LEMMA VRAN_RUAEF_SUBSET_UNION_AUX) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -7) (("4" (REPLACE -6) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -3) (("4" (EXPAND SUBSET?) (("4" (INST -1 X!4) (("4" (EXPAND* DIFFERENCE UNION MEMBER) (("4" (PROP) (("1" (INST -8 X!4) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -7 1 5)) (("1" (LEMMA VARS_EXT_LINK_S_SUBSET) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (EXPAND SUBSET?) (("1" (INST -1 X!4) (("1" (EXPAND* UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 2 5)) (("2" (LEMMA VARS_EXT_LINK_T_SUBSET) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (INST -1 X!4) (("2" (EXPAND* UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "x!4") (("2" (ASSERT) (("2" (PROP) (("1" (LEMMA "dom_o") (("1" (INST -1 "sig!2" "sig!1") (("1" (EXPAND "subset?") (("1" (INST -1 "x!4") (("1" (EXPAND* "union" "member") (("1" (ASSERT) (("1" (LEMMA "ext_link_remove_x") (("1" (INST -1 "x!4" "x!1" "x!2" "x!3") (("1" (REPLACE -10) (("1" (ASSERT) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dom_o") (("2" (INST -1 "sig!2" "sig!1") (("2" (EXPAND "subset?") (("2" (INST -1 "x!4") (("2" (EXPAND* "union" "member") (("2" (ASSERT) (("2" (LEMMA "ext_link_remove_x") (("2" (INST -1 "x!4" "x!1" "x!2" "x!3") (("2" (REPLACE -10) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "dom_link_of_frst_diff_is") (("3" (INST -1 "p!1" "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("3" (ASSERT) (("3" (REPLACE -7) (("3" (EXPAND* "restrict" "singleton") (("3" (EXPAND "VRan" -2) (("3" (EXPAND "IUnion") (("3" (SKOSIMP) (("3" (PROP) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -8 -3 RL) (("1" (EXPAND "link_of_frst_diff" -3) (("1" (REPLACE -9) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_t_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (REPLACE -11) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!2") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "i!1") (("1" (ASSERT) (("1" (REPLACE -7 -2 RL) (("1" (EXPAND "link_of_frst_diff" -2) (("1" (REPLACE -8) (("1" (CASE "vars?(subtermOF(subtermOF(x!2, x!3), p!1))") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "Vars" (-1 3)) (("1" (SKOSIMP) (("1" (TYPEPRED "p!2") (("1" (LEMMA "position_s_first_diff") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 -2 -3 3)) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "p!1" "p!2" "subtermOF(x!1, x!3)") (("1" (ASSERT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p!1 o p!2" "x!1") (("1" (ASSERT) (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -2 -7 RL) (("1" (HIDE-ALL-BUT (-7 1)) (("1" (INST 1 "x!3 o (p!1 o p!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "link_of_frst_diff" -9) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -10 1 2)) (("2" (LEMMA "first_diff_unifiable_vars") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "unifiable") (("2" (SKOSIMP*) (("2" (INST 1 "sigma!1") (("2" (LEMMA "unifiable_terms_unifiable_args") (("2" (INST -1 "sigma!1" "x!1" "x!2" "x!3") (("2" (EXPAND* "member" "U") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 1)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "dom_o") (("4" (INST -1 "sig!2" "sig!1") (("4" (EXPAND "subset?") (("4" (INST -1 "x!4") (("4" (EXPAND "member") (("4" (ASSERT) (("4" (EXPAND* "union" "member") (("4" (HIDE-ALL-BUT (-1 -3 -8 3 4)) (("4" (LEMMA "dom_ran_link_disjoint") (("4" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("4" (REPLACE -4) (("4" (ASSERT) (("4" (EXPAND* "VRan" "IUnion") (("4" (SKOSIMP) (("4" (INST -1 "x!4" "sig!1(i!1)") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND* "member" "Ran") (("2" (INST 1 "i!1") (("2" (TYPEPRED "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 3)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!1") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "p!1") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "p!1" "x!2") (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) (("2" (LEMMA "finite_sets[position].finite_subset") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_sets[position].finite_subset") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_sets[position].finite_subset") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (LEMMA "right_pos_subset") (("8" (INST?) (("8" (LEMMA "positions_of_terms_finite") (("8" (INST?) (("8" (LEMMA "finite_sets[position].finite_subset") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_sets[position].finite_subset") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL) ("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|ruaEF_fails_iff_non_unifiable_aux_TCC1| 0 (|ruaEF_fails_iff_non_unifiable_aux_TCC1-2| "" 3884989835 ("" (SKOSIMP*) (("" (HIDE -1) (("" (LEMMA "app_term") (("" (INST -1 "p!1" "p1!1" "s!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|ruaEF_fails_iff_non_unifiable_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|ruaEF_fails_iff_non_unifiable_aux_TCC1-1| |nil| 3514128796 ("" (SKOSIMP*) (("" (HIDE -1) (("" (LEMMA APP_TERM) (("" (INST -1 P!1 P1!1 S!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL)) NIL (|ruaEF_fails_iff_non_unifiable_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|ruaEF_fails_iff_non_unifiable_aux_TCC2| 0 (|ruaEF_fails_iff_non_unifiable_aux_TCC2-2| "" 3884989849 ("" (SKOSIMP*) (("" (HIDE -1) (("" (LEMMA "app_term") (("" (INST -1 "p!1" "p1!1" "t!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|ruaEF_fails_iff_non_unifiable_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")) (|ruaEF_fails_iff_non_unifiable_aux_TCC2-1| |nil| 3514128796 ("" (SKOSIMP*) (("" (HIDE -1) (("" (LEMMA APP_TERM) (("" (INST -1 P!1 P1!1 T!1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL)) NIL (|ruaEF_fails_iff_non_unifiable_aux| SUBTYPE "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)" "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)"))) (|ruaEF_fails_iff_non_unifiable_aux| 0 (|ruaEF_fails_iff_non_unifiable_aux-4| "" 3884992057 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SPLIT) (("1" (PROP) (("1" (EXPAND "robinson_unification_algorithm_aux" 2) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4 -5 -6 1) (("1" (REPLACES -1) (("1" (EXPAND "subtermOF") (("1" (REWRITE "empty_0") (("1" (EXPAND* "unifiable" "unifier") (("1" (INST 1 "identity") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "iden_subs") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA "next_pos_empty_equal_subterm") (("2" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (SPLIT) (("1" (LEMMA "equal_term") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* "unifiable" "unifier") (("1" (INST 1 "identity") (("1" (REWRITE "iden_subs") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (INST -3 "x!1" "x!2" "np") (("2" (LEMMA "robinson_unification_algorithm_aux_tcc8") (("2" (INST -1 "x!1" "x!2" "x!3" "np") (("2" (ASSERT) (("2" (HIDE -1) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA "next_pos_equal_subterm") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (EXPAND "next_position") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA "child_np_child_p") (("2" (INST -1 "x!1" "x!2" "x!3" "p1!1") (("2" (REPLACE -3) (("2" (INST -6 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -6) (("1" (LEMMA "np_p_o_fd_empty_unifiable_term") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* "unifiable" "unifier") (("1" (INST 1 "sig!1") NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("2" (LEMMA "robinson_unification_algorithm_aux_tcc12") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (INST -1 "sig!1") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (INST -1 "np") (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND* "unifiable" "unifier") (("1" (SKOSIMP) (("1" (INST 1 "comp(sigma!1, sig!1)") (("1" (REWRITE "ext_O") (("1" (EXPAND "o") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE "subs_o") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "np_p_o_fd_equal_subterm") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -5 2 3) (("3" (SKOSIMP) (("3" (LEMMA "child_np_child_p") (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND "<=") (("1" (SKOSIMP) (("1" (INST -1 "p1!2") (("1" (SPLIT) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p1!2" "x!1") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p1!2" "x!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (LEMMA "pos_subterm") (("1" (INST -1 "x!3" "p1!2" "x!2") (("1" (LEMMA "pos_o_term") (("1" (INST -1 "x!3" "p1!2" "x!2") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -5 RL) (("1" (REPLACE -6 -5 RL) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!1") (("2" (INST -2 "p1!3") (("2" (INST -3 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("1" (LEMMA "empty_0[posnat]") (("1" (INST -1 "p1!3") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE "empty_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!3") (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 -9 1 5)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACE -4 -5) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "x!3" "p1!2 o p1!3" "x!2") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA "pos_ax") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -7 1 5)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACES -2) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "x!3" "p1!2 o p1!3" "x!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (LEMMA "pos_ax") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACE -1 -2) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "x!3" "fd" "p1!2 o p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST 1 "p1!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1 5)) (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACES -3) (("2" (LEMMA "pos_subterm_ax") (("2" (INST-CP -1 "x!3" "p1!2 o p1!3" "x!1") (("2" (INST -1 "x!3" "p1!2 o p1!3" "x!2") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (LEMMA "pos_ax") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (LEMMA "pos_ax") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "p1!1") (("1" (SPLIT) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "child" -1) (("2" (SKOSIMP) (("2" (CASE "x!3 = p1!1") (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND <=) (("1" (INST 1 "empty_seq") (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND <=) (("1" (INST 3 "seq!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_length_o[posnat]") (("2" (INST -1 "p1!1" "p1!2" "x!3" "fd") (("2" (ASSERT) (("2" (LEMMA "o_equals_o[posnat]") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND "child") (("2" (INST 4 "seq!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACE -2 -1) (("2" (REWRITE "seq_o_empty") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1 2 6)) (("2" (TYPEPRED "x!3") (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 3) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (HIDE 2 3) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "p1!1" "p1!2" "x!1") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 4) (("2" (LEMMA "next_position_is_position") (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA "next_position_commute") (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 4) (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (PROP) (("2" (LEMMA "dom_ran_ruaef_disjoint") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* "subset?" "difference" "union" "member") (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -2 "xx") (("2" (INST -1 "xx") (("2" (PROP) (("1" (EXPAND "fail") (("1" (EXPAND "Dom") (("1" (FLATTEN) (("1" (HIDE -1 -4) (("1" (REPLACES -1) (("1" (TYPEPRED "xx") (("1" (EXPAND "V") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "fail") (("2" (EXPAND "Dom") (("2" (FLATTEN) (("2" (HIDE -1 -4) (("2" (REPLACES -1) (("2" (TYPEPRED "xx") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "VRan") (("3" (EXPAND "IUnion") (("3" (INST 1 "xx") (("1" (EXPAND "fail") (("1" (HIDE -2) (("1" (EXPAND "Vars") (("1" (INST 1 "#(1)") (("1" (EXPAND "subtermOF") (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (REPLACES -1) (("2" (HIDE 1) (("2" (CASE "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx") (("1" (REPLACES -1) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACES -1) (("1" (EXPAND "subtermOF") (("1" (REWRITE "empty_0") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "rest") (("2" (EXPAND "#") (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "first") (("3" (EXPAND "finseq_appl") (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE -1 -2 +) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 1) (("3" (EXPAND* "union" "IUnion" "member" "only_empty_seq") (("3" (FLATTEN) (("3" (HIDE 1) (("3" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (INST 1 "empty_seq") (("1" (EXPAND "member") (("1" (PROP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "union" "IUnion" "member" "only_empty_seq") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "#" "add_first" "insert?") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "empty_seq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (HIDE -1 -2) (("2" (EXPAND "#") (("2" (DECOMPOSE-EQUALITY -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "Dom") (("2" (EXPAND "fail") (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (TYPEPRED "xx") (("2" (EXPAND "V") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "pos_subterm_ax") (("3" (INST -1 "p1!1" "p1!2" "y!1") (("3" (ASSERT) (("3" (LEMMA "not_var") (("3" (LEMMA "seq_first_rest[posnat]") (("3" (INST -1 "p1!2") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_subset[position]") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_subset[position]") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND "child") (("8" (SKOSIMP) (("8" (LEMMA "pos_subterm_ax") (("8" (INST -1 "p1!1" "p1!2" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA "seq_first_rest[posnat]") (("8" (INST -1 "p1!2") (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "p1!2") (("8" (ASSERT) (("8" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`2, p1!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND "child") (("9" (SKOSIMP) (("9" (LEMMA "pos_subterm_ax") (("9" (INST -1 "p1!1" "p1!2" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA "seq_first_rest[posnat]") (("9" (INST -1 "p1!2") (("9" (LEMMA "empty_0[posnat]") (("9" (INST -1 "p1!2") (("9" (ASSERT) (("9" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`1, p1!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND "child") (("10" (SKOSIMP) (("10" (LEMMA "pos_subterm_ax") (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA "not_var") (("10" (LEMMA "seq_first_rest[posnat]") (("10" (INST -1 "p1!2") (("10" (LEMMA "empty_0[posnat]") (("10" (INST -1 "p1!2") (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND "child") (("11" (SKOSIMP) (("11" (LEMMA "pos_subterm_ax") (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA "not_var") (("11" (LEMMA "seq_first_rest[posnat]") (("11" (INST -1 "p1!2") (("11" (LEMMA "empty_0[posnat]") (("11" (INST -1 "p1!2") (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA "right_pos_subset") (("12" (INST?) (("12" (LEMMA "positions_of_terms_finite") (("12" (INST?) (("12" (LEMMA "finite_subset[position]") (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA "right_pos_subset") (("14" (INST?) (("14" (LEMMA "positions_of_terms_finite") (("14" (INST?) (("14" (LEMMA "finite_subset[position]") (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND "child") (("16" (SKOSIMP) (("16" (LEMMA "pos_subterm_ax") (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA "not_var") (("16" (LEMMA "seq_first_rest[posnat]") (("16" (INST -1 "p1!2") (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "p1!2") (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND "child") (("17" (SKOSIMP) (("17" (LEMMA "pos_subterm_ax") (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA "not_var") (("17" (LEMMA "seq_first_rest[posnat]") (("17" (INST -1 "p1!2") (("17" (LEMMA "empty_0[posnat]") (("17" (INST -1 "p1!2") (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA "right_pos_subset") (("18" (INST?) (("18" (LEMMA "positions_of_terms_finite") (("18" (INST?) (("18" (LEMMA "finite_subset[position]") (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ruaEF_fails_iff_non_unifiable_aux-3| "" 3803852443 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SPLIT) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4 -5 -6 1) (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (ASSERT) NIL NIL) ("2" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (SPLIT) (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (INST -3 X!1 X!2 NP) (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (EXPAND NEXT_POSITION) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (REPLACE -3) (("2" (INST -6 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -6) (("1" (LEMMA NP_P_O_FD_EMPTY_UNIFIABLE_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 SIG!1) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (INST -1 SIG!1) (("2" (ASSERT) (("2" (REPLACE -3) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (SKOSIMP) (("1" (INST 1 "comp(sigma!1, sig!1)") (("1" (REWRITE EXT_O) (("1" (EXPAND O) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE SUBS_O) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -5 2 3) (("3" (SKOSIMP) (("3" (LEMMA CHILD_NP_CHILD_P) (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -5 RL) (("1" (REPLACE -6 -5 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (INST -2 P1!3) (("2" (INST -3 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 -9 1 5)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -4 -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -7 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -3) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!1) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 P1!1) (("1" (SPLIT) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND CHILD -1) (("2" (SKOSIMP) (("2" (CASE "x!3 = p1!1") (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND <=) (("1" (INST 1 EMPTY_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND <=) (("1" (INST 3 SEQ!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P1!2 X!3 FD) (("2" (ASSERT) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (INST 4 SEQ!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACE -2 -1) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1 2 6)) (("2" (TYPEPRED X!3) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (HIDE 2 3) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!1) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 4) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 4) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (PROP) (("2" (LEMMA DOM_RAN_RUAEF_DISJOINT) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* SUBSET? DIFFERENCE UNION MEMBER) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -2 XX) (("2" (INST -1 XX) (("2" (PROP) (("1" (EXPAND FAIL) (("1" (EXPAND DOM) (("1" (FLATTEN) (("1" (HIDE -1 -4) (("1" (REPLACES -1) (("1" (TYPEPRED XX) (("1" (EXPAND V) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND FAIL) (("2" (EXPAND DOM) (("2" (FLATTEN) (("2" (HIDE -1 -4) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND VRAN) (("3" (EXPAND IUNION) (("3" (INST 1 XX) (("1" (EXPAND FAIL) (("1" (HIDE -2) (("1" (EXPAND VARS) (("1" (INST 1 "#(1)") (("1" (EXPAND SUBTERMOF) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (REPLACES -1) (("2" (HIDE 1) (("2" (CASE "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx") (("1" (REPLACES -1) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND REST) (("2" (EXPAND "#") (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE -1 -2 +) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 1) (("3" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) (("3" (FLATTEN) (("3" (HIDE 1) (("3" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (INST 1 EMPTY_SEQ) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "#" ADD_FIRST INSERT?) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (HIDE -1 -2) (("2" (EXPAND "#") (("2" (DECOMPOSE-EQUALITY -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND DOM) (("2" (EXPAND FAIL) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA RIGHT_POS_SUBSET) (("6" (INST?) (("6" (LEMMA POSITIONS_OF_TERMS_FINITE) (("6" (INST?) (("6" (LEMMA FINITE_SUBSET[POSITION]) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND CHILD) (("8" (SKOSIMP) (("8" (LEMMA POS_SUBTERM_AX) (("8" (INST -1 "p1!1" "p1!2" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA SEQ_FIRST_REST[POSNAT]) (("8" (INST -1 P1!2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P1!2) (("8" (ASSERT) (("8" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`2, p1!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND CHILD) (("9" (SKOSIMP) (("9" (LEMMA POS_SUBTERM_AX) (("9" (INST -1 "p1!1" "p1!2" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA SEQ_FIRST_REST[POSNAT]) (("9" (INST -1 P1!2) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 P1!2) (("9" (ASSERT) (("9" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`1, p1!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND CHILD) (("10" (SKOSIMP) (("10" (LEMMA POS_SUBTERM_AX) (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA NOT_VAR) (("10" (LEMMA SEQ_FIRST_REST[POSNAT]) (("10" (INST -1 P1!2) (("10" (LEMMA EMPTY_0[POSNAT]) (("10" (INST -1 P1!2) (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND CHILD) (("11" (SKOSIMP) (("11" (LEMMA POS_SUBTERM_AX) (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA NOT_VAR) (("11" (LEMMA SEQ_FIRST_REST[POSNAT]) (("11" (INST -1 P1!2) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 P1!2) (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA RIGHT_POS_SUBSET) (("14" (INST?) (("14" (LEMMA POSITIONS_OF_TERMS_FINITE) (("14" (INST?) (("14" (LEMMA FINITE_SUBSET[POSITION]) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|np_p_o_fd_empty_unifiable_term| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC12| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|sigma!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|comp| CONST-DECL "term" |substitution| NIL) (O CONST-DECL "T3" |function_props| NIL) (|ext_o| FORMULA-DECL NIL |substitution| NIL) (|subs_o| FORMULA-DECL NIL |substitution| NIL) (|np_p_o_fd_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}" |robinsonunificationEF| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|fd_equal_symbol| FORMULA-DECL NIL |robinsonunification| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|ext_preserve_symbol| FORMULA-DECL NIL |substitution| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|p1!3| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (<= CONST-DECL "bool" |positions| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|fd| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|equal_term| FORMULA-DECL NIL |subterm| NIL) (|next_pos_empty_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (|iden_subs| FORMULA-DECL NIL |substitution| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|identity| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|child_np_child_p| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|next_pos_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC8| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|VRan| CONST-DECL "set[(V)]" |substitution| NIL) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|args| ADT-ACCESSOR-DECL "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]" |term_adt| NIL) (|app| ADT-CONSTRUCTOR-DECL "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" |term_adt| NIL) (|ff| CONST-DECL "{f: symbol | arity(f) = 1}" |robinsonunification| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto?| NONEMPTY-TYPE-EQ-DECL NIL |IUnion_extra| NIL) (|add_first| CONST-DECL "finseq" |seq_extras| |structures|) (|insert?| CONST-DECL "finseq" |seq_extras| |structures|) (|catenate| CONST-DECL "positions" |positions| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL) (|Dom| CONST-DECL "set[(V)]" |substitution| NIL) (|xx| CONST-DECL "(V)" |robinsonunification| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|dom_ran_ruaEF_disjoint| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|fail| CONST-DECL "Sub" |robinsonunification| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|ruaEF_fails_iff_non_unifiable_aux-2| |nil| 3512383964 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                               Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SPLIT) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4 -5 -6 1) (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (ASSERT) NIL NIL) ("2" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (SPLIT) (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (INST -3 X!1 X!2 NP) (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (EXPAND NEXT_POSITION) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (REPLACE -3) (("2" (INST -6 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -6) (("1" (LEMMA NP_P_O_FD_EMPTY_UNIFIABLE_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 SIG!1) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (INST -1 SIG!1) (("2" (ASSERT) (("2" (REPLACE -3) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (SKOSIMP) (("1" (INST 1 "comp(sigma!1, sig!1)") (("1" (REWRITE EXT_O) (("1" (EXPAND O) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE SUBS_O) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -5 2 3) (("3" (SKOSIMP) (("3" (LEMMA CHILD_NP_CHILD_P) (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -6) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -5 RL) (("1" (REPLACE -6 -5 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (INST -2 P1!3) (("2" (INST -3 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 -9 1 5)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -4 -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -7 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -3) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!1) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (LEMMA POS_AX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 P1!1) (("1" (SPLIT) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND CHILD -1) (("2" (SKOSIMP) (("2" (CASE "x!3 = p1!1") (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND <=) (("1" (INST 1 EMPTY_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND <=) (("1" (INST 3 SEQ!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P1!2 X!3 FD) (("2" (ASSERT) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (INST 4 SEQ!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACE -2 -1) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1 2 6)) (("2" (TYPEPRED X!3) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (HIDE 2 3) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!1) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 4) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 4) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (PROP) (("2" (LEMMA DOM_RAN_RUAEF_DISJOINT) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* SUBSET? DIFFERENCE UNION MEMBER) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -2 XX) (("2" (INST -1 XX) (("2" (PROP) (("1" (EXPAND FAIL) (("1" (EXPAND DOM) (("1" (FLATTEN) (("1" (HIDE -1 -4) (("1" (REPLACES -1) (("1" (TYPEPRED XX) (("1" (EXPAND V) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND FAIL) (("2" (EXPAND DOM) (("2" (FLATTEN) (("2" (HIDE -1 -4) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND VRAN) (("3" (EXPAND IUNION) (("3" (INST 1 XX) (("1" (EXPAND FAIL) (("1" (HIDE -2) (("1" (EXPAND VARS) (("1" (INST 1 "#(1)") (("1" (EXPAND SUBTERMOF) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (REPLACES -1) (("2" (HIDE 1) (("2" (CASE "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx") (("1" (REPLACES -1) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND REST) (("2" (EXPAND "#") (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE -1 -2 +) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 1) (("3" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) (("3" (FLATTEN) (("3" (HIDE 1) (("3" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (INST 1 EMPTY_SEQ) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "#" ADD_FIRST INSERT?) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (HIDE -1 -2) (("2" (EXPAND "#") (("2" (DECOMPOSE-EQUALITY -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND DOM) (("2" (EXPAND FAIL) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA RIGHT_POS_SUBSET) (("6" (INST?) (("6" (LEMMA POSITIONS_OF_TERMS_FINITE) (("6" (INST?) (("6" (LEMMA FINITE_SUBSET[POSITION]) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND CHILD) (("8" (SKOSIMP) (("8" (LEMMA POS_SUBTERM_AX) (("8" (INST -1 "p11!1" "p1!1" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA SEQ_FIRST_REST[POSNAT]) (("8" (INST -1 P1!1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P1!1) (("8" (ASSERT) (("8" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`2, p11!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND CHILD) (("9" (SKOSIMP) (("9" (LEMMA POS_SUBTERM_AX) (("9" (INST -1 "p11!1" "p1!1" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA SEQ_FIRST_REST[POSNAT]) (("9" (INST -1 P1!1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 P1!1) (("9" (ASSERT) (("9" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`1, p11!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND CHILD) (("10" (SKOSIMP) (("10" (LEMMA POS_SUBTERM_AX) (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA NOT_VAR) (("10" (LEMMA SEQ_FIRST_REST[POSNAT]) (("10" (INST -1 P1!2) (("10" (LEMMA EMPTY_0[POSNAT]) (("10" (INST -1 P1!2) (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND CHILD) (("11" (SKOSIMP) (("11" (LEMMA POS_SUBTERM_AX) (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA NOT_VAR) (("11" (LEMMA SEQ_FIRST_REST[POSNAT]) (("11" (INST -1 P1!2) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 P1!2) (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA RIGHT_POS_SUBSET) (("14" (INST?) (("14" (LEMMA POSITIONS_OF_TERMS_FINITE) (("14" (INST?) (("14" (LEMMA FINITE_SUBSET[POSITION]) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|ruaEF_fails_iff_non_unifiable_aux-1| |nil| 3510658166 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                         Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SPLIT) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -2 -4 -5 -6 1) (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (ASSERT) NIL NIL) ("2" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (SPLIT) (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 IDENTITY) (("1" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (INST -3 X!1 X!2 NP) (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (SPLIT) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (PROP) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 4)) (("2" (REPLACES -1) (("2" (EXPAND* SUBTERMOF UNIFIABLE UNIFIER) (("2" (REWRITE EMPTY_0) (("2" (INST 1 IDENTITY) (("1" (ASSERT) NIL NIL) ("2" (REWRITE IDEN_SUBS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (REPLACE -3) (("2" (INST -6 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -6) (("1" (LEMMA NP_P_O_FD_EMPTY_UNIFIABLE_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (INST 1 SIG!1) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (INST -1 SIG!1) (("2" (ASSERT) (("2" (REPLACE -3) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 6)) (("1" (EXPAND* UNIFIABLE UNIFIER) (("1" (SKOSIMP) (("1" (INST 1 "comp(sigma!1, sig!1)") (("1" (REWRITE EXT_O) (("1" (EXPAND O) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE SUBS_O) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -5) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -5 2 3) (("3" (SKOSIMP) (("3" (LEMMA CHILD_NP_CHILD_P) (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (REPLACE -3) (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -4 -3 RL) (("1" (LEMMA POS_SUBTERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (LEMMA POS_O_TERM) (("1" (INST -1 X!3 P1!2 X!2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -2 -5 RL) (("1" (REPLACE -6 -5 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (INST -2 P1!3) (("2" (INST -3 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("1" (LEMMA EMPTY_0[POSNAT]) (("1" (INST -1 P1!3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -11 1 5)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 -9 1 5)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -4 -5) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (LEMMA POS_O_POS) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -7 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_O_POS) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -1 -2) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2 -3) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 1 5)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACES -3) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!1) (("2" (INST -1 X!3 "p1!2 o p1!3" X!2) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (LEMMA POS_O_POS) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 -2 -4 -5 -6 2) (("2" (LEMMA POS_O_POS) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 P1!1) (("1" (SPLIT) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -6 1 6)) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND CHILD -1) (("2" (SKOSIMP) (("2" (CASE "x!3 = p1!1") (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND <=) (("1" (INST 1 EMPTY_SEQ) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (EXPAND <=) (("1" (INST 3 SEQ!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_LENGTH_O[POSNAT]) (("2" (INST -1 P1!1 P1!2 X!3 FD) (("2" (ASSERT) (("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (INST 4 SEQ!1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACE -2 -1) (("2" (REWRITE SEQ_O_EMPTY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -4 1 2 6)) (("2" (TYPEPRED X!3) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 "x!3" "fd" "x!1") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "p!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (HIDE 2 3) (("2" (LEMMA POS_O_POS) (("2" (INST-CP -1 P1!1 P1!2 X!1) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 4) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 4) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!1) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (PROP) (("2" (LEMMA DOM_RAN_RUAEF_DISJOINT) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* SUBSET? DIFFERENCE UNION MEMBER) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -2 XX) (("2" (INST -1 XX) (("2" (PROP) (("1" (EXPAND FAIL) (("1" (EXPAND DOM) (("1" (FLATTEN) (("1" (HIDE -1 -4) (("1" (REPLACES -1) (("1" (TYPEPRED XX) (("1" (EXPAND V) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND FAIL) (("2" (EXPAND DOM) (("2" (FLATTEN) (("2" (HIDE -1 -4) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND VRAN) (("3" (EXPAND IUNION) (("3" (INST 1 XX) (("1" (EXPAND FAIL) (("1" (HIDE -2) (("1" (EXPAND VARS) (("1" (INST 1 "#(1)") (("1" (EXPAND SUBTERMOF) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -2 1) (("1" (EXPAND "#") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND FINSEQ_APPL) (("2" (REPLACES -1) (("2" (HIDE 1) (("2" (CASE "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx") (("1" (REPLACES -1) (("1" (CASE "rest( #(1)) = empty_seq") (("1" (REPLACES -1) (("1" (EXPAND SUBTERMOF) (("1" (REWRITE EMPTY_0) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND REST) (("2" (EXPAND "#") (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "#") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND FIRST) (("3" (EXPAND FINSEQ_APPL) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (DECOMPOSE-EQUALITY -2) (("2" (HIDE -1 -2 +) (("2" (EXPAND "#") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 1) (("3" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) (("3" (FLATTEN) (("3" (HIDE 1) (("3" (INST 1 1) (("1" (EXPAND CATENATE) (("1" (INST 1 EMPTY_SEQ) (("1" (EXPAND MEMBER) (("1" (PROP) (("1" (EXPAND FINSEQ_APPL) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* UNION IUNION MEMBER ONLY_EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND* "#" ADD_FIRST INSERT?) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (DECOMPOSE-EQUALITY -1) (("2" (HIDE -1 -2) (("2" (EXPAND "#") (("2" (DECOMPOSE-EQUALITY -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND DOM) (("2" (EXPAND FAIL) (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (TYPEPRED XX) (("2" (EXPAND V) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA RIGHT_POS_SUBSET) (("6" (INST?) (("6" (LEMMA POSITIONS_OF_TERMS_FINITE) (("6" (INST?) (("6" (LEMMA FINITE_SUBSET[POSITION]) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND CHILD) (("8" (SKOSIMP) (("8" (LEMMA POS_SUBTERM_AX) (("8" (INST -1 "p11!1" "p1!1" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA SEQ_FIRST_REST[POSNAT]) (("8" (INST -1 P1!1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P1!1) (("8" (ASSERT) (("8" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`2, p11!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND CHILD) (("9" (SKOSIMP) (("9" (LEMMA POS_SUBTERM_AX) (("9" (INST -1 "p11!1" "p1!1" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA SEQ_FIRST_REST[POSNAT]) (("9" (INST -1 P1!1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 P1!1) (("9" (ASSERT) (("9" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`1, p11!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND CHILD) (("10" (SKOSIMP) (("10" (LEMMA POS_SUBTERM_AX) (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA NOT_VAR) (("10" (LEMMA SEQ_FIRST_REST[POSNAT]) (("10" (INST -1 P1!2) (("10" (LEMMA EMPTY_0[POSNAT]) (("10" (INST -1 P1!2) (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND CHILD) (("11" (SKOSIMP) (("11" (LEMMA POS_SUBTERM_AX) (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA NOT_VAR) (("11" (LEMMA SEQ_FIRST_REST[POSNAT]) (("11" (INST -1 P1!2) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 P1!2) (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA RIGHT_POS_SUBSET) (("14" (INST?) (("14" (LEMMA POSITIONS_OF_TERMS_FINITE) (("14" (INST?) (("14" (LEMMA FINITE_SUBSET[POSITION]) (("14" (INST?) (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE 2) (("15" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|ruaEF_gives_unifier_aux| 0 (|ruaEF_gives_unifier_aux-3| "" 3884994956 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (PROP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -4 -5 -6) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "next_position" 1 1) (("1" (HIDE -2) (("1" (REWRITE "subterm_empty_seq") (("1" (REWRITE "subterm_empty_seq") (("1" (EXPAND* "member" "U" "unifier") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -4) (("1" (LEMMA "next_pos_empty_equal_subterm") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "equal_term") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND* "member" "U" "unifier") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "x!1" "x!2" "next_position(x!1, x!2, x!3)") (("2" (LEMMA "robinson_unification_algorithm_aux_tcc8") (("2" (INST -1 "x!1" "x!2" "x!3" "next_position(x!1, x!2, x!3)") (("2" (ASSERT) (("2" (HIDE -1 2) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA "next_pos_equal_subterm") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (ASSERT) (("1" (GROUND) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA "child_np_child_p") (("2" (INST -1 "x!1" "x!2" "x!3" "p1!1") (("2" (ASSERT) (("2" (INST -6 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -6 2)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -7) (("2" (LEMMA "np_p_o_fd_empty_unifiable_term") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -6) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (ASSERT) (("2" (GROUND) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* "member" "U" "unifier") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -7) (("3" (LEMMA "ruaef_fails_iff_non_unifiable_aux") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (ASSERT) (("3" (GROUND) (("3" (EXPAND "robinson_unification_algorithm_aux" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (REPLACE -1) (("4" (LEMMA "robinson_unification_algorithm_aux_tcc12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (REPLACE -5) (("4" (ASSERT) (("4" (REPLACE -4) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -3) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (SPLIT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 2)) (("1" (LEMMA "unifier_o") (("1" (INST -1 "x!1" "sig!2" "x!2" "sig!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 2 7)) (("2" (LEMMA "unifiable_preserves_unifiability1") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA "np_p_o_fd_equal_subterm") (("2" (INST -1 "x!1" "x!2" "x!3") (("2" (REPLACE -5) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -4) (("2" (INST -1 "q!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA "child_np_child_p") (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 "p1!2") (("1" (SPLIT) (("1" (LEMMA "pos_subterm") (("1" (INST-CP -1 "x!3" "p1!2" "x!1") (("1" (INST -1 "x!3" "p1!2" "x!2") (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!3") (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!3") (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!3" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "x!3" "fd" "p1!2 o p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 "p1!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -6 1 7)) (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST-CP -1 "x!3" "p1!2 o p1!3" "x!2") (("2" (INST -1 "x!3" "p1!2 o p1!3" "x!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "p1!2" "p1!3" "subtermOF(x!2, x!3)") (("2" (INST -1 "p1!2" "p1!3" "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "p1!1") (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "p1!1" "p1!2" "x!3" "fd") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 "seq!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 "seq!1") (("1" (REPLACES -3) (("1" (REWRITE "seq_o_empty") (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "x!3" "fd" "p1!1" "p1!2") (("2" (ASSERT) (("2" (INST 4 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -6 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "p1!1" "p1!2" "x!2") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA "next_position_is_position") (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA "next_position_commute") (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (NAME-REPLACE "sig1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* "member" "U" "unifiable" "unifier") (("2" (INST 1 "sig1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "pos_subterm_ax") (("3" (INST -1 "p1!1" "p1!2" "y!1") (("3" (ASSERT) (("3" (LEMMA "not_var") (("3" (LEMMA "seq_first_rest[posnat]") (("3" (INST -1 "p1!2") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_subset[position]") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA "right_pos_subset") (("6" (INST?) (("6" (LEMMA "positions_of_terms_finite") (("6" (INST?) (("6" (LEMMA "finite_subset[position]") (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND "child") (("8" (SKOSIMP) (("8" (LEMMA "pos_subterm_ax") (("8" (INST -1 "p1!1" "p1!2" "x!1`2") (("8" (ASSERT) (("8" (LEMMA "not_var") (("8" (LEMMA "seq_first_rest[posnat]") (("8" (INST -1 "p1!2") (("8" (LEMMA "empty_0[posnat]") (("8" (INST -1 "p1!2") (("8" (ASSERT) (("8" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`2, p1!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND "child") (("9" (SKOSIMP) (("9" (LEMMA "pos_subterm_ax") (("9" (INST -1 "p1!1" "p1!2" "x!1`1") (("9" (ASSERT) (("9" (LEMMA "not_var") (("9" (LEMMA "seq_first_rest[posnat]") (("9" (INST -1 "p1!2") (("9" (LEMMA "empty_0[posnat]") (("9" (INST -1 "p1!2") (("9" (ASSERT) (("9" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`1, p1!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND "child") (("10" (SKOSIMP) (("10" (LEMMA "pos_subterm_ax") (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA "not_var") (("10" (LEMMA "seq_first_rest[posnat]") (("10" (INST -1 "p1!2") (("10" (LEMMA "empty_0[posnat]") (("10" (INST -1 "p1!2") (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND "child") (("11" (SKOSIMP) (("11" (LEMMA "pos_subterm_ax") (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA "not_var") (("11" (LEMMA "seq_first_rest[posnat]") (("11" (INST -1 "p1!2") (("11" (LEMMA "empty_0[posnat]") (("11" (INST -1 "p1!2") (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA "right_pos_subset") (("12" (INST?) (("12" (LEMMA "positions_of_terms_finite") (("12" (INST?) (("12" (LEMMA "finite_subset[position]") (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA "right_pos_subset") (("14" (INST?) (("14" (LEMMA "finite_subset[position]") (("14" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE - 2) (("2" (LEMMA "pos_subterm_ax") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (LEMMA "empty_0[posnat]") (("2" (ASSERT) (("2" (HIDE - 2) (("2" (LEMMA "pos_subterm_ax") (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (LEMMA "empty_0[posnat]") (("2" (LEMMA "right_pos_subset") (("2" (INST?) (("2" (LEMMA "positions_of_terms_finite") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (LEMMA "finite_subset[position]") (("15" (ASSERT) (("15" (HIDE 2) (("15" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND "child") (("16" (SKOSIMP) (("16" (LEMMA "pos_subterm_ax") (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA "not_var") (("16" (LEMMA "seq_first_rest[posnat]") (("16" (INST -1 "p1!2") (("16" (LEMMA "empty_0[posnat]") (("16" (INST -1 "p1!2") (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND "child") (("17" (SKOSIMP) (("17" (LEMMA "pos_subterm_ax") (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA "not_var") (("17" (LEMMA "seq_first_rest[posnat]") (("17" (INST -1 "p1!2") (("17" (LEMMA "empty_0[posnat]") (("17" (INST -1 "p1!2") (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA "right_pos_subset") (("18" (INST?) (("18" (LEMMA "positions_of_terms_finite") (("18" (INST?) (("18" (LEMMA "finite_subset[position]") (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ruaEF_gives_unifier_aux-2| "" 3803854026 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (PROP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -4 -5 -6) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND NEXT_POSITION 1 1) (("1" (HIDE -2) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -4) (("1" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3 "next_position(x!1, x!2, x!3)") (("2" (ASSERT) (("2" (HIDE -1 2) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (ASSERT) (("2" (INST -6 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -6 2)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -7) (("2" (LEMMA NP_P_O_FD_EMPTY_UNIFIABLE_TERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -6) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (ASSERT) (("2" (GROUND) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* MEMBER U UNIFIER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -7) (("3" (LEMMA RUAEF_FAILS_IFF_NON_UNIFIABLE_AUX) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (GROUND) (("3" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (REPLACE -1) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -5) (("4" (ASSERT) (("4" (REPLACE -4) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -3) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (SPLIT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 2)) (("1" (LEMMA UNIFIER_O) (("1" (INST -1 X!1 SIG!2 X!2 SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 2 7)) (("2" (LEMMA UNIFIABLE_PRESERVES_UNIFIABILITY1) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -5) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -4) (("2" (INST -1 Q!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA CHILD_NP_CHILD_P) (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA FD_EQUAL_SYMBOL) (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST-CP -1 X!3 P1!2 X!1) (("1" (INST -1 X!3 P1!2 X!2) (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -6 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!2) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!2 P1!3 "subtermOF(x!2, x!3)") (("2" (INST -1 P1!2 P1!3 "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 P1!1) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 X!3 FD) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 SEQ!1) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 X!3 FD P1!1 P1!2) (("2" (ASSERT) (("2" (INST 4 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -6 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!2) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (NAME-REPLACE "sig1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("2" (INST 1 SIG1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA RIGHT_POS_SUBSET) (("6" (INST?) (("6" (LEMMA POSITIONS_OF_TERMS_FINITE) (("6" (INST?) (("6" (LEMMA FINITE_SUBSET[POSITION]) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND CHILD) (("8" (SKOSIMP) (("8" (LEMMA POS_SUBTERM_AX) (("8" (INST -1 "p1!1" "p1!2" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA SEQ_FIRST_REST[POSNAT]) (("8" (INST -1 P1!2) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P1!2) (("8" (ASSERT) (("8" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`2, p1!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND CHILD) (("9" (SKOSIMP) (("9" (LEMMA POS_SUBTERM_AX) (("9" (INST -1 "p1!1" "p1!2" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA SEQ_FIRST_REST[POSNAT]) (("9" (INST -1 P1!2) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 P1!2) (("9" (ASSERT) (("9" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1`1, p1!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND CHILD) (("10" (SKOSIMP) (("10" (LEMMA POS_SUBTERM_AX) (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA NOT_VAR) (("10" (LEMMA SEQ_FIRST_REST[POSNAT]) (("10" (INST -1 P1!2) (("10" (LEMMA EMPTY_0[POSNAT]) (("10" (INST -1 P1!2) (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND CHILD) (("11" (SKOSIMP) (("11" (LEMMA POS_SUBTERM_AX) (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA NOT_VAR) (("11" (LEMMA SEQ_FIRST_REST[POSNAT]) (("11" (INST -1 P1!2) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 P1!2) (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA RIGHT_POS_SUBSET) (("14" (INST?) (("14" (LEMMA FINITE_SUBSET[POSITION]) (("14" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE - 2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (ASSERT) (("2" (HIDE - 2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (LEMMA RIGHT_POS_SUBSET) (("2" (INST?) (("2" (LEMMA POSITIONS_OF_TERMS_FINITE) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (LEMMA FINITE_SUBSET[POSITION]) (("15" (ASSERT) (("15" (HIDE 2) (("15" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|fd| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC12| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |positions| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (|ext_preserve_symbol| FORMULA-DECL NIL |substitution| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|not_var| FORMULA-DECL NIL |positions| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|fd_equal_symbol| FORMULA-DECL NIL |robinsonunification| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}" |robinsonunificationEF| NIL) (|np_p_o_fd_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifier_o| FORMULA-DECL NIL |unification| NIL) (|unifiable_preserves_unifiability1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|ruaEF_fails_iff_non_unifiable_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|np_p_o_fd_empty_unifiable_term| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (|subterm_empty_seq| FORMULA-DECL NIL |subterm| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|next_pos_empty_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|equal_term| FORMULA-DECL NIL |subterm| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|robinson_unification_algorithm_aux_TCC8| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_pos_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|child_np_child_p| FORMULA-DECL NIL |robinsonunificationEF| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|ruaEF_gives_unifier_aux-1| |nil| 3512386375 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (PROP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -4 -5 -6) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND NEXT_POSITION 1 1) (("1" (HIDE -2) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (REWRITE SUBTERM_EMPTY_SEQ) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -4) (("1" (LEMMA NEXT_POS_EMPTY_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA EQUAL_TERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND* MEMBER U UNIFIER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 X!1 X!2 "next_position(x!1, x!2, x!3)") (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 "next_position(x!1, x!2, x!3)") (("2" (ASSERT) (("2" (HIDE -1 2) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (ASSERT) (("1" (GROUND) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (ASSERT) (("2" (INST -6 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -6 2)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -7) (("2" (LEMMA NP_P_O_FD_EMPTY_UNIFIABLE_TERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -6) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (ASSERT) (("2" (GROUND) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND* MEMBER U UNIFIER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -7) (("3" (LEMMA RUAEF_FAILS_IFF_NON_UNIFIABLE_AUX) (("3" (INST -1 X!1 X!2 X!3) (("3" (ASSERT) (("3" (GROUND) (("3" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (REPLACE -1) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (REPLACE -5) (("4" (ASSERT) (("4" (REPLACE -4) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -3) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (SPLIT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2 2)) (("1" (LEMMA UNIFIER_O) (("1" (INST -1 X!1 SIG!2 X!2 SIG!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 2 7)) (("2" (LEMMA UNIFIABLE_PRESERVES_UNIFIABILITY1) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("2" (INST -1 X!1 X!2 X!3) (("2" (REPLACE -5) (("2" (REPLACE -6) (("2" (ASSERT) (("2" (GROUND) (("2" (REPLACE -4) (("2" (INST -1 Q!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA CHILD_NP_CHILD_P) (("3" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("3" (ASSERT) (("3" (CASE "x!3 <= p1!1") (("1" (LEMMA FD_EQUAL_SYMBOL) (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST-CP -1 X!3 P1!2 X!1) (("1" (INST -1 X!3 P1!2 X!2) (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -8 1 7)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -6 1 7)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!2) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!2 P1!3 "subtermOF(x!2, x!3)") (("2" (INST -1 P1!2 P1!3 "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 P1!1) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -7 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 X!3 FD) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 SEQ!1) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 X!3 FD P1!1 P1!2) (("2" (ASSERT) (("2" (INST 4 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -6 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -5 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!2) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (NAME-REPLACE "sig1" "robinson_unification_algorithm_aux(x!1, x!2, x!3)") (("2" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("2" (INST 1 SIG1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (LEMMA RIGHT_POS_SUBSET) (("6" (INST?) (("6" (LEMMA POSITIONS_OF_TERMS_FINITE) (("6" (INST?) (("6" (LEMMA FINITE_SUBSET[POSITION]) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE - 2) (("8" (SKOSIMP) (("8" (EXPAND CHILD) (("8" (SKOSIMP) (("8" (LEMMA POS_SUBTERM_AX) (("8" (INST -1 "p11!1" "p1!1" "x!1`2") (("8" (ASSERT) (("8" (LEMMA NOT_VAR) (("8" (LEMMA SEQ_FIRST_REST[POSNAT]) (("8" (INST -1 P1!1) (("8" (LEMMA EMPTY_0[POSNAT]) (("8" (INST -1 P1!1) (("8" (ASSERT) (("8" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`2, p11!1)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE - 2) (("9" (SKOSIMP) (("9" (EXPAND CHILD) (("9" (SKOSIMP) (("9" (LEMMA POS_SUBTERM_AX) (("9" (INST -1 "p11!1" "p1!1" "x!1`1") (("9" (ASSERT) (("9" (LEMMA NOT_VAR) (("9" (LEMMA SEQ_FIRST_REST[POSNAT]) (("9" (INST -1 P1!1) (("9" (LEMMA EMPTY_0[POSNAT]) (("9" (INST -1 P1!1) (("9" (ASSERT) (("9" (INST -2 "first(p1!1)" "p1!1" "rest(p1!1)" "subtermOF(x!1`1, p11!1)") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE - 2) (("10" (SKOSIMP) (("10" (EXPAND CHILD) (("10" (SKOSIMP) (("10" (LEMMA POS_SUBTERM_AX) (("10" (INST -1 "p1!1" "p1!2" "y!1`2") (("10" (ASSERT) (("10" (LEMMA NOT_VAR) (("10" (LEMMA SEQ_FIRST_REST[POSNAT]) (("10" (INST -1 P1!2) (("10" (LEMMA EMPTY_0[POSNAT]) (("10" (INST -1 P1!2) (("10" (ASSERT) (("10" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`2, p1!1)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE - 2) (("11" (SKOSIMP) (("11" (EXPAND CHILD) (("11" (SKOSIMP) (("11" (LEMMA POS_SUBTERM_AX) (("11" (INST -1 "p1!1" "p1!2" "y!1`1") (("11" (ASSERT) (("11" (LEMMA NOT_VAR) (("11" (LEMMA SEQ_FIRST_REST[POSNAT]) (("11" (INST -1 P1!2) (("11" (LEMMA EMPTY_0[POSNAT]) (("11" (INST -1 P1!2) (("11" (ASSERT) (("11" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1`1, p1!1)") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE 2) (("14" (LEMMA RIGHT_POS_SUBSET) (("14" (INST?) (("14" (LEMMA FINITE_SUBSET[POSITION]) (("14" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE - 2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (ASSERT) (("2" (HIDE - 2) (("2" (LEMMA POS_SUBTERM_AX) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (LEMMA RIGHT_POS_SUBSET) (("2" (INST?) (("2" (LEMMA POSITIONS_OF_TERMS_FINITE) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (LEMMA FINITE_SUBSET[POSITION]) (("15" (ASSERT) (("15" (HIDE 2) (("15" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE - 2) (("16" (SKOSIMP) (("16" (EXPAND CHILD) (("16" (SKOSIMP) (("16" (LEMMA POS_SUBTERM_AX) (("16" (INST -1 "p1!1" "p1!2" "t!1") (("16" (ASSERT) (("16" (LEMMA NOT_VAR) (("16" (LEMMA SEQ_FIRST_REST[POSNAT]) (("16" (INST -1 P1!2) (("16" (LEMMA EMPTY_0[POSNAT]) (("16" (INST -1 P1!2) (("16" (ASSERT) (("16" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(t!1, p1!1)") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE - 2) (("17" (SKOSIMP) (("17" (EXPAND CHILD) (("17" (SKOSIMP) (("17" (LEMMA POS_SUBTERM_AX) (("17" (INST -1 "p1!1" "p1!2" "s!1") (("17" (ASSERT) (("17" (LEMMA NOT_VAR) (("17" (LEMMA SEQ_FIRST_REST[POSNAT]) (("17" (INST -1 P1!2) (("17" (LEMMA EMPTY_0[POSNAT]) (("17" (INST -1 P1!2) (("17" (ASSERT) (("17" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(s!1, p1!1)") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|ruaEF_gives_mg_subs_aux| 0 (|ruaEF_gives_mg_subs_aux-3| "" 3884996204 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                   Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -3 -4 -5) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "next_position" 1 1) (("1" (HIDE -) (("1" (EXPAND <=) (("1" (INST 1 "rho!1") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "comp") (("1" (EXPAND "identity") (("1" (TYPEPRED "x!4") (("1" (EXPAND* "V" "ext") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND <=) (("1" (INST 1 "rho!1") (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED "x!4") (("1" (EXPAND* "V" "comp" "ext" "identity") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, np)" :HIDE? NIL) (("2" (INST -4 "x!1" "x!2" "np") (("2" (INST -4 "rho!1") (("2" (ASSERT) (("2" (LEMMA "robinson_unification_algorithm_aux_tcc8") (("2" (INST -1 "x!1" "x!2" "x!3" "np") (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA "next_pos_equal_subterm") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (GROUND) (("1" (REPLACE -4) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA "child_np_child_p") (("2" (INST -1 "x!1" "x!2" "x!3" "p1!1") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (INST -7 "p1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -9)) (("1" (LEMMA "unifiable_implies_not_fail1") (("1" (INST -1 "x!1" "x!2" "x!3") (("1" (REPLACE -3) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (EXPAND* "member" "U" "unifiable" "unifier") (("1" (INST 1 "rho!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -9 1 3)) (("2" (LEMMA "preserving_generality1") (("2" (INST -1 "rho!1" "x!1" "x!2" "x!3") (("2" (REPLACE -2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (INST 1 "theta!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6) (("3" (LEMMA "ruaef_fails_iff_non_unifiable_aux") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (GROUND) (("1" (HIDE-ALL-BUT (-9 1)) (("1" (EXPAND* "member" "U" "unifiable" "unifier") (("1" (INST 1 "rho!1") NIL NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA "preserving_generality1") (("4" (INST -1 "rho!1" "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (REPLACE -5) (("4" (SKOSIMP) (("4" (INST -6 "theta!1") (("4" (LEMMA "robinson_unification_algorithm_aux_tcc12") (("4" (INST -1 "x!1" "x!2" "x!3") (("4" (ASSERT) (("4" (INST -1 "sig!1") (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -4) (("4" (INST -1 "np") (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -2) (("4" (GROUND) (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (INST 1 "tau!1") (("1" (REWRITE "o_ass") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 1)) (("2" (EXPAND* "member" "U" "unifier") (("2" (REPLACES -1) (("2" (REWRITE "ext_o") (("2" (EXPAND "o") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA "np_p_o_fd_equal_subterm") (("3" (INST -1 "x!1" "x!2" "x!3") (("3" (REPLACE -6) (("3" (REPLACE -7) (("3" (ASSERT) (("3" (REPLACE -5) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (LEMMA "child_np_child_p") (("4" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("4" (REPLACE -5) (("4" (ASSERT) (("4" (CASE "x!3 <= p1!1") (("1" (HIDE -3 -4 -5 -6 -9 -10 -11 2 3 4) (("1" (LEMMA "fd_equal_symbol") (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 "p1!2") (("1" (SPLIT) (("1" (LEMMA "pos_subterm") (("1" (INST-CP -1 "x!3" "p1!2" "x!1") (("1" (INST -1 "x!3" "p1!2" "x!2") (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!3") (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!3") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!3") (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!3" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!3" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "equal_prefix[posnat]") (("2" (INST -1 "x!3" "fd" "p1!2 o p1!3") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 "p1!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1 4)) (("2" (LEMMA "position_s_first_diff") (("2" (LEMMA "position_t_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST-CP -1 "x!3" "p1!2 o p1!3" "x!2") (("2" (INST -1 "x!3" "p1!2 o p1!3" "x!1") (("2" (REWRITE "o_assoc") (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "p1!2" "p1!3" "subtermOF(x!2, x!3)") (("2" (INST -1 "p1!2" "p1!3" "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "p1!1") (("1" (LEMMA "ext_preserve_symbol") (("1" (INST-CP -1 "x!1" "sig!1" "p1!1") (("1" (INST -1 "x!2" "sig!1" "p1!1") (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA "o_length_o[posnat]") (("1" (INST -1 "p1!1" "p1!2" "x!3" "fd") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 "seq!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 "seq!1") (("1" (REPLACES -3) (("1" (REWRITE "seq_o_empty") (("1" (REWRITE "seq_o_empty") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "o_equals_o[posnat]") (("2" (INST -1 "x!3" "fd" "p1!1" "p1!2") (("2" (ASSERT) (("2" (INST 4 "empty_seq") (("2" (REWRITE "seq_o_empty") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -1) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!2") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!2" "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (HIDE -2) (("2" (LEMMA "pos_o_term") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_ax") (("2" (INST-CP -1 "p1!1" "p1!2" "x!2") (("2" (INST -1 "p1!1" "p1!2" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA "next_position_is_position") (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA "next_position_commute") (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "position_t_first_diff") (("2" (LEMMA "position_s_first_diff") (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED "x!3") (("2" (LEMMA "pos_o_term") (("2" (INST-CP -1 "x!3" "fd" "x!2") (("2" (INST -1 "x!3" "fd" "x!1") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE "ext_preserv_pos") (("2" (REWRITE "ext_preserv_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND "child") (("2" (SKOSIMP) (("2" (LEMMA "pos_subterm_ax") (("2" (INST -1 "p1!1" "p1!2" "y!2") (("2" (ASSERT) (("2" (LEMMA "not_var") (("2" (LEMMA "seq_first_rest[posnat]") (("2" (INST -1 "p1!2") (("2" (LEMMA "empty_0[posnat]") (("2" (INST -1 "p1!2") (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "pos_subterm_ax") (("3" (INST -1 "p1!1" "p1!2" "y!1") (("3" (ASSERT) (("3" (LEMMA "not_var") (("3" (LEMMA "seq_first_rest[posnat]") (("3" (INST -1 "p1!2") (("3" (LEMMA "empty_0[posnat]") (("3" (INST -1 "p1!2") (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA "right_pos_subset") (("4" (INST?) (("4" (LEMMA "positions_of_terms_finite") (("4" (INST?) (("4" (LEMMA "finite_subset[position]") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1 3) (("5" (LEMMA "right_pos_subset") (("5" (INST?) (("5" (LEMMA "positions_of_terms_finite") (("5" (INST?) (("5" (LEMMA "finite_subset[position]") (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 2) (("6" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 1 3) (("7" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKOSIMP) (("8" (LEMMA "app_term") (("8" (INST -1 "y!3" "p1!1" "y!2") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (LEMMA "app_term") (("9" (INST -1 "y!3" "p1!1" "y!1") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA "right_pos_subset") (("10" (INST?) (("10" (LEMMA "positions_of_terms_finite") (("10" (INST?) (("10" (LEMMA "finite_subset[position]") (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA "right_pos_subset") (("12" (INST?) (("12" (LEMMA "positions_of_terms_finite") (("12" (INST?) (("12" (LEMMA "finite_subset[position]") (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (LEMMA "app_term") (("14" (SKOSIMP) (("14" (INST -1 "x!1`3" "p1!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (LEMMA "app_term") (("15" (INST -1 "x!1`3" "p1!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (LEMMA "app_term") (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (LEMMA "app_term") (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA "right_pos_subset") (("18" (INST?) (("18" (LEMMA "positions_of_terms_finite") (("18" (INST?) (("18" (LEMMA "finite_subset[position]") (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA "right_pos_subset") (("20" (INST?) (("20" (LEMMA "positions_of_terms_finite") (("20" (INST?) (("20" (LEMMA "finite_subset[position]") (("20" (INST?) (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE -1 2) (("22" (SKOSIMP) (("22" (LEMMA "app_term") (("22" (INST -1 "p!1" "p1!1" "t!1") (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("23" (HIDE -1 2) (("23" (SKOSIMP) (("23" (LEMMA "app_term") (("23" (INST -1 "p!1" "p1!1" "s!1") (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE - 2 3) (("24" (LEMMA "right_pos_subset") (("24" (INST?) (("24" (LEMMA "positions_of_terms_finite") (("24" (INST?) (("24" (LEMMA "finite_subset[position]") (("24" (INST?) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("25" (HIDE - 2 3) (("25" (REWRITE "finite_union") (("1" (HIDE 2) (("1" (REWRITE "vars_of_term_finite") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "vars_of_term_finite") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ruaEF_gives_mg_subs_aux-2| "" 3803854535 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                   Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -3 -4 -5) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND NEXT_POSITION 1 1) (("1" (HIDE -) (("1" (EXPAND <=) (("1" (INST 1 RHO!1) (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND COMP) (("1" (EXPAND IDENTITY) (("1" (TYPEPRED X!4) (("1" (EXPAND* V EXT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND <=) (("1" (INST 1 RHO!1) (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED X!4) (("1" (EXPAND* V COMP EXT IDENTITY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, np)" :HIDE? NIL) (("2" (INST -4 X!1 X!2 NP) (("2" (INST -4 RHO!1) (("2" (ASSERT) (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (REPLACE -4) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (INST -7 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -9)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("1" (INST 1 RHO!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -9 1 3)) (("2" (LEMMA PRESERVING_GENERALITY1) (("2" (INST -1 RHO!1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (INST 1 THETA!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6) (("3" (LEMMA RUAEF_FAILS_IFF_NON_UNIFIABLE_AUX) (("3" (INST -1 X!1 X!2 X!3) (("3" (GROUND) (("1" (HIDE-ALL-BUT (-9 1)) (("1" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("1" (INST 1 RHO!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA PRESERVING_GENERALITY1) (("4" (INST -1 RHO!1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (SKOSIMP) (("4" (INST -6 THETA!1) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -4) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -2) (("4" (GROUND) (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (INST 1 TAU!1) (("1" (REWRITE O_ASS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 1)) (("2" (EXPAND* MEMBER U UNIFIER) (("2" (REPLACES -1) (("2" (REWRITE EXT_O) (("2" (EXPAND O) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("3" (INST -1 X!1 X!2 X!3) (("3" (REPLACE -6) (("3" (REPLACE -7) (("3" (ASSERT) (("3" (REPLACE -5) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (LEMMA CHILD_NP_CHILD_P) (("4" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("4" (REPLACE -5) (("4" (ASSERT) (("4" (CASE "x!3 <= p1!1") (("1" (HIDE -3 -4 -5 -6 -9 -10 -11 2 3 4) (("1" (LEMMA FD_EQUAL_SYMBOL) (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST-CP -1 X!3 P1!2 X!1) (("1" (INST -1 X!3 P1!2 X!2) (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!2) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!2 P1!3 "subtermOF(x!2, x!3)") (("2" (INST -1 P1!2 P1!3 "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 P1!1) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 X!3 FD) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 SEQ!1) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 X!3 FD P1!1 P1!2) (("2" (ASSERT) (("2" (INST 4 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!2) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1 3) (("5" (LEMMA RIGHT_POS_SUBSET) (("5" (INST?) (("5" (LEMMA POSITIONS_OF_TERMS_FINITE) (("5" (INST?) (("5" (LEMMA FINITE_SUBSET[POSITION]) (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 2) (("6" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 1 3) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKOSIMP) (("8" (LEMMA APP_TERM) (("8" (INST -1 Y!3 P1!1 Y!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (LEMMA APP_TERM) (("9" (INST -1 Y!3 P1!1 Y!1) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA RIGHT_POS_SUBSET) (("10" (INST?) (("10" (LEMMA POSITIONS_OF_TERMS_FINITE) (("10" (INST?) (("10" (LEMMA FINITE_SUBSET[POSITION]) (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (LEMMA APP_TERM) (("14" (SKOSIMP) (("14" (INST -1 "x!1`3" "p1!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (LEMMA APP_TERM) (("15" (INST -1 "x!1`3" "p1!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (LEMMA APP_TERM) (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (LEMMA APP_TERM) (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA RIGHT_POS_SUBSET) (("20" (INST?) (("20" (LEMMA POSITIONS_OF_TERMS_FINITE) (("20" (INST?) (("20" (LEMMA FINITE_SUBSET[POSITION]) (("20" (INST?) (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE -1 2) (("22" (SKOSIMP) (("22" (LEMMA APP_TERM) (("22" (INST -1 P!1 P1!1 T!1) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("23" (HIDE -1 2) (("23" (SKOSIMP) (("23" (LEMMA APP_TERM) (("23" (INST -1 P!1 P1!1 S!1) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE - 2 3) (("24" (LEMMA RIGHT_POS_SUBSET) (("24" (INST?) (("24" (LEMMA POSITIONS_OF_TERMS_FINITE) (("24" (INST?) (("24" (LEMMA FINITE_SUBSET[POSITION]) (("24" (INST?) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("25" (HIDE - 2 3) (("25" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]" |robinsonunificationEF| NIL) (|y!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|app_term| FORMULA-DECL NIL |subterm| NIL) (|vars_of_term_finite| FORMULA-DECL NIL |subterm| NIL) (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|positions_of_terms_finite| FORMULA-DECL NIL |positions| NIL) (|right_pos_subset| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|link_of_frst_diff| CONST-DECL "Sub" |robinsonunification| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|ext_preserv_pos| FORMULA-DECL NIL |substitution| NIL) (|next_position_commute| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|fd| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|next_position_is_position| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|o_ass| FORMULA-DECL NIL |substitution| NIL) (|ext_o| FORMULA-DECL NIL |substitution| NIL) (O CONST-DECL "T3" |function_props| NIL) (|np_p_o_fd_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |positions| NIL) (|fd_equal_symbol| FORMULA-DECL NIL |robinsonunification| NIL) (|p1!2| SKOLEM-CONST-DECL "position[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!3| SKOLEM-CONST-DECL "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}" |robinsonunificationEF| NIL) (|x!2| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|x!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|equal_prefix| FORMULA-DECL NIL |seq_extras| |structures|) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|pos_subterm| FORMULA-DECL NIL |subterm| NIL) (|pos_o_term| FORMULA-DECL NIL |subterm| NIL) (|seq_first_rest| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pos_subterm_ax| FORMULA-DECL NIL |subterm| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|not_var| FORMULA-DECL NIL |positions| NIL) (|position_s_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|position_t_first_diff| FORMULA-DECL NIL |robinsonunification| NIL) (|ext_preserve_symbol| FORMULA-DECL NIL |substitution| NIL) (|pos_ax| FORMULA-DECL NIL |positions| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|o_length_o| FORMULA-DECL NIL |seq_extras| |structures|) (|o_equals_o| FORMULA-DECL NIL |seq_extras| |structures|) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|sig!1| SKOLEM-CONST-DECL "Sub[variable, symbol, arity]" |robinsonunificationEF| NIL) (|p1!1| SKOLEM-CONST-DECL "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}" |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC12| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|ruaEF_fails_iff_non_unifiable_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|preserving_generality1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|unifiable| CONST-DECL "bool" |unification| NIL) (|unifier| CONST-DECL "bool" |unification| NIL) (|unifiable_implies_not_fail1| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|first_diff| DEF-DECL "position" |robinsonunification| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ext| DEF-DECL "term" |substitution| NIL) (|comp| CONST-DECL "term" |substitution| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|identity| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|next_position| DEF-DECL "position" |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux_TCC8| TERMINATION-TCC NIL |robinsonunificationEF| NIL) (|next_pos_equal_subterm| FORMULA-DECL NIL |robinsonunificationEF| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|child_np_child_p| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|robinson_unification_algorithm_aux| DEF-DECL "Sub" |robinsonunificationEF| NIL) (<= CONST-DECL "bool" |unification| NIL) (U CONST-DECL "set[Sub[variable, symbol, arity]]" |unification| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|f| ADT-ACCESSOR-DECL "[(app?) -> symbol]" |term_adt| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|positions?| TYPE-EQ-DECL NIL |positions| NIL) (|subtermOF| DEF-DECL "term" |subterm| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|right_pos| DEF-DECL "positions" |robinsonunificationEF| NIL) (|Vars| CONST-DECL "set[(V)]" |subterm| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|ruaEF_gives_mg_subs_aux-1| |nil| 3512504975 ("" (MEASURE-INDUCT+ "lex2(Card(union(Vars(s), Vars(t))),
                                                   Card(right_pos(s,p)))" ("s" "t" "p")) (("1" (SKOSIMP) (("1" (CASE "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)") (("1" (CASE "x!3 = empty_seq") (("1" (HIDE -3 -4 -5) (("1" (EXPAND "robinson_unification_algorithm_aux") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND NEXT_POSITION 1 1) (("1" (HIDE -) (("1" (EXPAND <=) (("1" (INST 1 RHO!1) (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND COMP) (("1" (EXPAND IDENTITY) (("1" (TYPEPRED X!4) (("1" (EXPAND* V EXT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_aux" 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND <=) (("1" (INST 1 RHO!1) (("1" (DECOMPOSE-EQUALITY) (("1" (TYPEPRED X!4) (("1" (EXPAND* V COMP EXT IDENTITY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "np" "next_position(x!1, x!2, x!3)" :HIDE? NIL) (("2" (NAME-REPLACE "sig!1" "robinson_unification_algorithm_aux(x!1, x!2, np)" :HIDE? NIL) (("2" (INST -4 X!1 X!2 NP) (("2" (INST -4 RHO!1) (("2" (ASSERT) (("2" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC8) (("2" (INST -1 X!1 X!2 X!3) (("2" (ASSERT) (("2" (INST -1 NP) (("2" (ASSERT) (("2" (HIDE -1) (("2" (PROP) (("1" (SKOSIMP) (("1" (LEMMA NEXT_POS_EQUAL_SUBTERM) (("1" (INST -1 X!1 X!2 X!3) (("1" (GROUND) (("1" (REPLACE -4) (("1" (INST -1 Q!1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (LEMMA CHILD_NP_CHILD_P) (("2" (INST -1 X!1 X!2 X!3 P1!1) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (INST -7 P1!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 2) (("2" (ASSERT) (("2" (NAME-REPLACE "sig!1" "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "fd" "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :HIDE? NIL) (("2" (NAME-REPLACE "np" "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)" :HIDE? NIL) (("1" (NAME-REPLACE "sig!2" "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)" :HIDE? NIL) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -5 -9)) (("1" (LEMMA UNIFIABLE_IMPLIES_NOT_FAIL1) (("1" (INST -1 X!1 X!2 X!3) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("1" (INST 1 RHO!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -9 1 3)) (("2" (LEMMA PRESERVING_GENERALITY1) (("2" (INST -1 RHO!1 X!1 X!2 X!3) (("2" (REPLACE -2) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (INST 1 THETA!1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6) (("3" (LEMMA RUAEF_FAILS_IFF_NON_UNIFIABLE_AUX) (("3" (INST -1 X!1 X!2 X!3) (("3" (GROUND) (("1" (HIDE-ALL-BUT (-9 1)) (("1" (EXPAND* MEMBER U UNIFIABLE UNIFIER) (("1" (INST 1 RHO!1) NIL NIL)) NIL)) NIL) ("2" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_AUX 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np") (("4" (LEMMA PRESERVING_GENERALITY1) (("4" (INST -1 RHO!1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (SKOSIMP) (("4" (INST -6 THETA!1) (("4" (LEMMA ROBINSON_UNIFICATION_ALGORITHM_AUX_TCC12) (("4" (INST -1 X!1 X!2 X!3) (("4" (ASSERT) (("4" (INST -1 SIG!1) (("4" (ASSERT) (("4" (REPLACE -5) (("4" (REPLACE -4) (("4" (INST -1 NP) (("4" (ASSERT) (("4" (HIDE -1) (("4" (REPLACE -2) (("4" (GROUND) (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (REPLACES -1) (("1" (INST 1 TAU!1) (("1" (REWRITE O_ASS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -8 1)) (("2" (EXPAND* MEMBER U UNIFIER) (("2" (REPLACES -1) (("2" (REWRITE EXT_O) (("2" (EXPAND O) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (LEMMA NP_P_O_FD_EQUAL_SUBTERM) (("3" (INST -1 X!1 X!2 X!3) (("3" (REPLACE -6) (("3" (REPLACE -7) (("3" (ASSERT) (("3" (REPLACE -5) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (LEMMA CHILD_NP_CHILD_P) (("4" (INST -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd" "p1!1") (("4" (REPLACE -5) (("4" (ASSERT) (("4" (CASE "x!3 <= p1!1") (("1" (HIDE -3 -4 -5 -6 -9 -10 -11 2 3 4) (("1" (LEMMA FD_EQUAL_SYMBOL) (("1" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (EXPAND <=) (("1" (SKOSIMP) (("1" (INST -1 P1!2) (("1" (SPLIT) (("1" (LEMMA POS_SUBTERM) (("1" (INST-CP -1 X!3 P1!2 X!1) (("1" (INST -1 X!3 P1!2 X!2) (("1" (SPLIT) (("1" (SPLIT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (HIDE -1 -2) (("1" (REPLACE -2 -1 RL) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!1, p1!1)") (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -5 1)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!3) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!3) (("2" (ASSERT) (("2" (INST -2 "first(p1!3)" "p1!3" "rest(p1!3)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -6 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (REPLACE -2 1 RL) (("2" (HIDE -2) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 1 4)) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!3 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REPLACES -1) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA EQUAL_PREFIX[POSNAT]) (("2" (INST -1 X!3 FD "p1!2 o p1!3") (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -2) (("2" (INST 1 P1!3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1 4)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" "fd") (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE-ALL-BUT (-1 -2 -7 -8 1)) (("2" (REPLACES -3) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST-CP -1 X!3 "p1!2 o p1!3" X!2) (("2" (INST -1 X!3 "p1!2 o p1!3" X!1) (("2" (REWRITE O_ASSOC) (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!2 P1!3 "subtermOF(x!2, x!3)") (("2" (INST -1 P1!2 P1!3 "subtermOF(x!1, x!3)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 P1!1) (("1" (LEMMA EXT_PRESERVE_SYMBOL) (("1" (INST-CP -1 X!1 SIG!1 P1!1) (("1" (INST -1 X!2 SIG!1 P1!1) (("1" (SPLIT -11) (("1" (SPLIT -2) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!1, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -8 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(x!2, p1!1)") (("2" (ASSERT) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (EXPAND <=) (("2" (CASE "length(x!3) < length(p1!1)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "length(p1!1) < length(x!3)") (("1" (LEMMA O_LENGTH_O[POSNAT]) (("1" (INST -1 P1!1 P1!2 X!3 FD) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST 2 SEQ!1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST 2 SEQ!1) (("1" (REPLACES -3) (("1" (REWRITE SEQ_O_EMPTY) (("1" (REWRITE SEQ_O_EMPTY) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA O_EQUALS_O[POSNAT]) (("2" (INST -1 X!3 FD P1!1 P1!2) (("2" (ASSERT) (("2" (INST 4 EMPTY_SEQ) (("2" (REWRITE SEQ_O_EMPTY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -1) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!2) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (HIDE -2) (("2" (LEMMA POS_O_TERM) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -2 -3 -5 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -6 1 8)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (NAME-REPLACE "q!1" "x!3 o fd") (("2" (HIDE -3 -4 -5 -6 -8 2) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_AX) (("2" (INST-CP -1 P1!1 P1!2 X!2) (("2" (INST -1 P1!1 P1!2 X!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (LEMMA NEXT_POSITION_IS_POSITION) (("2" (INST-CP -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "x!3 o fd") (("2" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (LEMMA NEXT_POSITION_COMMUTE) (("1" (INST -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)" "x!3 o fd") (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA POSITION_T_FIRST_DIFF) (("2" (LEMMA POSITION_S_FIRST_DIFF) (("2" (INST -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (INST -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)" FD) (("2" (ASSERT) (("2" (TYPEPRED X!3) (("2" (LEMMA POS_O_TERM) (("2" (INST-CP -1 X!3 FD X!2) (("2" (INST -1 X!3 FD X!1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE EXT_PRESERV_POS) (("2" (REWRITE EXT_PRESERV_POS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (SKOSIMP) (("2" (EXPAND CHILD) (("2" (SKOSIMP) (("2" (LEMMA POS_SUBTERM_AX) (("2" (INST -1 P1!1 P1!2 Y!2) (("2" (ASSERT) (("2" (LEMMA NOT_VAR) (("2" (LEMMA SEQ_FIRST_REST[POSNAT]) (("2" (INST -1 P1!2) (("2" (LEMMA EMPTY_0[POSNAT]) (("2" (INST -1 P1!2) (("2" (ASSERT) (("2" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!2, p1!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE - 2) (("3" (SKOSIMP) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA POS_SUBTERM_AX) (("3" (INST -1 P1!1 P1!2 Y!1) (("3" (ASSERT) (("3" (LEMMA NOT_VAR) (("3" (LEMMA SEQ_FIRST_REST[POSNAT]) (("3" (INST -1 P1!2) (("3" (LEMMA EMPTY_0[POSNAT]) (("3" (INST -1 P1!2) (("3" (ASSERT) (("3" (INST -2 "first(p1!2)" "p1!2" "rest(p1!2)" "subtermOF(y!1, p1!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA RIGHT_POS_SUBSET) (("4" (INST?) (("4" (LEMMA POSITIONS_OF_TERMS_FINITE) (("4" (INST?) (("4" (LEMMA FINITE_SUBSET[POSITION]) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 1 3) (("5" (LEMMA RIGHT_POS_SUBSET) (("5" (INST?) (("5" (LEMMA POSITIONS_OF_TERMS_FINITE) (("5" (INST?) (("5" (LEMMA FINITE_SUBSET[POSITION]) (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 2) (("6" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE 1 3) (("7" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKOSIMP) (("8" (LEMMA APP_TERM) (("8" (INST -1 Y!3 P1!1 Y!2) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (LEMMA APP_TERM) (("9" (INST -1 Y!3 P1!1 Y!1) (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (LEMMA RIGHT_POS_SUBSET) (("10" (INST?) (("10" (LEMMA POSITIONS_OF_TERMS_FINITE) (("10" (INST?) (("10" (LEMMA FINITE_SUBSET[POSITION]) (("10" (INST?) (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (LEMMA RIGHT_POS_SUBSET) (("12" (INST?) (("12" (LEMMA POSITIONS_OF_TERMS_FINITE) (("12" (INST?) (("12" (LEMMA FINITE_SUBSET[POSITION]) (("12" (INST?) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("13" (HIDE 2) (("13" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (LEMMA APP_TERM) (("14" (SKOSIMP) (("14" (INST -1 "x!1`3" "p11!1" "x!1`2") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKOSIMP) (("15" (LEMMA APP_TERM) (("15" (INST -1 "x!1`3" "p11!1" "x!1`1") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKOSIMP) (("16" (LEMMA APP_TERM) (("16" (INST -1 "y!1`3" "p1!1" "y!1`2") (("16" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKOSIMP) (("17" (LEMMA APP_TERM) (("17" (INST -1 "y!1`3" "p1!1" "y!1`1") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE 2) (("18" (LEMMA RIGHT_POS_SUBSET) (("18" (INST?) (("18" (LEMMA POSITIONS_OF_TERMS_FINITE) (("18" (INST?) (("18" (LEMMA FINITE_SUBSET[POSITION]) (("18" (INST?) (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE 2) (("19" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE 2) (("20" (LEMMA RIGHT_POS_SUBSET) (("20" (INST?) (("20" (LEMMA POSITIONS_OF_TERMS_FINITE) (("20" (INST?) (("20" (LEMMA FINITE_SUBSET[POSITION]) (("20" (INST?) (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("21" (HIDE 2) (("21" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE -1 2) (("22" (SKOSIMP) (("22" (LEMMA APP_TERM) (("22" (INST -1 P!1 P1!1 T!1) (("22" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("23" (HIDE -1 2) (("23" (SKOSIMP) (("23" (LEMMA APP_TERM) (("23" (INST -1 P!1 P1!1 S!1) (("23" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("24" (HIDE - 2 3) (("24" (LEMMA RIGHT_POS_SUBSET) (("24" (INST?) (("24" (LEMMA POSITIONS_OF_TERMS_FINITE) (("24" (INST?) (("24" (LEMMA FINITE_SUBSET[POSITION]) (("24" (INST?) (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("25" (HIDE - 2 3) (("25" (REWRITE FINITE_UNION) (("1" (HIDE 2) (("1" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE VARS_OF_TERM_FINITE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|ruaEF_fails_iff_non_unifiable| 0 (|ruaEF_fails_iff_non_unifiable-1| |nil| 3510675455 ("" (SKOSIMP) (("" (PROP) (("1" (LEMMA "ruaEF_fails_iff_non_unifiable_aux") (("1" (INST -1 "s!1" "t!1" "empty_seq") (("1" (SPLIT) (("1" (EXPAND "robinson_unification_algorithm_EF") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE +) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP*) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST?) (("2" (REWRITE "empty_0") (("2" (REWRITE "empty_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE +) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST?) (("3" (REWRITE "empty_0") (("3" (REWRITE "empty_0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (PROP) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "robinson_unification_algorithm_EF") (("2" (LEMMA "ruaEF_fails_iff_non_unifiable_aux") (("2" (INST?) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST?) (("2" (REWRITE "empty_0") (("2" (REWRITE "empty_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST?) (("3" (REWRITE "empty_0") (("3" (REWRITE "empty_0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|robinson_unification_algorithm_EF| CONST-DECL "Sub" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ruaEF_fails_iff_non_unifiable_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK)) (|ruaEF_gives_unifier| 0 (|ruaEF_gives_unifier-2| "" 3884996435 ("" (SKOSIMP) (("" (LEMMA "ruaef_gives_unifier_aux") (("" (PROP) (("1" (INST -2 "s!1" "t!1" "empty_seq") (("1" (PROP) (("1" (EXPAND "robinson_unification_algorithm_EF") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "s!1" "t!1" "empty_seq") (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_EF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ruaEF_gives_unifier-1| |nil| 3510656703 ("" (SKOSIMP) (("" (LEMMA RUAEF_GIVES_UNIFIER_AUX) (("" (PROP) (("1" (INST -2 S!1 T!1 EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_EF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 S!1 T!1 EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_EF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ruaEF_gives_unifier_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|robinson_unification_algorithm_EF| CONST-DECL "Sub" |robinsonunificationEF| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|ruaEF_gives_mg_subs| 0 (|ruaEF_gives_mg_subs-2| "" 3884996534 ("" (SKOSIMP) (("" (LEMMA "ruaef_gives_mg_subs_aux") (("" (INST -1 "rho!1" "s!1" "t!1" "empty_seq") (("1" (PROP) (("1" (EXPAND "robinson_unification_algorithm_EF") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND "left_without_children") (("2" (SKOSIMP) (("2" (LEMMA "seq_empty[posnat]") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND "child") (("3" (SKOSIMP) (("3" (LEMMA "seq_empty[posnat]") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE "empty_0" -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND "positionsOF") (("1" (LIFT-IF) (("1" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL) ("2" (EXPAND "positionsOF") (("2" (LIFT-IF) (("2" (EXPAND* "only_empty_seq" "union" "member") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|ruaEF_gives_mg_subs-1| |nil| 3508152404 ("" (SKOSIMP) (("" (LEMMA RUAEF_GIVES_MG_SUBS_AUX) (("" (INST -1 RHO!1 S!1 T!1 EMPTY_SEQ) (("1" (PROP) (("1" (EXPAND ROBINSON_UNIFICATION_ALGORITHM_EF) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (HIDE-ALL-BUT -1) (("2" (EXPAND LEFT_WITHOUT_CHILDREN) (("2" (SKOSIMP) (("2" (LEMMA SEQ_EMPTY[POSNAT]) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (HIDE-ALL-BUT -1) (("3" (EXPAND CHILD) (("3" (SKOSIMP) (("3" (LEMMA SEQ_EMPTY[POSNAT]) (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REWRITE EMPTY_0 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SPLIT) (("1" (EXPAND POSITIONSOF) (("1" (LIFT-IF) (("1" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL) ("2" (EXPAND POSITIONSOF) (("2" (LIFT-IF) (("2" (EXPAND* ONLY_EMPTY_SEQ UNION MEMBER) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ruaEF_gives_mg_subs_aux| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|only_empty_seq| CONST-DECL "positions" |positions| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|robinson_unification_algorithm_EF| CONST-DECL "Sub" |robinsonunificationEF| NIL) (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|seq_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|left_without_children| CONST-DECL "bool" |positions| NIL) (|child| CONST-DECL "bool" |positions| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|position| TYPE-EQ-DECL NIL |positions| NIL) (|positions| TYPE-EQ-DECL NIL |positions| NIL) (|positionsOF| DEF-DECL "positions" |positions| NIL) (|s!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|t!1| SKOLEM-CONST-DECL "term[variable, symbol, arity]" |robinsonunificationEF| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)) SHOSTAK)) (|completeness_ruaEF| 0 (|completeness_ruaEF-2| "" 3884996594 ("" (SKOSIMP) (("" (PROP) (("1" (EXPAND "mgu") (("1" (PROP) (("1" (REWRITE "ruaef_gives_unifier") NIL NIL) ("2" (SKOSIMP) (("2" (REWRITE "ruaef_gives_mg_subs") NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ruaef_fails_iff_non_unifiable") (("2" (INST -1 "s!1" "t!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|completeness_ruaEF-1| |nil| 3508152087 ("" (SKOSIMP) (("" (PROP) (("1" (EXPAND MGU) (("1" (PROP) (("1" (REWRITE RUAEF_GIVES_UNIFIER) NIL NIL) ("2" (SKOSIMP) (("2" (REWRITE RUAEF_GIVES_MG_SUBS) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA RUAEF_FAILS_IFF_NON_UNIFIABLE) (("2" (INST -1 S!1 T!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|term| TYPE-DECL NIL |term_adt| NIL) (|arity| FORMAL-CONST-DECL "[symbol -> nat]" |robinsonunificationEF| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|symbol| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|variable| FORMAL-NONEMPTY-TYPE-DECL NIL |robinsonunificationEF| NIL) (|ruaEF_gives_unifier| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|ruaEF_gives_mg_subs| FORMULA-DECL NIL |robinsonunificationEF| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (V CONST-DECL "set[term[variable, symbol, arity]]" |variables_term| NIL) (|Sub?| CONST-DECL "bool" |substitution| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (|mgu| CONST-DECL "bool" |unification| NIL) (|ruaEF_fails_iff_non_unifiable| FORMULA-DECL NIL |robinsonunificationEF| NIL)) SHOSTAK)))
