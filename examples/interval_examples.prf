(|interval_examples|
 (|sqrt23| 0
  (|sqrt23-3| "" 3790356504 ("" (NUMERICAL (! 1 1) :VERBOSE? T) NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK)
  (|sqrt23-2| "" 3790353961 ("" (NUMERICAL (! 1 1) :VERBOSE? T) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK)
  (|sqrt23-1| |nil| 3600857800 ("" (NUMERICAL (! 1 1) :VERBOSE? T) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK))
 (|sin6sqrt2| 0
  (|sin6sqrt2-3| "" 3790356507 ("" (NUMERICAL (! 1 1)) NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK)
  (|sin6sqrt2-2| "" 3790353970 ("" (NUMERICAL (! 1 1)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK)
  (|sin6sqrt2-1| |nil| 3600857800 ("" (NUMERICAL (! 1 1)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK))
 (|sqrtx3_TCC1| 0
  (|sqrtx3_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL (|sqrtx3| SUBTYPE "interval_examples.x" "nonneg_real")))
 (|sqrtx3| 0
  (|sqrtx3-3| "" 3790356510 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|sqrtx3-2| "" 3790353973 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|sqrtx3-1| |nil| 3600857800 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|tr_TCC1| 0
  (|tr_TCC1-2| "" 3885525549 ("" (SKEEP :PREDS? T) (("" (ASSERT) NIL NIL)) NIL)
   NIL SHOSTAK
   (|tr| SUBTYPE "pi_def.pi"
    "{x2: {x1: {x: reals.real | booleans.AND(reals.>(x, 2), booleans.AND(reals.<(x, 4), sincos_def.cos(number_fields./(x, 2)) = 0))} | booleans.AND(reals.<=(pi_def.pi_lb_new, x1), reals.<=(x1, pi_def.pi_ub_new))} | booleans.AND(reals.<(atan_approx.pi_lb, x2), reals.<(x2, atan_approx.pi_ub))}"))
  (|tr_TCC1-1| |nil| 3885521789 ("" (SUBTYPE-TCC) NIL NIL)
   ((|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|))
   NIL
   (|tr| SUBTYPE "pi_def.pi"
    "{x2: {x1: {x: reals.real | booleans.AND(reals.>(x, 2), booleans.AND(reals.<(x, 4), sincos_def.cos(number_fields./(x, 2)) = 0))} | booleans.AND(reals.<=(pi_def.pi_lb_new, x1), reals.<=(x1, pi_def.pi_ub_new))} | booleans.AND(reals.<(atan_approx.pi_lb, x2), reals.<(x2, atan_approx.pi_ub))}")))
 (|tr_TCC2| 0
  (|tr_TCC1-1| |nil| 3600857800
   ("" (SKOSIMP*)
    (("" (REPLACE -1) (("" (HIDE -1) (("" (MULT-CASES -1) NIL NIL)) NIL)) NIL))
    NIL)
   ((|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   NIL
   (|tr| SUBTYPE
    "(number_fields.*(number_fields.*(interval_examples.PI, interval_examples.v), (number_fields./(514, 1000))))"
    "nznum")))
 (|tr_TCC3| 0
  (|tr_TCC2-1| |nil| 3708378650 ("" (SUBTYPE-TCC) NIL NIL)
   ((|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb| CONST-DECL "posreal" |atan_approx| |trig|)
    (|pi_ub| CONST-DECL "posreal" |atan_approx| |trig|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   NIL
   (|tr| SUBTYPE
    "number_fields./((number_fields.*(interval_examples.PI, interval_examples.phi)), 180)"
    "(trig_basic.Tan?)")))
 (|tr_250_35_TCC1| 0
  (|tr_250_35_TCC1-3| "" 3885526135
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "Tan?") (("" (ASSERT) (("" (INTERVAL -9) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK
   (|tr_250_35| SUBTYPE
    "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)"
    "(trig_basic.Tan?)"))
  (|tr_250_35_TCC1-2| "" 3790353975
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "Tan?") (("" (INTERVAL -5) NIL NIL)) NIL)) NIL)
   ((|Tan?| CONST-DECL "bool" |trig_basic| |trig|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|pi_ub| CONST-DECL "posreal" |atan_approx| |trig|)
    (|pi_lb| CONST-DECL "posreal" |atan_approx| |trig|)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|))
   SHOSTAK
   (|tr_250_35| SUBTYPE
    "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)"
    "(trig_basic.Tan?)"))
  (|tr_250_35_TCC1-1| |nil| 3600857800
   ("" (SKEEP :PREDS? T)
    (("" (REPLACES -5) (("" (EXPAND "Tan?") (("" (INTERVAL -5) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|Tan?| CONST-DECL "bool" |trig_basic| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   NIL
   (|tr_250_35| SUBTYPE
    "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)"
    "(trig_basic.Tan?)")))
 (|tr_250_35| 0
  (|tr_250_35-3| "" 3790356516 ("" (INTERVAL) NIL)
   ((|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_ub| CONST-DECL "posreal" |atan_approx| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_lb| CONST-DECL "posreal" |atan_approx| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK)
  (|tr_250_35-2| "" 3790353979 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK)
  (|tr_250_35-1| |nil| 3600857800 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK))
 (|tr_200_250_abs_35| 0
  (|tr_200_250_abs_35-3| "" 3790356527 ("" (THEN (SKEEP) (INTERVAL)) NIL)
   ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|tan| CONST-DECL "real" |trig_basic| |trig|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_ub| CONST-DECL "posreal" |atan_approx| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_lb| CONST-DECL "posreal" |atan_approx| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK)
  (|tr_200_250_abs_35-2| "" 3790353983 ("" (THEN (SKEEP) (INTERVAL)) NIL NIL)
   ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|tan| CONST-DECL "real" |trig_basic| |trig|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK)
  (|tr_200_250_abs_35-1| |nil| 3600857800
   ("" (THEN (SKEEP) (INTERVAL)) NIL NIL)
   ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|pi_safe| CONST-DECL "[Unit -> real]" |interval_expr_trig|
     |interval_arith|)
    (|tan_safe| CONST-DECL "real" |trig_safe_ops| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|tan| CONST-DECL "real" |trig_basic| |trig|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (LETIN ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (letin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|TAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|PI_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|Tan?| CONST-DECL "bool" |trig_basic| |trig|))
   SHOSTAK))
 (G_TCC1 0
  (G_TCC1-1 |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (G SUBTYPE "(number_fields.-)(1, interval_examples.x)" "posreal")))
 (|A_and_S_TCC1| 0
  (|A_and_S_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|A_and_S| SUBTYPE "(number_fields.-)(1, interval_examples.X)" "posreal")))
 (|A_and_S| 0
  (|A_and_S-3| "" 3790356528 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|A_and_S-2| "" 3790353985 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|A_and_S-1| |nil| 3600857800 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|common_point_TCC1| 0
  (|common_point_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|common_point| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (|common_point_TCC2| 0
  (|common_point_TCC2-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|common_point| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples.y /= 0, reals.>=(i, 0))}")))
 (|common_point_TCC3| 0
  (|common_point_TCC3-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|common_point| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.x, 1), number_fields.*(interval_examples.r, sincos_def.cos(interval_examples.theta))) = 0), reals.>=(i, 0))}")))
 (|common_point_TCC4| 0
  (|common_point_TCC4-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|common_point| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.y, 1), number_fields.*(interval_examples.r, sincos_def.sin(interval_examples.theta))) = 0), reals.>=(i, 0))}")))
 (|common_point| 0
  (|common_point-3| "" 3790356533 ("" (INTERVAL :VERBOSE? T) NIL)
   ((|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|))
   SHOSTAK)
  (|common_point-2| "" 3790353990 ("" (INTERVAL :VERBOSE? T) NIL NIL)
   ((|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|))
   SHOSTAK)
  (|common_point-1| |nil| 3600857800 ("" (INTERVAL :VERBOSE? T) NIL NIL)
   ((|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|))
   SHOSTAK))
 (|r_TCC1| 0
  (|r_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|r| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (|r_TCC2| 0
  (|r_TCC2-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|r| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (|atan_implementation| 0
  (|atan_implementation-3| "" 3790356536 ("" (INTERVAL :PRECISION 4) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|ATAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK)
  (|atan_implementation-2| "" 3790353998 ("" (INTERVAL :PRECISION 4) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|ATAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK)
  (|atan_implementation-1| |nil| 3600857800
   ("" (INTERVAL :PRECISION 4) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|ATAN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK))
 (|ex1_ba_TCC1| 0
  (|ex1_ba_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|ex1_ba| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (|ex1_ba_TCC2| 0
  (|ex1_ba_TCC2-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|ex1_ba| SUBTYPE "(number_fields.+)(1, interval_examples.x)" "posreal")))
 (|ex1_ba| 0
  (|ex1_ba-3| "" 3790356538 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex1_ba-2| "" 3790354000 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex1_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|ex2_ba_TCC1| 0
  (|ex2_ba_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|ex2_ba| SUBTYPE "(number_fields.-)(1, interval_examples.x)" "posreal")))
 (|ex2_ba| 0
  (|ex2_ba-3| "" 3790356540 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex2_ba-2| "" 3790354002 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex2_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|ex3_ba_TCC1| 0
  (|ex3_ba_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|ex3_ba| SUBTYPE "(number_fields.-)(1, interval_examples.x)" "posreal")))
 (|ex3_ba| 0
  (|ex3_ba-3| "" 3790356542 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex3_ba-2| "" 3790354004 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex3_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|ex4_ba| 0
  (|ex4_ba-3| "" 3790356544 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex4_ba-2| "" 3790354006 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex4_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|ex5_ba_TCC1| 0
  (|ex5_ba_TCC1-1| |nil| 3600857800 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL
   (|ex5_ba| SUBTYPE "(number_fields.+)(1, interval_examples.x)" "posreal")))
 (|ex5_ba| 0
  (|ex5_ba-3| "" 3790356546 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex5_ba-2| "" 3790354008 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex5_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ln_safe| CONST-DECL "real" |lnexp_safe_ops| |lnexp|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|LN_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|ex6_ba| 0
  (|ex6_ba-3| "" 3790356547 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|ex6_ba-2| "" 3790354009 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|ex6_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|ex7_ba| 0
  (|ex7_ba-3| "" 3790356549 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex7_ba-2| "" 3790354010 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|ex7_ba-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|Tunnel_3_IL| 0
  (|Tunnel_3_IL-3| "" 3790356551 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Tunnel_3_IL-2| "" 3790354012 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Tunnel_3_IL-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Tunnel_3_IL_LU| 0
  (|Tunnel_3_IL_LU-3| "" 3790356553 ("" (INTERVAL) NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Tunnel_3_IL_LU-2| "" 3790354014 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Tunnel_3_IL_LU-1| |nil| 3600857801 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|EXP_n| CONST-DECL "RealExpr" |interval_expr_lnexp| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|max_sin_cos| 0
  (|max_sin_cos-3| "" 3790356554 ("" (INTERVAL) NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MAX CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|max_sin_cos-2| "" 3790354015 ("" (INTERVAL) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MAX CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|max_sin_cos-1| |nil| 3708870709 ("" (INTERVAL) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MAX CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|min_sin_cos| 0
  (|min_sin_cos-3| "" 3790356555 ("" (INTERVAL) NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MIN CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|min_sin_cos-2| "" 3790354016 ("" (INTERVAL) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MIN CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|min_sin_cos-1| |nil| 3708870709 ("" (INTERVAL) NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (div?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|COS_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (|SIN_n| CONST-DECL "RealExpr" |interval_expr_trig| |interval_arith|)
    (MIN CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)))

