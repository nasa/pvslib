(interval_examples (sqrt23 0 (sqrt23-3 "" 3790356504 ("" (numerical (! 1 1) :verbose? t) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list2array def-decl "T" array2list structures) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (real_times_real_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nil application-judgement "above(n)" exp2 nil) (nml_45 skolem-const-decl "(sub?)" interval_examples nil) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types nil) (sqrt_pos application-judgement "posreal" sqrt reals) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_minus_real_is_real application-judgement "real" reals nil) (eval def-decl "real" interval_expr interval_arith) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnreal type-eq-decl nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (< const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak) (sqrt23-2 "" 3790353961 ("" (numerical (! 1 1) :verbose? t) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (sqrt_pos application-judgement "posreal" sqrt reals) (|##| const-decl "bool" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil)) shostak) (sqrt23-1 nil 3600857800 ("" (numerical (! 1 1) :verbose? t) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (sqrt_pos application-judgement "posreal" sqrt reals) (|##| const-decl "bool" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil)) shostak)) (sin6sqrt2 0 (sin6sqrt2-3 "" 3790356507 ("" (numerical (! 1 1)) nil nil) ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list2array def-decl "T" array2list structures) (real_times_real_is_real application-judgement "real" reals nil) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (nml_46 skolem-const-decl "(add?)" interval_examples nil) (sqrt_pos application-judgement "posreal" sqrt reals) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_plus_real_is_real application-judgement "real" reals nil) (eval def-decl "real" interval_expr interval_arith) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (sin const-decl "real" sincos_def trig_fnd) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (nnreal type-eq-decl nil real_types nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak) (sin6sqrt2-2 "" 3790353970 ("" (numerical (! 1 1)) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (|##| const-decl "bool" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (sin const-decl "real" sincos_def trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil)) shostak) (sin6sqrt2-1 nil 3600857800 ("" (numerical (! 1 1)) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (numerical_soundness formula-decl nil numerical_bandb interval_arith) (sound? const-decl "bool" numerical_bandb interval_arith) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (|##| const-decl "bool" interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (sin const-decl "real" sincos_def trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (Interval type-eq-decl nil interval interval_arith) (list type-decl nil list_adt nil) (Box type-eq-decl nil box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith) (ProperBox? const-decl "bool" box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (numerical const-decl "Output" numerical_bandb interval_arith) (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil)) shostak)) (sqrtx3_TCC1 0 (sqrtx3_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) ([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith)) nil (sqrtx3 subtype "interval_examples.x" "nonneg_real"))) (sqrtx3 0 (sqrtx3-3 "" 3790356510 ("" (interval) nil nil) ((nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_47 skolem-const-decl "(bimplies?)" interval_examples nil) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (real_plus_real_is_real application-judgement "real" reals nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (x_48 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (< const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (sqrtx3-2 "" 3790353973 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (lt_realorder name-judgement "RealOrder" real_orders reals) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (sqrtx3-1 nil 3600857800 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (lt_realorder name-judgement "RealOrder" real_orders reals) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (tr_TCC1 0 (tr_TCC1-2 "" 3885525549 ("" (skeep :preds? t) (("" (assert) nil nil)) nil) nil shostak (tr subtype "pi_def.pi" "{x2: {x1: {x: reals.real | booleans.AND(reals.>(x, 2), booleans.AND(reals.<(x, 4), sincos_def.cos(number_fields./(x, 2)) = 0))} | booleans.AND(reals.<=(pi_def.pi_lb_new, x1), reals.<=(x1, pi_def.pi_ub_new))} | booleans.AND(reals.<(atan_approx.pi_lb, x2), reals.<(x2, atan_approx.pi_ub))}")) (tr_TCC1-1 nil 3885521789 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (real_times_real_is_real application-judgement "real" reals nil)) nil (tr subtype "pi_def.pi" "{x2: {x1: {x: reals.real | booleans.AND(reals.>(x, 2), booleans.AND(reals.<(x, 4), sincos_def.cos(number_fields./(x, 2)) = 0))} | booleans.AND(reals.<=(pi_def.pi_lb_new, x1), reals.<=(x1, pi_def.pi_ub_new))} | booleans.AND(reals.<(atan_approx.pi_lb, x2), reals.<(x2, atan_approx.pi_ub))}"))) (tr_TCC2 0 (tr_TCC1-1 nil 3600857800 ("" (skosimp*) (("" (replace -1) (("" (hide -1) (("" (mult-cases -1) nil nil)) nil)) nil)) nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nil application-judgement "above(n)" exp2 nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (cos const-decl "real" sincos_def trig_fnd) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd)) nil (tr subtype "(number_fields.*(number_fields.*(interval_examples.PI, interval_examples.v), (number_fields./(514, 1000))))" "nznum"))) (tr_TCC3 0 (tr_TCC2-1 nil 3708378650 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (pi_lb_new const-decl "posreal" pi_def trig_fnd) (pi_ub_new const-decl "posreal" pi_def trig_fnd) (pi_lb const-decl "posreal" atan_approx trig_fnd) (pi_ub const-decl "posreal" atan_approx trig_fnd) (nil application-judgement "above(n)" exp2 nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (Tan? const-decl "bool" trig_basic trig_fnd) (/= const-decl "boolean" notequal nil) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd)) nil (tr subtype "number_fields./((number_fields.*(interval_examples.PI, interval_examples.phi)), 180)" "(trig_basic.Tan?)"))) (tr_250_35_TCC1 0 (tr_250_35_TCC1-3 "" 3885526135 ("" (skeep :preds? t) (("" (expand "Tan?") (("" (assert) (("" (interval -9) nil nil)) nil)) nil)) nil) nil shostak (tr_250_35 subtype "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)" "(trig_basic.Tan?)")) (tr_250_35_TCC1-2 "" 3790353975 ("" (skeep :preds? t) (("" (expand "Tan?") (("" (interval -5) nil nil)) nil)) nil) ((Tan? const-decl "bool" trig_basic trig_fnd) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (interval_soundness formula-decl nil interval_bandb interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (pi_ub const-decl "posreal" atan_approx trig_fnd) (pi_lb const-decl "posreal" atan_approx trig_fnd) (pi_ub_new const-decl "posreal" pi_def trig_fnd) (pi_lb_new const-decl "posreal" pi_def trig_fnd) (int_minus_int_is_int application-judgement "int" integers nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (iar_881 skolem-const-decl "BoolExpr" interval_examples nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (PI skolem-const-decl "{x2:
   {x1: {x: real | x > 2 AND x < 4 AND cos(x / 2) = 0} |
      pi_lb_new <= x1 AND x1 <= pi_ub_new} |
   pi_lb < x2 AND x2 < pi_ub}" interval_examples nil) (cos const-decl "real" sincos_def trig_fnd) (< const-decl "bool" reals nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (FALSE const-decl "bool" booleans nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) ([\|\|] const-decl "Interval" interval interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (interval const-decl "Output" interval_bandb interval_arith) (Output type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (length def-decl "nat" list_props nil) (stack type-eq-decl nil stack structures) (DirVar type-eq-decl nil branch_and_bound structures) (ProperBox type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (Box type-eq-decl nil box interval_arith) (Interval type-eq-decl nil interval interval_arith) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (Maybe type-decl nil Maybe structures) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (real_div_nzreal_is_real application-judgement "real" reals nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (real_times_real_is_real application-judgement "real" reals nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (tr_250_35 subtype "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)" "(trig_basic.Tan?)")) (tr_250_35_TCC1-1 nil 3600857800 ("" (skeep :preds? t) (("" (replaces -5) (("" (expand "Tan?") (("" (interval -5) nil nil)) nil)) nil)) nil) ((Tan? const-decl "bool" trig_basic trig_fnd) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (cos const-decl "real" sincos_def trig_fnd) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) nil (tr_250_35 subtype "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)" "(trig_basic.Tan?)"))) (tr_250_35 0 (tr_250_35-3 "" 3790356516 ("" (interval) nil nil) ((pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (FALSE const-decl "bool" booleans nil) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (beval def-decl "bool" interval_bexpr interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (eval def-decl "real" interval_expr interval_arith) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (V_0_51 skolem-const-decl "RealExpr" interval_examples nil) (V_1_52 skolem-const-decl "(letin?)" interval_examples nil) (iar_50 skolem-const-decl "(bletin?)" interval_examples nil) (g const-decl "posreal" interval_examples nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt interval_arith) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (pi_ub_new const-decl "posreal" pi_def trig_fnd) (pi_lb_new const-decl "posreal" pi_def trig_fnd) (<= const-decl "bool" reals nil) (pi_ub const-decl "posreal" atan_approx trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (cos const-decl "real" sincos_def trig_fnd) (= const-decl "[T, T -> boolean]" equalities nil) (pi_lb const-decl "posreal" atan_approx trig_fnd) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (tr_250_35-2 "" 3790353979 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (eval def-decl "real" interval_expr interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt interval_arith) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd)) shostak) (tr_250_35-1 nil 3600857800 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (eval def-decl "real" interval_expr interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt interval_arith) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd)) shostak)) (tr_200_250_abs_35 0 (tr_200_250_abs_35-3 "" 3790356527 ("" (then (skeep) (interval)) nil nil) ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (real_div_nzreal_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (v skolem-const-decl "posreal" interval_examples nil) (phi skolem-const-decl "{deg: real | Tan?(pi * deg / 180)}" interval_examples nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (|##| const-decl "bool" interval interval_arith) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (nil application-judgement "above(n)" exp2 nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (V_0_54 skolem-const-decl "RealExpr" interval_examples nil) (iar_53 skolem-const-decl "BoolExpr" interval_examples nil) (int_minus_int_is_int application-judgement "int" integers nil) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (tan const-decl "real" trig_basic trig_fnd) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (abs_le formula-decl nil abs_lems reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (vars_in_box formula-decl nil box interval_arith) (g const-decl "posreal" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (pi_ub_new const-decl "posreal" pi_def trig_fnd) (pi_lb_new const-decl "posreal" pi_def trig_fnd) (<= const-decl "bool" reals nil) (pi_ub const-decl "posreal" atan_approx trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (cos const-decl "real" sincos_def trig_fnd) (= const-decl "[T, T -> boolean]" equalities nil) (pi_lb const-decl "posreal" atan_approx trig_fnd) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (tr_200_250_abs_35-2 "" 3790353983 ("" (then (skeep) (interval)) nil nil) ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (|##| const-decl "bool" interval interval_arith) (vars_in_box formula-decl nil box interval_arith) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (abs_le formula-decl nil abs_lems reals) (tan const-decl "real" trig_basic trig_fnd) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd)) shostak) (tr_200_250_abs_35-1 nil 3600857800 ("" (then (skeep) (interval)) nil nil) ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (pi_safe const-decl "[Unit -> real]" interval_expr_trig interval_arith) (tan_safe const-decl "real" trig_safe_ops trig_fnd) (|##| const-decl "bool" interval interval_arith) (vars_in_box formula-decl nil box interval_arith) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (abs_le formula-decl nil abs_lems reals) (tan const-decl "real" trig_basic trig_fnd) (lb_interval formula-decl nil interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (realorder? const-decl "bool" real_orders reals) (RealOrder type-eq-decl nil real_orders reals) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (PI_n const-decl "RealExpr" interval_expr_trig interval_arith) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (Tan? const-decl "bool" trig_basic trig_fnd)) shostak)) (G_TCC1 0 (G_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (G subtype "(number_fields.-)(1, interval_examples.x)" "posreal"))) (A_and_S_TCC1 0 (A_and_S_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (X const-decl "posreal" interval_examples nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals)) nil (A_and_S subtype "(number_fields.-)(1, interval_examples.X)" "posreal"))) (A_and_S 0 (A_and_S-3 "" 3790356528 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (FALSE const-decl "bool" booleans nil) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "above(n)" exp2 nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (iar_55 skolem-const-decl "BoolExpr" interval_examples nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (X const-decl "posreal" interval_examples nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (A_and_S-2 "" 3790353985 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (A_and_S-1 nil 3600857800 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (Env type-eq-decl nil box interval_arith) (vars_in_box? const-decl "bool" box interval_arith) (list2array def-decl "T" array2list structures) (beval def-decl "bool" interval_bexpr interval_arith) (eval def-decl "real" interval_expr interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (gt_realorder name-judgement "RealOrder" real_orders reals) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)) (common_point_TCC1 0 (common_point_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) (([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (/= const-decl "boolean" notequal nil)) nil (common_point subtype "2" "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}"))) (common_point_TCC2 0 (common_point_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil) (([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (/= const-decl "boolean" notequal nil)) nil (common_point subtype "2" "{i: integers.int | booleans.OR(interval_examples.y /= 0, reals.>=(i, 0))}"))) (common_point_TCC3 0 (common_point_TCC3-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith)) nil (common_point subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.x, 1), number_fields.*(interval_examples.r, sincos_def.cos(interval_examples.theta))) = 0), reals.>=(i, 0))}"))) (common_point_TCC4 0 (common_point_TCC4-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith)) nil (common_point subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.y, 1), number_fields.*(interval_examples.r, sincos_def.sin(interval_examples.theta))) = 0), reals.>=(i, 0))}"))) (common_point 0 (common_point-3 "" 3790356533 ("" (interval :verbose? t) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (real_times_real_is_real application-judgement "real" reals nil) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (FALSE const-decl "bool" booleans nil) (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (iar_56 skolem-const-decl "(band?)" interval_examples nil) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (posrat_exp application-judgement "posrat" exponentiation nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (sqrt_pos application-judgement "posreal" sqrt reals) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnreal type-eq-decl nil real_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (cos const-decl "real" sincos_def trig_fnd) (sin const-decl "real" sincos_def trig_fnd) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (common_point-2 "" 3790353990 ("" (interval :verbose? t) nil nil) ((cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (lt_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (cos const-decl "real" sincos_def trig_fnd) (sin const-decl "real" sincos_def trig_fnd)) shostak) (common_point-1 nil 3600857800 ("" (interval :verbose? t) nil nil) ((cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (list2array def-decl "T" array2list structures) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (lt_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (sqrt_pos application-judgement "posreal" sqrt reals) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (cos const-decl "real" sincos_def trig_fnd) (sin const-decl "real" sincos_def trig_fnd)) shostak)) (r_TCC1 0 (r_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (r subtype "3" "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}"))) (r_TCC2 0 (r_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (r subtype "5" "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}"))) (atan_implementation 0 (atan_implementation-3 "" 3790356536 ("" (interval :precision 4) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (|##| const-decl "bool" interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig_fnd) (tan_restrict const-decl "real" trig_basic trig_fnd) (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (> const-decl "bool" reals nil) (< const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs_le formula-decl nil abs_lems reals) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_57 skolem-const-decl "(bimplies?)" interval_examples nil) (nil application-judgement "above(n)" exp2 nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_58 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (^ const-decl "real" exponentiation nil) (posrat_exp application-judgement "posrat" exponentiation nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (ATAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (atan_implementation-2 "" 3790353998 ("" (interval :precision 4) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (|##| const-decl "bool" interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig_fnd) (tan_restrict const-decl "real" trig_basic trig_fnd) (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (abs_le formula-decl nil abs_lems reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (ATAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd)) shostak) (atan_implementation-1 nil 3600857800 ("" (interval :precision 4) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Interval type-eq-decl nil interval interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (|##| const-decl "bool" interval interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig_fnd) (tan_restrict const-decl "real" trig_basic trig_fnd) (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig_fnd) (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def trig_fnd) (cos const-decl "real" sincos_def trig_fnd) (abs_le formula-decl nil abs_lems reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (ATAN_n const-decl "RealExpr" interval_expr_trig interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}" atan_approx trig_fnd) (pi_bound name-judgement "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig_fnd)) shostak)) (ex1_ba_TCC1 0 (ex1_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) (([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (/= const-decl "boolean" notequal nil)) nil (ex1_ba subtype "2" "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}"))) (ex1_ba_TCC2 0 (ex1_ba_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) ([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (ex1_ba subtype "(number_fields.+)(1, interval_examples.x)" "posreal"))) (ex1_ba 0 (ex1_ba-3 "" 3790356538 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_59 skolem-const-decl "(bimplies?)" interval_examples nil) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_60 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex1_ba-2 "" 3790354000 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex1_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (ex2_ba_TCC1 0 (ex2_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) ([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (ex2_ba subtype "(number_fields.-)(1, interval_examples.x)" "posreal"))) (ex2_ba 0 (ex2_ba-3 "" 3790356540 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_61 skolem-const-decl "(bimplies?)" interval_examples nil) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_62 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex2_ba-2 "" 3790354002 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex2_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (ex3_ba_TCC1 0 (ex3_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) ([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (ex3_ba subtype "(number_fields.-)(1, interval_examples.x)" "posreal"))) (ex3_ba 0 (ex3_ba-3 "" 3790356542 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_63 skolem-const-decl "(bimplies?)" interval_examples nil) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (real_times_real_is_real application-judgement "real" reals nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (minus_real_is_real application-judgement "real" reals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (x_64 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex3_ba-2 "" 3790354004 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex3_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (ex4_ba 0 (ex4_ba-3 "" 3790356544 ("" (interval) nil nil) ((real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_65 skolem-const-decl "(bimplies?)" interval_examples nil) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_66 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex4_ba-2 "" 3790354006 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex4_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (ex5_ba_TCC1 0 (ex5_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) ([\|\|] const-decl "Interval" interval interval_arith) (|##| const-decl "bool" interval interval_arith) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (ex5_ba subtype "(number_fields.+)(1, interval_examples.x)" "posreal"))) (ex5_ba 0 (ex5_ba-3 "" 3790356546 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_67 skolem-const-decl "(bimplies?)" interval_examples nil) (nil application-judgement "above(n)" exp2 nil) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_68 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (ex5_ba-2 "" 3790354008 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex5_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ln_safe const-decl "real" lnexp_safe_ops lnexp) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (ex6_ba 0 (ex6_ba-3 "" 3790356547 ("" (interval) nil nil) ((real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_69 skolem-const-decl "(bimplies?)" interval_examples nil) (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_70 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (r2E const-decl "RealExpr" interval_expr interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (real nonempty-type-from-decl nil reals nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex6_ba-2 "" 3790354009 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (ex6_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)) (ex7_ba 0 (ex7_ba-3 "" 3790356549 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_71 skolem-const-decl "(bimplies?)" interval_examples nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (x_72 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (epsilon const-decl "real" interval_examples nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith) ([\|\|] const-decl "Interval" interval interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (ex7_ba-2 "" 3790354010 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak) (ex7_ba-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]" IntervalExpr_adt interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (|##| const-decl "bool" interval interval_arith)) shostak)) (Tunnel_3_IL 0 (Tunnel_3_IL-3 "" 3790356551 ("" (interval) nil nil) ((posint_exp application-judgement "posint" exponentiation nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (posrat_exp application-judgement "posrat" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (iar_73 skolem-const-decl "(bimplies?)" interval_examples nil) (nil application-judgement "above(n)" exp2 nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (x_74 skolem-const-decl "{x: real | x ## [|0, 2.39 * 10 ^ (-9)|]}" interval_examples nil) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (^ const-decl "real" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (real nonempty-type-from-decl nil reals nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (Tunnel_3_IL-2 "" 3790354012 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (Tunnel_3_IL-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)) (Tunnel_3_IL_LU 0 (Tunnel_3_IL_LU-3 "" 3790356553 ("" (interval) nil nil) ((posint_exp application-judgement "posint" exponentiation nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (posrat_exp application-judgement "posrat" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (iar_75 skolem-const-decl "(bimplies?)" interval_examples nil) (nil application-judgement "above(n)" exp2 nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (x_76 skolem-const-decl "{x: real | x ## [|0, 8.17 * 10 ^ (-8)|]}" interval_examples nil) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (^ const-decl "real" exponentiation nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (real nonempty-type-from-decl nil reals nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak) (Tunnel_3_IL_LU-2 "" 3790354014 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (Tunnel_3_IL_LU-1 nil 3600857801 ("" (interval) nil nil) ((Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (ub_interval formula-decl nil interval interval_arith) (lb_interval formula-decl nil interval interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box formula-decl nil box interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (|##| const-decl "bool" interval interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith) (r2E const-decl "RealExpr" interval_expr interval_arith) (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)) (max_sin_cos 0 (max_sin_cos-3 "" 3790356554 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (sqrt_pos application-judgement "posreal" sqrt reals) (real_minus_real_is_real application-judgement "real" reals nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_77 skolem-const-decl "(bimplies?)" interval_examples nil) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (nil application-judgement "above(n)" exp2 nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (x_78 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MAX const-decl "RealExpr" interval_expr_extra interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (real nonempty-type-from-decl nil reals nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (max_sin_cos-2 "" 3790354015 ("" (interval) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MAX const-decl "RealExpr" interval_expr_extra interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (max_sin_cos-1 nil 3708870709 ("" (interval) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (le_realorder name-judgement "RealOrder" real_orders reals) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (ge_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MAX const-decl "RealExpr" interval_expr_extra interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)) (min_sin_cos 0 (min_sin_cos-3 "" 3790356555 ("" (interval) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (sqrt_pos application-judgement "posreal" sqrt reals) (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types nil) (listn_0 name-judgement "listn(0)" simple_bandb interval_arith) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (NOT const-decl "[bool -> bool]" booleans nil) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (stack type-eq-decl nil stack structures) (length def-decl "nat" list_props nil) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) ([\|\|] const-decl "Interval" interval interval_arith) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (FALSE const-decl "bool" booleans nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (int_minus_int_is_int application-judgement "int" integers nil) (iar_79 skolem-const-decl "(bimplies?)" interval_examples nil) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (nil application-judgement "above(n)" exp2 nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (x_80 skolem-const-decl "real" interval_examples nil) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MIN const-decl "RealExpr" interval_expr_extra interval_arith) (<= const-decl "bool" reals nil) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (X const-decl "RealExpr" interval_expr interval_arith) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (real nonempty-type-from-decl nil reals nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (min_sin_cos-2 "" 3790354016 ("" (interval) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MIN const-decl "RealExpr" interval_expr_extra interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak) (min_sin_cos-1 nil 3708870709 ("" (interval) nil nil) ((sqrt_pos application-judgement "posreal" sqrt reals) (Maybe type-decl nil Maybe structures) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures) (val adt-accessor-decl "[(some?) -> T]" Maybe structures) (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith) (Box type-eq-decl nil box interval_arith) (ProperBox? const-decl "bool" box interval_arith) (ProperBox type-eq-decl nil box interval_arith) (DirVar type-eq-decl nil branch_and_bound structures) (DirVarStack type-eq-decl nil branch_and_bound structures) (DirVarSelector type-eq-decl nil branch_and_bound structures) (Output type-eq-decl nil branch_and_bound structures) (interval const-decl "Output" interval_bandb interval_arith) (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Some adt-constructor-decl "[T -> (some?)]" Maybe structures) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (vars_in_box formula-decl nil box interval_arith) (length_singleton formula-decl nil more_list_props structures) (vars_in_box_rec def-decl "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}" box interval_arith) (|##| const-decl "bool" interval interval_arith) (sqrt_safe_eq formula-decl nil reals_safe_ops reals) (cos_range application-judgement "real_abs_le1" sincos trig_fnd) (sin_range application-judgement "real_abs_le1" sincos trig_fnd) (eval def-decl "real" interval_expr interval_arith) (beval def-decl "bool" interval_bexpr interval_arith) (list2array def-decl "T" array2list structures) (vars_in_box? const-decl "bool" box interval_arith) (Env type-eq-decl nil box interval_arith) (sound? const-decl "bool" interval_bandb interval_arith) (interval_soundness formula-decl nil interval_bandb interval_arith) (le_realorder name-judgement "RealOrder" real_orders reals) (r2E const-decl "RealExpr" interval_expr interval_arith) (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith) (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]" IntervalExpr_adt interval_arith) (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]" IntervalExpr_adt interval_arith) (COS_n const-decl "RealExpr" interval_expr_trig interval_arith) (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith) (MIN const-decl "RealExpr" interval_expr_extra interval_arith) (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (X const-decl "RealExpr" interval_expr interval_arith) (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt interval_arith) (Interval type-eq-decl nil interval interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)) shostak)))
