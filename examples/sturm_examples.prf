(|sturm_examples|
 (|example_1_TCC1| 0
  (|example_1_TCC1-3| "" 3790356835 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/2)) = 0), reals.>=(i, 0))}"))
  (|example_1_TCC1-2| "" 3790354278 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/2)) = 0), reals.>=(i, 0))}"))
  (|example_1_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/2)) = 0), reals.>=(i, 0))}")))
 (|example_1_TCC2| 0
  (|example_1_TCC2-3| "" 3790356835 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 9)) /= 0, reals.>=(i, 0))}"))
  (|example_1_TCC2-2| "" 3790354278 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 9)) /= 0, reals.>=(i, 0))}"))
  (|example_1_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_1| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 9)) /= 0, reals.>=(i, 0))}")))
 (|example_1_TCC3| 0
  (|example_1_TCC3-3| "" 3790356835 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.+)(sturm_examples.x, 17/2)) = 0), reals.>=(i, 0))}"))
  (|example_1_TCC3-2| "" 3790354278 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.+)(sturm_examples.x, 17/2)) = 0), reals.>=(i, 0))}"))
  (|example_1_TCC3-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.+)(sturm_examples.x, 17/2)) = 0), reals.>=(i, 0))}")))
 (|example_1| 0 (|example_1-3| "" 3790356839 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_1-2| "" 3790354281 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_1-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_2| 0 (|example_2-3| "" 3790356840 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_2-2| "" 3790354283 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_2-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_3_TCC1| 0
  (|example_3_TCC1-3| "" 3790356840 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "16"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC1-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "16"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "16"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC2| 0
  (|example_3_TCC2-3| "" 3790356840 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "15"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC2-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "15"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "15"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC3| 0
  (|example_3_TCC3-3| "" 3790356840 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "13"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC3-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "13"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC3-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "13"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC4| 0
  (|example_3_TCC4-3| "" 3790356840 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "12"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC4-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "12"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC4-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "12"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC5| 0
  (|example_3_TCC5-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "11"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC5-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "11"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC5-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "11"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC6| 0
  (|example_3_TCC6-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC6-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC6-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC7| 0
  (|example_3_TCC7-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "9"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC7-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "9"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC7-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "9"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC8| 0
  (|example_3_TCC8-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC8-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC8-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC9| 0
  (|example_3_TCC9-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "7"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC9-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "7"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC9-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "7"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC10| 0
  (|example_3_TCC10-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC10-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC10-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC11| 0
  (|example_3_TCC11-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC11-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC11-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC12| 0
  (|example_3_TCC12-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC12-2| "" 3790354283 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC12-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC13| 0
  (|example_3_TCC13-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC13-2| "" 3790354284 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_3_TCC13-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC14| 0
  (|example_3_TCC14-3| "" 3790356841 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)(478, number_fields.*(350, sturm_examples.x)), number_fields.*(4, exponentiation.^(sturm_examples.x, 4))), number_fields.*(5, exponentiation.^(sturm_examples.x, 5))), number_fields.*(8, exponentiation.^(sturm_examples.x, 8))), number_fields.*(2, exponentiation.^(sturm_examples.x, 10))), exponentiation.^(sturm_examples.x, 12)), exponentiation.^(sturm_examples.x, 16)), number_fields.*(7, exponentiation.^(sturm_examples.x, 7))), number_fields.*(6, exponentiation.^(sturm_examples.x, 6))), number_fields.*(6, exponentiation.^(sturm_examples.x, 9))), number_fields.*(3, exponentiation.^(sturm_examples.x, 3))), number_fields.*(3, exponentiation.^(sturm_examples.x, 13))), exponentiation.^(sturm_examples.x, 11)), exponentiation.^(sturm_examples.x, 15)) = 0), reals.>=(i, 0))}"))
  (|example_3_TCC14-2| "" 3790354284 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)(478, number_fields.*(350, sturm_examples.x)), number_fields.*(4, exponentiation.^(sturm_examples.x, 4))), number_fields.*(5, exponentiation.^(sturm_examples.x, 5))), number_fields.*(8, exponentiation.^(sturm_examples.x, 8))), number_fields.*(2, exponentiation.^(sturm_examples.x, 10))), exponentiation.^(sturm_examples.x, 12)), exponentiation.^(sturm_examples.x, 16)), number_fields.*(7, exponentiation.^(sturm_examples.x, 7))), number_fields.*(6, exponentiation.^(sturm_examples.x, 6))), number_fields.*(6, exponentiation.^(sturm_examples.x, 9))), number_fields.*(3, exponentiation.^(sturm_examples.x, 3))), number_fields.*(3, exponentiation.^(sturm_examples.x, 13))), exponentiation.^(sturm_examples.x, 11)), exponentiation.^(sturm_examples.x, 15)) = 0), reals.>=(i, 0))}"))
  (|example_3_TCC14-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)(478, number_fields.*(350, sturm_examples.x)), number_fields.*(4, exponentiation.^(sturm_examples.x, 4))), number_fields.*(5, exponentiation.^(sturm_examples.x, 5))), number_fields.*(8, exponentiation.^(sturm_examples.x, 8))), number_fields.*(2, exponentiation.^(sturm_examples.x, 10))), exponentiation.^(sturm_examples.x, 12)), exponentiation.^(sturm_examples.x, 16)), number_fields.*(7, exponentiation.^(sturm_examples.x, 7))), number_fields.*(6, exponentiation.^(sturm_examples.x, 6))), number_fields.*(6, exponentiation.^(sturm_examples.x, 9))), number_fields.*(3, exponentiation.^(sturm_examples.x, 3))), number_fields.*(3, exponentiation.^(sturm_examples.x, 13))), exponentiation.^(sturm_examples.x, 11)), exponentiation.^(sturm_examples.x, 15)) = 0), reals.>=(i, 0))}")))
 (|example_3| 0 (|example_3-3| "" 3790356860 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_3-2| "" 3790354303 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_3-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_4_TCC1| 0
  (|example_4_TCC1-3| "" 3790356860 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_4| SUBTYPE "101"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_4_TCC1-2| "" 3790354303 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_4| SUBTYPE "101"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_4_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_4| SUBTYPE "101"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_4| 0 (|example_4-3| "" 3790356861 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_4-2| "" 3790354304 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_4-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_5| 0 (|example_5-3| "" 3790356862 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_5-2| "" 3790354305 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_5-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_6_TCC1| 0
  (|example_6_TCC1-3| "" 3790356862 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_6| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_6_TCC1-2| "" 3790354305 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_6| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_6_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_6| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6| 0 (|example_6-3| "" 3790356863 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_6-2| "" 3790354306 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_6-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_7| 0 (|example_7-3| "" 3790356864 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_7-2| "" 3790354306 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_7-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_8| 0 (|example_8-3| "" 3790356865 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_8-2| "" 3790354307 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_8-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_9_TCC1| 0
  (|example_9_TCC1-3| "" 3790356865 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_9| SUBTYPE "120"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_9_TCC1-2| "" 3790354307 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_9| SUBTYPE "120"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_9_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_9| SUBTYPE "120"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_9_TCC2| 0
  (|example_9_TCC2-3| "" 3790356865 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_9| SUBTYPE "60"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_9_TCC2-2| "" 3790354307 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_9| SUBTYPE "60"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_9_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_9| SUBTYPE "60"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_9| 0 (|example_9-3| "" 3790356866 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_9-2| "" 3790354308 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_9-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_sos_TCC1| 0
  (|example_sos_TCC1-3| "" 3790356866 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 1)) /= 0, reals.>=(i, 0))}"))
  (|example_sos_TCC1-2| "" 3790354308 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 1)) /= 0, reals.>=(i, 0))}"))
  (|example_sos_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 1)) /= 0, reals.>=(i, 0))}")))
 (|example_sos_TCC2| 0
  (|example_sos_TCC2-3| "" 3790356866 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 3)) /= 0, reals.>=(i, 0))}"))
  (|example_sos_TCC2-2| "" 3790354309 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 3)) /= 0, reals.>=(i, 0))}"))
  (|example_sos_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_sos| SUBTYPE "8"
    "{i: integers.int | booleans.OR(((number_fields.-)(sturm_examples.x, 3)) /= 0, reals.>=(i, 0))}")))
 (|example_sos| 0 (|example_sos-3| "" 3790356868 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_sos-2| "" 3790354310 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_sos-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_10| 0 (|example_10-3| "" 3790356869 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_10-2| "" 3790354311 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_10-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_11| 0 (|example_11-3| "" 3790356869 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_11-2| "" 3790354312 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_11-1| |nil| 3703615632 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_12| 0 (|example_12-3| "" 3790356870 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_12-2| "" 3790354312 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_12-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_13| 0 (|example_13-3| "" 3790356872 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_13-2| "" 3790354314 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|example_13-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_14_TCC1| 0
  (|example_14_TCC1-3| "" 3790356872 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "20"
    "{i: integers.int | booleans.OR(((number_fields.-)(2, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC1-2| "" 3790354314 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "20"
    "{i: integers.int | booleans.OR(((number_fields.-)(2, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_14| SUBTYPE "20"
    "{i: integers.int | booleans.OR(((number_fields.-)(2, sturm_examples.x)) /= 0, reals.>=(i, 0))}")))
 (|example_14_TCC2| 0
  (|example_14_TCC2-3| "" 3790356872 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(6, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC2-2| "" 3790354314 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(6, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_14| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(6, sturm_examples.x)) /= 0, reals.>=(i, 0))}")))
 (|example_14_TCC3| 0
  (|example_14_TCC3-3| "" 3790356872 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(12, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC3-2| "" 3790354314 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(12, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC3-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_14| SUBTYPE "4"
    "{i: integers.int | booleans.OR(((number_fields.-)(12, sturm_examples.x)) /= 0, reals.>=(i, 0))}")))
 (|example_14_TCC4| 0
  (|example_14_TCC4-3| "" 3790356872 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "6"
    "{i: integers.int | booleans.OR(((number_fields.-)(20, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC4-2| "" 3790354314 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|example_14| SUBTYPE "6"
    "{i: integers.int | booleans.OR(((number_fields.-)(20, sturm_examples.x)) /= 0, reals.>=(i, 0))}"))
  (|example_14_TCC4-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_14| SUBTYPE "6"
    "{i: integers.int | booleans.OR(((number_fields.-)(20, sturm_examples.x)) /= 0, reals.>=(i, 0))}")))
 (|example_14| 0 (|example_14-3| "" 3790356882 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_14-2| "" 3790354324 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_14-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_15| 0 (|example_15-3| "" 3790356883 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_15-2| "" 3790354325 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK)
  (|example_15-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK))
 (|example_16| 0 (|example_16-3| "" 3790356884 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_16-2| "" 3790354326 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK)
  (|example_16-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK))
 (|example_17| 0 (|example_17-3| "" 3790356886 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_17-2| "" 3790354328 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK)
  (|example_17-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK))
 (|example_18| 0 (|example_18-3| "" 3790356887 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_18-2| "" 3790354329 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK)
  (|example_18-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK))
 (|example_19| 0 (|example_19-3| "" 3790356889 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_19-2| "" 3790354331 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK)
  (|example_19-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|))
   SHOSTAK))
 (|example_20| 0 (|example_20-3| "" 3790356890 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_20-2| "" 3790354332 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK)
  (|example_20-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK))
 (|example_21| 0 (|example_21-3| "" 3790356891 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_21-2| "" 3790354332 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK)
  (|example_21-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|open| ADT-CONSTRUCTOR-DECL "[real -> (open?)]" |RealInt| |reals|)
    (|open?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|))
   SHOSTAK))
 (|example_22| 0 (|example_22-3| "" 3790356892 ("" (STURM) NIL) NIL SHOSTAK)
  (|example_22-2| "" 3790354333 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|example_22-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|RealInf| TYPE-DECL NIL |RealInt| |reals|)
    (|inf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|Inf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|ninf?| ADT-RECOGNIZER-DECL "[RealInf -> boolean]" |RealInt| |reals|)
    (|nInf| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (- CONST-DECL "nInf" |RealInt| |reals|)
    (|oo| ADT-CONSTRUCTOR-DECL "(inf?)" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|##| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|n_example_1| 0
  (|n_example_1-3| "" 3790356892 ("" (STURM -1) NIL) NIL SHOSTAK)
  (|n_example_1-2| "" 3790354334 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|n_example_1-1| |nil| 3703615633 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|n_example_2| 0
  (|n_example_2-3| "" 3790356893 ("" (STURM -1) NIL) NIL SHOSTAK)
  (|n_example_2-2| "" 3790354335 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|n_example_2-1| |nil| 3703615633 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|n_example_3| 0
  (|n_example_3-3| "" 3790356894 ("" (STURM -1) NIL) NIL SHOSTAK)
  (|n_example_3-2| "" 3790354336 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|n_example_3-1| |nil| 3703615633 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|n_example_4| 0
  (|n_example_4-3| "" 3790356894 ("" (STURM -1) NIL) NIL SHOSTAK)
  (|n_example_4-2| "" 3790354336 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|n_example_4-1| |nil| 3703615633 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|n_example_5| 0
  (|n_example_5-3| "" 3790356895 ("" (STURM -1) NIL) NIL SHOSTAK)
  (|n_example_5-2| "" 3790354337 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|n_example_5-1| |nil| 3703615633 ("" (STURM -1) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|mono_example_1_TCC1| 0
  (|mono_example_1_TCC1-3| "" 3790356895 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/4)) = 0), reals.>=(i, 0))}"))
  (|mono_example_1_TCC1-2| "" 3790354337 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/4)) = 0), reals.>=(i, 0))}"))
  (|mono_example_1_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(sturm_examples.x, 1/4)) = 0), reals.>=(i, 0))}")))
 (|mono_example_1| 0
  (|mono_example_1-3| "" 3790356897 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_1-2| "" 3790354338 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_1-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|le_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|le_| ADT-CONSTRUCTOR-DECL "(le_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|mono_example_2_TCC1| 0
  (|mono_example_2_TCC1-3| "" 3790356897 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_2| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_2_TCC1-2| "" 3790354338 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_2| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_2_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_2| SUBTYPE "5"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|mono_example_2| 0
  (|mono_example_2-3| "" 3790356898 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_2-2| "" 3790354339 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_2-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|mono_example_3_TCC1| 0
  (|mono_example_3_TCC1-3| "" 3790356898 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_3_TCC1-2| "" 3790354339 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_3_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_3| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|mono_example_3_TCC2| 0
  (|mono_example_3_TCC2-3| "" 3790356898 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_3_TCC2-2| "" 3790354339 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_3_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|mono_example_3| 0
  (|mono_example_3-3| "" 3790356907 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_3-2| "" 3790354342 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_3-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|mono_example_4_TCC1| 0
  (|mono_example_4_TCC1-3| "" 3790356907 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_4| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_4_TCC1-2| "" 3790354342 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_4| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_4_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_4| SUBTYPE "3"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|mono_example_4| 0
  (|mono_example_4-3| "" 3790356908 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_4-2| "" 3790354343 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_4-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ne_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ne_| ADT-CONSTRUCTOR-DECL "(ne_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|mono_example_5| 0
  (|mono_example_5-3| "" 3790356909 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_5-2| "" 3790354344 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sq| FORMULA-DECL NIL |polylist| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|psq| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_5-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sq| FORMULA-DECL NIL |polylist| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|psq| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|mono_example_6_TCC1| 0
  (|mono_example_6_TCC1-3| "" 3790356909 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|mono_example_6| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_6_TCC1-2| "" 3790354344 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|mono_example_6| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|mono_example_6_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|mono_example_6| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|mono_example_6| 0
  (|mono_example_6-3| "" 3790356910 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|mono_example_6-2| "" 3790354345 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|mono_example_6-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|ge_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|ge_| ADT-CONSTRUCTOR-DECL "(ge_?)" |compute_sturm| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|legendre_TCC1| 0
  (|legendre_TCC1-3| "" 3790356910 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "18"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC1-2| "" 3790354345 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "18"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|legendre| SUBTYPE "18"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|legendre_TCC2| 0
  (|legendre_TCC2-3| "" 3790356910 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "14"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC2-2| "" 3790354345 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "14"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|legendre| SUBTYPE "14"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|legendre_TCC3| 0
  (|legendre_TCC3-3| "" 3790356910 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "20"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC3-2| "" 3790354345 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|legendre| SUBTYPE "20"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}"))
  (|legendre_TCC3-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|legendre| SUBTYPE "20"
    "{i: integers.int | booleans.OR(sturm_examples.x /= 0, reals.>=(i, 0))}")))
 (|legendre| 0 (|legendre-3| "" 3790356914 ("" (STURM) NIL) NIL SHOSTAK)
  (|legendre-2| "" 3790354349 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|legendre-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|legendre3_TCC1| 0
  (|legendre3_TCC1-3| "" 3790356914 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|legendre3| SUBTYPE "3"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)(3969/65536, number_fields.*(95851899/65536, exponentiation.^(sturm_examples.x, 16))), number_fields.*(35043645/32768, exponentiation.^(sturm_examples.x, 12))), number_fields.*(10207769/65536, exponentiation.^(sturm_examples.x, 20))), number_fields.*(3558555/32768, exponentiation.^(sturm_examples.x, 8))), number_fields.*(72765/65536, exponentiation.^(sturm_examples.x, 4))), number_fields.*(63063/4096, exponentiation.^(sturm_examples.x, 6))), number_fields.*(1792791/4096, exponentiation.^(sturm_examples.x, 10))), number_fields.*(3002285/4096, exponentiation.^(sturm_examples.x, 18))), number_fields.*(6600165/4096, exponentiation.^(sturm_examples.x, 14))) = 0), reals.>=(i, 0))}"))
  (|legendre3_TCC1-2| "" 3790354349 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|legendre3| SUBTYPE "3"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)(3969/65536, number_fields.*(95851899/65536, exponentiation.^(sturm_examples.x, 16))), number_fields.*(35043645/32768, exponentiation.^(sturm_examples.x, 12))), number_fields.*(10207769/65536, exponentiation.^(sturm_examples.x, 20))), number_fields.*(3558555/32768, exponentiation.^(sturm_examples.x, 8))), number_fields.*(72765/65536, exponentiation.^(sturm_examples.x, 4))), number_fields.*(63063/4096, exponentiation.^(sturm_examples.x, 6))), number_fields.*(1792791/4096, exponentiation.^(sturm_examples.x, 10))), number_fields.*(3002285/4096, exponentiation.^(sturm_examples.x, 18))), number_fields.*(6600165/4096, exponentiation.^(sturm_examples.x, 14))) = 0), reals.>=(i, 0))}"))
  (|legendre3_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|legendre3| SUBTYPE "3"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.+)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)((number_fields.-)(3969/65536, number_fields.*(95851899/65536, exponentiation.^(sturm_examples.x, 16))), number_fields.*(35043645/32768, exponentiation.^(sturm_examples.x, 12))), number_fields.*(10207769/65536, exponentiation.^(sturm_examples.x, 20))), number_fields.*(3558555/32768, exponentiation.^(sturm_examples.x, 8))), number_fields.*(72765/65536, exponentiation.^(sturm_examples.x, 4))), number_fields.*(63063/4096, exponentiation.^(sturm_examples.x, 6))), number_fields.*(1792791/4096, exponentiation.^(sturm_examples.x, 10))), number_fields.*(3002285/4096, exponentiation.^(sturm_examples.x, 18))), number_fields.*(6600165/4096, exponentiation.^(sturm_examples.x, 14))) = 0), reals.>=(i, 0))}")))
 (|legendre3| 0 (|legendre3-3| "" 3790356927 ("" (STURM) NIL) NIL SHOSTAK)
  (|legendre3-2| "" 3790354362 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK)
  (|legendre3-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|Turan_9_TCC1| 0
  (|Turan_9_TCC1-3| "" 3790356927 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Turan_9| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(number_fields./((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)(number_fields.*(315, sturm_examples.x), number_fields.*(18018, exponentiation.^(sturm_examples.x, 5))), number_fields.*(12155, exponentiation.^(sturm_examples.x, 9))), number_fields.*(25740, exponentiation.^(sturm_examples.x, 7))), number_fields.*(4620, exponentiation.^(sturm_examples.x, 3))), 128) = 0), reals.>=(i, 0))}"))
  (|Turan_9_TCC1-2| "" 3790354362 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|Turan_9| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(number_fields./((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)(number_fields.*(315, sturm_examples.x), number_fields.*(18018, exponentiation.^(sturm_examples.x, 5))), number_fields.*(12155, exponentiation.^(sturm_examples.x, 9))), number_fields.*(25740, exponentiation.^(sturm_examples.x, 7))), number_fields.*(4620, exponentiation.^(sturm_examples.x, 3))), 128) = 0), reals.>=(i, 0))}"))
  (|Turan_9_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Turan_9| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)(number_fields./((number_fields.-)((number_fields.-)((number_fields.+)((number_fields.+)(number_fields.*(315, sturm_examples.x), number_fields.*(18018, exponentiation.^(sturm_examples.x, 5))), number_fields.*(12155, exponentiation.^(sturm_examples.x, 9))), number_fields.*(25740, exponentiation.^(sturm_examples.x, 7))), number_fields.*(4620, exponentiation.^(sturm_examples.x, 3))), 128) = 0), reals.>=(i, 0))}")))
 (|Turan_9| 0 (|Turan_9-3| "" 3790356941 ("" (STURM) NIL) NIL SHOSTAK)
  (|Turan_9-2| "" 3790354376 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)
  (|Turan_9-1| |nil| 3703615633 ("" (STURM) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sturm| CONST-DECL "bool" |poly_strategy| |Sturm|)
    (|sturm_def| FORMULA-DECL NIL |poly_strategy| |Sturm|)
    (|deg| CONST-DECL "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}"
     |polylist| |Sturm|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|Legendre_10_TCC1| 0
  (|Legendre_10_TCC1-3| "" 3790356941 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Legendre_10| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC1-2| "" 3790354376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) SHOSTAK
   (|Legendre_10| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC1-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|Legendre_10| SUBTYPE "10"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|Legendre_10_TCC2| 0
  (|Legendre_10_TCC2-3| "" 3790356941 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Legendre_10| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC2-2| "" 3790354376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) SHOSTAK
   (|Legendre_10| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC2-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|Legendre_10| SUBTYPE "8"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|Legendre_10_TCC3| 0
  (|Legendre_10_TCC3-3| "" 3790356941 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Legendre_10| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC3-2| "" 3790354376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) SHOSTAK
   (|Legendre_10| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC3-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|Legendre_10| SUBTYPE "6"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|Legendre_10_TCC4| 0
  (|Legendre_10_TCC4-3| "" 3790356941 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Legendre_10| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC4-2| "" 3790354376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) SHOSTAK
   (|Legendre_10| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC4-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|Legendre_10| SUBTYPE "4"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|Legendre_10_TCC5| 0
  (|Legendre_10_TCC5-3| "" 3790356941 ("" (SUBTYPE-TCC) NIL) NIL SHOSTAK
   (|Legendre_10| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC5-2| "" 3790354376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) SHOSTAK
   (|Legendre_10| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}"))
  (|Legendre_10_TCC5-1| |nil| 3703615613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|Legendre_10| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sturm_examples.y /= 0, reals.>=(i, 0))}")))
 (|Legendre_10| 0
  (|Legendre_10-3| "" 3790356946 ("" (MONO-POLY) NIL) NIL SHOSTAK)
  (|Legendre_10-2| "" 3790354381 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)
  (|Legendre_10-1| |nil| 3703615633 ("" (MONO-POLY) NIL NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mono_def| FORMULA-DECL NIL |compute_sturm| |Sturm|)
    (|mono| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|contains?| CONST-DECL "bool" |RealInt| |reals|)
    (|realord| CONST-DECL "bool" |compute_sturm| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|lt_| ADT-CONSTRUCTOR-DECL "(lt_?)" |compute_sturm| |Sturm|)
    (|SturmRel| TYPE-DECL NIL |compute_sturm| |Sturm|)
    (|gt_?| ADT-RECOGNIZER-DECL "[SturmRel -> boolean]" |compute_sturm|
     |Sturm|)
    (|gt_| ADT-CONSTRUCTOR-DECL "(gt_?)" |compute_sturm| |Sturm|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|RealInt| TYPE-EQ-DECL NIL |RealInt| |reals|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)))

