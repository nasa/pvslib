(hutch_examples (example_fall_TCC1 0 (example_fall_TCC1-3 "" 3790357050 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (example_fall subtype "3" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_fall_TCC1-2 "" 3790354483 ("" (subtype-tcc) nil nil) nil shostak (example_fall subtype "3" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_fall_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_fall subtype "3" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_fall_TCC2 0 (example_fall_TCC2-3 "" 3790357050 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_times_real_is_real application-judgement "real" reals nil)) shostak (example_fall subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_fall_TCC2-2 "" 3790354483 ("" (subtype-tcc) nil nil) nil shostak (example_fall subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_fall_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_fall subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_fall 0 (example_fall-3 "" 3790357054 ("" (relabel (:pairing |fnums!:36900|) (*)) (("" (hide *) (("" (name "pl__2865" "pmonom(1,3)") (("" (hide -1) (("" (eval-expr "pl__2865") (("" (name-label "plst__2868" (! -1 r) :hide? t :tcc-step nil) (("" (label |labp!:36901| -1) (("" (eval-expr "length[rat](plst__2868)-1") (("" (label |labd!:36902| -1) (("" (replace -2 -1 :dir rl) (("" (name "pl__2866" "pprod(pprod(pmonom(1,1),pmonom(1,1)),pmonom(1,1))") (("" (hide -1) (("" (eval-expr "pl__2866") (("" (name-label "plst__2869" (! -1 r) :hide? t :tcc-step nil) (("" (label |labp!:36901| -1) (("" (eval-expr "length[rat](plst__2869)-1") (("" (label |labd!:36902| -1) (("" (replace -2 -1 :dir rl) (("" (name "pl__2867" "pmonom(1,2)") (("" (hide -1) (("" (eval-expr "pl__2867") (("" (name-label "plst__2870" (! -1 r) :hide? t :tcc-step nil) (("" (label |labp!:36901| -1) (("" (eval-expr "length[rat](plst__2870)-1") (("" (label |labd!:36902| -1) (("" (replace -2 -1 :dir rl) (("" (name-label* ("polyl__2871" (typechecked "LAMBDA (i: nat):
  IF i = 0 THEN list2array[rat](0)(pl__2865)
  ELSIF i = 1 THEN list2array[rat](0)(pl__2866)
  ELSIF i = 2 THEN list2array[rat](0)(pl__2867)
  ELSE zero_pol
  ENDIF" "[nat -> [nat -> rat]]") "degl__2872" (typechecked "LAMBDA (i: nat):
  IF i = 0 THEN length[rat](pl__2865) - 1
  ELSIF i = 1 THEN length[rat](pl__2866) - 1
  ELSIF i = 2 THEN length[rat](pl__2867) - 1
  ELSE 0
  ENDIF" "[nat -> numfield]") "rell__2873" (typechecked "LAMBDA (i: nat):
  IF i = 0 THEN 2 ELSIF i = 1 THEN 1 ELSIF i = 2 THEN 0 ELSE 0 ENDIF" "[nat -> uint8]")) :hide? t :label (:pairing |polyl_:36931| |degl_:36932| |rell_:36933|) :tcc-label (:pairing nil nil nil) :tcc-step (:pairing nil nil nil)) (("" (lemma "hutch_def") (("" (inst -1 "TRUE" 2 2 "LAMBDA (b:BoolTuple(2)):NOT ((b(0)) OR ((b(1)) OR (b(2))))" "rell__2873" "LAMBDA (k:upto(2)): k" "polyl__2871" "degl__2872") (("1" (expand "degl__2872" -1 1) (("1" (replaces |labd!:36902| :in -1) (("1" (expand "polyl__2871" -1 1) (("1" (replaces |labp!:36901| :in -1) (("1" (relabel (:pairing |ex!:36955|) (-1)) (("1" (name-label* ("ps__2874" (typechecked "LAMBDA (i: nat) -> [nat -> rat]:
  IF i = 0 THEN list2array[rat](0)(plst__2868)
  ELSIF i = 1 THEN list2array[rat](0)(plst__2869)
  ELSIF i = 2 THEN list2array[rat](0)(plst__2870)
  ELSE zero_pol
  ENDIF" "[nat -> [nat -> rat]]") "ds__2875" (typechecked "LAMBDA (i: nat) -> int:
  IF i = 0 THEN 3 ELSIF i = 1 THEN 3 ELSIF i = 2 THEN 2 ELSE 0 ENDIF" "[nat -> int]")) :hide? t :label (:pairing |ps_:36957| |ds_:36958|) :tcc-label (:pairing |ps_-tccs:36960| nil) :tcc-step (:pairing (extra-tcc-step) nil)) (("1" (delete |ps_-tccs:36960|) (("1" (eval-expr (! -1 1) :timing? nil) (("1" (replaces -1 -2) (("1" (prop) (("1" (expand "SystemSatRat?") (("1" (reveal |fnums!:36900|) (("1" (skolem |fnums!:36900| ("x__2876")) (("1" (relabel |labsk!:36904| |fnums!:36900|) (("1" (with-labels (typepred ("x__2876")) |labsk!:36904|) (("1" (hide (|fnums!:36900| |labsk!:36904|)) (("1" (inst |ex!:36955| "x__2876") (("1" (expand* "preprocessing_univariate.rel5" "polyl__2871" "degl__2872" "rell__2873") (("1" (rewrite "polylist_eval" :dir rl) (("1" (rewrite "polylist_eval" :dir rl) (("1" (rewrite "polylist_eval" :dir rl) (("1" (case "polylist(pl__2865)(x__2876) = polylist(pl__2865)(x__2876)") (("1" (relabel (:pairing |!allbut:36981|) ((^ (-1)))) (("1" (hide |!allbut:36981|) (("1" (expand "pl__2865" -1 2) (("1" (rewrite* ("polylist_const" "polylist_monom" "polylist_sum" "polylist_neg" "polylist_minus" "polylist_prod" "polylist_div" "polylist_pow" "polylist_sq" "expt_x1" "expt_x0")) (("1" (reveal |!allbut:36981|) (("1" (touch (delabel (|!allbut:36981|))) (("1" (touch (delabel nil :hide? t)) (("1" (case "polylist(pl__2866)(x__2876) = polylist(pl__2866)(x__2876)") (("1" (relabel (:pairing |!allbut:36984|) ((^ (-1)))) (("1" (hide |!allbut:36984|) (("1" (expand "pl__2866" -1 2) (("1" (rewrite* ("polylist_const" "polylist_monom" "polylist_sum" "polylist_neg" "polylist_minus" "polylist_prod" "polylist_div" "polylist_pow" "polylist_sq" "expt_x1" "expt_x0")) (("1" (reveal |!allbut:36984|) (("1" (touch (delabel (|!allbut:36984|))) (("1" (touch (delabel nil :hide? t)) (("1" (case "polylist(pl__2867)(x__2876) = polylist(pl__2867)(x__2876)") (("1" (relabel (:pairing |!allbut:36987|) ((^ (-1)))) (("1" (hide |!allbut:36987|) (("1" (expand "pl__2867" -1 2) (("1" (rewrite* ("polylist_const" "polylist_monom" "polylist_sum" "polylist_neg" "polylist_minus" "polylist_prod" "polylist_div" "polylist_pow" "polylist_sq" "expt_x1" "expt_x0")) (("1" (reveal |!allbut:36987|) (("1" (touch (delabel (|!allbut:36987|))) (("1" (touch (delabel nil :hide? t)) (("1" (reveal |labsk!:36904|) (("1" (flatten) (("1" (name-label* ("names__2877" (typechecked "x__2876 ^ 3" "real") "names__2878" (typechecked "x__2876 * x__2876 * x__2876" "numfield") "names__2879" (typechecked "x__2876 ^ 2" "real")) :hide? t :tcc-step nil) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split 1) (("1" (hide-all-but (|labd!:36902| 1)) (("1" (expand "degl__2872") (("1" (replaces -) (("1" (skosimp) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand* "polyl__2871" "degl__2872") (("2" (replaces (|labd!:36902| |labp!:36901|)) (("2" (eval-formula) nil nil)) nil)) nil)) nil) ("3" (hide-all-but 1) (("3" (expand "rell__2873") (("3" (skosimp) (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (rell__2873 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (degl__2872 skolem-const-decl "[nat -> int]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polyl__2871 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (subrange type-eq-decl nil integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (pl__2866 skolem-const-decl "Polylist" hutch_examples nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (pl__2867 skolem-const-decl "{pl: Polylist |
   length(pl) = 3 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 2}" hutch_examples nil) (expt_x1 formula-decl nil exponentiation nil) (polylist_prod formula-decl nil polylist Sturm) (pl__2865 skolem-const-decl "{pl: Polylist |
   length(pl) = 4 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 3}" hutch_examples nil) (FALSE const-decl "bool" booleans nil) (hutch const-decl "bool" hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (hutch_def formula-decl nil hutch Tarski) (pprod const-decl "Polylist" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak) (example_fall-2 "" 3790354487 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (polylist_prod formula-decl nil polylist Sturm) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski) (pprod const-decl "Polylist" polylist Sturm)) shostak) (example_fall-1 nil 3703875089 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (polylist_prod formula-decl nil polylist Sturm) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski) (pprod const-decl "Polylist" polylist Sturm)) shostak)) (example_ex_TCC1 0 (example_ex_TCC1-3 "" 3790357054 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil)) shostak (example_ex subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_ex_TCC1-2 "" 3790354487 ("" (subtype-tcc) nil nil) nil shostak (example_ex subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_ex_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_ex subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_ex 0 (example_ex-3 "" 3790357056 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (hutch const-decl "bool" hutch Tarski) (real_minus_real_is_real application-judgement "real" reals nil) (polylist_minus formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2639 skolem-const-decl "Polylist" hutch_examples nil) (pl__2638 skolem-const-decl "Polylist" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (subrange type-eq-decl nil integers nil) (polyl__2642 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2643 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2644 skolem-const-decl "{x: [nat -> uint8] |
   FORALL (x_1: nat):
          even?(x(x_1)) AND (x(x_1) >= 0) AND integer_pred(x(x_1))
      AND rational_pred(x(x_1)) AND real_pred(x(x_1))
      AND number_field_pred(x(x_1))}" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (even? const-decl "bool" integers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_ex-2 "" 3790354489 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak) (example_ex-1 nil 3703875089 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak)) (example_1_TCC1 0 (example_1_TCC1-3 "" 3790357056 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil)) shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 2)) /= 0, reals.>=(i, 0))}")) (example_1_TCC1-2 "" 3790354489 ("" (subtype-tcc) nil nil) nil shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 2)) /= 0, reals.>=(i, 0))}")) (example_1_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 2)) /= 0, reals.>=(i, 0))}"))) (example_1_TCC2 0 (example_1_TCC2-3 "" 3790357056 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil)) shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_1_TCC2-2 "" 3790354489 ("" (subtype-tcc) nil nil) nil shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_1_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_1 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_1_TCC3 0 (example_1_TCC3-3 "" 3790357056 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil)) shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 3)) /= 0, reals.>=(i, 0))}")) (example_1_TCC3-2 "" 3790354489 ("" (subtype-tcc) nil nil) nil shostak (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 3)) /= 0, reals.>=(i, 0))}")) (example_1_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_1 subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 3)) /= 0, reals.>=(i, 0))}"))) (example_1_TCC4 0 (example_1_TCC4-3 "" 3790357056 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) shostak (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 11/12)) = 0), reals.>=(i, 0))}")) (example_1_TCC4-2 "" 3790354489 ("" (subtype-tcc) nil nil) nil shostak (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 11/12)) = 0), reals.>=(i, 0))}")) (example_1_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 11/12)) = 0), reals.>=(i, 0))}"))) (example_1_TCC5 0 (example_1_TCC5-3 "" 3790357056 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) shostak (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 41/10)) = 0), reals.>=(i, 0))}")) (example_1_TCC5-2 "" 3790354489 ("" (subtype-tcc) nil nil) nil shostak (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 41/10)) = 0), reals.>=(i, 0))}")) (example_1_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_1 subtype "3" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 41/10)) = 0), reals.>=(i, 0))}"))) (example_1 0 (example_1-3 "" 3790357068 ("" (hutch) nil nil) ((real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (rell__2662 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (degl__2661 skolem-const-decl "[nat -> int]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polyl__2660 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (subrange type-eq-decl nil integers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (real_plus_real_is_real application-judgement "real" reals nil) (polylist_sum formula-decl nil polylist Sturm) (minus_real_is_real application-judgement "real" reals nil) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2651 skolem-const-decl "Polylist" hutch_examples nil) (pl__2653 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pconst(1))(x) +
       polylist(pneg(ppow(pminus(pmonom(1, 1), pconst(3)), 2)))(x)}" hutch_examples nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (- const-decl "[numfield -> numfield]" number_fields nil) (pl__2654 skolem-const-decl "Polylist" hutch_examples nil) (pl__2652 skolem-const-decl "Polylist" hutch_examples nil) (pl__2650 skolem-const-decl "Polylist" hutch_examples nil) (FALSE const-decl "bool" booleans nil) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_1-2 "" 3790354494 ("" (hutch) nil nil) ((pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak) (example_1-1 nil 3703875089 ("" (hutch) nil nil) ((pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak)) (example_2_TCC1 0 (example_2_TCC1-3 "" 3790357068 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (example_2 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_2_TCC1-2 "" 3790354494 ("" (subtype-tcc) nil nil) nil shostak (example_2 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_2_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_2 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_2_TCC2 0 (example_2_TCC2-3 "" 3790357068 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil)) shostak (example_2 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_2_TCC2-2 "" 3790354494 ("" (subtype-tcc) nil nil) nil shostak (example_2 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_2_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_2 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_2 0 (example_2-3 "" 3790357071 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (FALSE const-decl "bool" booleans nil) (real_minus_real_is_real application-judgement "real" reals nil) (nil application-judgement "above(n)" exp2 nil) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2674 skolem-const-decl "Polylist" hutch_examples nil) (pl__2676 skolem-const-decl "{pl: Polylist |
   length(pl) = 13 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 12}" hutch_examples nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (pl__2675 skolem-const-decl "{pl: Polylist |
   length(pl) = 5 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 4}" hutch_examples nil) (pl__2673 skolem-const-decl "Polylist" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (polyl__2681 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2682 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2683 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_2-2 "" 3790354497 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak) (example_2-1 nil 3703875089 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak)) (example_3 0 (example_3-3 "" 3790357076 ("" (hutch) nil nil) ((real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (rell__2701 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (degl__2700 skolem-const-decl "[nat -> int]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polyl__2699 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (subrange type-eq-decl nil integers nil) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (real_plus_real_is_real application-judgement "real" reals nil) (polylist_sum formula-decl nil polylist Sturm) (minus_real_is_real application-judgement "real" reals nil) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2690 skolem-const-decl "Polylist" hutch_examples nil) (pl__2692 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pconst(1))(x) +
       polylist(pneg(ppow(pminus(pmonom(1, 1), pconst(3)), 2)))(x)}" hutch_examples nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (pl__2693 skolem-const-decl "Polylist" hutch_examples nil) (pl__2691 skolem-const-decl "Polylist" hutch_examples nil) (pl__2689 skolem-const-decl "Polylist" hutch_examples nil) (hutch const-decl "bool" hutch Tarski) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (hutch_def formula-decl nil hutch Tarski) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_3-2 "" 3790354509 ("" (hutch) nil nil) ((pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak) (example_3-1 nil 3703875089 ("" (hutch) nil nil) ((pneg const-decl "Polylist" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (ppow def-decl "Polylist" polylist Sturm) (pprod const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_prod formula-decl nil polylist Sturm) (polylist_pow formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (polylist_neg formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak)) (example_4_TCC1 0 (example_4_TCC1-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (example_4 subtype "5" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC1-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "5" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "5" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC2 0 (example_4_TCC2-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC2-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "12" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC3 0 (example_4_TCC3-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "11" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC3-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "11" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "11" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC4 0 (example_4_TCC4-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "10" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC4-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "10" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "10" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC5 0 (example_4_TCC5-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "8" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC5-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "8" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "8" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC6 0 (example_4_TCC6-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC6-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC6-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC7 0 (example_4_TCC7-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "6" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC7-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "6" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC7-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "6" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC8 0 (example_4_TCC8-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC8-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC8-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "4" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC9 0 (example_4_TCC9-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (example_4 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC9-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC9-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC10 0 (example_4_TCC10-3 "" 3790357076 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil)) shostak (example_4 subtype "22" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC10-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "22" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC10-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "22" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4_TCC11 0 (example_4_TCC11-3 "" 3790357077 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil)) shostak (example_4 subtype "20" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC11-2 "" 3790354509 ("" (subtype-tcc) nil nil) nil shostak (example_4 subtype "20" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_4_TCC11-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_4 subtype "20" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_4 0 (example_4-3 "" 3790357130 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (hutch const-decl "bool" hutch Tarski) (real_minus_real_is_real application-judgement "real" reals nil) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2711 skolem-const-decl "Polylist" hutch_examples nil) (pl__2713 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pconst(1948))(x) +
       polylist(pminus(pminus(pmonom(1, 22), pmonom(26/63, 20)),
                       pmonom(419, 10)))
               (x)}" hutch_examples nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "above(n)" exp2 nil) (pl__2712 skolem-const-decl "Polylist" hutch_examples nil) (polylist_sum formula-decl nil polylist Sturm) (real_plus_real_is_real application-judgement "real" reals nil) (pl__2710 skolem-const-decl "Polylist" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (subrange type-eq-decl nil integers nil) (polyl__2718 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2719 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2720 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_4-2 "" 3790354556 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (gt_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (polylist_sum formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm)) shostak) (example_4-1 nil 3703875089 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (gt_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (polylist_sum formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm)) shostak)) (example_5_TCC1 0 (example_5_TCC1-3 "" 3790357130 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (example_5 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_5_TCC1-2 "" 3790354556 ("" (subtype-tcc) nil nil) nil shostak (example_5 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_5_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil (example_5 subtype "2" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_5 0 (example_5-3 "" 3790357133 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (rell__2736 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (degl__2735 skolem-const-decl "[nat -> int]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polyl__2734 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (subrange type-eq-decl nil integers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (real_minus_real_is_real application-judgement "real" reals nil) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (pl__2729 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) = polylist(pconst(1))(x) + polylist(pmonom(1, 1))(x)}" hutch_examples nil) (abs_ge formula-decl nil abs_lems reals) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (pl__2730 skolem-const-decl "Polylist" hutch_examples nil) (expt_x1 formula-decl nil exponentiation nil) (polylist_sum formula-decl nil polylist Sturm) (real_plus_real_is_real application-judgement "real" reals nil) (pl__2728 skolem-const-decl "Polylist" hutch_examples nil) (FALSE const-decl "bool" booleans nil) (hutch const-decl "bool" hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (hutch_def formula-decl nil hutch Tarski) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_5-2 "" 3790354559 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (abs_ge formula-decl nil abs_lems reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (polylist_sum formula-decl nil polylist Sturm) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm)) shostak) (example_5-1 nil 3703875089 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (abs_ge formula-decl nil abs_lems reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (polylist_sum formula-decl nil polylist Sturm) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm)) shostak)) (example_6 0 (example_6-3 "" 3790357136 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (FALSE const-decl "bool" booleans nil) (real_minus_real_is_real application-judgement "real" reals nil) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2742 skolem-const-decl "Polylist" hutch_examples nil) (real_plus_real_is_real application-judgement "real" reals nil) (polylist_sum formula-decl nil polylist Sturm) (pl__2744 skolem-const-decl "Polylist" hutch_examples nil) (abs_le formula-decl nil abs_lems reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (pl__2743 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) = polylist(pconst(1))(x) + polylist(pmonom(1, 1))(x)}" hutch_examples nil) (nil application-judgement "above(n)" exp2 nil) (pl__2741 skolem-const-decl "Polylist" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (|##| const-decl "bool" interval interval_arith) (SystemSatRat? const-decl "bool" hutch Tarski) ([\|\|] const-decl "Interval" interval interval_arith) (Interval type-eq-decl nil interval interval_arith) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (polyl__2749 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2750 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2751 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_6-2 "" 3790354568 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (abs_le formula-decl nil abs_lems reals) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (|##| const-decl "bool" interval interval_arith) (SystemSatRat? const-decl "bool" hutch Tarski) (Interval type-eq-decl nil interval interval_arith) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak) (example_6-1 nil 3720530622 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_minus formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (polylist_sum formula-decl nil polylist Sturm) (abs_le formula-decl nil abs_lems reals) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (|##| const-decl "bool" interval interval_arith) (SystemSatRat? const-decl "bool" hutch Tarski) (Interval type-eq-decl nil interval interval_arith) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak)) (example_7_TCC1 0 (example_7_TCC1-3 "" 3790357136 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (example_7 subtype "9" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_7_TCC1-2 "" 3790354568 ("" (subtype-tcc) nil nil) nil shostak (example_7 subtype "9" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_7_TCC1-1 nil 3771839715 ("" (subtype-tcc) nil nil) nil nil (example_7 subtype "9" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_7 0 (example_7-3 "" 3790357139 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (hutch const-decl "bool" hutch Tarski) (FALSE const-decl "bool" booleans nil) (real_plus_real_is_real application-judgement "real" reals nil) (polylist_sum formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (pl__2756 skolem-const-decl "Polylist" hutch_examples nil) (expt_x1 formula-decl nil exponentiation nil) (pl__2758 skolem-const-decl "{pl: Polylist |
   length(pl) = 2 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 1}" hutch_examples nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (pl__2757 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pmonom(32, 1))(x) +
       polylist(psum(pmonom(1, 5), pmonom(12, 2)))(x)}" hutch_examples nil) (polylist_const formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (real_minus_real_is_real application-judgement "real" reals nil) (pl__2755 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pmonom(1, 9))(x) + polylist(pmonom(12, 5))(x)}" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (NOT const-decl "[bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (polyl__2763 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2764 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2765 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_7-2 "" 3790354572 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_sum formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (polylist_const formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm)) shostak) (example_7-1 nil 3771839765 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_sum formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (polylist_const formula-decl nil polylist Sturm) (polylist_minus formula-decl nil polylist Sturm) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (pconst const-decl "Polylist" polylist Sturm) (pminus const-decl "Polylist" polylist Sturm)) shostak)) (example_8_TCC1 0 (example_8_TCC1-3 "" 3790357139 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil)) shostak (example_8 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_8_TCC1-2 "" 3790354572 ("" (subtype-tcc) nil nil) nil shostak (example_8 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")) (example_8_TCC1-1 nil 3720530597 ("" (subtype-tcc) nil nil) nil nil (example_8 subtype "7" "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}"))) (example_8 0 (example_8-3 "" 3790357142 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (polylist const-decl "real" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (length def-decl "nat" list_props nil) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (rell__2780 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (degl__2779 skolem-const-decl "[nat -> int]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polyl__2778 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (subrange type-eq-decl nil integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (pl__2773 skolem-const-decl "{pl: Polylist |
   length(pl) = 6 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 5}" hutch_examples nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pl__2774 skolem-const-decl "{pl: Polylist |
   length(pl) = 8 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 7}" hutch_examples nil) (pl__2772 skolem-const-decl "{pl: Polylist |
   length(pl) = 4 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 3}" hutch_examples nil) (FALSE const-decl "bool" booleans nil) (hutch const-decl "bool" hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (hutch_def formula-decl nil hutch Tarski) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_8-2 "" 3790354574 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (lt_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak) (example_8-1 nil 3720530622 ("" (hutch) nil nil) ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (zero_pol const-decl "rat" polylist Sturm) (list2array def-decl "T" array2list structures) (BoolExpr type-eq-decl nil hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (rel5 const-decl "bool" preprocessing_univariate Tarski) (polylist_eval formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (lt_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (hutch const-decl "bool" hutch Tarski) (hutch_def formula-decl nil hutch Tarski)) shostak)) (example_9 0 (example_9-3 "" 3790357150 ("" (hutch) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (hutch const-decl "bool" hutch Tarski) (real_plus_real_is_real application-judgement "real" reals nil) (polylist_sum formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (real_times_real_is_real application-judgement "real" reals nil) (polylist_monom formula-decl nil polylist Sturm) (expt_x1 formula-decl nil exponentiation nil) (pl__2788 skolem-const-decl "{pl: Polylist |
   length(pl) = 3 AND FORALL (x: real): polylist(pl)(x) = 1 * x ^ 2}" hutch_examples nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (pl__2787 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pconst(1))(x) +
       polylist(psum(pmonom(1, 2), pmonom(1, 1)))(x)}" hutch_examples nil) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (IFF const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (polyl__2791 skolem-const-decl "[nat -> [nat -> rat]]" hutch_examples nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (degl__2792 skolem-const-decl "[nat -> int]" hutch_examples nil) (rell__2793 skolem-const-decl "[nat -> uint8]" hutch_examples nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm) (listn_0 name-judgement "listn(0)" gcd_coeff Sturm) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (example_9-2 "" 3790354576 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_sum formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (lt_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak) (example_9-1 nil 3720530622 ("" (hutch) nil nil) ((pconst const-decl "Polylist" polylist Sturm) (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}" polylist Sturm) (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}" polylist Sturm) (polylist const-decl "real" polylist Sturm) (Polylist type-eq-decl nil polylist Sturm) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (hutch_def formula-decl nil hutch Tarski) (hutch const-decl "bool" hutch Tarski) (polylist_sum formula-decl nil polylist Sturm) (polylist_const formula-decl nil polylist Sturm) (polylist_monom formula-decl nil polylist Sturm) (lt_realorder name-judgement "RealOrder" real_orders reals) (polylist_eval formula-decl nil polylist Sturm) (rel5 const-decl "bool" preprocessing_univariate Tarski) (SystemSatRat? const-decl "bool" hutch Tarski) (BoolTuple type-eq-decl nil hutch Tarski) (BoolExpr type-eq-decl nil hutch Tarski) (list2array def-decl "T" array2list structures) (zero_pol const-decl "rat" polylist Sturm)) shostak)))
