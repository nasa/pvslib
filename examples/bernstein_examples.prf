(bernstein_examples (test_forall__TCC1 0 (test_forall__TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_forall__TCC2 0 (test_forall__TCC2-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_forall__TCC3 0 (test_forall__TCC3-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_ subtype "6" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_forall__TCC4 0 (test_forall__TCC4-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (test_forall__TCC5 0 (test_forall__TCC5-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (test_forall_ 0 (test_forall_-1 nil 3885526146 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1082 skolem-const-decl "Coeff" bernstein_examples nil) (md___1081 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mp___1080 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1076 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1075 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1077 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (test_exists_ 0 (test_exists_-1 nil 3885526536 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (test_exists_open__TCC1 0 (test_exists_open__TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_exists_open_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_exists_open_ 0 (test_exists_open_-1 nil 3885526561 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (test_forall_unbounded__TCC1 0 (test_forall_unbounded__TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_forall_unbounded_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_forall_unbounded_ 0 (test_forall_unbounded_-1 nil 3885526576 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boxbetween? const-decl "bool" util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1095 skolem-const-decl "Coeff" bernstein_examples nil) (md___1094 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (mp___1093 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1090 skolem-const-decl "[nat -> real]" bernstein_examples nil) (real_times_real_is_real application-judgement "real" reals nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1089 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1091 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (AND const-decl "[bool, bool -> bool]" booleans nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (test_exists_unbounded_200_TCC1 0 (test_exists_unbounded_200_TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_exists_unbounded_200 subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_exists_unbounded_200_TCC2 0 (test_exists_unbounded_200_TCC2-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_exists_unbounded_200 subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_exists_unbounded_200_TCC3 0 (test_exists_unbounded_200_TCC3-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (test_exists_unbounded_200 subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (test_exists_unbounded_200 0 (test_exists_unbounded_200-1 nil 3885526594 ("" (bernstein :depth 200) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (integer nonempty-type-from-decl nil integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (zumkeller1a__TCC1 0 (zumkeller1a__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller1a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (zumkeller1a__TCC2 0 (zumkeller1a__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller1a_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (zumkeller1a__TCC3 0 (zumkeller1a__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller1a_ subtype "6" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (zumkeller1a__TCC4 0 (zumkeller1a__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller1a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (zumkeller1a__TCC5 0 (zumkeller1a__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller1a_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (zumkeller1a_ 0 (zumkeller1a_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "above(n)" exp2 nil) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1106 skolem-const-decl "Coeff" bernstein_examples nil) (md___1105 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (mp___1104 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1100 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1099 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1101 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (zumkeller1b_ 0 (zumkeller1b_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (zumkeller2__TCC1 0 (zumkeller2__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (zumkeller2_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (zumkeller2__TCC2 0 (zumkeller2__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((^ const-decl "real" exponentiation nil)) nil (zumkeller2_ subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_examples.y, exponentiation.^(bernstein_examples.x, 2))) /= 0, reals.>=(i, 0))}"))) (zumkeller2__TCC3 0 (zumkeller2__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil)) nil (zumkeller2_ subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(1, bernstein_examples.x)) /= 0, reals.>=(i, 0))}"))) (zumkeller2_ 0 (zumkeller2_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1117 skolem-const-decl "Coeff" bernstein_examples nil) (md___1116 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (expt def-decl "real" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "above(n)" exp2 nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (mp___1115 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1111 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1110 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1112 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (smith__TCC1 0 (smith__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x1 /= 0, reals.>=(i, 0))}"))) (smith__TCC2 0 (smith__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x2 /= 0, reals.>=(i, 0))}"))) (smith__TCC3 0 (smith__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x3 /= 0, reals.>=(i, 0))}"))) (smith__TCC4 0 (smith__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x1 /= 0, reals.>=(i, 0))}"))) (smith__TCC5 0 (smith__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "5" "{i: integers.int | booleans.OR(bernstein_examples.x4 /= 0, reals.>=(i, 0))}"))) (smith__TCC6 0 (smith__TCC6-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (smith_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x5 /= 0, reals.>=(i, 0))}"))) (smith_ 0 (smith_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1128 skolem-const-decl "Coeff" bernstein_examples nil) (md___1127 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (nil application-judgement "above(n)" exp2 nil) (mp___1126 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1119 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1118 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1120 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (beale1a__TCC1 0 (beale1a__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (beale1a_ subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(3/2, number_fields.*(bernstein_examples.x, bernstein_examples.y)), bernstein_examples.x) = 0), reals.>=(i, 0))}"))) (beale1a__TCC2 0 (beale1a__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (beale1a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (beale1a__TCC3 0 (beale1a__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) nil (beale1a_ subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(9/4, number_fields.*(bernstein_examples.x, exponentiation.^(bernstein_examples.y, 2))), bernstein_examples.x) = 0), reals.>=(i, 0))}"))) (beale1a__TCC4 0 (beale1a__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (beale1a_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (beale1a__TCC5 0 (beale1a__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) nil (beale1a_ subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(21/8, number_fields.*(bernstein_examples.x, exponentiation.^(bernstein_examples.y, 3))), bernstein_examples.x) = 0), reals.>=(i, 0))}"))) (beale1a_ 0 (beale1a_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1136 skolem-const-decl "Coeff" bernstein_examples nil) (md___1135 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (expt def-decl "real" exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mp___1134 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1130 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1129 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1131 skolem-const-decl "MVars" bernstein_examples nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (beale1b_ 0 (beale1b_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)) shostak)) (crespo1a__TCC1 0 (crespo1a__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1a_ subtype "5" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1a__TCC2 0 (crespo1a__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo1a__TCC3 0 (crespo1a__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1a_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1a__TCC4 0 (crespo1a__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1a_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo1a__TCC5 0 (crespo1a__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1a_ 0 (crespo1a_-1 nil 3828618330 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1147 skolem-const-decl "Coeff" bernstein_examples nil) (md___1146 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mp___1145 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1141 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1140 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1142 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak)) (crespo1b__TCC1 0 (crespo1b__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1b_ subtype "5" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1b__TCC2 0 (crespo1b__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo1b__TCC3 0 (crespo1b__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1b_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1b__TCC4 0 (crespo1b__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1b_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo1b__TCC5 0 (crespo1b__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo1b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo1b_ 0 (crespo1b_-1 nil 3828618330 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (crespo2a__TCC1 0 (crespo2a__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "5" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2a__TCC2 0 (crespo2a__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo2a__TCC3 0 (crespo2a__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2a__TCC4 0 (crespo2a__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo2a__TCC5 0 (crespo2a__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2a__TCC6 0 (crespo2a__TCC6-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.z /= 0, reals.>=(i, 0))}"))) (crespo2a_ 0 (crespo2a_-1 nil 3828618330 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1159 skolem-const-decl "Coeff" bernstein_examples nil) (md___1158 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mp___1157 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1152 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1151 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1153 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (crespo2b__TCC1 0 (crespo2b__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "5" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2b__TCC2 0 (crespo2b__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo2b__TCC3 0 (crespo2b__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "4" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2b__TCC4 0 (crespo2b__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo2b__TCC5 0 (crespo2b__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo2b__TCC6 0 (crespo2b__TCC6-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo2b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.z /= 0, reals.>=(i, 0))}"))) (crespo2b_ 0 (crespo2b_-1 nil 3828618330 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (crespo3a__TCC1 0 (crespo3a__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3a_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo3a__TCC2 0 (crespo3a__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo3a__TCC3 0 (crespo3a__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3a_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo3a__TCC4 0 (crespo3a__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo3a__TCC5 0 (crespo3a__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3a_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.z /= 0, reals.>=(i, 0))}"))) (crespo3a_ 0 (crespo3a_-1 nil 3828618330 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1171 skolem-const-decl "Coeff" bernstein_examples nil) (md___1170 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mp___1169 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1164 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1163 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1165 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (crespo3b__TCC1 0 (crespo3b__TCC1-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3b_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo3b__TCC2 0 (crespo3b__TCC2-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo3b__TCC3 0 (crespo3b__TCC3-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3b_ subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x /= 0, reals.>=(i, 0))}"))) (crespo3b__TCC4 0 (crespo3b__TCC4-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.y /= 0, reals.>=(i, 0))}"))) (crespo3b__TCC5 0 (crespo3b__TCC5-1 nil 3828618146 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (crespo3b_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.z /= 0, reals.>=(i, 0))}"))) (crespo3b_ 0 (crespo3b_-1 nil 3828618330 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (Butcher_TCC1 0 (Butcher_TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (Butcher subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x2 /= 0, reals.>=(i, 0))}"))) (Butcher_TCC2 0 (Butcher_TCC2-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (Butcher subtype "3" "{i: integers.int | booleans.OR(bernstein_examples.x4 /= 0, reals.>=(i, 0))}"))) (Butcher_forall__TCC1 0 (Butcher_forall__TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (Butcher_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x3 /= 0, reals.>=(i, 0))}"))) (Butcher_forall__TCC2 0 (Butcher_forall__TCC2-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (Butcher_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x4 /= 0, reals.>=(i, 0))}"))) (Butcher_forall_ 0 (Butcher_forall_-1 nil 3885664202 ("" (bernstein) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1870 skolem-const-decl "Coeff" bernstein_examples nil) (md___1869 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mp___1868 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1860 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1859 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1861 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (Butcher_exists_ 0 (Butcher_exists_-1 nil 3885664406 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (AdaptiveLV_forall__TCC1 0 (AdaptiveLV_forall__TCC1-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (AdaptiveLV_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x3 /= 0, reals.>=(i, 0))}"))) (AdaptiveLV_forall__TCC2 0 (AdaptiveLV_forall__TCC2-1 nil 3885521848 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (AdaptiveLV_forall_ subtype "2" "{i: integers.int | booleans.OR(bernstein_examples.x4 /= 0, reals.>=(i, 0))}"))) (AdaptiveLV_forall_ 0 (AdaptiveLV_forall_-1 nil 3885669838 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1883 skolem-const-decl "Coeff" bernstein_examples nil) (md___1882 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mp___1881 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1875 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1874 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1876 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (AdaptiveLV_exists_ 0 (AdaptiveLV_exists_-1 nil 3885669903 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list2array def-decl "T" array2list structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)) shostak)) (ReactionDiffusion_forall_ 0 (ReactionDiffusion_forall_-1 nil 3828706094 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1183 skolem-const-decl "Coeff" bernstein_examples nil) (md___1182 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (expt_x1 formula-decl nil exponentiation nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_plus_real_is_real application-judgement "real" reals nil) (mp___1181 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1176 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1175 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1177 skolem-const-decl "MVars" bernstein_examples nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)) shostak)) (ReactionDiffusion_exists_ 0 (ReactionDiffusion_exists_-1 nil 3828706094 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (MVars type-eq-decl nil MPoly Bernstein) (Vars type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt Bernstein) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil) (list2array def-decl "T" array2list structures) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)) shostak)) (Chebyshev1__TCC1 0 (Chebyshev1__TCC2-1 nil 3828705907 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) nil (Chebyshev1_ subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(number_fields.*(2, exponentiation.^(bernstein_examples.x, 2)), 1)) /= 0, reals.>=(i, 0))}"))) (Chebyshev1_ 0 (Chebyshev1_-1 nil 3828706094 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1193 skolem-const-decl "Coeff" bernstein_examples nil) (md___1192 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (expt def-decl "real" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mp___1191 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1188 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1187 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1189 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)) (Chebyshev2__TCC1 0 (Chebyshev2__TCC2-1 nil 3828705907 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (^ const-decl "real" exponentiation nil)) nil (Chebyshev2_ subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)(number_fields.*(4, exponentiation.^(bernstein_examples.x, 3)), number_fields.*(3, bernstein_examples.x))) /= 0, reals.>=(i, 0))}"))) (Chebyshev2_ 0 (Chebyshev2_-1 nil 3828706094 ("" (bernstein) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util Bernstein) (posnat nonempty-type-eq-decl nil integers nil) (Vars type-eq-decl nil util Bernstein) (MVars type-eq-decl nil MPoly Bernstein) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (FALSE const-decl "bool" booleans nil) (Outcome type-decl nil Outcome_adt Bernstein) (Polynomial type-eq-decl nil util Bernstein) (Polyproduct type-eq-decl nil util Bernstein) (MultiBernstein type-eq-decl nil util Bernstein) (VarSelector type-eq-decl nil vardirselector Bernstein) (multipoly_strategy const-decl "Outcome" strat_util Bernstein) (MaxVarMaxDir const-decl "[bool, nat]" vardirselector Bernstein) (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt Bernstein) (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt Bernstein) (forall_X_poly_interval const-decl "bool" multi_polynomial Bernstein) (below type-eq-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (boxbetween? const-decl "bool" util Bernstein) (interval_between? const-decl "bool" util Bernstein) (multipoly_eval const-decl "real" multi_polynomial Bernstein) (polyproduct_eval const-decl "real" multi_polynomial Bernstein) (mc___1200 skolem-const-decl "Coeff" bernstein_examples nil) (md___1199 skolem-const-decl "DegreeMono" bernstein_examples nil) (polynomial const-decl "[real -> real]" polynomials reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_plus_real_is_real application-judgement "real" reals nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (expt def-decl "real" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mp___1198 skolem-const-decl "MultiPolynomial" bernstein_examples nil) (Varsb___1195 skolem-const-decl "[nat -> real]" bernstein_examples nil) (product def-decl "real" product reals) (sigma def-decl "real" sigma reals) (Pb___1194 skolem-const-decl "MPolyRel" bernstein_examples nil) (Vsb___1196 skolem-const-decl "MVars" bernstein_examples nil) (NOT const-decl "[bool -> bool]" booleans nil) (multipoly_strategy_true formula-decl nil strat_util Bernstein) (MPolyRel type-eq-decl nil MPoly Bernstein) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util Bernstein) (DegreeMono type-eq-decl nil util Bernstein) (Coeff type-eq-decl nil util Bernstein) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak)))
