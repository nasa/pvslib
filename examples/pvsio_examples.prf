(pvsio_examples (pp_TCC1 0 (pp_TCC1-1 nil 3885522428 ("" (subtype-tcc) nil nil) ((odd? const-decl "bool" integers nil) (^ const-decl "real" exponentiation nil) (even_times_int_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (pp subtype "1" "{x: uint8 | integers.odd?(x)}"))) (pp_TCC2 0 (pp_TCC2-1 nil 3885522428 ("" (subtype-tcc) nil nil) ((odd? const-decl "bool" integers nil) (^ const-decl "real" exponentiation nil) (even_times_int_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (pp subtype "2" "{x: uint8 | integers.even?(x)}"))) (pp_TCC3 0 (pp_TCC3-2 "" 3885670069 ("" (skeep) (("" (inst 1 "((: 0 :), true, 1, (# x := 1, y := 0 #))") nil nil)) nil) nil shostak (pp existence "" "[(list_adt[real].cons?), bool, posrat, [# x: {x: uint8 | integers.odd?(x)}, y: {x: uint8 | integers.even?(x)} #]]")) (pp_TCC3-1 nil 3885522428 ("" (existence-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (odd? const-decl "bool" integers nil) (even? const-decl "bool" integers nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (TRUE const-decl "bool" booleans nil)) nil (pp existence "" "[(list_adt[real].cons?), bool, posrat, [# x: {x: uint8 | integers.odd?(x)}, y: {x: uint8 | integers.even?(x)} #]]"))) (hello_you_TCC1 0 (hello_you_TCC1-1 nil 3771056088 ("" (subtype-tcc) nil nil) ((rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (O const-decl "finseq" finite_sequences nil) (concat const-decl "string" stdstr nil) (skip const-decl "void" stdlang nil) (printstr const-decl "void" stdio nil) (real2str const-decl "string" stdstr nil) (fail const-decl "void" stdlang nil) (assert const-decl "void" stdio nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (hello_you subtype "pvsio_examples.r" "nonneg_real"))) (safe_sqrt_TCC1 0 (safe_sqrt_TCC1-1 nil 3771056088 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (safe_sqrt subtype "pvsio_examples.x" "nonneg_real"))) (afact 0 (afact-1 nil 3771058109 ("" (propax) nil nil) nil shostak)))
