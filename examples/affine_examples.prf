(|affine_examples|
 (|zero_to_one_quarter_num| 0
  (|zero_to_one_quarter_num-3| "" 3790356670
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1))) NIL) NIL SHOSTAK)
  (|zero_to_one_quarter_num-2| "" 3790354117
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1))) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK)
  (|zero_to_one_quarter_num-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1))) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK))
 (|zero_to_one_quarter_aa| 0
  (|zero_to_one_quarter_aa-3| "" 3790356683 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|zero_to_one_quarter_aa-2| "" 3790354137 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zero_to_one_quarter_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zero_to_one_quarter_sq_aa| 0
  (|zero_to_one_quarter_sq_aa-3| "" 3790356686 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|zero_to_one_quarter_sq_aa-2| "" 3790354139 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zero_to_one_quarter_sq_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_1_TCC1| 0
  (|example_1_TCC1-2| "" 3790354139 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_TCC1-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_1| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_TCC2| 0
  (|example_1_TCC2-2| "" 3790354139 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_1| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_TCC2-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_1| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_num_p3_m9__nump_TCC1| 0
  (|example_1_num_p3_m9__nump_TCC1-2| "" 3790354139 ("" (TCC) NIL NIL) NIL
   SHOSTAK
   (|example_1_num_p3_m9__nump| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_num_p3_m9__nump_TCC1-1| |nil| 3758453052 ("" (TCC)) NIL NIL
   (|example_1_num_p3_m9__nump| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_num_p3_m9__nump_TCC2| 0
  (|example_1_num_p3_m9__nump_TCC2-2| "" 3790354139 ("" (TCC) NIL NIL) NIL
   SHOSTAK
   (|example_1_num_p3_m9__nump| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_num_p3_m9__nump_TCC2-1| |nil| 3758453052 ("" (TCC)) NIL NIL
   (|example_1_num_p3_m9__nump| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_num_p3_m9__nump| 0
  (|example_1_num_p3_m9__nump-3| "" 3790356691
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 9)) NIL) NIL
   SHOSTAK)
  (|example_1_num_p3_m9__nump-2| "" 3790354144
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 9)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK)
  (|example_1_num_p3_m9__nump-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 9)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK))
 (|example_1_a_aa| 0
  (|example_1_a_aa-3| "" 3790356696 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|example_1_a_aa-2| "" 3790354149 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_1_a_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_1_num_p3_m16__nump_TCC1| 0
  (|example_1_num_p3_m16__nump_TCC1-2| "" 3790354149 ("" (TCC) NIL NIL) NIL
   SHOSTAK
   (|example_1_num_p3_m16__nump| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_num_p3_m16__nump_TCC1-1| |nil| 3758453052 ("" (TCC)) NIL NIL
   (|example_1_num_p3_m16__nump| SUBTYPE "5"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_num_p3_m16__nump_TCC2| 0
  (|example_1_num_p3_m16__nump_TCC2-2| "" 3790354149 ("" (TCC) NIL NIL) NIL
   SHOSTAK
   (|example_1_num_p3_m16__nump| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_1_num_p3_m16__nump_TCC2-1| |nil| 3758453052 ("" (TCC)) NIL NIL
   (|example_1_num_p3_m16__nump| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_num_p3_m16__nump| 0
  (|example_1_num_p3_m16__nump-3| "" 3790356701
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 16)) NIL) NIL
   SHOSTAK)
  (|example_1_num_p3_m16__nump-2| "" 3790354153
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 16)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK)
  (|example_1_num_p3_m16__nump-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 16)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK))
 (|example_1_b_aa| 0
  (|example_1_b_aa-3| "" 3790356706 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|example_1_b_aa-2| "" 3790354158 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_1_b_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_legendre_TCC1| 0
  (|example_legendre_TCC1-2| "" 3790354158 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "6"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC1-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "6"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC2| 0
  (|example_legendre_TCC2-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "10"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC2-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "10"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC3| 0
  (|example_legendre_TCC3-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "18"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC3-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "18"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC4| 0
  (|example_legendre_TCC4-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "14"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC4-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "14"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC5| 0
  (|example_legendre_TCC5-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "4"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC5-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "4"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC6| 0
  (|example_legendre_TCC6-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "8"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC6-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "8"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC7| 0
  (|example_legendre_TCC7-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "20"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC7-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "20"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC8| 0
  (|example_legendre_TCC8-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "12"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC8-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "12"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_TCC9| 0
  (|example_legendre_TCC9-2| "" 3790354159 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_legendre| SUBTYPE "16"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}"))
  (|example_legendre_TCC9-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_legendre| SUBTYPE "16"
    "{i: integers.int | booleans.OR(affine_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_legendre_num_p3_m4__nump| 0
  (|example_legendre_num_p3_m4__nump-3| "" 3790356715
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 4)) NIL) NIL
   SHOSTAK)
  (|example_legendre_num_p3_m4__nump-2| "" 3790354168
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 4)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK)
  (|example_legendre_num_p3_m4__nump-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 4)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK))
 (|example_legendre_sint| 0
  (|example_legendre_sint-3| "" 3790356734 ("" (THEN (SKEEP) (AFFINE)) NIL) NIL
   SHOSTAK)
  (|example_legendre_sint-2| "" 3790354180 ("" (THEN (SKEEP) (AFFINE)) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_legendre_sint-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AFFINE)) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Heart_TCC1| 0
  (|Heart_TCC1-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|Heart| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x5 /= 0, reals.>=(i, 0))}"))
  (|Heart_TCC1-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|Heart| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x5 /= 0, reals.>=(i, 0))}")))
 (|Heart_TCC2| 0
  (|Heart_TCC2-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|Heart| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x6 /= 0, reals.>=(i, 0))}"))
  (|Heart_TCC2-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|Heart| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x6 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC1| 0
  (|example_hdp_mm_TCC1-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x6 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC1-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x6 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC2| 0
  (|example_hdp_mm_TCC2-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x5 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC2-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x5 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC3| 0
  (|example_hdp_mm_TCC3-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x4 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC3-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x4 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC4| 0
  (|example_hdp_mm_TCC4-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x7 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC4-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x7 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC5| 0
  (|example_hdp_mm_TCC5-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x7 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC5-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(affine_examples.x7 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_TCC6| 0
  (|example_hdp_mm_TCC6-2| "" 3790354180 ("" (TCC) NIL NIL) NIL SHOSTAK
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x4 /= 0, reals.>=(i, 0))}"))
  (|example_hdp_mm_TCC6-1| |nil| 3703157901 ("" (TCC)) NIL NIL
   (|example_hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(affine_examples.x4 /= 0, reals.>=(i, 0))}")))
 (|example_hdp_mm_num_p3_m10__nump| 0
  (|example_hdp_mm_num_p3_m10__nump-3| "" 3790356762
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 10)) NIL) NIL
   SHOSTAK)
  (|example_hdp_mm_num_p3_m10__nump-2| "" 3790354208
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 10)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK)
  (|example_hdp_mm_num_p3_m10__nump-1| |nil| 3703157906
   ("" (THEN (SKEEP) (AA-NUMERICAL (! 1 1) :PRECISION 3 :MAXDEPTH 10)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |affine_bandb_numerical|
     |affine_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_numerical| |affine_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| |affine_arith|)
    (|Env| TYPE-EQ-DECL NIL |affine_box| |affine_arith|)
    (|BaseType| TYPE-EQ-DECL NIL |affine| |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Proper?| CONST-DECL "bool" |interval| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |affine_bandb_numerical| |affine_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |affine_bandb_numerical| |affine_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |affine_bandb_numerical|
     |affine_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|))
   SHOSTAK))
 (|example_hdp_mm_aa| 0
  (|example_hdp_mm_aa-2| "" 3790356825 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|example_hdp_mm_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zero_to_one_quarter_e_aa_vrb| 0
  (|zero_to_one_quarter_e_aa_vrb-3| "" 3790356825 ("" (AFFINE :VERBOSE? T) NIL)
   NIL SHOSTAK)
  (|zero_to_one_quarter_e_aa_vrb-2| "" 3790354269
   ("" (AFFINE :VERBOSE? T) NIL NIL)
   ((|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zero_to_one_quarter_e_aa_vrb-1| |nil| 3703157906
   ("" (AFFINE :VERBOSE? T) NIL NIL)
   ((|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zero_to_one_quarter_e_1_aa_vrb| 0
  (|zero_to_one_quarter_e_1_aa_vrb-3| "" 3790356826
   ("" (AFFINE :VERBOSE? T) NIL) NIL SHOSTAK)
  (|zero_to_one_quarter_e_1_aa_vrb-2| "" 3790354269
   ("" (AFFINE :VERBOSE? T) NIL NIL)
   ((|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zero_to_one_quarter_e_1_aa_vrb-1| |nil| 3703157906
   ("" (AFFINE :VERBOSE? T) NIL NIL)
   ((|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zero_to_one_quarter__let_aa| 0
  (|zero_to_one_quarter__let_aa-3| "" 3790356828 ("" (AFFINE) NIL) NIL SHOSTAK)
  (|zero_to_one_quarter__let_aa-2| "" 3790354272 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)
    (|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BLETIN_RealExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zero_to_one_quarter__let_aa-1| |nil| 3703157906 ("" (AFFINE) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|bandb_boolexpr| CONST-DECL "Output" |affine_bandb_boolexpr|
     |affine_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval|
     |interval_arith|)
    (|r2i_Pos| APPLICATION-JUDGEMENT "(Pos?)" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))"
     |affine_boolexpr| |affine_arith|)
    (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| |affine_arith|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)
    (|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BLETIN_RealExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))"
     |affine_boolexpr| |affine_arith|)
    (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr|
     |affine_arith|)
    (|beval__| CONST-DECL "bool" |affine_boolexpr| |affine_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |affine_bandb_boolexpr| |affine_arith|)
    (|bandb_boolexpr_soundness| FORMULA-DECL NIL |affine_bandb_boolexpr|
     |affine_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)))

