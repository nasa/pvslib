(|interval_examples4Q|
 (|zero_to_one_quarter| 0
  (|zero_to_one_quarter-3| "" 3790356556
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :PRECISION 4 :MAXDEPTH 20 :VERBOSE? T))
    NIL)
   NIL SHOSTAK)
  (|zero_to_one_quarter-2| "" 3790354017
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :PRECISION 4 :MAXDEPTH 20 :VERBOSE? T))
    NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK)
  (|zero_to_one_quarter-1| |nil| 3600857764
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :PRECISION 4 :MAXDEPTH 20 :VERBOSE? T))
    NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|Heart_TCC1| 0
  (|Heart_TCC1-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Heart| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (|Heart_TCC2| 0
  (|Heart_TCC2-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Heart| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x6 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC1| 0
  (|hdp_mm_TCC1-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x6 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC2| 0
  (|hdp_mm_TCC2-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC3| 0
  (|hdp_mm_TCC3-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC4| 0
  (|hdp_mm_TCC4-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC5| 0
  (|hdp_mm_TCC5-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm_TCC6| 0
  (|hdp_mm_TCC6-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hdp_mm| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|hdp_mm| 0
  (|hdp_mm-3| "" 3790356570
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :VERBOSE? T)) NIL) NIL SHOSTAK)
  (|hdp_mm-2| "" 3790354025
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :VERBOSE? T)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK)
  (|hdp_mm-1| |nil| 3600857764
   ("" (THEN (SKEEP) (NUMERICAL (! 1 1) :VERBOSE? T)) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|numerical_soundness| FORMULA-DECL NIL |numerical_bandb| |interval_arith|)
    (|sound?| CONST-DECL "bool" |numerical_bandb| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|numerical| CONST-DECL "Output" |numerical_bandb| |interval_arith|)
    (|altdir_maxvar| CONST-DECL "DirVar" |numerical_bandb| |interval_arith|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|hdp_minmax| 0
  (|hdp_minmax-3| "" 3790356580 ("" (THEN (SKEEP) (INTERVAL)) NIL) NIL SHOSTAK)
  (|hdp_minmax-2| "" 3790354035 ("" (THEN (SKEEP) (INTERVAL)) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|hdp_minmax-1| |nil| 3600857764 ("" (THEN (SKEEP) (INTERVAL)) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|common_point_TCC1| 0
  (|common_point_TCC1-1| |nil| 3600857764 ("" (SUBTYPE-TCC) NIL NIL)
   ((|##| CONST-DECL "bool" |interval| |interval_arith|)) NIL
   (|common_point| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|common_point| 0
  (|common_point-3| "" 3790356582 ("" (INTERVAL :VERBOSE? T) NIL) NIL SHOSTAK)
  (|common_point-2| "" 3790354037 ("" (INTERVAL :VERBOSE? T) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|common_point-1| |nil| 3600857764 ("" (INTERVAL :VERBOSE? T) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK))
 (|simple_ite| 0 (|simple_ite-3| "" 3790356583 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|simple_ite-2| "" 3790354038 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BITE ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|simple_ite-1| |nil| 3600857764 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SQ ADT-CONSTRUCTOR-DECL "[RealExpr -> (sq?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BITE ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zumkeller1b__TCC1| 0
  (|zumkeller1b__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller1b_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|zumkeller1b__TCC2| 0
  (|zumkeller1b__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller1b_| SUBTYPE "6"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|zumkeller1b__TCC3| 0
  (|zumkeller1b__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller1b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|zumkeller1b__TCC4| 0
  (|zumkeller1b__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller1b_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|zumkeller1b_| 0
  (|zumkeller1b_-3| "" 3790356585 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|zumkeller1b_-2| "" 3790354039 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zumkeller1b_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|zumkeller2__TCC1| 0
  (|zumkeller2__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller2_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.y, exponentiation.^(interval_examples4Q.x, 2))) /= 0, reals.>=(i, 0))}")))
 (|zumkeller2__TCC2| 0
  (|zumkeller2__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zumkeller2_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, interval_examples4Q.x)) /= 0, reals.>=(i, 0))}")))
 (|zumkeller2_| 0
  (|zumkeller2_-3| "" 3790356587 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|zumkeller2_-2| "" 3790354041 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|zumkeller2_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|smith__TCC1| 0
  (|smith__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|smith_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (|smith__TCC2| 0
  (|smith__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|smith_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|smith__TCC3| 0
  (|smith__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|smith_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x1 /= 0, reals.>=(i, 0))}")))
 (|smith__TCC4| 0
  (|smith__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|smith_| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|smith_| 0 (|smith_-3| "" 3790356592 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|smith_-2| "" 3790354052 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|smith_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|beale1a__TCC1| 0
  (|beale1a__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|beale1a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(3/2, number_fields.*(interval_examples4Q.x, interval_examples4Q.y)), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (|beale1a__TCC2| 0
  (|beale1a__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|beale1a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|beale1a__TCC3| 0
  (|beale1a__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|beale1a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(9/4, number_fields.*(interval_examples4Q.x, exponentiation.^(interval_examples4Q.y, 2))), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (|beale1a__TCC4| 0
  (|beale1a__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|beale1a_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|beale1a__TCC5| 0
  (|beale1a__TCC5-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|beale1a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(21/8, number_fields.*(interval_examples4Q.x, exponentiation.^(interval_examples4Q.y, 3))), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (|beale1a_| 0 (|beale1a_-3| "" 3790356601 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|beale1a_-2| "" 3790354056 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|beale1a_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|beale1b_| 0
  (|beale1b_-3| "" 3790356604 ("" (INTERVAL :MAXDEPTH 17) NIL) NIL SHOSTAK)
  (|beale1b_-2| "" 3790354059 ("" (INTERVAL :MAXDEPTH 17) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|beale1b_-1| |nil| 3645973651 ("" (INTERVAL :MAXDEPTH 17) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo1a__TCC1| 0
  (|crespo1a__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1a_| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo1a__TCC2| 0
  (|crespo1a__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo1a__TCC3| 0
  (|crespo1a__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1a_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo1a__TCC4| 0
  (|crespo1a__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1a_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo1a_| 0 (|crespo1a_-3| "" 3790356608 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|crespo1a_-2| "" 3790354062 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo1a_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo1b__TCC1| 0
  (|crespo1b__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1b_| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo1b__TCC2| 0
  (|crespo1b__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo1b__TCC3| 0
  (|crespo1b__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1b_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo1b__TCC4| 0
  (|crespo1b__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo1b_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo1b_| 0 (|crespo1b_-3| "" 3790356609 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|crespo1b_-2| "" 3790354064 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo1b_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo2a__TCC1| 0
  (|crespo2a__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2a_| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo2a__TCC2| 0
  (|crespo2a__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo2a__TCC3| 0
  (|crespo2a__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2a_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo2a__TCC4| 0
  (|crespo2a__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2a_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo2a__TCC5| 0
  (|crespo2a__TCC5-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (|crespo2a_| 0 (|crespo2a_-3| "" 3790356614 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|crespo2a_-2| "" 3790354068 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo2a_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo2b__TCC1| 0
  (|crespo2b__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2b_| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo2b__TCC2| 0
  (|crespo2b__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo2b__TCC3| 0
  (|crespo2b__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2b_| SUBTYPE "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|crespo2b__TCC4| 0
  (|crespo2b__TCC4-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2b_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo2b__TCC5| 0
  (|crespo2b__TCC5-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo2b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (|crespo2b_| 0
  (|crespo2b_-3| "" 3790356617 ("" (INTERVAL :MAXDEPTH 17) NIL) NIL SHOSTAK)
  (|crespo2b_-2| "" 3790354071 ("" (INTERVAL :MAXDEPTH 17) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo2b_-1| |nil| 3645973651 ("" (INTERVAL :MAXDEPTH 17) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo3a__TCC1| 0
  (|crespo3a__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3a_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo3a__TCC2| 0
  (|crespo3a__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo3a__TCC3| 0
  (|crespo3a__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3a_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (|crespo3a_| 0 (|crespo3a_-3| "" 3790356622 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|crespo3a_-2| "" 3790354076 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo3a_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|crespo3b__TCC1| 0
  (|crespo3b__TCC1-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3b_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo3b__TCC2| 0
  (|crespo3b__TCC2-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (|crespo3b__TCC3| 0
  (|crespo3b__TCC3-1| |nil| 3645973643 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|crespo3b_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (|crespo3b_| 0 (|crespo3b_-3| "" 3790356624 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|crespo3b_-2| "" 3790354078 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|crespo3b_-1| |nil| 3645973651 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Magnetism_exists__TCC1| 0
  (|Magnetism_exists__TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x1 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists__TCC2| 0
  (|Magnetism_exists__TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists__TCC3| 0
  (|Magnetism_exists__TCC3-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists__TCC4| 0
  (|Magnetism_exists__TCC4-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists__TCC5| 0
  (|Magnetism_exists__TCC5-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists__TCC6| 0
  (|Magnetism_exists__TCC6-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Magnetism_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (|Magnetism_exists_| 0
  (|Magnetism_exists_-3| "" 3790356634 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|Magnetism_exists_-2| "" 3790354088 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Magnetism_exists_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Butcher_exists__TCC1| 0
  (|Butcher_exists__TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Butcher_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (|Butcher_exists__TCC2| 0
  (|Butcher_exists__TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Butcher_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|Butcher_exists__TCC3| 0
  (|Butcher_exists__TCC3-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Butcher_exists_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|Butcher_exists__TCC4| 0
  (|Butcher_exists__TCC4-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Butcher_exists_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|Butcher_exists_| 0
  (|Butcher_exists_-3| "" 3790356636 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|Butcher_exists_-2| "" 3790354090 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Butcher_exists_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|AdaptiveLV_forall__TCC1| 0
  (|AdaptiveLV_forall__TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|AdaptiveLV_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (|AdaptiveLV_forall__TCC2| 0
  (|AdaptiveLV_forall__TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|AdaptiveLV_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|AdaptiveLV_forall__TCC3| 0
  (|AdaptiveLV_forall__TCC3-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|AdaptiveLV_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|AdaptiveLV_forall_| 0
  (|AdaptiveLV_forall_-3| "" 3790356640 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|AdaptiveLV_forall_-2| "" 3790354094 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|AdaptiveLV_forall_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Caprasse_exists__TCC1| 0
  (|Caprasse_exists__TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Caprasse_exists_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|Caprasse_exists__TCC2| 0
  (|Caprasse_exists__TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Caprasse_exists_| SUBTYPE "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (|Caprasse_exists_| 0
  (|Caprasse_exists_-3| "" 3790356643 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|Caprasse_exists_-2| "" 3790354097 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Caprasse_exists_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Schwefel_TCC1| 0
  (|Schwefel_TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Schwefel| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x1, exponentiation.^(interval_examples4Q.x2, 2))) /= 0, reals.>=(i, 0))}")))
 (|Schwefel_TCC2| 0
  (|Schwefel_TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Schwefel| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x2, 1)) /= 0, reals.>=(i, 0))}")))
 (|Schwefel_forall__TCC1| 0
  (|Schwefel_forall__TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Schwefel_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (|Schwefel_forall__TCC2| 0
  (|Schwefel_forall__TCC2-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Schwefel_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x1, exponentiation.^(interval_examples4Q.x3, 2))) /= 0, reals.>=(i, 0))}")))
 (|Schwefel_forall__TCC3| 0
  (|Schwefel_forall__TCC3-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|Schwefel_forall_| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x3, 1)) /= 0, reals.>=(i, 0))}")))
 (|Schwefel_forall_| 0
  (|Schwefel_forall_-3| "" 3790356646 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|Schwefel_forall_-2| "" 3790354100 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Schwefel_forall_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|ReactionDiffusion_forall_| 0
  (|ReactionDiffusion_forall_-3| "" 3790356648 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|ReactionDiffusion_forall_-2| "" 3790354102 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|ReactionDiffusion_forall_-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (NEG ADT-CONSTRUCTOR-DECL "[RealExpr -> (neg?)]" |IntervalExpr_adt|
     |interval_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (add?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|Chebyshev1_TCC1| 0
  (|Chebyshev1_TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Chebyshev1| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(number_fields.*(2, exponentiation.^(interval_examples4Q.x, 2)), 1)) /= 0, reals.>=(i, 0))}")))
 (|Chebyshev1| 0 (|Chebyshev1-3| "" 3790356650 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|Chebyshev1-2| "" 3790354103 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|Chebyshev1-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_le| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (ABS ADT-CONSTRUCTOR-DECL "[RealExpr -> (abs?)]" |IntervalExpr_adt|
         |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_5_TCC1| 0
  (|example_5_TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|example_5| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|example_5| 0 (|example_5-3| "" 3790356651 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|example_5-2| "" 3790354104 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_5-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_5_m1000_0_TCC1| 0
  (|example_5_m1000_0_TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|example_5_m1000_0| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|example_5_m1000_0| 0
  (|example_5_m1000_0-3| "" 3790356652 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|example_5_m1000_0-2| "" 3790354105 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_5_m1000_0-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|example_5_m800_0_TCC1| 0
  (|example_5_m800_0_TCC1-1| |nil| 3645974363 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|example_5_m800_0| SUBTYPE "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (|example_5_m800_0| 0
  (|example_5_m800_0-3| "" 3790356653 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|example_5_m800_0-2| "" 3790354107 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|example_5_m800_0-1| |nil| 3645974364 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (MULT ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (mult?)]"
     |IntervalExpr_adt| |interval_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[RealExpr, nat] -> (pow?)]" |IntervalExpr_adt|
     |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|max_1| 0 (|max_1-3| "" 3790356654 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|max_1-2| "" 3790354107 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MAX CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|max_1-1| |nil| 3708473097 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MAX CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|min_1| 0 (|min_1-3| "" 3790356654 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|min_1-2| "" 3790354108 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MIN CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK)
  (|min_1-1| |nil| 3708473465 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[RealExpr, RealExpr] -> (sub?)]"
     |IntervalExpr_adt| |interval_arith|)
    (MIN CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|))
   SHOSTAK))
 (|floor_sqrt_2_TCC1| 0
  (|floor_sqrt_2_TCC1-1| |nil| 3708474789 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   NIL (|floor_sqrt_2| SUBTYPE "interval_examples4Q.x" "nonneg_real")))
 (|floor_sqrt_2| 0
  (|floor_sqrt_2-3| "" 3790356655 ("" (INTERVAL) NIL) NIL SHOSTAK)
  (|floor_sqrt_2-2| "" 3790354109 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (FLOOR CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)
  (|floor_sqrt_2-1| |nil| 3708474797 ("" (INTERVAL) NIL NIL)
   ((|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|IntervalOutput| TYPE-EQ-DECL NIL |gbandb_boolexpr| |interval_arith|)
    (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|)
    (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|DirVarSelector| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|Output| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|interval| CONST-DECL "Output" |interval_bandb| |interval_arith|)
    (|alt_max| CONST-DECL "DirVar" |gbandb_boolexpr| |interval_arith|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|)
    (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|beval| DEF-DECL "bool" |interval_bexpr| |interval_arith|)
    (|eval| DEF-DECL "real" |interval_expr| |interval_arith|)
    (|sqrt_safe_eq| FORMULA-DECL NIL |reals_safe_ops| |reals|)
    (|vars_in_box_rec| DEF-DECL
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     |box| |interval_arith|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vars_in_box| FORMULA-DECL NIL |box| |interval_arith|)
    (|sound?| CONST-DECL "bool" |interval_bandb| |interval_arith|)
    (|interval_soundness| FORMULA-DECL NIL |interval_bandb| |interval_arith|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|r2E| CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (|SQRT_n| CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (FLOOR CONST-DECL "RealExpr" |interval_expr_extra| |interval_arith|)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (X CONST-DECL "RealExpr" |interval_expr| |interval_arith|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     |IntervalExpr_adt| |interval_arith|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     |interval_arith|)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| |interval_arith|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|))
   SHOSTAK)))

