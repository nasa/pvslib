(|fermats_little_theorem|
 (|prime_divides_choose_TCC1| 0
  (|prime_divides_choose_TCC1-1| |nil| 3564153926 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|prime_divides_choose| SUBTYPE "fermats_little_theorem.np"
    "{i: naturalnumbers.nat | reals.<=(i, fermats_little_theorem.p)}")))
 (|prime_divides_choose| 0
  (|prime_divides_choose-1| |nil| 3564153932
   ("" (SKEEP)
    (("" (CASE "divides(p,factorial(p))")
      (("1" (CASE "divides(p,(factorial(np)*factorial(p-np))*C(p,np))")
        (("1" (LEMMA "prime_divides_prod")
          (("1" (INST - "p")
            (("1" (ASSERT)
              (("1" (INST?)
                (("1" (ASSERT)
                  (("1" (LEMMA "prime_divides_prod")
                    (("1" (HIDE -3)
                      (("1" (INST - "p")
                        (("1" (ASSERT)
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (LEMMA "prime_divides_factorial")
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "prime_divides_factorial")
                                      (("1" (INST - "np" "p")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2) (("2" (EXPAND "C" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
         ("3" (ASSERT) NIL NIL))
        NIL)
       ("2" (LEMMA "prime_divides_factorial")
        (("2" (INST - "p" "p") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) NIL
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_divides_factorial| FORMULA-DECL NIL |primes| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (C CONST-DECL "posnat" |binomial| |reals|))
   SHOSTAK))
 (|Fermats_Little_TCC1| 0
  (|Fermats_Little_TCC1-1| |nil| 3411733664 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL) NIL
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|Fermats_Little| SUBTYPE "fermats_little_theorem.p"
    "{i: integers.int | booleans.OR(fermats_little_theorem.a /= 0, reals.>=(i, 0))}")))
 (|Fermats_Little| 0
  (|Fermats_Little-1| |nil| 3411733696
   ("" (INDUCT "a")
    (("1" (ASSERT)
      (("1" (SKEEP)
        (("1" (EXPAND "^")
          (("1" (EXPAND "expt")
            (("1" (ASSERT)
              (("1" (EXPAND "eq_mod")
                (("1" (INST + "0") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (NAME "A" "j")
        (("2" (REPLACE -1)
          (("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (INST - "p")
                (("2" (ASSERT)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "binomial_theorem")
                      (("2" (INST?)
                        (("2" (REPLACE -1)
                          (("2" (HIDE -1)
                            (("2" (INVOKE (NAME "FF" "%1") (! 1 1 3))
                              (("1" (REPLACE -1)
                                (("1" (EXPAND "eq_mod")
                                  (("1"
                                    (CASE
                                        "EXISTS (GG:[nat->nat]): FORALL (ii:nat): 1<=ii AND ii<=p-1 IMPLIES p*GG(ii)=FF(ii)")
                                    (("1" (SKEEP -1)
                                      (("1" (LEMMA "sigma_split")
                                        (("1" (INST - "FF" _ _ _)
                                          (("1" (INST-CP - "p" "0" "0")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -2)
                                                (("1" (EXPAND "sigma" + 1)
                                                  (("1" (EXPAND "sigma" + 1)
                                                    (("1" (EXPAND "FF" + 1)
                                                      (("1" (EXPAND "^" + 1)
                                                        (("1" (EXPAND "expt" +)
                                                          (("1"
                                                            (INST - "p" "1"
                                                             "p-1")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "sigma" +
                                                                     2)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "sigma"
                                                                       + 2)
                                                                      (("1"
                                                                        (CASE
                                                                            "FF(p) = 1")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (CASE
                                                                                  "divides(p,sigma(1, p - 1, FF))")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "divides"
                                                                                 -1)
                                                                                (("1"
                                                                                  (SKOLEM
                                                                                   -1
                                                                                   "kp")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (SKOLEM
                                                                                       -6
                                                                                       "rj")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -6)
                                                                                        (("1"
                                                                                          (CASE
                                                                                              "C(p,0) = 1")
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 +
                                                                                                 "kp+rj")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE-ALL-BUT
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "C")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   (-1
                                                                                    -2))
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "divides")
                                                                                    (("2"
                                                                                      (INST
                                                                                       +
                                                                                       "sigma(1,p-1,GG)")
                                                                                      (("2"
                                                                                        (REWRITE
                                                                                         "sigma_scal"
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "sigma_eq")
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (SKOSIMP*)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -
                                                                                                 "n!1")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (HIDE
                                                                                 2)
                                                                                (("3"
                                                                                  (CASE
                                                                                      "FORALL (TJ:nat): EXISTS (kr:nat): kr = sigma[nat](1,TJ,FF)")
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    (("1"
                                                                                      (SKEEP
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "FORALL (TJ:nat): EXISTS (kr:nat): kr = FF(TJ)")
                                                                                      (("1"
                                                                                        (HIDE-ALL-BUT
                                                                                         (-1
                                                                                          1))
                                                                                        (("1"
                                                                                          (INDUCT
                                                                                           "TJ")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "sigma"
                                                                                             +)
                                                                                            (("1"
                                                                                              (INST?)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (SKEEP
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "sigma"
                                                                                                   +)
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (SKOSIMP*)
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -2
                                                                                                           :DIR
                                                                                                           RL)
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             +
                                                                                                             "kr!1+kr")
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "FF")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (CASE
                                                                                                      "TJ>p")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       +
                                                                                                       "0")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (TYPEPRED
                                                                                                       "A")
                                                                                                      (("2"
                                                                                                        (CASE
                                                                                                            "A = 0")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (CASE
                                                                                                                  "TJ = p")
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (CASE
                                                                                                                      "C(p,p) = 1")
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (LEMMA
                                                                                                                         "expt_1i")
                                                                                                                        (("1"
                                                                                                                          (INST?)
                                                                                                                          (("1"
                                                                                                                            (REPLACE
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "expt")
                                                                                                                                  (("1"
                                                                                                                                    (INST
                                                                                                                                     +
                                                                                                                                     "1")
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE-ALL-BUT
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "C")
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   +
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "^"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "expt"
                                                                                                                       +)
                                                                                                                      (("2"
                                                                                                                        (LIFT-IF)
                                                                                                                        (("2"
                                                                                                                          (GROUND)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (REWRITE
                                                                                                             "expt_1i")
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "int_times_int_is_int")
                                                                                                                (("2"
                                                                                                                  (INST?)
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     +
                                                                                                                     "C(p, TJ) * A ^ (p - TJ)")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (LEMMA
                                                                                                                       "int_expt")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "^"
                                                                                                                         +)
                                                                                                                        (("2"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "FF")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REWRITE
                                                                                 "expt_1i")
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "expt_x0")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "C")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE (-1 2))
                                      (("2"
                                        (CASE
                                            "FORALL (ii:nat): 1 <= ii AND ii <= p - 1 IMPLIES EXISTS (kk:nat): p*kk = FF(ii)")
                                        (("1"
                                          (INST +
                                           "LAMBDA (ii:nat): choose({kk:nat | 1 <= ii AND ii <= p - 1 IMPLIES p*kk = FF(ii)})")
                                          (("1" (ASSERT)
                                            (("1" (SKOSIMP*)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (INVOKE (NAME "PK" "%1")
                                                   (! 1 1 2))
                                                  (("1" (REPLACE -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (EXPAND "nonempty?")
                                                      (("2" (EXPAND "empty?")
                                                        (("2" (INST -2 "ii!1")
                                                          (("2" (ASSERT)
                                                            (("2" (SKOSIMP*)
                                                              (("2"
                                                                (INST - "kk!1")
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (INST - "ii!1")
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "nonempty?")
                                                  (("2" (EXPAND "empty?")
                                                    (("2"
                                                      (INVOKE (CASE "%1")
                                                       (! -2 1))
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1" (SKOSIMP*)
                                                            (("1"
                                                              (INST - "kk!1")
                                                              (("1"
                                                                (EXPAND
                                                                 "member")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (INST - "0")
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2" (REPLACE 1)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (SKEEP)
                                            (("2" (EXPAND "FF")
                                              (("2" (LEMMA "expt_1i")
                                                (("2" (REWRITE -1)
                                                  (("2" (HIDE -1)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "prime_divides_choose")
                                                        (("2" (INST - "ii" "p")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND
                                                               "divides")
                                                              (("2" (SKOSIMP*)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (INST +
                                                                     "x!1*A^(p-ii)")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (CASE
                                                                            "x!1 > 0")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "posreal_times_posreal_is_posreal")
                                                                          (("1"
                                                                            (INST
                                                                             -
                                                                             "x!1"
                                                                             "A^(p-ii)")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "int_times_int_is_int")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "FORALL (krp:nat): integer_pred(A^krp)")
                                                                                      (("1"
                                                                                        (INST?)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (INDUCT
                                                                                             "krp")
                                                                                            (("1"
                                                                                              (GRIND)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (GRIND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("3"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (LEMMA
                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "p"
                                                                             "-x!1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)
                               ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|binomial_theorem| FORMULA-DECL NIL |polynomials| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL NIL
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|prime_divides_choose| FORMULA-DECL NIL |fermats_little_theorem| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|) NIL
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) NIL
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL (|int_expt| JUDGEMENT-TCC NIL |exponentiation| NIL)
    (|int_times_int_is_int| JUDGEMENT-TCC NIL |integers| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|eq_mod| CONST-DECL "bool" |eq_mod| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL))
   SHOSTAK))
 (|fermats_little_theorem_TCC1| 0
  (|fermats_little_theorem_TCC1-1| |nil| 3564160286 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL) NIL
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|fermats_little_theorem| SUBTYPE "fermats_little_theorem.p"
    "{i: integers.int | booleans.OR(fermats_little_theorem.k /= 0, reals.>=(i, 0))}")))
 (|fermats_little_theorem| 0
  (|fermats_little_theorem-1| |nil| 3564160294
   ("" (LEMMA "Fermats_Little")
    (("" (SKEEP)
      (("" (INST - "mod(k,p)" "p")
        (("1" (ASSERT)
          (("1" (TYPEPRED "mod(k,p)")
            (("1" (CASE "NOT mod(k,p)>=0")
              (("1" (HIDE-ALL-BUT 1)
                (("1" (EXPAND "mod")
                  (("1" (BOTH-SIDES "+" "p*floor(k/p)" 1)
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "floor(k/p)")
                        (("1" (MULT-BY -1 "p") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "abs" -2)
                (("2" (ASSERT)
                  (("2" (EXPAND "eq_mod")
                    (("2" (EXPAND "mod")
                      (("2" (NAME "K" "floor(k/p)")
                        (("2" (REPLACE -1)
                          (("2" (SKOLEM -4 "D")
                            (("2" (ASSERT)
                              (("2" (LEMMA "binomial_theorem")
                                (("2" (INST - "p" "k" "-p*K")
                                  (("2" (REPLACE -1)
                                    (("2" (HIDE -1)
                                      (("2" (ASSERT)
                                        (("2"
                                          (INVOKE (NAME "FF" "%1") (! -4 1 3))
                                          (("1" (REPLACE -1)
                                            (("1" (EXPAND "sigma")
                                              (("1" (EXPAND "FF" -5 1)
                                                (("1" (CASE "(-p * K)^0 = 1")
                                                  (("1" (REPLACE -1)
                                                    (("1" (CASE "C(p,p) = 1")
                                                      (("1" (REPLACES -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE
                                                                "EXISTS (G:int): p*G = sigma(0,p-1,FF)")
                                                            (("1" (SKOSIMP*)
                                                              (("1"
                                                                (REPLACE -1
                                                                         :DIR
                                                                         RL)
                                                                (("1"
                                                                  (INST +
                                                                   "D-K-G!1")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (NAME "KR"
                                                                      " (LAMBDA (i: nat):
                                                                        IF i >= p THEN 0 ELSE -C(p, i) * (-p)^(p-i-1) * K ^ (p - i) * k ^ i ENDIF)")
                                                                (("1"
                                                                  (INST +
                                                                   "sigma(0,p-1,KR)")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sigma_scal"
                                                                     :DIR RL)
                                                                    (("1"
                                                                      (REWRITE
                                                                       "sigma_eq")
                                                                      (("1"
                                                                        (HIDE
                                                                         2)
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "n")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "KR"
                                                                               +)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "FF"
                                                                                 +)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "expt_plus")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -
                                                                                     "-1-n+p"
                                                                                     "1"
                                                                                     "-p")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "(-p)^1 = -p")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACES
                                                                                             -1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "mult_expt")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -
                                                                                                 "p-n"
                                                                                                 "K"
                                                                                                 "-p")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (FLATTEN)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "^"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "expt"
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (LIFT-IF)
                                                                                                              (("2"
                                                                                                                (GROUND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (CASE
                                                                        "FORALL (jj:nat): jj<=p-1 IMPLIES rational_pred(sigma[nat](0, jj, KR)) AND
                                                         integer_pred(sigma[nat](0, jj, KR))")
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (INDUCT
                                                                         "jj")
                                                                        (("1"
                                                                          (HIDE
                                                                           -)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sigma")
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "sigma")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "KR")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "int_times_int_is_int")
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "int_times_int_is_int")
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "int_times_int_is_int")
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "int_expt")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "^")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (HIDE
                                                                           -)
                                                                          (("3"
                                                                            (SKEEP)
                                                                            (("3"
                                                                              (ASSERT)
                                                                              (("3"
                                                                                (EXPAND
                                                                                 "sigma"
                                                                                 +)
                                                                                (("3"
                                                                                  (REWRITE
                                                                                   "int_plus_int_is_int")
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "KR"
                                                                                     1)
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "^")
                                                                                      (("3"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (SKOSIMP*)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "C")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (HIDE 2)
            (("2" (EXPAND "mod")
              (("2" (BOTH-SIDES "+" "p*floor(k/p)" 1)
                (("2" (ASSERT)
                  (("2" (TYPEPRED "floor(k/p)")
                    (("2" (MULT-BY -1 "p") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (EXPAND "prime?") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_plus_ge1| FORMULA-DECL NIL |real_props| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) NIL
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|mult_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL)
    (|int_times_int_is_int| JUDGEMENT-TCC NIL |integers| NIL)
    (|int_expt| JUDGEMENT-TCC NIL |exponentiation| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) NIL NIL
    (|binomial_theorem| FORMULA-DECL NIL |polynomials| |reals|)
    (|eq_mod| CONST-DECL "bool" |eq_mod| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Fermats_Little| FORMULA-DECL NIL |fermats_little_theorem| NIL))
   SHOSTAK))
 (|fermats_little_theorem2_TCC1| 0
  (|fermats_little_theorem2_TCC1-1| NIL 3950270922 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE "fermats_little_theorem.q"
    "{i: integers.int | booleans.OR(fermats_little_theorem.k /= 0, reals.>=(i, 0))}")))
 (|fermats_little_theorem2_TCC2| 0
  (|fermats_little_theorem2_TCC2-1| NIL 3950270922 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE
    "exponentiation.^(fermats_little_theorem.k, fermats_little_theorem.q)"
    "int")))
 (|fermats_little_theorem2_TCC3| 0
  (|fermats_little_theorem2_TCC3-1| NIL 3950270922 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE "fermats_little_theorem.q" "posnat")))
 (|fermats_little_theorem2| 0
  (|fermats_little_theorem2-1| NIL 3950270929
   ("" (SKOLEM 1 ("k" "p"))
    (("" (LEMMA "fermats_little_theorem")
      (("" (INST -1 "k" "p")
        (("1" (TYPEPRED "p")
          (("1" (SPLIT)
            (("1" (EXPAND "eq_mod")
              (("1" (LEMMA "euclid_int")
                (("1" (INST -1 "p" "k")
                  (("1" (SKEEP)
                    (("1" (NAME-REPLACE "lhs" "k ^ p")
                      (("1" (REPLACES -1)
                        (("1" (EXPAND "lhs")
                          (("1" (SKEEP)
                            (("1"
                              (CASE-REPLACE " k_1 * p + p * q = p * (k_1 + q)")
                              (("1" (HIDE -1)
                                (("1" (LEMMA "rem_def")
                                  (("1" (INST -1 "p" "k ^ p" "r")
                                    (("1" (FLATTEN)
                                      (("1" (HIDE -1)
                                        (("1" (SPLIT)
                                          (("1" (REPLACES -1)
                                            (("1" (REWRITE "rem_sum1" :DIR RL)
                                              (("1" (REWRITE "rem_multiple1")
                                                (("1" (SIMPLIFY)
                                                  (("1" (REWRITE "rem_mod") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST 1 "k_1 + q") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fermats_little_theorem| FORMULA-DECL NIL |fermats_little_theorem| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_mod| CONST-DECL "bool" |eq_mod| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|lhs| SKOLEM-CONST-DECL "rat" |fermats_little_theorem| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_multiple1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|k| SKOLEM-CONST-DECL "int" |fermats_little_theorem| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |fermats_little_theorem| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|fermats_little_theorem3_TCC1| 0
  (|fermats_little_theorem3_TCC1-1| NIL 3950270922 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem3| SUBTYPE
    "((number_fields.-)(fermats_little_theorem.q, 1))"
    "{i: integers.int | booleans.OR(fermats_little_theorem.k /= 0, reals.>=(i, 0))}")))
 (|fermats_little_theorem3_TCC2| 0
  (|fermats_little_theorem3_TCC2-1| NIL 3950270922 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem3| SUBTYPE
    "exponentiation.^(fermats_little_theorem.k, ((number_fields.-)(fermats_little_theorem.q, 1)))"
    "int")))
 (|fermats_little_theorem3| 0
  (|fermats_little_theorem3-1| NIL 3950271060
   ("" (SKOLEM 1 ("k" "p"))
    (("" (PROP)
      (("" (LEMMA "fermats_little_theorem2")
        (("" (INST -1 "k" "p")
          (("" (EXPAND "^")
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (NAME-REPLACE "lhs" "rem(p)(expt(k, (p - 1)))")
                  (("1" (EXPAND "expt")
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (EXPAND "lhs") (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (TYPEPRED "p")
                          (("2" (EXPAND "lhs")
                            (("2" (REWRITE "same_remainder")
                              (("2"
                                (CASE-REPLACE
                                 "k * expt(k, p - 1) - k = k * ( expt(k, p - 1) -1 )")
                                (("1" (LEMMA "prime_divides_prod")
                                  (("1" (INST -1 "p")
                                    (("1" (SPLIT)
                                      (("1"
                                        (INST -1 "k" "(expt(k, p - 1) - 1)")
                                        (("1" (SPLIT)
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-1 2))
                                            (("2"
                                              (REWRITE "same_remainder" :DIR
                                               RL)
                                              NIL NIL))
                                            NIL)
                                           ("3" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "p")
                  (("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "p")
                  (("3" (EXPAND "prime?")
                    (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("4" (TYPEPRED "p")
                  (("4" (EXPAND "prime?")
                    (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |fermats_little_theorem| NIL)
    (|lhs| SKOLEM-CONST-DECL
     "{r: mod(p) | EXISTS q: expt(k, (p - 1)) = r + p * q}"
     |fermats_little_theorem| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|fermats_little_theorem2| FORMULA-DECL NIL |fermats_little_theorem| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)))

