(|product| (|T_pred_lem| 0 (|T_pred_lem-1| |nil| 3352120046 ("" (SKOSIMP* T) (("" (PROP) (("1" (LEMMA "connected_domain") (("1" (INST - "low!1" "high!1" "z!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "connected_domain") (("2" (INST - "j!1" "high!1" "z!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "connected_domain") (("3" (INST - "low!1" "j!1" "z!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "connected_domain") (("4" (INST - "low!1" "j!2" "z!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "connected_domain") (("2" (INST - "j!1" "j!2" "low!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL)) SHOSTAK)) (|high_low_rewrite_TCC1| 0 (|high_low_rewrite_TCC1-1| |nil| 3352229091 ("" (SKOSIMP*) (("" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL)) NIL (|high_low_rewrite| SUBTYPE "product.n" "T_high"))) (|high_low_rewrite| 0 (|high_low_rewrite-1| |nil| 3352228842 ("" (SKOSIMP*) (("" (INST?) (("" (PROP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|product_TCC1| 0 (|product_TCC1-1| |nil| 3410094710 ("" (SKOSIMP*) (("" (TYPEPRED "low!1") (("" (TYPEPRED "high!1") (("" (ASSERT) (("" (SKOSIMP*) (("" (TYPEPRED "j!1") (("" (LEMMA "connected_domain") (("" (INST - "low!1" "j!1" "high!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (LEMMA "connected_domain") (("2" (INST - "j!2" "j!1" "low!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL)) NIL (|product| SUBTYPE "product.high" "T"))) (|product_TCC2| 0 (|product_TCC2-1| |nil| 3410094710 ("" (SKEEP) (("" (TYPEPRED "high") (("" (TYPEPRED "low") (("" (ASSERT) (("" (GROUND) (("1" (INST + "high") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "high") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (INST + "j!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL)) NIL (|product| SUBTYPE "(number_fields.-)(product.high, 1)" "T_high"))) (|product_TCC3| 0 (|product_TCC3-1| |nil| 3410094710 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|product| TERMINATION "product.product(product.low, (number_fields.-)(product.high, 1), product.F)" "NIL"))) (|product_spl_TCC1| 0 (|product_spl_TCC1-1| |nil| 3410103726 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_spl| SUBTYPE "(number_fields.+)((number_fields.+)(product.low, product.nn), product.rng)" "T_high"))) (|product_spl_TCC2| 0 (|product_spl_TCC2-1| |nil| 3410103726 ("" (SKEEP) (("" (INST + "low + nn + rng") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|low| SKOLEM-CONST-DECL "T_low" |product| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nn| SKOLEM-CONST-DECL "nat" |product| NIL) (|rng| SKOLEM-CONST-DECL "nat" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_spl| SUBTYPE "(number_fields.+)(product.low, product.nn)" "T_high"))) (|product_spl_TCC3| 0 (|product_spl_TCC3-1| |nil| 3410103726 ("" (SKEEP) (("" (TYPEPRED "low") (("" (SPLIT -1) (("1" (INST + "low") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|low| SKOLEM-CONST-DECL "T_low" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_spl| SUBTYPE "(number_fields.+)((number_fields.+)(product.low, product.nn), 1)" "T_low"))) (|product_spl| 0 (|product_spl-1| |nil| 3410103740 ("" (INDUCT "rng") (("1" (ASSERT) (("1" (EXPAND "product") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "product" + (1 3)) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "T_pred_lem") (("2" (INST?) (("2" (INST - "1+j!1+low!1+nn!1" "low!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (INST + "low!1+nn!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "T_pred_lem") (("2" (INST?) (("2" (INST - "low!1+nn!1+rng!2" "low!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (INST + "low!1+nn!1+rng!2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL) ((|rng!2| SKOLEM-CONST-DECL "nat" |product| NIL) (|nn!1| SKOLEM-CONST-DECL "nat" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|nn!1| SKOLEM-CONST-DECL "nat" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|rng!2| SKOLEM-CONST-DECL "nat" |product| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|product| DEF-DECL "int" |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|product_split_TCC1| 0 (|product_split_TCC1-1| |nil| 3410103726 ("" (SKEEP) (("" (TYPEPRED "high") (("" (ASSERT) (("" (SPLIT -1) (("1" (INST + "high") NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|high| SKOLEM-CONST-DECL "T_high" |product| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_split| SUBTYPE "product.z" "T_high"))) (|product_split_TCC2| 0 (|product_split_TCC2-1| |nil| 3410103726 ("" (SKEEP) (("" (TYPEPRED "low") (("" (SPLIT -1) (("1" (INST + "low") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|low| SKOLEM-CONST-DECL "T_low" |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_split| SUBTYPE "(number_fields.+)(product.z, 1)" "T_low"))) (|product_split| 0 (|product_split-1| |nil| 3410103810 ("" (SKOSIMP*) (("" (CASE "high!1<low!1") (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE-REPLACE "z!1=low!1-1") (("1" (ASSERT) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "product_spl") (("2" (INST - "F!1" "low!1" "z!1-low!1" "high!1-z!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 3)) (("1" (USE "T_pred_lem") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product| DEF-DECL "int" |product| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|product_spl| FORMULA-DECL NIL |product| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (>= CONST-DECL "bool" |reals| NIL) (|z!1| SKOLEM-CONST-DECL "int" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) NIL)) (|product_div| 0 (|product_div-1| |nil| 3410104326 ("" (SKEEP) (("" (CROSS-MULT 2) (("" (LEMMA "product_split") (("" (INST - "F" "high" "low" "z") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|product| DEF-DECL "int" |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product_split| FORMULA-DECL NIL |product| NIL)) SHOSTAK)) (|product_div_neg| 0 (|product_div_neg-1| |nil| 3410104551 ("" (SKEEP) (("" (CROSS-MULT 2) (("" (LEMMA "product_split") (("" (INST - "F" "high" "low" "z") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|product_split| FORMULA-DECL NIL |product| NIL)) SHOSTAK)) (|product_eq_arg| 0 (|product_eq_arg-1| |nil| 3410104588 ("" (SKOSIMP*) (("" (EXPAND "product") (("" (EXPAND "product") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|product| DEF-DECL "int" |product| NIL)) SHOSTAK)) (|product_first_TCC1| 0 (|product_first_TCC1-1| |nil| 3410104637 ("" (SKEEP) (("" (TYPEPRED "low") (("" (ASSERT) (("" (SKOSIMP*) (("" (TYPEPRED "high") (("" (ASSERT) (("" (SPLIT -1) (("1" (LEMMA "connected_domain") (("1" (ASSERT) (("1" (INST - "j!1" "high" "low") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "connected_domain") (("2" (INST - "j!1" "j!2" "low") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_first| SUBTYPE "product.low" "T"))) (|product_first_TCC2| 0 (|product_first_TCC2-1| |nil| 3410104637 ("" (SKEEP) (("" (TYPEPRED "low") (("" (ASSERT) (("" (SPLIT -1) (("1" (INST + "low") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|low| SKOLEM-CONST-DECL "T_low" |product| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_first| SUBTYPE "(number_fields.+)(product.low, 1)" "T_low"))) (|product_first| 0 (|product_first-1| |nil| 3410104659 ("" (SKOSIMP*) (("" (LEMMA "product_split") (("" (INST?) (("" (INST -1 "low!1") (("" (REWRITE "product_eq_arg") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product_split| FORMULA-DECL NIL |product| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|product_last_TCC1| 0 (|product_last_TCC1-1| |nil| 3410104637 ("" (SKEEP) (("" (TYPEPRED "high") (("" (SPLIT -1) (("1" (INST + "high") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|high| SKOLEM-CONST-DECL "T_high" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_last| SUBTYPE "(number_fields.-)(product.high, 1)" "T_high"))) (|product_last_TCC2| 0 (|product_last_TCC2-1| |nil| 3410104637 ("" (SKEEP) (("" (TYPEPRED "high") (("" (ASSERT) (("" (SKOSIMP*) (("" (LEMMA "connected_domain") (("" (INST - "low" "j!1" "high") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "low") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (LEMMA "connected_domain") (("2" (ASSERT) (("2" (INST - "j!2" "j!1" "low") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|low| SKOLEM-CONST-DECL "T_low" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_last| SUBTYPE "product.high" "T"))) (|product_last| 0 (|product_last-1| |nil| 3410104722 ("" (SKOSIMP*) (("" (REWRITE "product") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|product| DEF-DECL "int" |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|product_middle_TCC1| 0 (|product_middle_TCC1-1| |nil| 3410104812 ("" (SKEEP) (("" (TYPEPRED "i") (("" (INST + "i") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_middle| SUBTYPE "(number_fields.-)(product.i, 1)" "T_high"))) (|product_middle_TCC2| 0 (|product_middle_TCC2-1| |nil| 3410104812 ("" (SKEEP) (("" (TYPEPRED "i") (("" (INST + "i") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|product_middle| SUBTYPE "(number_fields.+)(product.i, 1)" "T_low"))) (|product_middle| 0 (|product_middle-1| |nil| 3410104844 ("" (SKOSIMP*) (("" (LEMMA "product_split") (("" (INST?) (("" (INST -1 "i!1") (("" (ASSERT) (("" (ASSERT) (("" (REPLACE -1) (("" (HIDE -1) (("" (EXPAND "product" 1 1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product_split| FORMULA-DECL NIL |product| NIL) (|product| DEF-DECL "int" |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|product_const_TCC1| 0 (|product_const_TCC1-1| |nil| 3410104812 ("" (SUBTYPE-TCC) NIL NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_const| SUBTYPE "((number_fields.+)((number_fields.-)(product.high, product.low), 1))" "{i: integers.int | booleans.OR(product.nzr /= 0, reals.>=(i, 0))}"))) (|product_const| 0 (|product_const-3| "" 3882145536 ("" (SKOLEM 1 (_ _ "nzr")) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "(1 - low!1 + k!1)" "1" "nzr") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|product_const-2| |nil| 3410105217 ("" (SKOLEM 1 (_ _ NZR)) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "(1 - low!1 + k!1)" "1" "nzr") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|product| DEF-DECL "int" |product| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL) (|product_const-1| |nil| 3410104877 ("" (SKOLEM 1 (_ _ X)) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "(1 - low!1 + k!1)" "1" "x") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL NIL)) (|product_zero| 0 (|product_zero-1| |nil| 3410105243 ("" (SKOSIMP*) (("" (REWRITE "product_first") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|product_first| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|product_scal_TCC1| 0 (|product_scal_TCC1-1| |nil| 3410105938 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_scal| SUBTYPE "((number_fields.+)((number_fields.-)(product.high, product.low), 1))" "{i: integers.int | booleans.OR(product.a /= 0, reals.>=(i, 0))}"))) (|product_scal| 0 (|product_scal-1| |nil| 3410105347 ("" (SKOLEM 1 ("F" "a" _ _)) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (GROUND) (("1" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (ASSERT) (("1" (REWRITE "expt_x1") NIL NIL)) NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) (("2" (REPLACE -2) (("2" (HIDE -2) (("2" (LEMMA "expt_plus") (("2" (INST - "(1 - low!1 + k!1)" "1" "a") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|product| DEF-DECL "int" |product| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|a| SKOLEM-CONST-DECL "int" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|product_ge_0_TCC1| 0 (|product_ge_0_TCC1-1| |nil| 3410107098 ("" (SKOSIMP*) (("" (TYPEPRED "n!1") (("" (TYPEPRED "low!1") (("" (ASSERT) (("" (TYPEPRED "high!1") (("" (LEMMA "connected_domain") (("" (SPLIT -2) (("1" (SPLIT -3) (("1" (INST - "low!1" "high!1" "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "j!1" "high!1" "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "low!1" "j!1" "n!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (LEMMA "connected_domain") (("2" (INST - "j!2" "j!1" "low!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL)) NIL (|product_ge_0| SUBTYPE "product.n" "T"))) (|product_ge_0| 0 (|product_ge_0-1| |nil| 3410107124 ("" (SKOLEM 1 ("F" _ _)) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (SKOSIMP*) (("1" (REWRITE "product_eq_arg") (("1" (INST?) NIL NIL) ("2" (HIDE -1 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (PROP) (("1" (INST?) (("1" (ASSERT) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP* T) (("4" (HIDE -1) (("4" (USE "T_pred_lem") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP* T) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|product| DEF-DECL "int" |product| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (F SKOLEM-CONST-DECL "[T -> int]" |product| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|product_gt_0| 0 (|product_gt_0-1| |nil| 3410107170 ("" (SKOLEM 1 ("F" _ _)) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (SKOSIMP*) (("1" (REWRITE "product_eq_arg") (("1" (INST?) NIL NIL) ("2" (HIDE -1 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (PROP) (("1" (INST?) (("1" (ASSERT) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (SKOSIMP*) (("3" (INST + "high!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP* T) (("4" (HIDE -1) (("4" (USE "T_pred_lem") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP* T) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|product| DEF-DECL "int" |product| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (F SKOLEM-CONST-DECL "[T -> int]" |product| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|product_shift_T_TCC1| 0 (|product_shift_T_TCC1-1| |nil| 3410108130 ("" (SKOSIMP* T) (("" (PROP) (("1" (INST - "low!1") NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1+z!1") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL) (|z!1| SKOLEM-CONST-DECL "int" |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL)) NIL (|product_shift_T| SUBTYPE "(number_fields.+)(product.low, product.z)" "T_low"))) (|product_shift_T_TCC2| 0 (|product_shift_T_TCC2-2| |nil| 3410109140 ("" (SKOSIMP* T) (("" (PROP) (("1" (INST?) NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "z!1+j!1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL) (|z!1| SKOLEM-CONST-DECL "int" |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL)) NIL (|product_shift_T| SUBTYPE "(number_fields.+)(product.high, product.z)" "T_high")) (|product_shift_T_TCC2-1| |nil| 3410108130 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|product_shift_T| SUBTYPE "(number_fields.+)(product.high, product.z)" "T_high"))) (|product_shift_T_TCC3| 0 (|product_shift_T_TCC3-1| |nil| 3410108130 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_shift_T| SUBTYPE "(number_fields.+)(product.i, product.z)" "T"))) (|product_shift_T| 0 (|product_shift_T-1| |nil| 3410108147 ("" (SKOLEM 1 ("F" _ _ "z")) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (SKOSIMP*) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (HIDE -1 2) (("1" (USE "T_pred_lem") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST?) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP* T) (("4" (TYPEPRED "high!1") (("4" (PROP) (("1" (INST + "high!1") NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -1 2 3) (("5" (SKOSIMP* T) (("5" (TYPEPRED "high!1") (("5" (PROP) (("1" (INST + "high!1+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE -1 2 3) (("6" (SKOSIMP* T) (("6" (ASSERT) (("6" (TYPEPRED "low!1") (("6" (PROP) (("1" (INST?) NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL) ("3" (HIDE 2) (("3" (SKOSIMP* T) (("3" (HIDE -1 -4) (("3" (ASSERT) (("3" (PROP) (("1" (TYPEPRED "high!1") (("1" (PROP) (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "j!1+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "high!1") (("2" (PROP) (("1" (INST?) NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "j!2+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP* T) (("4" (HIDE -1) (("4" (INST?) (("4" (ASSERT) (("4" (SKOSIMP*) (("4" (REVEAL -1) (("4" (INST + "j!1+z") (("1" (ASSERT) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product| DEF-DECL "int" |product| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|z| SKOLEM-CONST-DECL "int" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|j!2| SKOLEM-CONST-DECL "T" |product| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|j!1| SKOLEM-CONST-DECL "T" |product| NIL)) NIL)) (|product_shift_T2_TCC1| 0 (|product_shift_T2_TCC1-1| |nil| 3410111446 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_shift_T2| SUBTYPE "(number_fields.+)(product.low, product.z)" "T_low"))) (|product_shift_T2_TCC2| 0 (|product_shift_T2_TCC2-1| |nil| 3410111446 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|product_shift_T2| SUBTYPE "(number_fields.+)(product.high, product.z)" "T_high"))) (|product_shift_T2| 0 (|product_shift_T2-1| |nil| 3410111473 ("" (SKOLEM 1 ("F" _ _ "z")) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (FLATTEN) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (ASSERT) (("2" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "connected_domain") (("2" (INST - "low!1+z" "1+k!1+z" "k!1+z") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP* T) (("3" (TYPEPRED "high!1") (("3" (INST + "high!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP*) NIL NIL)) NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ((IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|product| DEF-DECL "int" |product| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|z| SKOLEM-CONST-DECL "int" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|connected_domain| FORMULA-DECL NIL |product| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|product_prod| 0 (|product_prod-1| |nil| 3410109740 ("" (SKOLEM 1 ("F" "G" _ _)) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") NIL NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (REPLACE -2 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP* T) (("3" (TYPEPRED "high!1") (("3" (INST + "high!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product| DEF-DECL "int" |product| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|product_restrict| 0 (|product_restrict-2| "" 3790081339 ("" (SKOLEM 1 ("F" "h" _ "l" _)) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (EXPAND "restrict") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (REWRITE "restrict") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "h") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|product| DEF-DECL "int" |product| NIL) (|restrict| CONST-DECL "[T -> int]" |product| NIL) (|h| SKOLEM-CONST-DECL "T" |product| NIL) (|l| SKOLEM-CONST-DECL "T" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|product_restrict-1| |nil| 3255975799 ("" (SKOLEM 1 ("F" "h" _ "l" _)) (("" (REWRITE "high_low_rewrite") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (REWRITE "product_eq_arg") (("1" (EXPAND "restrict") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (REWRITE "restrict") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "h") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (INST + "l") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP* T) (("5" (HIDE -3 -4) (("5" (INST + "n!2") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "h") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (INST + "l") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|product_restrict_to| 0 (|product_restrict_to-1| |nil| 3255975799 ("" (SKOSIMP*) (("" (CASE "high!1 < low!1") (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "product_restrict") (("1" (USE "T_pred_lem") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|product| DEF-DECL "int" |product| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|product_restrict| FORMULA-DECL NIL |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|product_restrict_eq| 0 (|product_restrict_eq-1| |nil| 3255975799 ("" (SKOSIMP*) (("" (CASE "high!1 < low!1") (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "product_restrict") (("2" (INST?) (("2" (INST -1 "high!1" "low!1") (("1" (ASSERT) (("1" (REPLACE*) (("1" (HIDE -1 -2) (("1" (LEMMA "product_restrict") (("1" (INST -1 "G!1" "high!1" "high!1" "low!1" "low!1") (("1" (ASSERT) NIL NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|product| DEF-DECL "int" |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (|product_restrict| FORMULA-DECL NIL |product| NIL)) NIL)) (|product_eq| 0 (|product_eq-1| |nil| 3255975799 ("" (SKOSIMP*) (("" (LEMMA "product_restrict_eq") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (EXPAND "restrict") (("" (APPLY-EXTENSIONALITY 1 :|hide?| T) (("" (LIFT-IF) (("" (GROUND) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product_restrict_eq| FORMULA-DECL NIL |product| NIL) (|restrict| CONST-DECL "[T -> int]" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|product_with| 0 (|product_with-1| |nil| 3255975799 ("" (SKOSIMP*) (("" (CASE "i!1 = low!1") (("1" (REWRITE "product_first") (("1" (LEMMA "product_first") (("1" (INST -1 "G!1" "high!1" "low!1") (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (HIDE -1 -5) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "a!1 * (G!1(low!1) * product(1 + low!1, high!1, G!1)) / G!1(low!1) =
a!1 * product(1 + low!1, high!1, G!1)") (("1" (HIDE -1) (("1" (LEMMA "product_eq") (("1" (INST?) (("1" (INST - "G!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "i!1 = high!1") (("1" (REWRITE "product_last") (("1" (LEMMA "product_last") (("1" (INST -1 "G!1" "high!1" "low!1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (CASE-REPLACE "a!1 * (product(low!1, high!1 - 1, G!1) * G!1(high!1)) / G!1(high!1) =
a!1 * (product(low!1, high!1 - 1, G!1))") (("1" (HIDE -1) (("1" (LEMMA "product_eq") (("1" (INST?) (("1" (INST - "G!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "product_split") (("2" (INST?) (("2" (INST -1 "i!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (LEMMA "product_split") (("2" (INST -1 "G!1" "high!1" "low!1" "i!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (LEMMA "product_last") (("2" (INST-CP -1 "F!1" "i!1" "low!1") (("2" (INST -1 "G!1" "i!1" "low!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -3) (("2" (HIDE -3) (("2" (GROUND) (("2" (CASE-REPLACE "product(low!1, i!1 - 1, G!1 WITH [i!1 := a!1]) = product(low!1, i!1 - 1, G!1)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "       a!1 *
        (G!1(i!1) * product(1 + i!1, high!1, G!1) *
          product(low!1, i!1 - 1, G!1))
        / G!1(i!1) =        a!1 *
        (product(1 + i!1, high!1, G!1) *
          product(low!1, i!1 - 1, G!1))") (("1" (HIDE -1) (("1" (LEMMA "product_eq") (("1" (INST?) (("1" (INST - "G!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "product_eq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|T_low| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|product| DEF-DECL "int" |product| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|product_eq| FORMULA-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|product_first| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product_split| FORMULA-DECL NIL |product| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|product_last| FORMULA-DECL NIL |product| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) NIL)) (|product_nonneg| 0 (|product_nonneg-1| |nil| 3255975799 ("" (SKOLEM 1 ("F" _ _)) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (SKOSIMP*) (("1" (INST?) NIL NIL)) NIL) ("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (PROP) (("2" (INST?) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP* T) (("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|product| DEF-DECL "int" |product| NIL) (F SKOLEM-CONST-DECL "[T -> int]" |product| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|prod_nat| 0 (|prod_nat-1| |nil| 3410177295 ("" (SKOSIMP*) (("" (LEMMA "product_nonneg") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|product_nonneg| FORMULA-DECL NIL |product| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|prod_nat| SUBTYPE "product.product(product.low, product.high, product.Fnat)" "nat"))) (|prod_posnat| 0 (|prod_posnat-1| |nil| 3410176926 ("" (SKOLEM 1 ("FF" _ _)) (("" (REWRITE "high_low_rewrite") (("" (HIDE 2) (("" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "product") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "n" 2) (("1" (REWRITE "product_eq_arg") (("1" (USE "T_pred_lem") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (USE "T_pred_lem") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "product" +) (("2" (TYPEPRED "FF(1 + k!1)") (("2" (ASSERT) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP* T) (("3" (USE "T_pred_lem") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|high_low_rewrite| FORMULA-DECL NIL |product| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[int -> boolean]" |product| NIL) (T FORMAL-SUBTYPE-DECL NIL |product| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |product| NIL) (|T_low| TYPE-EQ-DECL NIL |product| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|product| DEF-DECL "int" |product| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|high!1| SKOLEM-CONST-DECL "T_high" |product| NIL) (|low!1| SKOLEM-CONST-DECL "T_low" |product| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_pred_lem| FORMULA-DECL NIL |product| NIL) (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| NIL) (|product_eq_arg| FORMULA-DECL NIL |product| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|prod_posnat| SUBTYPE "product.product(product.low, product.high, product.Fposnat)" "posnat"))))
