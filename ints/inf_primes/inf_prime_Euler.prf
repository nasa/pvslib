(|inf_prime_Euler|
 (|ln_H_n_ineq| 0
  (|ln_H_n_ineq-1| NIL 3946301784
   ("" (CASE "FORALL(n: nat | n > 1): ln(n) <= harmonic_number(n-1)")
    (("1" (SKEEP)
      (("1" (INST -1 "n")
        (("1" (EXPAND "harmonic_number")
          (("1" (EXPAND "sigma" 1)
            (("1" (LEMMA "sigma_ge_0")
              (("1" (INST -1 "harmonic_sequence" "n-2" "0")
                (("1" (PROP)
                  (("1" (EXPAND ">=")
                    (("1" (EXPAND "harmonic_sequence" 1 1)
                      (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKEEP)
                      (("2" (EXPAND "harmonic_sequence")
                        (("2" (EXPAND ">=")
                          (("2" (TYPEPRED "n_1")
                            (("2" (LEMMA "le_div_le_pos")
                              (("2" (INST -1 "0" "1+n_1" "1+n_1" "1")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE-REPLACE "n = 1")
          (("1" (EXPAND "harmonic_number")
            (("1" (EXPAND "sigma")
              (("1" (EXPAND "harmonic_sequence")
                (("1" (EXPAND "sigma")
                  (("1" (REWRITE "ln_1") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (MEASURE-INDUCT "n" "n")
        (("2" (SKEEP)
          (("2" (CASE-REPLACE "x = 2")
            (("1" (HIDE -2)
              (("1" (EXPAND "harmonic_number")
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma")
                    (("1" (EXPAND "harmonic_sequence")
                      (("1" (LEMMA "ln_2_bnds") (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST -1 "x-1")
              (("1" (ASSERT)
                (("1" (EXPAND "harmonic_number")
                  (("1" (EXPAND "sigma" 2)
                    (("1" (EXPAND "ln")
                      (("1" (LEMMA "Integral_split[posreal]")
                        (("1"
                          (INST -1 "1" "x-1" "x"
                           "(LAMBDA (t: posreal): 1 / t)")
                          (("1" (LEMMA "ln_prep")
                            (("1" (INST -1 "x")
                              (("1" (LEMMA "Integrable?_inside[posreal]")
                                (("1"
                                  (INST-CP -1 "1" "x"
                                   "(LAMBDA (t: posreal): 1 / t)" "1" "x-1")
                                  (("1"
                                    (INST -1 "1" "x"
                                     "(LAMBDA (t: posreal): 1 / t)" "x-1" "x")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -4 2 RL HIDE)
                                        (("1"
                                          (CASE
                                              "Integral(x - 1, x, (LAMBDA (t: posreal): 1 / t)) <=  harmonic_sequence(x - 2)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-1 1))
                                            (("2" (EXPAND "harmonic_sequence")
                                              (("2"
                                                (LEMMA "Integral_le[posreal]")
                                                (("2"
                                                  (INST -1 "x-1" "x"
                                                   "(LAMBDA (t: posreal): 1 / t)"
                                                   "const_fun(1/(x-1))")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA
                                                       "Integral_const_fun[posreal]")
                                                      (("2"
                                                        (INST -1 "1/(x-1)"
                                                         "x-1" "x")
                                                        (("2" (PROP)
                                                          (("1" (SIMPLIFY -3)
                                                            (("1"
                                                              (REPLACE -3 1 RL
                                                                       HIDE)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT 1)
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "x_1")
                                                                (("2"
                                                                  (EXPAND
                                                                   "const_fun")
                                                                  (("2"
                                                                    (LEMMA
                                                                     "le_div_le_pos")
                                                                    (("2"
                                                                      (INST -1
                                                                       "1"
                                                                       "x-1"
                                                                       "x_1"
                                                                       "1")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|x| SKOLEM-CONST-DECL "{n: nat | n > 1}" |inf_prime_Euler| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|)
    (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|)
    (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    (|constant_seq2| APPLICATION-JUDGEMENT "(convergent_nz?)" |convergence_ops|
     |analysis|)
    (|Integral_le| FORMULA-DECL NIL |integral| |analysis|)
    (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|)
    (|ln_prep| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|Integral_split| FORMULA-DECL NIL |integral| |analysis|)
    (|ln_2_bnds| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ln_1| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_ge_0| FORMULA-DECL NIL |sigma| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|harmonic_sequence| CONST-DECL "sequence[real]" |inf_prime_Euler| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_Euler| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|harmonic_number| CONST-DECL "real" |inf_prime_Euler| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|series_prod_2_TCC1| 0
  (|series_prod_2_TCC1-1| NIL 3945676884 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|))
   NIL
   (|series_prod_2| SUBTYPE "series.series(inf_prime_Euler.c)"
    "(convergence_sequences.convergent?)")))
 (|series_prod_2| 0
  (|series_prod_2-1| NIL 3947158763
   ("" (SKEEP)
    (("" (LEMMA "lim_series_product")
      (("" (INST -1 "a" "b")
        (("" (ASSERT)
          ((""
            (INST 1 "LAMBDA (i: nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i))")
            (("1" (ASSERT)
              (("1" (EXPAND "pairwise_prod_seq")
                (("1" (PROP)
                  (("1" (HIDE-ALL-BUT 1)
                    (("1" (SKEEP)
                      (("1" (INST 1 "Tri(i_1+j)+i_1")
                        (("1" (REWRITE "s_prod_idx1_id")
                          (("1" (REWRITE "s_prod_idx2_id") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKEEP)
                    (("2" (INST 1 "s_prod_idx1(k)" "s_prod_idx2(k)") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "s_prod_conv")
              (("2" (INST -1 "a" "b")
                (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lim_series_product| FORMULA-DECL NIL |series_extra| NIL)
    (|s_prod_conv| FORMULA-DECL NIL |series_extra| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|s_prod_idx1_id| FORMULA-DECL NIL |series_extra| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|s_prod_idx2_id| FORMULA-DECL NIL |series_extra| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|pairwise_prod_seq| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|a| SKOLEM-CONST-DECL "sequence[nnreal]" |inf_prime_Euler| NIL)
    (|s_prod_idx1| CONST-DECL "nat" |series_extra| NIL)
    (|b| SKOLEM-CONST-DECL "sequence[nnreal]" |inf_prime_Euler| NIL)
    (|s_prod_idx2| CONST-DECL "nat" |series_extra| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|finseq_n_conv?_TCC1| 0
  (|finseq_n_conv?_TCC1-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   NIL (|finseq_n_conv?| SUBTYPE "inf_prime_Euler.i" "below[fs`length]")))
 (|product_seq_TCC1| 0
  (|product_seq_TCC1-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|product_seq| SUBTYPE "0" "T_low[below[n]]")))
 (|product_seq_TCC2| 0
  (|product_seq_TCC2-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|product_seq| SUBTYPE "(number_fields.-)(inf_prime_Euler.n, 1)"
    "T_high[below[n]]")))
 (|product_seq_TCC3| 0
  (|product_seq_TCC3-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|product_seq| SUBTYPE "inf_prime_Euler.i" "below[index`length]")))
 (|product_seq_TCC4| 0
  (|product_seq_TCC4-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|product_seq| SUBTYPE "inf_prime_Euler.i" "below[fs`length]")))
 (|product_seq_TCC5| 0
  (|product_seq_TCC5-1| NIL 3945676293 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|))
   NIL
   (|product_seq| ASSUMING "reals@product[below[n]].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|series_prods_TCC1| 0
  (|series_prods_TCC1-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|series_prods| SUBTYPE "0" "T_low[below[n]]")))
 (|series_prods_TCC2| 0
  (|series_prods_TCC2-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|series_prods| SUBTYPE "(number_fields.-)(inf_prime_Euler.n, 1)"
    "T_high[below[n]]")))
 (|series_prods_TCC3| 0
  (|series_prods_TCC3-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (< CONST-DECL "bool" |reals| NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|series_prods| SUBTYPE "inf_prime_Euler.i" "below[fs`length]")))
 (|series_prods_TCC4| 0
  (|series_prods_TCC4-1| NIL 3945676293 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|))
   NIL
   (|series_prods| SUBTYPE "inf_prime_Euler.fs`seq(inf_prime_Euler.i)"
    "(series.conv_series?)")))
 (|series_prods| 0
  (|series_prods-1| NIL 3945676306
   ("" (MEASURE-INDUCT "n" "n")
    (("1" (SKEEP)
      (("1" (SKEEP)
        (("1" (CASE-REPLACE "x = 1")
          (("1" (HIDE -2)
            (("1" (INST 1 "fs`seq(0)")
              (("1" (PROP)
                (("1" (EXPAND "product")
                  (("1" (EXPAND "product") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "product_seq")
                    (("2" (EXPAND "product")
                      (("2" (EXPAND "product")
                        (("2"
                          (INST 1
                           "(# length := 1, seq := LAMBDA(j:below[1]): i#)")
                          NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (SKEEP)
                  (("3" (TYPEPRED "c")
                    (("3" (EXPAND "product_seq")
                      (("3" (SKEEP)
                        (("3" (REPLACES -2)
                          (("3" (EXPAND "product")
                            (("3" (EXPAND "product")
                              (("3" (INST 1 "index`seq(0)")
                                (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "fs")
                (("2" (EXPAND "finseq_n_conv?")
                  (("2" (FLATTEN) (("2" (INST -2 "0") NIL NIL)) NIL)) NIL))
                NIL)
               ("3" (TYPEPRED "fs")
                (("3" (EXPAND "finseq_n_conv?") (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (CASE "FORALL (i: below[x]): i < fs`length")
              (("1" (ASSERT)
                (("1"
                  (INST -2
                   "(# length := x-1, seq := LAMBDA(i:below[x-1]): fs`seq(i) #)")
                  (("1" (SKEEP)
                    (("1" (LEMMA "series_prod_2")
                      (("1" (INST -1 "b" "fs`seq(x-1)")
                        (("1" (PROP)
                          (("1" (SKEEP)
                            (("1" (INST 2 "c")
                              (("1" (PROP)
                                (("1" (EXPAND "product" 1)
                                  (("1" (HIDE-ALL-BUT (-1 -3 -4 1))
                                    (("1" (EXPAND "inf_sum")
                                      (("1" (REPLACES -3)
                                        (("1"
                                          (CASE-REPLACE "product(0, x - 2,
              LAMBDA (i_1: below[x - 1]): limit(series(fs`seq(i_1))))
              =  product[below[x]]
            (0, x - 2, LAMBDA (i: below[x]): limit(series(fs`seq(i))))")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-2 1))
                                            (("2"
                                              (CASE
                                                  "FORALL(n: nat| n <= x-2):  product(0, n,
              LAMBDA (i_1: below[x - 1]): limit(series(fs`seq(i_1)))) = product[below[x]]
           (0, n, LAMBDA (i: below[x]): limit(series(fs`seq(i))))")
                                              (("1" (INST -1 "x-2") NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2" (MEASURE-INDUCT "n" "n")
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (CASE-REPLACE "x!1 = 0")
                                                      (("1" (EXPAND "product")
                                                        (("1"
                                                          (EXPAND "product")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (INST -1 "x!1-1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "product"
                                                                    2)
                                                            (("1" (REPLACES -1)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (SKEEP)
                                                      (("2" (TYPEPRED "fs")
                                                        (("2"
                                                          (EXPAND
                                                           "finseq_n_conv?")
                                                          (("2" (FLATTEN)
                                                            (("2" (INST -2 "i")
                                                              (("2"
                                                                (EXPAND
                                                                 "conv_series?")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (SKEEP)
                                                    (("3" (INST -1 "i") NIL
                                                      NIL))
                                                    NIL)
                                                   ("4" (SKEEP)
                                                    (("4" (HIDE -1 2)
                                                      (("4" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("5" (HIDE 2)
                                                    (("5" (SKEEP)
                                                      (("5" (TYPEPRED "fs")
                                                        (("5"
                                                          (EXPAND
                                                           "finseq_n_conv?")
                                                          (("5" (FLATTEN)
                                                            (("5"
                                                              (INST -2 "i_1")
                                                              (("5"
                                                                (EXPAND
                                                                 "conv_series?")
                                                                (("5" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("6" (SKEEP)
                                                    (("6" (INST -1 "i_1") NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (HIDE -1 2)
                                                (("3" (SKEEP)
                                                  (("3" (TYPEPRED "fs")
                                                    (("3"
                                                      (EXPAND "finseq_n_conv?")
                                                      (("3" (FLATTEN)
                                                        (("3" (INST -2 "i")
                                                          (("3"
                                                            (EXPAND
                                                             "conv_series?")
                                                            (("3" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("4" (SKEEP)
                                                (("4" (INST -1 "i") NIL NIL))
                                                NIL)
                                               ("5" (HIDE (-1 2))
                                                (("5" (GRIND) NIL NIL)) NIL)
                                               ("6" (HIDE-ALL-BUT 1)
                                                (("6" (SKEEP)
                                                  (("6" (TYPEPRED "fs")
                                                    (("6"
                                                      (EXPAND "finseq_n_conv?")
                                                      (("6" (FLATTEN)
                                                        (("6" (INST -2 "i_1")
                                                          (("6"
                                                            (EXPAND
                                                             "conv_series?")
                                                            (("6" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("7" (SKEEP)
                                                (("7" (INST -1 "i_1") NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE-ALL-BUT 1)
                                            (("3" (SKEEP)
                                              (("3" (TYPEPRED "fs")
                                                (("3" (EXPAND "finseq_n_conv?")
                                                  (("3" (FLATTEN)
                                                    (("3" (INST -2 "i")
                                                      (("3"
                                                        (EXPAND "conv_series?")
                                                        (("3" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("4" (HIDE-ALL-BUT 1)
                                            (("4" (GRIND) NIL NIL)) NIL)
                                           ("5" (HIDE-ALL-BUT 1)
                                            (("5" (SKEEP)
                                              (("5" (TYPEPRED "fs")
                                                (("5" (EXPAND "finseq_n_conv?")
                                                  (("5" (FLATTEN)
                                                    (("5" (INST -2 "i_1")
                                                      (("5"
                                                        (EXPAND "conv_series?")
                                                        (("5" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("6" (SKEEP)
                                            (("6" (INST -2 "i_1") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "product_seq")
                                    (("2" (EXPAND "pairwise_prod_seq")
                                      (("2" (FLATTEN)
                                        (("2" (INST -3 "i")
                                          (("2" (SKOLEM -3 ("j" "k"))
                                            (("2" (INST -6 "j")
                                              (("2" (SKOLEM -6 "ns")
                                                (("2"
                                                  (INST 1
                                                   "(# length := x, seq := LAMBDA(m:below[x]): IF m < x-1 THEN ns`seq(m) ELSE k ENDIF #)")
                                                  (("1"
                                                    (HIDE-ALL-BUT (-3 -4 -6 1))
                                                    (("1" (REPLACES -3)
                                                      (("1"
                                                        (EXPAND "product" 1)
                                                        (("1"
                                                          (CASE-REPLACE
                                                           " product(0, x - 2,
               LAMBDA (i_1: below[x - 1]): fs`seq(i_1)(ns`seq(i_1))) =  product[below[x]]
            (0, x - 2,
             LAMBDA (i: below[x]):
               IF i < x - 1 THEN fs`seq(i)(ns`seq(i))
               ELSE fs`seq(i)(k)
               ENDIF)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (HIDE -1)
                                                              (("2"
                                                                (CASE
                                                                    "FORALL(n: nat | n <= x-2): product(0, n,
              LAMBDA (i_1: below[x - 1]): fs`seq(i_1)(ns`seq(i_1))) = product[below[x]]
           (0, n,
            LAMBDA (i: below[x]):
              IF i < x - 1 THEN fs`seq(i)(ns`seq(i))
              ELSE fs`seq(i)(k)
              ENDIF)")
                                                                (("1"
                                                                  (INST -1
                                                                   "x-2")
                                                                  NIL NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (MEASURE-INDUCT
                                                                     "n" "n")
                                                                    (("1"
                                                                      (SKEEP)
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "x_1 = 0")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "product")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "product")
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (INST
                                                                           -1
                                                                           "x_1 -1")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "product"
                                                                               2)
                                                                              (("1"
                                                                                (REPLACES
                                                                                 -1)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "i!1")
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (SKEEP)
                                                                      (("3"
                                                                        (INST
                                                                         -2
                                                                         "i!1")
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("4"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("4"
                                                                        (SKEEP)
                                                                        (("4"
                                                                          (TYPEPRED
                                                                           "ns")
                                                                          (("4"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("5"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("5"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("6"
                                                                      (SKEEP)
                                                                      (("6"
                                                                        (INST
                                                                         -1
                                                                         "i_1")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (SKEEP)
                                                                  (("3"
                                                                    (INST -1
                                                                     "i!1")
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("4" (SKEEP)
                                                                  (("4"
                                                                    (INST -2
                                                                     "i!1")
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("5"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("5" (SKEEP)
                                                                    (("5"
                                                                      (TYPEPRED
                                                                       "ns")
                                                                      (("5"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("6"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("6" (GRIND)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("7" (SKEEP)
                                                                  (("7"
                                                                    (INST -1
                                                                     "i_1")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (SKEEP)
                                                            (("3"
                                                              (INST -2 "i!1")
                                                              NIL NIL))
                                                            NIL)
                                                           ("4" (SKEEP)
                                                            (("4"
                                                              (INST -3 "i!1")
                                                              NIL NIL))
                                                            NIL)
                                                           ("5"
                                                            (HIDE-ALL-BUT 1)
                                                            (("5" (SKEEP)
                                                              (("5"
                                                                (TYPEPRED "ns")
                                                                (("5" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("6"
                                                            (HIDE-ALL-BUT 1)
                                                            (("6" (GRIND) NIL
                                                              NIL))
                                                            NIL)
                                                           ("7" (SKEEP)
                                                            (("7"
                                                              (INST -2 "i_1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (SKEEP)
                                                      (("2" (TYPEPRED "ns")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKEEP)
                                  (("3" (EXPAND "pairwise_prod_seq")
                                    (("3" (FLATTEN)
                                      (("3" (HIDE -1 -3 -5)
                                        (("3" (TYPEPRED "c_1")
                                          (("3" (EXPAND "product_seq")
                                            (("3" (SKEEP)
                                              (("3" (REPLACES -1)
                                                (("3" (EXPAND "product" 1)
                                                  (("3"
                                                    (INST -4 "product[below[x]]
              (0, x - 2, LAMBDA (i: below[x]): fs`seq(i)(index`seq(i)))")
                                                    (("1" (SKOLEM -4 "j")
                                                      (("1"
                                                        (INST -1 "j"
                                                         "index`seq(x - 1)")
                                                        (("1" (SKEEP)
                                                          (("1" (INST 1 "k")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT (-2 1))
                                                      (("2"
                                                        (EXPAND "product_seq")
                                                        (("2"
                                                          (INST 1
                                                           "(# length := x-1, seq := LAMBDA(m:below[x-1]): index`seq(m) #)")
                                                          (("2"
                                                            (CASE
                                                                "FORALL(n: nat| n <= x-2):  product[below[x]]
          (0, n, LAMBDA (i: below[x]): fs`seq(i)(index`seq(i))) =  product(0, n,
               LAMBDA (i_1: below[x - 1]): fs`seq(i_1)(index`seq(i_1)))")
                                                            (("1"
                                                              (INST -1 "x-2")
                                                              NIL NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (MEASURE-INDUCT
                                                                 "n" "n")
                                                                (("1" (SKEEP)
                                                                  (("1"
                                                                    (CASE-REPLACE
                                                                     "x!1 = 0")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "product")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "product")
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (INST -1
                                                                       "x!1 -1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "product"
                                                                           2)
                                                                          (("1"
                                                                            (REPLACES
                                                                             -1)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3" (SKEEP)
                                                                  (("3"
                                                                    (INST -1
                                                                     "i_1")
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("4" (SKEEP)
                                                                  (("4"
                                                                    (INST -1
                                                                     "i")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (HIDE-ALL-BUT 1)
                                                              (("3" (GRIND) NIL
                                                                NIL))
                                                              NIL)
                                                             ("4" (SKEEP)
                                                              (("4"
                                                                (INST -1 "i_1")
                                                                NIL NIL))
                                                              NIL)
                                                             ("5" (SKEEP)
                                                              (("5"
                                                                (INST -1 "i")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "conv_series?")
                                (("2" (TYPEPRED "c") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "b")
                            (("2" (EXPAND "conv_series?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL)
                           ("3" (HIDE-ALL-BUT 1)
                            (("3" (TYPEPRED "fs")
                              (("3" (EXPAND "finseq_n_conv?")
                                (("3" (FLATTEN)
                                  (("3" (INST -2 "x-1")
                                    (("3" (EXPAND "conv_series?")
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST -1 "x-1") NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 3)
                    (("2" (EXPAND "finseq_n_conv?")
                      (("2" (SKEEP)
                        (("2" (TYPEPRED "fs")
                          (("2" (EXPAND "finseq_n_conv?")
                            (("2" (FLATTEN) (("2" (INST -2 "i_1") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (SKEEP) (("3" (INST -1 "i") NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKEEP)
                  (("2" (TYPEPRED "fs")
                    (("2" (EXPAND "finseq_n_conv?") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (TYPEPRED "fs")
          (("2" (EXPAND "finseq_n_conv?")
            (("2" (FLATTEN) (("2" (INST -2 "i") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "fs")
          (("3" (EXPAND "finseq_n_conv?") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fs| SKOLEM-CONST-DECL
     "{fs: finseq[sequence[nnreal]] | finseq_n_conv?(x, fs)}" |inf_prime_Euler|
     NIL)
    (|x| SKOLEM-CONST-DECL "posnat" |inf_prime_Euler| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|prod_nnr| APPLICATION-JUDGEMENT "nnreal" |product| |reals|)
    (|series_prod_2| FORMULA-DECL NIL |inf_prime_Euler| NIL)
    (|c| SKOLEM-CONST-DECL "{c: sequence[nnreal] | convergent?(series(c))}"
     |inf_prime_Euler| NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|x!1| SKOLEM-CONST-DECL "{n: nat | n <= x - 2}" |inf_prime_Euler| NIL)
    (|index| SKOLEM-CONST-DECL "{index: finseq[nat] | index`length = x}"
     |inf_prime_Euler| NIL)
    (|pairwise_prod_seq| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (|ns| SKOLEM-CONST-DECL "{index: finseq[nat] | index`length = x - 1}"
     |inf_prime_Euler| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|x_1| SKOLEM-CONST-DECL "{n: nat | n <= x - 2}" |inf_prime_Euler| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "{n: nat | n <= x - 2}" |inf_prime_Euler| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|product_seq| CONST-DECL "set[real]" |inf_prime_Euler| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|inverse_fs_prod_posreal_TCC1| 0
  (|inverse_fs_prod_posreal_TCC1-1| NIL 3946907283 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL (|inverse_fs_prod_posreal| SUBTYPE "0" "T_low[below[n]]")))
 (|inverse_fs_prod_posreal_TCC2| 0
  (|inverse_fs_prod_posreal_TCC2-1| NIL 3946907283 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|inverse_fs_prod_posreal| SUBTYPE "inf_prime_Euler.k" "T_high[below[n]]")))
 (|inverse_fs_prod_posreal_TCC3| 0
  (|inverse_fs_prod_posreal_TCC3-1| NIL 3946907283 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|inverse_fs_prod_posreal| ASSUMING "reals@product[below[n]].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|inverse_fs_prod_posreal| 0
  (|inverse_fs_prod_posreal-1| NIL 3946907283
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "k" "k")
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "product")
              (("1" (EXPAND "product") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "product" 2)
                (("1" (REPLACE -1 2 RL HIDE) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|prod_pr| APPLICATION-JUDGEMENT "posreal" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |inf_prime_Euler| NIL)
    (|x| SKOLEM-CONST-DECL "below[n]" |inf_prime_Euler| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|geo_seq_seq_TCC1| 0
  (|geo_seq_seq_TCC1-1| NIL 3946051527
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (LEMMA "prime_index_lt_prime_count")
        (("" (INST -1 "i" "n")
          (("" (ASSERT) (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_index_lt_prime_count| FORMULA-DECL NIL |prime_extra| NIL))
   NIL
   (|geo_seq_seq| SUBTYPE "prime_extra.prime_enumeration(inf_prime_Euler.i)"
    "nznum")))
 (|geo_seq_seq_TCC2| 0
  (|geo_seq_seq_TCC2-1| NIL 3947157456
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (CASE "geometric(1 / prime_enumeration(i))(x1) > 0")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND "geometric")
            (("2" (LEMMA "inverse_prime_ineq")
              (("2" (INST -1 "i" "n")
                (("2" (ASSERT)
                  (("2" (FLATTEN) (("2" (REWRITE "expt_pos") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (TYPEPRED "i")
          (("3" (LEMMA "prime_index_lt_prime_count")
            (("3" (INST -1 "i" "n")
              (("3" (ASSERT)
                (("3" (EXPAND "/=")
                  (("3" (EXPAND "prime?") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_index_lt_prime_count| FORMULA-DECL NIL |prime_extra| NIL)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|geometric| CONST-DECL "sequence[real]" |series| |series|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|geo_seq_seq| SUBTYPE
    "series.geometric(number_fields./(1, prime_extra.prime_enumeration(inf_prime_Euler.i)))"
    "sequence[posreal]")))
 (|prod_geo_seq_TCC1| 0
  (|prod_geo_seq_TCC1-1| NIL 3946907357
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "prime_count_ge_one")
        (("" (INST -1 "n") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_count_ge_one| FORMULA-DECL NIL |prime_extra| NIL))
   NIL (|prod_geo_seq| SUBTYPE "0" "T_low[below[prime_counting(n)]]")))
 (|prod_geo_seq_TCC2| 0
  (|prod_geo_seq_TCC2-1| NIL 3946218814
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "prime_count_ge_one")
        (("" (INST -1 "n") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_count_ge_one| FORMULA-DECL NIL |prime_extra| NIL))
   NIL
   (|prod_geo_seq| SUBTYPE
    "(number_fields.-)(prime_extra.prime_counting(inf_prime_Euler.n), 1)"
    "T_high[below[prime_counting(n)]]")))
 (|prod_geo_seq_TCC3| 0
  (|prod_geo_seq_TCC3-1| NIL 3946218814 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL))
   NIL
   (|prod_geo_seq| SUBTYPE "inf_prime_Euler.i"
    "below[geo_seq_seq(n)`length]")))
 (|prod_geo_seq_TCC4| 0
  (|prod_geo_seq_TCC4-1| NIL 3946218814
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (EXPAND "geo_seq_seq")
        (("" (REWRITE "geometric_conv")
          (("" (LEMMA "inverse_prime_ineq")
            (("" (INST -1 "i" "n")
              (("" (ASSERT) (("" (HIDE 2) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|conv_series?| CONST-DECL "bool" |series| |series|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|geometric_conv| FORMULA-DECL NIL |series| |series|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL))
   NIL
   (|prod_geo_seq| SUBTYPE
    "inf_prime_Euler.geo_seq_seq(inf_prime_Euler.n)`seq(inf_prime_Euler.i)"
    "(series.conv_series?)")))
 (|prod_geo_seq_TCC5| 0
  (|prod_geo_seq_TCC6-1| NIL 3947147636 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL))
   NIL
   (|prod_geo_seq| ASSUMING "reals@product[below[prime_counting(n)]].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|prod_geo_seq_TCC6| 0
  (|prod_geo_seq_TCC6-1| NIL 3947157565
   ("" (SKEEP)
    ((""
      (CASE "product[below[prime_counting(n)]]
           (0, prime_counting(n) - 1,
            LAMBDA (i: below[prime_counting(n)]):
              inf_sum(geo_seq_seq(n)`seq(i)))
        > 0")
      (("1" (ASSERT) NIL NIL)
       ("2" (HIDE 2)
        (("2" (REWRITE "product_gt_0")
          (("2" (HIDE 2)
            (("2" (SKEEP)
              (("2" (ASSERT)
                (("2" (EXPAND "geo_seq_seq")
                  (("2" (REWRITE "geometric_sum")
                    (("1" (LEMMA "inverse_prime_ineq")
                      (("1" (INST -1 "n1" "n")
                        (("1" (ASSERT)
                          (("1" (LEMMA "lt_div_lt_pos2")
                            (("1"
                              (INST -1 "0" "1 - 1 / prime_enumeration(n1)"
                               "1 - 1 / prime_enumeration(n1)" "1")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (LEMMA "inverse_prime_ineq")
                        (("2" (INST -1 "n1" "n")
                          (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE-ALL-BUT 1)
        (("3" (SKEEP)
          (("3" (EXPAND "conv_series?")
            (("3" (EXPAND "geo_seq_seq")
              (("3" (REWRITE "geometric_conv")
                (("3" (LEMMA "inverse_prime_ineq")
                  (("3" (INST -1 "i" "n")
                    (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)
       ("5" (HIDE-ALL-BUT 1)
        (("5" (LEMMA "prime_count_ge_one")
          (("5" (INST -1 "n") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("6" (LEMMA "prime_count_ge_one")
        (("6" (INST -1 "n") (("6" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|product_gt_0| FORMULA-DECL NIL |product| |reals|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|n1| SKOLEM-CONST-DECL "subrange(0, prime_counting(n) - 1)"
     |inf_prime_Euler| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n >= 2}" |inf_prime_Euler| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lt_div_lt_pos2| FORMULA-DECL NIL |real_props| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|geometric_sum| FORMULA-DECL NIL |series| |series|)
    (|geometric_conv| FORMULA-DECL NIL |series| |series|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|prime_count_ge_one| FORMULA-DECL NIL |prime_extra| NIL))
   NIL
   (|prod_geo_seq| SUBTYPE
    "product[below[prime_counting(n)]].product(0, (number_fields.-)(prime_extra.prime_counting(inf_prime_Euler.n), 1), LAMBDA (i: nat_types[prime_extra.prime_counting(inf_prime_Euler.n)].below): series.inf_sum(inf_prime_Euler.geo_seq_seq(inf_prime_Euler.n)`seq(i)))"
    "posreal")))
 (|geo_seq_seq_product_TCC1| 0
  (|geo_seq_seq_product_TCC2-1| NIL 3947147636 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL))
   NIL
   (|geo_seq_seq_product| SUBTYPE "inf_prime_Euler.k"
    "T_high[below[prime_counting(n)]]")))
 (|geo_seq_seq_product_TCC2| 0
  (|geo_seq_seq_product_TCC4-1| NIL 3946051527
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "prime_enum_id")
        (("" (INST -1 "i")
          (("" (ASSERT) (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|geo_seq_seq_product| SUBTYPE
    "((number_fields.-)(prime_extra.prime_enumeration(inf_prime_Euler.i), 1))"
    "nznum")))
 (|geo_seq_seq_product| 0
  (|geo_seq_seq_product-1| NIL 3946051528
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "k" "k")
      (("1" (SKEEP)
        (("1" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "product")
              (("1" (EXPAND "product")
                (("1" (EXPAND "geo_seq_seq")
                  (("1" (EXPAND "prime_enumeration")
                    (("1" (EXPAND "inf_sum")
                      (("1" (LEMMA "geometric_series")
                        (("1" (INST -1 "1/2")
                          (("1" (PROP)
                            (("1" (REWRITE "limit_def")
                              (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "product" 2)
                (("1" (REPLACE -1 2 RL HIDE)
                  (("1"
                    (CASE-REPLACE
                     "inf_sum(geo_seq_seq(n)`seq(x)) = prime_enumeration(x) / (prime_enumeration(x) - 1)")
                    (("1" (HIDE 3)
                      (("1" (EXPAND "geo_seq_seq")
                        (("1" (EXPAND "inf_sum")
                          (("1" (LEMMA "geometric_series")
                            (("1" (INST?)
                              (("1" (PROP)
                                (("1" (REWRITE "limit_def")
                                  (("1"
                                    (CASE-REPLACE
                                     "1 / (1 - 1 / prime_enumeration(x)) = prime_enumeration(x) / (prime_enumeration(x) - 1)")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (LEMMA "inverse_prime_ineq")
                                  (("2" (INST -1 "x" "n")
                                    (("2" (ASSERT)
                                      (("2" (HIDE 2 3) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (SKEEP)
          (("2" (LEMMA "prime_index_lt_prime_count")
            (("2" (INST -1 "i" "n")
              (("2" (ASSERT)
                (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 2)
        (("3" (SKEEP)
          (("3" (EXPAND "geo_seq_seq")
            (("3" (EXPAND "conv_series?")
              (("3" (LEMMA "geometric_conv")
                (("3" (INST?)
                  (("3" (PROP)
                    (("3" (LEMMA "inverse_prime_ineq")
                      (("3" (INST -1 "i" "n")
                        (("3" (ASSERT)
                          (("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n >= 2}" |inf_prime_Euler| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|limit_def| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|geometric| CONST-DECL "sequence[real]" |series| |series|)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|geometric_series| FORMULA-DECL NIL |series| |series|)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|x| SKOLEM-CONST-DECL "below[prime_counting(n)]" |inf_prime_Euler| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_index_lt_prime_count| FORMULA-DECL NIL |prime_extra| NIL)
    (|geometric_conv| FORMULA-DECL NIL |series| |series|))
   SHOSTAK))
 (|geo_seq_seq_ineq1_TCC1| 0
  (|geo_seq_seq_ineq1_TCC1-1| NIL 3946205235 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|geo_seq_seq_ineq1| SUBTYPE "inf_prime_Euler.n" "posnat")))
 (|geo_seq_seq_ineq1| 0
  (|geo_seq_seq_ineq1-1| NIL 3946218399
   ("" (SKEEP)
    (("" (EXPAND "prod_geo_seq")
      (("" (LEMMA "series_prods")
        (("" (INST -1 "prime_counting(n)" "geo_seq_seq(n)")
          (("1" (SKEEP)
            (("1" (REPLACE -1 1 RL HIDE)
              (("1" (EXPAND "harmonic_number")
                (("1" (EXPAND "inf_sum")
                  (("1" (LEMMA "sigma_series_ineq")
                    (("1" (INST -1 "harmonic_sequence" "b" "n-1")
                      (("1" (PROP)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "strict_decreasing?")
                            (("2" (SKEEP)
                              (("2" (EXPAND "harmonic_sequence")
                                (("2" (LEMMA "le_div_le_pos")
                                  (("2" (INST -1 "1" "1+x" "1+y" "1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (TYPEPRED "b")
                          (("3" (EXPAND "conv_series?")
                            (("3" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("4" (HIDE 2)
                          (("4" (SKEEP)
                            (("4" (EXPAND "harmonic_sequence")
                              (("4" (INST -2 "1 / (1 + i)")
                                (("1" (SKEEP)
                                  (("1" (INST 1 "i_1") (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (EXPAND "product_seq")
                                    (("2" (EXPAND "geo_seq_seq")
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "geometric")
                                          (("2" (LEMMA "prime_decomp_id")
                                            (("2" (INST -1 "n" "1+i")
                                              (("2" (LEMMA "inv_prime_decomp")
                                                (("2"
                                                  (INST -1 "n" "i+1"
                                                   "prime_counting(n) - 1")
                                                  (("1" (REPLACES -2)
                                                    (("1"
                                                      (INST 1
                                                       "(# length := prime_counting(n), seq := LAMBDA(j:below[prime_counting(n)]): max_prime_div_idx(prime_enumeration(j), i+1)#)")
                                                      (("1"
                                                        (CASE
                                                            "FORALL(k:below[prime_counting(n)]): product(0, k, LAMBDA (i_1: below[prime_counting(n)]): 1 / max_prime_div(prime_enumeration(i_1), i + 1)) = product(0, k,
               LAMBDA (i_1: below[prime_counting(n)]):
                 (1 / prime_enumeration(i_1)) ^
                  max_prime_div_idx(prime_enumeration(i_1), i + 1))")
                                                        (("1"
                                                          (INST -1
                                                           "prime_counting(n)-1")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2"
                                                            (LEMMA
                                                             "prime_count_ge_one")
                                                            (("2" (INST -1 "n")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2"
                                                            (MEASURE-INDUCT "k"
                                                             "k")
                                                            (("1" (SKEEP)
                                                              (("1"
                                                                (CASE
                                                                    "FORALL(x:nzreal, n:nat): (1/x)^n = 1/x^n")
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "x = 0")
                                                                  (("1"
                                                                    (HIDE -3)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "product")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "product")
                                                                        (("1"
                                                                          (INST?)
                                                                          (("1"
                                                                            (REPLACES
                                                                             -2)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "max_prime_id")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (INST -2
                                                                     "x-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "product"
                                                                         2)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -2)
                                                                          (("1"
                                                                            (CASE-REPLACE
                                                                             " 1 / max_prime_div(prime_enumeration(x), 1 + i) =  (1 / prime_enumeration(x)) ^
        max_prime_div_idx(prime_enumeration(x), 1 + i)")
                                                                            (("1"
                                                                              (HIDE-ALL-BUT
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "max_prime_id")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "^")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "expt_of_inv")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2" (SKEEP)
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "i_1")
                                                                  (("2"
                                                                    (LEMMA
                                                                     "prime_index_lt_prime_count")
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "prime?")
                                                                          (("2"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (HIDE 2)
                                                              (("3" (SKEEP)
                                                                (("3"
                                                                  (TYPEPRED
                                                                   "i_1")
                                                                  (("3"
                                                                    (LEMMA
                                                                     "prime_index_lt_prime_count")
                                                                    (("3"
                                                                      (INST?)
                                                                      (("3"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3" (HIDE-ALL-BUT 1)
                                                          (("3" (SKEEP)
                                                            (("3"
                                                              (TYPEPRED "i_1")
                                                              (("3"
                                                                (LEMMA
                                                                 "prime_index_lt_prime_count")
                                                                (("3" (INST?)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    (("3"
                                                                      (EXPAND
                                                                       "prime?")
                                                                      (("3"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("4" (HIDE-ALL-BUT 1)
                                                          (("4" (SKEEP)
                                                            (("4"
                                                              (TYPEPRED "i_1")
                                                              (("4"
                                                                (LEMMA
                                                                 "prime_index_lt_prime_count")
                                                                (("4" (INST?)
                                                                  (("4"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKEEP)
                                                        (("2" (HIDE -1)
                                                          (("2" (TYPEPRED "j")
                                                            (("2"
                                                              (LEMMA
                                                               "prime_index_lt_prime_count")
                                                              (("2"
                                                                (INST -1 "j"
                                                                 "n")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (LEMMA
                                                     "prime_count_ge_one")
                                                    (("2" (INST -1 "n")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (ASSERT)
                          (("2" (INST -1 "x1")
                            (("2" (EXPAND "product_seq")
                              (("2" (SKEEP)
                                (("2" (ASSERT)
                                  (("2" (CASE "b(x1) > 0")
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (HIDE -2 2 3)
                                      (("2"
                                        (CASE
                                            "FORALL(k:below[prime_counting(n)]): product(0, k,
               LAMBDA (i: below[prime_counting(n)]):
                 geo_seq_seq(n)`seq(i)(index`seq(i))) > 0")
                                        (("1" (INST?)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (LEMMA "prime_count_ge_one")
                                            (("2" (INST -1 "n")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (MEASURE-INDUCT "k" "k")
                                            (("1" (SKEEP)
                                              (("1" (CASE-REPLACE "x = 0")
                                                (("1" (HIDE -2)
                                                  (("1" (EXPAND "product")
                                                    (("1" (EXPAND "product")
                                                      (("1"
                                                        (EXPAND "geo_seq_seq")
                                                        (("1"
                                                          (EXPAND
                                                           "prime_enumeration")
                                                          (("1"
                                                            (EXPAND
                                                             "geometric")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -1 "x-1")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE-ALL-BUT 1)
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "finseq_n_conv?")
            (("2" (HIDE 2)
              (("2" (EXPAND "geo_seq_seq")
                (("2" (SKEEP)
                  (("2" (EXPAND "conv_series?")
                    (("2" (REWRITE "geometric_conv")
                      (("2" (LEMMA "inverse_prime_ineq")
                        (("2" (INST -1 "i" "n")
                          (("2" (HIDE 2)
                            (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (LEMMA "prime_count_ge_one")
            (("3" (INST -1 "n") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prod_geo_seq| CONST-DECL "posreal" |inf_prime_Euler| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|finseq_n_conv?| CONST-DECL "bool" |inf_prime_Euler| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n >= 2}" |inf_prime_Euler| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|harmonic_sequence| CONST-DECL "sequence[real]" |inf_prime_Euler| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|b| SKOLEM-CONST-DECL "{b: sequence[nnreal] | conv_series?(b)}"
     |inf_prime_Euler| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|geometric| CONST-DECL "sequence[real]" |series| |series|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max_prime_div_idx| CONST-DECL "nat" |prime_extra| NIL)
    (|prime_index_lt_prime_count| FORMULA-DECL NIL |prime_extra| NIL)
    (|expt_of_inv| FORMULA-DECL NIL |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|max_prime_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|x| SKOLEM-CONST-DECL "below[prime_counting(n)]" |inf_prime_Euler| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|prime_count_ge_one| FORMULA-DECL NIL |prime_extra| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|max_prime_div| CONST-DECL "posnat" |prime_extra| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|prod_pr| APPLICATION-JUDGEMENT "posreal" |product| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv_prime_decomp| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime_decomp_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|product_seq| CONST-DECL "set[real]" |inf_prime_Euler| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|i| SKOLEM-CONST-DECL "{i: nat | i <= n - 1}" |inf_prime_Euler| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prod_nnr| APPLICATION-JUDGEMENT "nnreal" |product| |reals|)
    (|x| SKOLEM-CONST-DECL "below[prime_counting(n)]" |inf_prime_Euler| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|sigma_series_ineq| FORMULA-DECL NIL |series_extra| NIL)
    (|harmonic_number| CONST-DECL "real" |inf_prime_Euler| NIL)
    (|geometric_conv| FORMULA-DECL NIL |series| |series|)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|series_prods| FORMULA-DECL NIL |inf_prime_Euler| NIL))
   SHOSTAK))
 (|product_inverse_successors_TCC1| 0
  (|product_inverse_successors_TCC1-1| NIL 3947147636
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|product_inverse_successors| SUBTYPE "0" "T_low[below[n]]")))
 (|product_inverse_successors_TCC2| 0
  (|product_inverse_successors_TCC2-1| NIL 3947147636
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|product_inverse_successors| SUBTYPE
    "(number_fields.-)(inf_prime_Euler.n, 1)" "T_high[below[n]]")))
 (|product_inverse_successors| 0
  (|product_inverse_successors-1| NIL 3944502705
   ("" (SKEEP)
    ((""
      (CASE-REPLACE
       "FORALL(k:below[n]):  product(0, k, LAMBDA (i: below[n]): (i + 2) / (i + 1)) = k+2")
      (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE 2)
        (("2" (MEASURE-INDUCT "k" "k")
          (("2" (SKEEP)
            (("2" (CASE-REPLACE "x = 0")
              (("1" (HIDE -2)
                (("1" (EXPAND "product")
                  (("1" (EXPAND "product") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (INST -1 "x-1")
                (("1" (ASSERT)
                  (("1" (EXPAND "product" 2)
                    (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|prod_pr| APPLICATION-JUDGEMENT "posreal" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_Euler| NIL)
    (|x| SKOLEM-CONST-DECL "below[n]" |inf_prime_Euler| NIL))
   SHOSTAK))
 (|geo_seq_seq_ineq2_lem_TCC1| 0
  (|geo_seq_seq_ineq2_lem_TCC1-1| NIL 3946211009
   ("" (SKEEP) (("" (EXPAND "prime?") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|geo_seq_seq_ineq2_lem| SUBTYPE
    "((number_fields.-)(prime_extra.prime_enumeration(inf_prime_Euler.i), 1))"
    "nznum")))
 (|geo_seq_seq_ineq2_lem| 0
  (|geo_seq_seq_ineq2_lem-1| NIL 3946205259
   ("" (SKEEP)
    ((""
      (CASE
          "FORALL(n:nat): prime?(prime_enumeration(n)) => n+2 <= prime_enumeration(n)")
      (("1" (INST -1 "i")
        (("1" (ASSERT)
          (("1" (LEMMA "le_div_le_pos")
            (("1" (INST -1 "1" "2+i" "prime_enumeration(i)" "1")
              (("1" (ASSERT)
                (("1" (LEMMA "le_minus_le")
                  (("1"
                    (INST -1 "1 / prime_enumeration(i)" "1" "1" "1 / (2 + i)")
                    (("1" (SPLIT)
                      (("1" (ASSERT)
                        (("1" (LEMMA "le_div_le_pos")
                          (("1"
                            (INST -1 "1" "1 - 1 / (2 + i)"
                             "1 - 1 / prime_enumeration(i)" "1")
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    "FORALL(x:real| x > 1): 1/(1-1/x) = x/(x-1)")
                                (("1" (INST-CP -1 "prime_enumeration(i)")
                                  (("1" (INST -1 "2+i")
                                    (("1" (REPLACES -) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (CASE "1 - 1 / (2 + i) > 0")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2)
                                  (("2" (LEMMA "le_div_le_pos")
                                    (("2" (INST -1 "1" "1" "2+i" "1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE -1 2)
        (("2" (MEASURE-INDUCT "n" "n")
          (("2" (SKEEP)
            (("2" (CASE-REPLACE "x = 0")
              (("1" (EXPAND "prime_enumeration") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (INST -1 "x-1")
                (("1" (ASSERT)
                  (("1" (PROP)
                    (("1" (EXPAND "prime_enumeration" 2)
                      (("1" (LIFT-IF)
                        (("1" (PROP)
                          (("1" (LEMMA "prime_enum_ineq")
                            (("1" (INST -1 "x-1")
                              (("1" (ASSERT)
                                (("1" (EXPAND "prime?")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "prime_enum_tail_gen")
                            (("2" (INST -1 "x-1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "prime_enum_id")
                      (("2" (INST -1 "x-1")
                        (("2" (ASSERT)
                          (("2" (LEMMA "prime_enum_tail_gen")
                            (("2" (INST -1 "x-1")
                              (("2" (ASSERT)
                                (("2" (INST -1 "x")
                                  (("2" (EXPAND "prime?")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|le_minus_le| FORMULA-DECL NIL |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|i| SKOLEM-CONST-DECL "nat" |inf_prime_Euler| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime_enum_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime_enum_tail_gen| FORMULA-DECL NIL |prime_extra| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |inf_prime_Euler| NIL))
   SHOSTAK))
 (|geo_seq_seq_ineq2| 0
  (|geo_seq_seq_ineq2-1| NIL 3946294894
   ("" (SKEEP)
    (("" (EXPAND "prod_geo_seq")
      (("" (LEMMA "product_inverse_successors")
        (("" (INST -1 "prime_counting(n)")
          (("1" (REPLACE -1 1 RL HIDE)
            (("1" (EXPAND "geo_seq_seq")
              (("1"
                (CASE
                    " FORALL (i: below[prime_counting(n)]): prime_enumeration(i) /= 0")
                (("1"
                  (CASE "FORALL (i: below[prime_counting(n)]):
        conv_series?(geometric(1 / prime_enumeration(i)))")
                  (("1"
                    (CASE "FORALL(k:below[prime_counting(n)]): product(0, k,
              LAMBDA (i: below[prime_counting(n)]):
                inf_sum(geometric(1 / prime_enumeration(i))))
       <=
       product(0, k,
               LAMBDA (i: below[prime_counting(n)]): (2 + i) / (1 + i))")
                    (("1" (INST?)
                      (("1" (HIDE 2)
                        (("1" (LEMMA "prime_count_ge_one")
                          (("1" (INST -1 "n") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (MEASURE-INDUCT "k" "k")
                        (("1" (SKEEP)
                          (("1" (CASE-REPLACE "x = 0")
                            (("1" (HIDE -)
                              (("1" (EXPAND "product")
                                (("1" (EXPAND "product")
                                  (("1" (EXPAND "prime_enumeration")
                                    (("1" (REWRITE "geometric_sum")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -1 "x-1")
                              (("1" (ASSERT)
                                (("1" (EXPAND "product" 2)
                                  (("1"
                                    (CASE
                                        "inf_sum(geometric(1 / prime_enumeration(x))) <= (2 + x) / (1 + x)")
                                    (("1" (LEMMA "le_times_le_pos")
                                      (("1"
                                        (CASE
                                            " FORALL (x: below[prime_counting(n)]): 1 / (1 - 1 / prime_enumeration(x)) >= 0")
                                        (("1"
                                          (INST -2
                                           "inf_sum(geometric(1 / prime_enumeration(x)))"
                                           "product(0, x - 1,
              LAMBDA (i: below[prime_counting(n)]):
                inf_sum(geometric(1 / prime_enumeration(i))))"
                                           "product(0, x - 1,
               LAMBDA (i: below[prime_counting(n)]): (2 + i) / (1 + i))"
                                           "(2 + x) / (1 + x)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-1 1))
                                            (("2" (REWRITE "product_ge_0")
                                              (("2" (HIDE 2)
                                                (("2" (SKEEP)
                                                  (("2"
                                                    (REWRITE "geometric_sum")
                                                    (("1" (INST?) NIL NIL)
                                                     ("2" (HIDE -1 2)
                                                      (("2"
                                                        (LEMMA
                                                         "inverse_prime_ineq")
                                                        (("2"
                                                          (INST -1 "n1" "n")
                                                          (("2" (ASSERT)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE-ALL-BUT (-1 1))
                                            (("3" (REWRITE "geometric_sum")
                                              (("1" (INST?) NIL NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2" (TYPEPRED "x")
                                                  (("2"
                                                    (LEMMA
                                                     "inverse_prime_ineq")
                                                    (("2" (INST -1 "x" "n")
                                                      (("2" (ASSERT)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (SKEEP)
                                            (("2" (LEMMA "inverse_prime_ineq")
                                              (("2" (INST -1 "x!1" "n")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (LEMMA "lt_div_lt_pos2")
                                                    (("2"
                                                      (INST -1 "0"
                                                       "1 - 1 / prime_enumeration(x!1)"
                                                       "1 - 1 / prime_enumeration(x!1)"
                                                       "1")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE-ALL-BUT 1)
                                          (("3" (SKEEP)
                                            (("3" (LEMMA "inverse_prime_ineq")
                                              (("3" (INST -1 "x!1" "n")
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (REWRITE "geometric_sum")
                                        (("1" (LEMMA "geo_seq_seq_ineq2_lem")
                                          (("1" (INST -1 "x")
                                            (("1" (PROP)
                                              (("1"
                                                (CASE-REPLACE
                                                 "1 / (1 - 1 / prime_enumeration(x)) = prime_enumeration(x) / (prime_enumeration(x) - 1) ")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2" (TYPEPRED "x")
                                                (("2"
                                                  (LEMMA
                                                   "prime_index_lt_prime_count")
                                                  (("2" (INST -1 "x" "n")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (LEMMA "inverse_prime_ineq")
                                            (("2" (INST -1 "x" "n")
                                              (("2" (ASSERT)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP) (("2" (INST?) NIL NIL)) NIL)
                         ("3" (SKEEP)
                          (("3" (INST -3 "i") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)
                     ("4" (SKEEP)
                      (("4" (INST -3 "i") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (HIDE 2)
                      (("2" (SKEEP)
                        (("2" (EXPAND "conv_series?")
                          (("2" (REWRITE "geometric_conv")
                            (("2" (HIDE -1 2)
                              (("2" (LEMMA "inverse_prime_ineq")
                                (("2" (INST -1 "i" "n")
                                  (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKEEP)
                    (("2" (TYPEPRED "i")
                      (("2" (LEMMA "prime_index_lt_prime_count")
                        (("2" (INST -1 "i" "n")
                          (("2" (ASSERT)
                            (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (LEMMA "prime_count_ge_one")
              (("2" (INST -1 "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prod_geo_seq| CONST-DECL "posreal" |inf_prime_Euler| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n >= 2}" |inf_prime_Euler| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|geo_seq_seq| CONST-DECL "finseq[sequence[posreal]]" |inf_prime_Euler|
     NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|geometric| CONST-DECL "sequence[real]" |series| |series|)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|x| SKOLEM-CONST-DECL "below[prime_counting(n)]" |inf_prime_Euler| NIL)
    (|geo_seq_seq_ineq2_lem| FORMULA-DECL NIL |inf_prime_Euler| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|prime_index_lt_prime_count| FORMULA-DECL NIL |prime_extra| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "below[prime_counting(n)]" |inf_prime_Euler| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_div_lt_pos2| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|product_ge_0| FORMULA-DECL NIL |product| |reals|)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|inverse_prime_ineq| FORMULA-DECL NIL |prime_extra| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|prod_pr| APPLICATION-JUDGEMENT "posreal" |product| |reals|)
    (|geometric_sum| FORMULA-DECL NIL |series| |series|)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|prime_count_ge_one| FORMULA-DECL NIL |prime_extra| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|geometric_conv| FORMULA-DECL NIL |series| |series|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|product_inverse_successors| FORMULA-DECL NIL |inf_prime_Euler| NIL))
   SHOSTAK))
 (|prime_counting_ineq| 0
  (|prime_counting_ineq-1| NIL 3946296334
   ("" (SKEEP)
    (("" (CASE-REPLACE "n = 1")
      (("1" (REWRITE "ln_1")
        (("1" (EXPAND "prime_counting")
          (("1" (CASE-REPLACE "primes_le_n(1) = emptyset[(prime?)]")
            (("1" (REWRITE "card_emptyset") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND "primes_le_n")
                (("2" (EXPAND "emptyset")
                  (("2" (DECOMPOSE-EQUALITY)
                    (("2" (TYPEPRED "x!1")
                      (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "ln_H_n_ineq")
        (("2" (INST -1 "n")
          (("2" (LEMMA "geo_seq_seq_ineq1")
            (("2" (INST -1 "n")
              (("1" (LEMMA "geo_seq_seq_ineq2")
                (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (FALSE CONST-DECL "bool" |booleans| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |step_fun_props|
     |analysis|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|card_emptyset| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|primes_le_n| CONST-DECL "set[(prime?)]" |prime_extra| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|ln_1| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_Euler| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|geo_seq_seq_ineq2| FORMULA-DECL NIL |inf_prime_Euler| NIL)
    (|geo_seq_seq_ineq1| FORMULA-DECL NIL |inf_prime_Euler| NIL)
    (|ln_H_n_ineq| FORMULA-DECL NIL |inf_prime_Euler| NIL))
   SHOSTAK))
 (|prime_is_infinite| 0
  (|prime_is_infinite-1| NIL 3946110993
   ("" (LEMMA "prime_counting_ineq")
    ((""
      (NAME-REPLACE "max_prime" "max_finite_set_nat.max({p: nat| prime?(p)})")
      (("1" (LEMMA "ln_exp")
        (("1" (INST -1 "prime_counting(max_prime) + 2")
          (("1" (LEMMA "ln_increasing")
            (("1" (EXPAND "increasing?")
              (("1"
                (INST -1 "exp(prime_counting(max_prime) + 2)"
                 "ceiling(exp(prime_counting(max_prime) + 2))")
                (("1" (PROP)
                  (("1" (REPLACES -2)
                    (("1"
                      (CASE
                          "FORALL(n:nat): prime_counting(n) <= prime_counting(max_prime)")
                      (("1"
                        (INST -4 "ceiling(exp(prime_counting(max_prime) + 2))")
                        (("1"
                          (INST -1
                           "ceiling(exp(prime_counting(max_prime) + 2))")
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (SKEEP)
                          (("2" (EXPAND "prime_counting")
                            (("2"
                              (REWRITE
                               "card_finite[(prime?), (prime?)].card_less_than_equal")
                              (("2" (EXPAND "card_le")
                                (("2" (INST 1 "LAMBDA(i:(primes_le_n(n))):i")
                                  (("1" (EXPAND "injective?")
                                    (("1" (SKEEP) NIL NIL)) NIL)
                                   ("2" (SKEEP)
                                    (("2" (EXPAND "primes_le_n")
                                      (("2" (TYPEPRED "max_prime")
                                        (("2" (INST -2 "i")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (TYPEPRED "i")
                                            (("2" (EXPAND "prime?")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (LEMMA "ceiling_def")
                      (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (LEMMA "ceiling_def")
                    (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (PROP)
        (("1" (EXPAND "is_finite")
          (("1" (SKEEP)
            (("1" (INST 1 "N" "LAMBDA(i:({p: nat | prime?(p)})): f(i)")
              (("1" (EXPAND "injective?")
                (("1" (SKEEP)
                  (("1" (INST -3 "x1" "x2") (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "empty?")
          (("2" (INST -1 "2")
            (("2" (EXPAND "member") (("2" (REWRITE "prime_2") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_finite_set_nat| |ints|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|prime_counting| CONST-DECL "nat" |prime_extra| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|card_less_than_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|primes_le_n| CONST-DECL "set[(prime?)]" |prime_extra| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |inf_prime_Euler| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i| SKOLEM-CONST-DECL "(primes_le_n(n))" |inf_prime_Euler| NIL)
    (|card_le| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|ceiling_def| FORMULA-DECL NIL |floor_ceil| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|max_prime| SKOLEM-CONST-DECL
     "{a: nat | prime?(a) AND FORALL x: prime?(x) IMPLIES x <= a}"
     |inf_prime_Euler| NIL)
    (|nonneg_ceiling_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ln_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_exp| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|prime_counting_ineq| FORMULA-DECL NIL |inf_prime_Euler| NIL))
   SHOSTAK)))

