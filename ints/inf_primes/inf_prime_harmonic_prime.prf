(|inf_prime_harmonic_prime|
 (|inv_prime_series_divergence_TCC1| 0
  (|inv_prime_series_divergence_TCC1-1| NIL 3947676728
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|inv_prime_series_divergence| SUBTYPE
    "(number_fields.-)(inf_prime_harmonic_prime.k, 1)" "nat")))
 (|inv_prime_series_divergence| 0
  (|inv_prime_series_divergence-1| NIL 3941451892
   ("" (PROP)
    (("" (REWRITE "prime_enum_zero_tail" :DIR RL)
      (("" (EXPAND "conv_series?")
        (("" (SKEEP)
          (("" (LEMMA "zero_tail_series_conv")
            (("" (INST -1 "inverse_primes" "a+1")
              (("" (PROP)
                (("" (SKEEP)
                  (("" (HIDE 2)
                    (("" (EXPAND "inverse_primes")
                      (("" (LIFT-IF)
                        (("" (PROP)
                          (("" (INST -2 "m") (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_zero_tail| FORMULA-DECL NIL |prime_extra| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|m| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|a| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zero_tail_series_conv| FORMULA-DECL NIL |series_lems| |series|)
    (|conv_series?| CONST-DECL "bool" |series| |series|))
   SHOSTAK))
 (|prime_series_div_eq_infinity| 0
  (|prime_series_div_eq_infinity-1| NIL 3941452426
   ("" (PROP)
    (("" (NAME-REPLACE "mp" "max_finite_set_nat.max(fullset[(prime?)])")
      (("1" (LEMMA "prime_enum_surj")
        (("1" (INST -1 "mp")
          (("1" (SKEEP)
            (("1" (TYPEPRED "mp")
              (("1" (LEMMA "prime_enum_id")
                (("1" (INST -1 "mp+1")
                  (("1" (PROP)
                    (("1" (EXPAND "conv_series?")
                      (("1" (LEMMA "zero_tail_series_conv")
                        (("1" (INST -1 "inverse_primes" "mp")
                          (("1" (PROP)
                            (("1" (SKEEP)
                              (("1" (EXPAND "inverse_primes")
                                (("1" (LIFT-IF)
                                  (("1" (PROP)
                                    (("1" (LEMMA "prime_enum_tail_gen")
                                      (("1" (INST -1 "mp+1")
                                        (("1" (PROP)
                                          (("1" (INST -1 "m")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST -3 "mp+1")
                      (("2" (ASSERT)
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "mp")
            (("2" (CASE-REPLACE "fullset[(prime?)] = (prime?)")
              (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (EXPAND "restrict")
                (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (PROP)
        (("1" (SKEEP)
          (("1" (PROP)
            (("1" (EXPAND "prime?")
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (CASE-REPLACE "fullset[(prime?)] = (prime?)")
              (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (EXPAND "fullset")
                (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "is_finite") (("2" (PROPAX) NIL NIL)) NIL)
         ("3" (EXPAND "empty?")
          (("3" (INST -1 "2")
            (("3" (EXPAND "member")
              (("3" (EXPAND "fullset") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_finite_set_nat| |ints|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|mp| SKOLEM-CONST-DECL "{a: nat |
   fullset[(prime?)](a) AND FORALL x: fullset[(prime?)](x) IMPLIES x <= a}"
     |inf_prime_harmonic_prime| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL)
    (|prime_enum_tail_gen| FORMULA-DECL NIL |prime_extra| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|m| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|zero_tail_series_conv| FORMULA-DECL NIL |series_lems| |series|)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|prime_enum_surj| FORMULA-DECL NIL |prime_extra| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|exists_border_constant_TCC1| 0
  (|exists_border_constant_TCC1-1| NIL 3941051677
   ("" (PROP)
    (("" (EXPAND "conv_series?")
      (("" (SKEEP) (("" (REWRITE "end_series_conv" :DIR RL) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|conv_series?| CONST-DECL "bool" |series| |series|)
    (|end_series_conv| FORMULA-DECL NIL |series| |series|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL))
   NIL
   (|exists_border_constant| SUBTYPE
    "series.series(inf_prime_harmonic_prime.inverse_primes, inf_prime_harmonic_prime.k)"
    "(convergence_sequences.convergent?)")))
 (|exists_border_constant| 0
  (|exists_border_constant-1| NIL 3941051913
   ("" (PROP)
    (("" (EXPAND "conv_series?")
      (("" (LEMMA "limit_equiv")
        (("" (INST -1 "limit(series(inverse_primes))" "series(inverse_primes)")
          (("" (FLATTEN)
            (("" (HIDE -1)
              (("" (ASSERT)
                (("" (EXPAND "convergence")
                  (("" (INST -1 "1/2")
                    (("" (SKEEP)
                      (("" (INST -1 "n")
                        (("" (ASSERT)
                          ((""
                            (CASE-REPLACE
                             "series(inverse_primes)(n) - limit(series(inverse_primes)) = -limit(series(inverse_primes, n+1))")
                            (("1" (INST 1 "n+1")
                              (("1" (HIDE -1)
                                (("1" (LEMMA "limit_nonneg")
                                  (("1" (INST -1 "inverse_primes")
                                    (("1" (EXPAND "abs")
                                      (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (SKEEP)
                                        (("2" (EXPAND "inverse_primes")
                                          (("2" (LIFT-IF)
                                            (("2" (ASSERT)
                                              (("2" (PROP)
                                                (("2" (LEMMA "prime_enum_id")
                                                  (("2" (INST?)
                                                    (("2" (EXPAND "prime?")
                                                      (("2" (PROP)
                                                        (("2"
                                                          (LEMMA
                                                           "both_sides_times_pos_ge1")
                                                          (("2"
                                                            (INST -1
                                                             "prime_enumeration(x1)"
                                                             "1 / prime_enumeration(x1)"
                                                             "0")
                                                            (("1" (FLATTEN)
                                                              (("1" (HIDE -2)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1 2)
                              (("2" (LEMMA "limit_series_shift")
                                (("2" (INST -1 "inverse_primes" "n+1")
                                  (("2" (ASSERT)
                                    (("2" (REPLACES -1)
                                      (("2"
                                        (NAME-REPLACE "a"
                                         "limit(series(LAMBDA (n_1: nat): inverse_primes(1 + n_1 + n)))")
                                        (("2"
                                          (NAME-REPLACE "b"
                                           "limit(series(inverse_primes, 1 + n))")
                                          (("2" (EXPAND "series" 1)
                                            (("2" (CASE-REPLACE "a = b")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2" (EXPAND "a")
                                                  (("2" (EXPAND "b")
                                                    (("2"
                                                      (LEMMA
                                                       "convergence_shift")
                                                      (("2"
                                                        (INST -1
                                                         "limit(series(inverse_primes, 1 + n))"
                                                         "n+1"
                                                         "series(inverse_primes, 1 + n)")
                                                        (("2" (FLATTEN)
                                                          (("2" (HIDE -2)
                                                            (("2" (PROP)
                                                              (("1"
                                                                (LEMMA
                                                                 "limit_equiv")
                                                                (("1"
                                                                  (INST -1
                                                                   "limit(series(inverse_primes, 1 + n))"
                                                                   "LAMBDA (n_1: nat):
                    series(inverse_primes, 1 + n)(n_1 + (n + 1))")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -2
                                                                             LR
                                                                             HIDE)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2 1
                                                                         RL
                                                                         HIDE)
                                                                        (("1"
                                                                          (CASE-REPLACE
                                                                           "series(LAMBDA (n_1: nat): inverse_primes(1 + n_1 + n)) = LAMBDA (n_1: nat): series(inverse_primes, 1 + n)(n_1 + (n + 1))")
                                                                          (("1"
                                                                            (HIDE
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (DECOMPOSE-EQUALITY)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "series")
                                                                                (("1"
                                                                                  (CASE
                                                                                      "FORALL(m:nat): sigma(0, m, LAMBDA (n_1: nat): inverse_primes(1 + n_1 + n)) = sigma(1 + n, 1 + n + m, inverse_primes)")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "x!1")
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE-ALL-BUT
                                                                                     1)
                                                                                    (("2"
                                                                                      (MEASURE-INDUCT
                                                                                       "m"
                                                                                       "m")
                                                                                      (("2"
                                                                                        (SKEEP)
                                                                                        (("2"
                                                                                          (CASE-REPLACE
                                                                                           "x = 0")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "x-1")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "sigma"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "limit_equiv")
                                                                (("2"
                                                                  (INST -1
                                                                   "limit(series(inverse_primes, 1 + n))"
                                                                   "series(inverse_primes, 1 + n)")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (HIDE -1)
                                                                      (("2"
                                                                        (PROP)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "end_series_conv"
                                                                           :DIR
                                                                           RL)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (REWRITE "end_series_conv" :DIR RL) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|conv_series?| CONST-DECL "bool" |series| |series|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|a| SKOLEM-CONST-DECL "real" |inf_prime_harmonic_prime| NIL)
    (|convergence_shift| FORMULA-DECL NIL |convergence_ops| |analysis|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|end_series_conv| FORMULA-DECL NIL |series| |series|)
    (|b| SKOLEM-CONST-DECL "real" |inf_prime_harmonic_prime| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|limit_series_shift| FORMULA-DECL NIL |series| |series|)
    (|limit_nonneg| FORMULA-DECL NIL |series_lems| |series|)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|x1| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|limit_equiv| FORMULA-DECL NIL |convergence_ops| |analysis|))
   SHOSTAK))
 (|small_big_primes_finite_case| 0
  (|small_big_primes_finite_case-1| NIL 3944732121
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "small_primes")
        (("1" (DECOMPOSE-EQUALITY)
          (("1" (TYPEPRED "x!1")
            (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (DECOMPOSE-EQUALITY)
        (("2" (IFF)
          (("2" (PROP)
            (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (EXPAND "big_primes") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|fullset| CONST-DECL "set" |sets| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|big_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL))
   SHOSTAK))
 (|prime_enum_small_primes_bij| 0
  (|prime_enum_small_primes_bij-1| NIL 3944672874
   ("" (SKEEP)
    (("" (LEMMA "prime_enum_surj")
      (("" (INST -1 "p")
        (("" (SKEEP)
          (("" (CASE "prime_enumeration(k) = 0")
            (("1" (LEMMA "prime_enum_zero_tail")
              (("1" (FLATTEN)
                (("1" (HIDE -2)
                  (("1" (PROP)
                    (("1" (SKEEP)
                      (("1" (CASE "b <= k")
                        (("1" (CASE "prime?(prime_enumeration(b-1))")
                          (("1" (INST 1 "i")
                            (("1" (LEMMA "prime_enum_ineq3")
                              (("1" (INST -1 "i" "b-1")
                                (("1" (PROP)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (EXPAND "empty?")
                                    (("3" (INST -3 "prime_enumeration(i)")
                                      (("1" (EXPAND "member")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (TYPEPRED "p")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "prime_enum_id")
                            (("2" (INST -1 "b-1")
                              (("2" (PROP)
                                (("2" (REPLACES -1)
                                  (("2" (EXPAND "empty?")
                                    (("2" (INST -2 "2")
                                      (("1" (EXPAND "member")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (REWRITE "prime_2") NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE "b > k")
                          (("1" (LEMMA "prime_enum_tail_gen")
                            (("1" (INST -1 "k")
                              (("1" (ASSERT)
                                (("1" (INST -1 "b-1")
                                  (("1" (REPLACES -1)
                                    (("1" (EXPAND "empty?")
                                      (("1" (INST -2 "2")
                                        (("1" (EXPAND "member")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (REWRITE "prime_2") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "prime_enum_tail_gen")
                      (("2" (INST -1 "k")
                        (("2" (ASSERT)
                          (("2" (INST 1 "k")
                            (("2" (CASE-REPLACE "k = 0")
                              (("1" (EXPAND "prime_enumeration" -3)
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "prime_enum_id")
              (("2" (INST -1 "k")
                (("2" (PROP)
                  (("2" (INST 2 "i")
                    (("2" (TYPEPRED "p")
                      (("2" (EXPAND "small_primes")
                        (("2" (ASSERT)
                          (("2" (LEMMA "prime_enum_ineq3")
                            (("2" (INST -1 "i" "k")
                              (("2" (PROP)
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                                 ("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_surj| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime_enum_zero_tail| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime_enum_tail_gen| FORMULA-DECL NIL |prime_extra| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_enum_ineq3| FORMULA-DECL NIL |prime_extra| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|i| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|prime_enum_big_primes_bij| 0
  (|prime_enum_big_primes_bij-1| NIL 3944673465
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "big_primes")
        (("" (PROP)
          (("" (LEMMA "prime_enum_surj")
            (("" (INST -1 "p")
              (("" (SKEEP)
                (("" (INST 1 "i")
                  (("" (LEMMA "prime_enum_ineq3")
                    (("" (EXPAND ">")
                      (("" (REPLACE -2 (-3 -4) RL HIDE)
                        (("" (INST -1 "k" "i")
                          (("" (ASSERT)
                            (("" (LEMMA "prime_enum_id")
                              (("" (INST -1 "k")
                                (("" (PROP) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|big_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|i| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_enum_ineq3| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime_enum_surj| FORMULA-DECL NIL |prime_extra| NIL))
   SHOSTAK))
 (|N_bij_below_n| 0
  (|N_bij_below_n-1| NIL 3942829096
   ("" (SKEEP)
    (("" (INST 1 "(lambda(m : (N(n))): m-1)")
      (("1" (EXPAND "bijective?")
        (("1" (PROP)
          (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
           ("2" (EXPAND "surjective?")
            (("2" (SKEEP)
              (("2" (INST 1 "y+1")
                (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (N CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|y| SKOLEM-CONST-DECL "below[n]" |inf_prime_harmonic_prime| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|Card_N_TCC1| 0
  (|Card_N_TCC1-1| NIL 3937051915
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (LEMMA "N_bij_below_n")
        (("" (INST -1 "n")
          (("" (SKEEP)
            (("" (INST 1 "n" "f")
              (("" (EXPAND "bijective?") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (N CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|N_bij_below_n| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   NIL
   (|Card_N| SUBTYPE "inf_prime_harmonic_prime.N(inf_prime_harmonic_prime.n)"
    "finite_set[posnat]")))
 (|Card_N| 0
  (|Card_N-1| NIL 3937051916
   ("" (SKEEP)
    (("" (REWRITE "Card_bijection") (("" (REWRITE "N_bij_below_n") NIL NIL))
      NIL))
    NIL)
   ((|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (N CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|N_bij_below_n| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   SHOSTAK))
 (|union_N_s_N_b| 0
  (|union_N_s_N_b-1| NIL 3936979260
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY)
      (("" (IFF)
        (("" (PROP)
          (("1" (EXPAND "union")
            (("1" (EXPAND "N")
              (("1" (EXPAND "member")
                (("1" (PROP)
                  (("1" (CASE "prime_enumeration(k) = 0")
                    (("1" (LEMMA "small_big_primes_finite_case")
                      (("1" (INST -1 "k")
                        (("1" (ASSERT)
                          (("1" (PROP)
                            (("1" (EXPAND "N_s")
                              (("1" (SKEEP)
                                (("1" (REPLACE -1 1 RL HIDE)
                                  (("1" (EXPAND "fullset")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "N_s")
                      (("2" (EXPAND "N_b")
                        (("2" (PROP)
                          (("2" (SKEEP)
                            (("2" (INST 1 "p")
                              (("2" (PROP)
                                (("2" (EXPAND "small_primes")
                                  (("2" (EXPAND "big_primes")
                                    (("2" (ASSERT)
                                      (("2" (LEMMA "prime_enum_id")
                                        (("2" (INST -1 "k")
                                          (("2" (PROP)
                                            (("1" (EXPAND "prime?")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (EXPAND "prime?")
                                              (("2" (FLATTEN)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "union")
            (("2" (EXPAND "member")
              (("2" (EXPAND "N")
                (("2" (EXPAND "N_s")
                  (("2" (EXPAND "N_b") (("2" (PROP) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|N_b| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (N CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|big_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|small_big_primes_finite_case| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|N_div_bij| 0
  (|N_div_bij-1| NIL 3944492421
   ("" (SKEEP)
    (("" (INST 1 "(lambda(m: (N_div(d, n))): m/d-1)")
      (("1" (EXPAND "bijective?")
        (("1" (PROP)
          (("1" (EXPAND "injective?")
            (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (EXPAND "surjective?")
            (("2" (SKEEP)
              (("2" (TYPEPRED "y")
                (("2" (INST 1 "d * (y+1)")
                  (("1" (LEMMA "real_props.div_cancel1")
                    (("1" (INST -1 "d" "y+1")
                      (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (EXPAND "N_div")
                    (("2" (CASE-REPLACE "d * y + d = d*(y+1)")
                      (("1" (PROP)
                        (("1" (CASE-REPLACE "y+1 <= floor(n/d)")
                          (("1" (TYPEPRED "floor(n / d)")
                            (("1" (HIDE-ALL-BUT (-1 -4 1))
                              (("1" (LEMMA "both_sides_div_pos_le1")
                                (("1" (INST -1 "d" "d * (y+1)" "n")
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -2)
                                      (("1" (PROP) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (EXPAND "divides") (("2" (INST 1 "y+1") NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (TYPEPRED "m")
          (("2" (EXPAND "N_div")
            (("2" (FLATTEN)
              (("2" (EXPAND "divides")
                (("2" (SKEEP)
                  (("2" (REPLACES -3)
                    (("2" (LEMMA "real_props.div_cancel1")
                      (("2" (INST -1 "d" "x")
                        (("2" (REPLACES -1)
                          (("2" (PROP)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (TYPEPRED "d")
                              (("2" (REWRITE "pos_times_gt")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("3" (TYPEPRED "floor(n / d)")
                              (("3" (LEMMA "both_sides_div_pos_le1")
                                (("3" (INST -1 "d" "d * x" "n")
                                  (("3" (FLATTEN)
                                    (("3" (HIDE -1)
                                      (("3" (PROP)
                                        (("3" (LEMMA "real_props.div_cancel1")
                                          (("3" (INST -1 "d" "x")
                                            (("3" (REPLACES -1)
                                              (("3" (HIDE-ALL-BUT (-1 -3 1))
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|d| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|y| SKOLEM-CONST-DECL "below[floor(n / d)]" |inf_prime_harmonic_prime|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL))
   SHOSTAK))
 (|Card_N_div_TCC1| 0
  (|Card_N_div_TCC1-1| NIL 3936975863
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (LEMMA "N_div_bij")
        (("" (INST -1 "d" "n")
          (("" (SKEEP)
            (("" (INST 1 "floor(n / d)" "f")
              (("" (EXPAND "bijective?") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|N_div_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   NIL
   (|Card_N_div| SUBTYPE
    "inf_prime_harmonic_prime.N_div(inf_prime_harmonic_prime.d, inf_prime_harmonic_prime.n)"
    "finite_set[posnat]")))
 (|Card_N_div| 0
  (|Card_N_div-1| NIL 3936975865
   ("" (SKEEP)
    (("" (REWRITE "Card_bijection") (("" (REWRITE "N_div_bij") NIL NIL)) NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|N_div_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   SHOSTAK))
 (|square_free_N_s_prime_TCC1| 0
  (|square_free_N_s_prime_TCC1-1| NIL 3945082498 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|square_free_N_s_prime| SUBTYPE "inf_prime_harmonic_prime.m" "posnat")))
 (|square_free_N_s_prime| 0
  (|square_free_N_s_prime-1| NIL 3945082498
   ("" (SKEEP)
    (("" (TYPEPRED "v")
      (("" (EXPAND "square_free_N_s")
        (("" (EXPAND "extend")
          (("" (PROP)
            (("1" (SKEEP)
              (("1" (EXPAND "divides")
                (("1" (SKEEP)
                  (("1" (REPLACES -2)
                    (("1" (INST 1 "k_1")
                      (("1" (INST 1 "p * x") (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "N_s")
              (("2" (PROP)
                (("1" (LEMMA "divisor_smaller")
                  (("1" (INST -1 "m" "v")
                    (("1" (SPLIT)
                      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                       ("3" (EXPAND "divides")
                        (("3" (INST 1 "p") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "small_primes")
                    (("2" (INST -3 "p!1")
                      (("2" (SPLIT)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                         ("3" (EXPAND "divides")
                          (("3" (SKEEP)
                            (("3" (REPLACES -1)
                              (("3" (INST 1 "p * x") (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|square_div_N_s_prime_TCC1| 0
  (|square_div_N_s_prime_TCC1-1| NIL 3945082498 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL (|square_div_N_s_prime| SUBTYPE "inf_prime_harmonic_prime.m" "posnat")))
 (|square_div_N_s_prime| 0
  (|square_div_N_s_prime-1| NIL 3945082989
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (TYPEPRED "v")
              (("" (EXPAND "square_div_N_s")
                (("" (EXPAND "extend")
                  (("" (PROP)
                    (("1" (SKEEP)
                      (("1" (REPLACES -3)
                        (("1" (LEMMA "prime_divides_prod")
                          (("1" (INST -1 "p")
                            (("1" (ASSERT)
                              (("1" (INST -1 "k_1" "k_1")
                                (("1"
                                  (CASE
                                      "divides(p, k_1) => EXISTS (k_1: posnat): m = k_1 * k_1")
                                  (("1" (PROP)
                                    (("1" (EXPAND "divides")
                                      (("1" (INST 1 "m * p")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE -1)
                                    (("2" (PROP)
                                      (("2" (HIDE 2)
                                        (("2" (EXPAND "divides")
                                          (("2" (SKEEP)
                                            (("2"
                                              (LEMMA "posnat_divides_posnat")
                                              (("2" (INST -1 "k_1" "p" "x")
                                                (("2" (ASSERT)
                                                  (("2" (REPLACES -2)
                                                    (("2" (INST 1 "x")
                                                      (("2"
                                                        (LEMMA
                                                         "both_sides_times2")
                                                        (("2"
                                                          (INST -1 "p * p"
                                                           "x * x" "m")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "N_s")
                      (("2" (PROP)
                        (("1" (LEMMA "divisor_smaller")
                          (("1" (INST -1 "m" "v")
                            (("1" (SPLIT)
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                               ("3" (EXPAND "divides")
                                (("3" (INST 1 "p * p") (("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (INST -3 "p!1")
                            (("2" (SPLIT)
                              (("1" (PROPAX) NIL NIL)
                               ("2" (EXPAND "divides")
                                (("2" (SKEEP)
                                  (("2" (REPLACES -1)
                                    (("2" (INST 1 "p * p * x")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat_divides_posnat| FORMULA-DECL NIL |number_util| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|N_s_charac| 0
  (|N_s_charac-1| NIL 3937495503
   ("" (SKEEP)
    (("" (NAME "s" "max({d: posnat| divides(d*d,m)})")
      (("1" (TYPEPRED "s")
        (("1" (EXPAND "divides")
          (("1" (SKEEP)
            (("1" (CASE "x > 0")
              (("1" (INST 1 "x" "s * s")
                (("1" (ASSERT) NIL NIL)
                 ("2" (EXPAND "square_div_N_s")
                  (("2" (EXPAND "extend")
                    (("2" (PROP)
                      (("1" (INST 1 "s") NIL NIL)
                       ("2" (EXPAND "N_s")
                        (("2" (PROP)
                          (("1" (TYPEPRED "m")
                            (("1" (EXPAND "N_s")
                              (("1" (FLATTEN)
                                (("1" (LEMMA "divisor_smaller")
                                  (("1" (INST -1 "s * s" "x * s * s")
                                    (("1" (SPLIT)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3" (EXPAND "divides")
                                        (("3" (INST 1 "x")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (TYPEPRED "m")
                              (("2" (EXPAND "N_s")
                                (("2" (FLATTEN)
                                  (("2" (INST -3 "p")
                                    (("2" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (REPLACES -6)
                                        (("2" (LEMMA "divides_prod2")
                                          (("2" (INST -1 "x" "s * s" "p")
                                            (("2" (SPLIT)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT)
                  (("3" (EXPAND "square_free_N_s")
                    (("3" (EXPAND "extend")
                      (("3" (PROP)
                        (("1" (SKOLEM -2 "b")
                          (("1" (TYPEPRED "b")
                            (("1" (INST -7 "b*s")
                              (("1" (SPLIT)
                                (("1" (HIDE-ALL-BUT (-1 -2 -6))
                                  (("1" (EXPAND ">")
                                    (("1" (LEMMA "lt_times_lt_pos2")
                                      (("1" (INST -1 "1" "s" "s" "b")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "divides")
                                  (("2" (SKEEP)
                                    (("2" (REPLACE -3 -6 LR HIDE)
                                      (("2" (INST 1 "x_1")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-1 -5 1))
                                (("2" (REWRITE "posreal_mult_closed") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "N_s")
                          (("2" (PROP)
                            (("1" (TYPEPRED "m")
                              (("1" (EXPAND "N_s")
                                (("1" (FLATTEN)
                                  (("1" (LEMMA "divisor_smaller")
                                    (("1" (INST -1 "x" "m")
                                      (("1" (PROP)
                                        (("1" (REPLACES -1)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (EXPAND "divides")
                                          (("3" (INST 1 "s * s")
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (TYPEPRED "m")
                                (("2" (EXPAND "N_s")
                                  (("2" (FLATTEN)
                                    (("2" (INST -3 "p")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "divides")
                                          (("2" (SKEEP)
                                            (("2" (REPLACES -3)
                                              (("2" (INST 1 "s * s * x_1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "posnat_divides_posnat")
                (("2" (INST -1 "m" "s * s" "x") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (EXPAND "nonempty?")
          (("2" (PROP)
            (("1" (EXPAND "empty?")
              (("1" (INST -1 "1")
                (("1" (EXPAND "member") (("1" (REWRITE "one_divides") NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST 1 "m")
              (("2" (SKEEP)
                (("2" (TYPEPRED "y")
                  (("2" (LEMMA "divisor_smaller")
                    (("2" (INST -1 "y" "m")
                      (("2" (ASSERT)
                        (("2" (EXPAND "divides")
                          (("2" (SKEEP)
                            (("2" (INST 1 "x * y") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{a: posnat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_bounded_posnat| |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|b| SKOLEM-CONST-DECL "{k: nat | k > 1}" |inf_prime_harmonic_prime| NIL)
    (|lt_times_lt_pos2| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|divides_prod2| FORMULA-DECL NIL |divides| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (|s| SKOLEM-CONST-DECL "{a: posnat |
   divides(a * a, m) AND FORALL x: divides(x * x, m) IMPLIES x <= a}"
     |inf_prime_harmonic_prime| NIL)
    (|x| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat_divides_posnat| FORMULA-DECL NIL |number_util| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|one_divides| FORMULA-DECL NIL |divides| NIL))
   SHOSTAK))
 (|one_prime_decomposition_ind| 0
  (|one_prime_decomposition_ind-1| NIL 3944998238
   ("" (MEASURE-INDUCT+ "n" ("n"))
    (("" (CASE "x!1 = 0")
      (("1" (HIDE -2)
        (("1" (INST 2 "2")
          (("1" (GRIND) NIL NIL)
           ("2" (LEMMA "prime_2") (("2" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (CASE "prime?(x!1)")
        (("1" (HIDE -2)
          (("1" (INST 3 "x!1")
            (("1" (EXPAND "divides")
              (("1" (INST 3 "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (REWRITE "prime_rew")
          (("2" (PROP)
            (("1" (SKEEP)
              (("1" (INST -4 "j")
                (("1" (ASSERT)
                  (("1" (SKEEP)
                    (("1" (INST 3 "p")
                      (("1" (EXPAND "divides")
                        (("1" (SKEEP)
                          (("1" (SKEEP)
                            (("1" (REPLACE -4 -3)
                              (("1" (INST 3 "x!2 * x") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|prime_rew| FORMULA-DECL NIL |primes| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|N_s_prime_factor_transfer| 0
  (|N_s_prime_factor_transfer-1| NIL 3945078796
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "prime_divides_prod")
        (("" (INST -1 "p")
          (("1" (ASSERT)
            (("1" (INST -1 "a" "b")
              (("1" (ASSERT)
                (("1"
                  (CASE
                      "FORALL(p:(prime?), v:(square_div_N_s(n, k))): divides(p, v) => divides(p*p,v)")
                  (("1"
                    (CASE "FORALL(p: (prime?), a, c: (square_free_N_s(n, k)),
     	    b, d: (square_div_N_s(n, k))):
      a*b = c*d AND divides(p, b) => (divides(p*p, a*b) AND divides(p * p, b) AND divides(p *p, d))")
                    (("1" (SPLIT)
                      (("1" (REPLACE -4 -5)
                        (("1" (LEMMA "prime_divides_prod")
                          (("1" (INST -1 "p")
                            (("1" (ASSERT)
                              (("1" (INST -1 "c" "d")
                                (("1" (ASSERT)
                                  (("1" (INST -3 "p" "c" "a" "d" "b")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -5 -3 RL)
                                        (("1" (PROP) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "p")
                                (("2" (EXPAND "prime?")
                                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (INST -2 "p" "a" "c" "b" "d")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-1 1))
                      (("2" (SKEEP)
                        (("2" (INST-CP -3 "p!1" "b!1")
                          (("2" (ASSERT)
                            (("2" (CASE "divides(p!1*p!1, a!1 * b!1)")
                              (("1" (ASSERT)
                                (("1" (REPLACE -2 -1)
                                  (("1" (CASE "divides(p!1, c!1 * d!1)")
                                    (("1" (LEMMA "prime_divides_prod")
                                      (("1" (INST -1 "p!1")
                                        (("1" (ASSERT)
                                          (("1" (INST -1 "c!1" "d!1")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT)
                                                (("1" (EXPAND "divides" -1)
                                                  (("1" (SKEEP)
                                                    (("1" (HIDE -2)
                                                      (("1" (REPLACE -1 -2)
                                                        (("1"
                                                          (LEMMA
                                                           "divides_prod_elim1")
                                                          (("1"
                                                            (INST -1 "x * d!1"
                                                             "p!1" "p!1")
                                                            (("1"
                                                              (REPLACE -1 -3 LR
                                                                       HIDE)
                                                              (("1"
                                                                (LEMMA
                                                                 "prime_divides_prod")
                                                                (("1"
                                                                  (INST -1
                                                                   "p!1")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (INST -1
                                                                       "x"
                                                                       "d!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (SPLIT)
                                                                          (("1"
                                                                            (HIDE-ALL-BUT
                                                                             (-1
                                                                              -2))
                                                                            (("1"
                                                                              (EXPAND
                                                                               "divides")
                                                                              (("1"
                                                                                (SKEEP)
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("1"
                                                                                    (TYPEPRED
                                                                                     "c!1")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "square_free_N_s")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "extend")
                                                                                        (("1"
                                                                                          (PROP)
                                                                                          (("1"
                                                                                            (INST
                                                                                             1
                                                                                             "p!1")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "divides")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "x_1")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (TYPEPRED
                                                                                               "p!1")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "prime?")
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (INST
                                                                             -6
                                                                             "p!1"
                                                                             "d!1")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (TYPEPRED
                                                                     "p!1")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "prime?")
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (EXPAND "/=")
                                                              (("2"
                                                                (TYPEPRED
                                                                 "p!1")
                                                                (("2"
                                                                  (EXPAND
                                                                   "prime?")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -6 "p!1" "d!1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "p!1")
                                          (("2" (EXPAND "prime?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (-1 1))
                                      (("2" (EXPAND "divides")
                                        (("2" (SKEEP)
                                          (("2" (INST 1 "p!1 * x")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-4 1))
                                (("2" (EXPAND "divides")
                                  (("2" (SKEEP)
                                    (("2" (INST 1 "a!1 * x")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKEEP)
                      (("2" (EXPAND "divides")
                        (("2" (SKEEP)
                          (("2" (TYPEPRED "v")
                            (("2" (EXPAND "square_div_N_s")
                              (("2" (EXPAND "extend")
                                (("2" (PROP)
                                  (("2" (SKEEP)
                                    (("2" (REPLACE -2 -4)
                                      (("2" (LEMMA "prime_divides_prod")
                                        (("2" (INST -1 "p!1")
                                          (("1" (ASSERT)
                                            (("1" (INST -1 "k_1" "k_1")
                                              (("1" (SPLIT)
                                                (("1" (EXPAND "divides")
                                                  (("1" (SKEEP)
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (INST 1 "x!1 * x!1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "divides")
                                                  (("2" (SKEEP)
                                                    (("2" (REPLACES -1)
                                                      (("2"
                                                        (INST 1 "x!1 * x!1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (EXPAND "divides")
                                                  (("3" (INST 1 "x") NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (TYPEPRED "p!1")
                                            (("2" (EXPAND "prime?")
                                              (("2" (FLATTEN)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "p")
            (("2" (EXPAND "prime?")
              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|divides_prod_elim1| FORMULA-DECL NIL |divides| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|p!1| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|p!1| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|))
   SHOSTAK))
 (|N_s_squares_unique| 0
  (|N_s_squares_unique-1| NIL 3944994285
   ("" (SKEEP)
    (("" (SKEEP)
      ((""
        (CASE
            "FORALL(m: posnat):FORALL(a, c: (square_free_N_s(n, k)), b, d: (square_div_N_s(n, k))): m = a*b AND m = c*d => a = c AND b = d")
        (("1" (INST -1 "a * b")
          (("1" (INST -1 "a" "c" "b" "d") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (HIDE -1 2)
          (("2" (MEASURE-INDUCT "m-1" "m")
            (("2" (SKEEP)
              (("2" (CASE-REPLACE "x = 1")
                (("1" (SKEEP)
                  (("1" (LEMMA "one_div_one")
                    (("1" (INST-CP -1 "a!1")
                      (("1" (INST-CP -1 "b!1")
                        (("1" (INST-CP -1 "c!1")
                          (("1" (INST -1 "d!1")
                            (("1" (FLATTEN)
                              (("1" (HIDE -2 -4 -6 -8)
                                (("1"
                                  (CASE
                                      "divides(a!1, 1) AND  divides(b!1, 1) AND  divides(c!1, 1) AND  divides(d!1, 1)")
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE-ALL-BUT (-7 -8 1))
                                    (("2" (PROP)
                                      (("1" (EXPAND "divides")
                                        (("1" (INST 1 "b!1") NIL NIL)) NIL)
                                       ("2" (EXPAND "divides")
                                        (("2" (INST 1 "a!1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("3" (EXPAND "divides")
                                        (("3" (INST 1 "d!1") NIL NIL)) NIL)
                                       ("4" (EXPAND "divides")
                                        (("4" (INST 1 "c!1")
                                          (("4" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "one_prime_decomposition_ind")
                  (("2" (INST -1 "x")
                    (("2" (ASSERT)
                      (("2" (SKEEP)
                        (("2" (SKEEP)
                          (("2" (REPLACE -3 -1)
                            (("2" (LEMMA "N_s_prime_factor_transfer")
                              (("2"
                                (INST -1 "n" "k" "p" "a!1" "c!1" "b!1" "d!1")
                                (("2" (ASSERT)
                                  (("2" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -5 -3 RL)
                                        (("1" (EXPAND "divides")
                                          (("1" (SKEEP)
                                            (("1" (SKEEP)
                                              (("1" (SKEEP)
                                                (("1"
                                                  (CASE
                                                      "x!1 > 0 AND x!2 > 0 AND x_1 > 0")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -7 "x_1")
                                                      (("1" (SPLIT)
                                                        (("1"
                                                          (INST -1 "x!1" "x!2"
                                                           "b!1" "d!1")
                                                          (("1" (SPLIT)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (REPLACES -1)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (REPLACES -6)
                                                              (("2"
                                                                (REPLACES -4)
                                                                (("2"
                                                                  (LEMMA
                                                                   "both_sides_times2")
                                                                  (("2"
                                                                    (INST -1
                                                                     "p" "x_1"
                                                                     "x!1 * b!1")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -6 LR
                                                                       HIDE)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "/=")
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "p")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "prime?")
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (REPLACES -6)
                                                              (("3"
                                                                (REPLACES -5)
                                                                (("3"
                                                                  (LEMMA
                                                                   "both_sides_times2")
                                                                  (("3"
                                                                    (INST -1
                                                                     "p" "x_1"
                                                                     "x!2 * d!1")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -7 LR
                                                                       HIDE)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "/=")
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "p")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "prime?")
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (LEMMA
                                                             "square_free_N_s_prime")
                                                            (("2"
                                                              (INST -1 "n" "k"
                                                               "x!2" "p" "c!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (LEMMA
                                                             "square_free_N_s_prime")
                                                            (("3"
                                                              (INST -1 "n" "k"
                                                               "x!1" "p" "a!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (LEMMA
                                                           "divisor_posnat_strict_smaller")
                                                          (("2"
                                                            (INST -1 "x" "p"
                                                             "x_1")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL)
                                                             ("3"
                                                              (TYPEPRED "p")
                                                              (("3"
                                                                (EXPAND
                                                                 "prime?")
                                                                (("3" (FLATTEN)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (CASE "p > 0")
                                                    (("1"
                                                      (LEMMA
                                                       "posnat_divides_posnat")
                                                      (("1"
                                                        (INST-CP -1 "a!1" "p"
                                                         "x!1")
                                                        (("1"
                                                          (INST-CP -1 "c!1" "p"
                                                           "x!2")
                                                          (("1"
                                                            (INST -1 "x" "p"
                                                             "x_1")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "p")
                                                      (("2" (EXPAND "prime?")
                                                        (("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REPLACE -4 -1 RL)
                                      (("2" (FLATTEN)
                                        (("2" (HIDE -4)
                                          (("2" (EXPAND "divides")
                                            (("2" (SKEEP)
                                              (("2" (SKEEP)
                                                (("2" (SKEEP)
                                                  (("2"
                                                    (CASE
                                                        "x_1 > 0 AND x!1 > 0 AND x!2 > 0")
                                                    (("1" (FLATTEN)
                                                      (("1" (INST -7 "x_1")
                                                        (("1" (SPLIT)
                                                          (("1" (REPLACES -5)
                                                            (("1"
                                                              (INST -1 "a!1"
                                                               "c!1" "x!1"
                                                               "x!2")
                                                              (("1" (SPLIT)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-6 -4 1))
                                                                  (("2"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "both_sides_times1")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "p * p"
                                                                         "x_1"
                                                                         "a!1 * x!1")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "/=")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "p")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "prime?")
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "zero_times3")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (HIDE-ALL-BUT
                                                                   (-7 -5 1))
                                                                  (("3"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("3"
                                                                      (LEMMA
                                                                       "both_sides_times1")
                                                                      (("3"
                                                                        (INST
                                                                         -1
                                                                         "p * p"
                                                                         "x_1"
                                                                         "c!1 * x!2")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "/=")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "p")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "prime?")
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   " zero_times3")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "p"
                                                                                     "p")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "square_div_N_s_prime")
                                                                (("2"
                                                                  (INST -1 "n"
                                                                   "k" "x!2"
                                                                   "p" "d!1")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("3"
                                                                (LEMMA
                                                                 "square_div_N_s_prime")
                                                                (("3"
                                                                  (INST -1 "n"
                                                                   "k" "x!1"
                                                                   "p" "b!1")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (LEMMA
                                                             "divisor_posnat_strict_smaller")
                                                            (("2"
                                                              (INST -1 "x"
                                                               "p * p" "x_1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL)
                                                               ("3"
                                                                (TYPEPRED "p")
                                                                (("3"
                                                                  (EXPAND
                                                                   "prime?")
                                                                  (("3"
                                                                    (FLATTEN)
                                                                    (("3"
                                                                      (HIDE-ALL-BUT
                                                                       (-2 1))
                                                                      (("3"
                                                                        (EXPAND
                                                                         ">")
                                                                        (("3"
                                                                          (LEMMA
                                                                           "lt_times_lt_pos1")
                                                                          (("3"
                                                                            (INST
                                                                             -1
                                                                             "1"
                                                                             "1"
                                                                             "p"
                                                                             "p")
                                                                            (("3"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (CASE "p > 0")
                                                      (("1"
                                                        (LEMMA
                                                         "posnat_divides_posnat")
                                                        (("1"
                                                          (INST-CP -1 "x" "p*p"
                                                           "x_1")
                                                          (("1"
                                                            (INST-CP -1 "b!1"
                                                             "p*p" "x!1")
                                                            (("1"
                                                              (INST -1 "d!1"
                                                               "p*p" "x!2")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (TYPEPRED "p")
                                                        (("2" (EXPAND "prime?")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|one_prime_decomposition_ind| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|N_s_prime_factor_transfer| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|x!1| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|x!2| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|square_div_N_s_prime| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|x_1| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x_1| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|divisor_posnat_strict_smaller| FORMULA-DECL NIL |number_util| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|x!1| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|x!2| SKOLEM-CONST-DECL "int" |inf_prime_harmonic_prime| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|square_free_N_s_prime| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|posnat_divides_posnat| FORMULA-DECL NIL |number_util| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|N_s_sf_part_TCC1| 0
  (|N_s_sf_part_TCC1-1| NIL 3944822315
   ("" (SKEEP)
    (("" (EXPAND "singleton?")
      (("" (LEMMA "N_s_charac")
        (("" (INST -1 "n" "k" "m")
          (("" (SKEEP)
            (("" (INST 1 "a")
              (("1" (SKOLEM 1 "c")
                (("1" (TYPEPRED "c")
                  (("1" (SKOLEM -3 "d")
                    (("1" (LEMMA "N_s_squares_unique")
                      (("1" (INST -1 "n" "k" "a" "c" "b" "d")
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST 1 "b") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|singleton?| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|a| SKOLEM-CONST-DECL "(square_free_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|N_s_squares_unique| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|N_s_charac| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   NIL
   (|N_s_sf_part| SUBTYPE
    "{a: (inf_prime_harmonic_prime.square_free_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)) | EXISTS (b: (inf_prime_harmonic_prime.square_div_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k))): inf_prime_harmonic_prime.m = number_fields.*(a, b)}"
    "(sets[(inf_prime_harmonic_prime.square_free_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k))].singleton?)")))
 (|N_s_sd_part_TCC1| 0
  (|N_s_sd_part_TCC1-1| NIL 3944822315
   ("" (SKEEP)
    (("" (EXPAND "singleton?")
      (("" (LEMMA "N_s_charac")
        (("" (INST -1 "n" "k" "m")
          (("" (SKEEP)
            (("" (INST 1 "b")
              (("1" (SKOLEM 1 "d")
                (("1" (TYPEPRED "d")
                  (("1" (SKOLEM -3 "c")
                    (("1" (LEMMA "N_s_squares_unique")
                      (("1" (INST -1 "n" "k" "a" "c" "b" "d")
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST 1 "a") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|singleton?| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|b| SKOLEM-CONST-DECL "(square_div_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|N_s_squares_unique| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|N_s_charac| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   NIL
   (|N_s_sd_part| SUBTYPE
    "{b: (inf_prime_harmonic_prime.square_div_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)) | EXISTS (a: (inf_prime_harmonic_prime.square_free_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k))): inf_prime_harmonic_prime.m = number_fields.*(a, b)}"
    "(sets[(inf_prime_harmonic_prime.square_div_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k))].singleton?)")))
 (|N_s_part_id| 0
  (|N_s_part_id-1| NIL 3944915137
   ("" (SKEEP)
    (("" (EXPAND "N_s_sf_part")
      (("" (EXPAND "N_s_sd_part")
        (("" (LEMMA "N_s_charac")
          (("" (INST -1 "n" "k" "m")
            (("" (SKEEP)
              (("" (LEMMA "singleton_elt_lem[(square_free_N_s(n, k))]")
                ((""
                  (INST -1 "{a: (square_free_N_s(n, k)) |
               EXISTS (b: (square_div_N_s(n, k))): m = a * b}"
                   "a")
                  (("" (PROP)
                    (("1" (REPLACES -1)
                      (("1" (LEMMA "singleton_elt_lem[(square_div_N_s(n, k))]")
                        (("1"
                          (INST -1 "{b: (square_div_N_s(n, k)) |
                EXISTS (a: (square_free_N_s(n, k))): m = a * b}"
                           "b")
                          (("1" (PROP)
                            (("1" (REPLACES -1) NIL NIL)
                             ("2" (HIDE 2)
                              (("2" (EXPAND "singleton?")
                                (("2" (INST 1 "b")
                                  (("1" (SKOLEM 1 "d")
                                    (("1" (TYPEPRED "d")
                                      (("1" (SKOLEM -3 "c")
                                        (("1" (LEMMA "N_s_squares_unique")
                                          (("1"
                                            (INST -1 "n" "k" "a" "c" "b" "d")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST 1 "a") NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (INST 1 "a") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND "singleton?")
                        (("2" (INST 1 "a")
                          (("1" (SKOLEM 1 "c")
                            (("1" (TYPEPRED "c")
                              (("1" (SKOLEM -3 "d")
                                (("1" (LEMMA "N_s_squares_unique")
                                  (("1" (INST -1 "n" "k" "a" "c" "b" "d")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST 1 "b") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (INST 1 "b") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|N_s_sf_part| CONST-DECL "(square_free_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (|N_s_charac| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|a| SKOLEM-CONST-DECL "(square_free_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|b| SKOLEM-CONST-DECL "(square_div_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|N_s_squares_unique| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton_elt_lem| FORMULA-DECL NIL |sets| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|N_s_sd_part| CONST-DECL "(square_div_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL))
   SHOSTAK))
 (|square_div_N_s_Card_ineq_TCC1| 0
  (|square_div_N_s_Card_ineq_TCC1-1| NIL 3941051677
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "n" "LAMBDA(i:(square_div_N_s(n, k))): i-1")
        (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "i")
            (("2" (EXPAND "square_div_N_s")
              (("2" (EXPAND "extend")
                (("2" (PROP)
                  (("2" (EXPAND "N_s") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|square_div_N_s_Card_ineq| SUBTYPE
    "inf_prime_harmonic_prime.square_div_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)"
    "finite_set[posnat]")))
 (|square_div_N_s_Card_ineq| 0
  (|square_div_N_s_Card_ineq-1| NIL 3937055718
   ("" (SKEEP)
    (("" (CASE "Card[posnat](square_div_N_s(n, k)) <= floor(sqrt(n))")
      (("1" (TYPEPRED "floor(sqrt(n))") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE 2)
        (("2" (REWRITE "Card_injection")
          (("2" (HIDE 2)
            (("2" (INST 1 "(lambda(m: (square_div_N_s(n, k))): sqrt(m)-1)")
              (("1" (EXPAND "injective?")
                (("1" (SKEEP) (("1" (REWRITE "sqrt_eq") NIL NIL)) NIL)) NIL)
               ("2" (SKEEP)
                (("2" (TYPEPRED "m")
                  (("2" (EXPAND "square_div_N_s")
                    (("2" (EXPAND "extend")
                      (("2" (PROP)
                        (("1" (SKEEP)
                          (("1" (REPLACES -2)
                            (("1" (REWRITE "sqrt_square")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (REPLACES -2)
                            (("2" (REWRITE "sqrt_square")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (SKOLEM -2 "a")
                          (("3" (REPLACES -2)
                            (("3" (REWRITE "sqrt_square")
                              (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("4" (EXPAND "N_s")
                          (("4" (FLATTEN)
                            (("4" (SKOLEM -3 "a")
                              (("4" (REPLACES -3)
                                (("4" (LEMMA "sqrt_le")
                                  (("4" (INST -1 "a * a" "n")
                                    (("4" (FLATTEN)
                                      (("4" (HIDE -1)
                                        (("4" (PROP)
                                          (("4" (TYPEPRED "floor(sqrt(n))")
                                            (("4" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|Card_injection| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|sqrt_eq| FORMULA-DECL NIL |sqrt| |reals|)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|N_s_finseq_fun_TCC1| 0
  (|N_s_finseq_fun_TCC1-1| NIL 3944497588 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|N_s_finseq_fun| SUBTYPE "0" "below[fs`length]")))
 (|N_s_finseq_fun_TCC2| 0
  (|N_s_finseq_fun_TCC2-1| NIL 3944497588 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|N_s_finseq_fun| SUBTYPE "1" "below[fs`length]")))
 (|N_s_finseq_fun_TCC3| 0
  (|N_s_finseq_fun_TCC3-1| NIL 3944497588
   ("" (SKEEP)
    (("" (EXPAND "singleton?")
      ((""
        (INST 1
         "(# length := 2, seq := LAMBDA(i:nat): IF i = 0 THEN N_s_sf_part(n, k, m) ELSE N_s_sd_part(n, k, m) ENDIF#)")
        (("1" (SKEEP)
          (("1" (TYPEPRED "y")
            (("1" (SKEEP)
              (("1" (DECOMPOSE-EQUALITY)
                (("1" (EXPAND "restrict")
                  (("1" (DECOMPOSE-EQUALITY)
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (REPLACES -1)
                          (("1" (REPLACES -3)
                            (("1" (EXPAND "N_s_sf_part")
                              (("1"
                                (LEMMA
                                 "singleton_elt_lem[(square_free_N_s(n, k))]")
                                (("1"
                                  (INST -1 "{a: (square_free_N_s(n, k)) |
              EXISTS (b: (square_div_N_s(n, k))): m = a * b}"
                                   "a")
                                  (("1" (PROP)
                                    (("1" (HIDE 2)
                                      (("1" (EXPAND "singleton?")
                                        (("1" (INST 1 "a")
                                          (("1" (SKOLEM 1 "c")
                                            (("1" (TYPEPRED "c")
                                              (("1" (SKOLEM -3 "d")
                                                (("1"
                                                  (LEMMA "N_s_squares_unique")
                                                  (("1"
                                                    (INST -1 "n" "k" "a" "c"
                                                     "b" "d")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST 1 "b") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST 1 "b") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE-REPLACE "x!1 = 1")
                          (("1" (REPLACES -5)
                            (("1" (EXPAND "N_s_sd_part")
                              (("1"
                                (LEMMA
                                 "singleton_elt_lem[(square_div_N_s(n, k))]")
                                (("1"
                                  (INST -1 "{b: (square_div_N_s(n, k)) |
              EXISTS (a: (square_free_N_s(n, k))): m = a * b}"
                                   "b")
                                  (("1" (ASSERT)
                                    (("1" (HIDE 2 3)
                                      (("1" (PROP)
                                        (("1" (EXPAND "singleton?")
                                          (("1" (INST 1 "b")
                                            (("1" (SKOLEM 1 "d")
                                              (("1" (TYPEPRED "d")
                                                (("1" (SKOLEM -3 "c")
                                                  (("1"
                                                    (LEMMA
                                                     "N_s_squares_unique")
                                                    (("1"
                                                      (INST -1 "n" "k" "a" "c"
                                                       "b" "d")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST 1 "a") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (INST 1 "a") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "x!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (REPLACES -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "restrict")
          (("2" (LEMMA "N_s_charac")
            (("2" (INST -1 "n" "k" "m")
              (("2" (SKEEP)
                (("2" (INST 1 "a" "b")
                  (("2" (ASSERT)
                    (("2" (PROP)
                      (("1" (EXPAND "N_s_sf_part")
                        (("1"
                          (LEMMA "singleton_elt_lem[(square_free_N_s(n, k))]")
                          (("1"
                            (INST -1 "{a: (square_free_N_s(n, k)) |
              EXISTS (b: (square_div_N_s(n, k))): m = a * b}"
                             "a")
                            (("1" (PROP)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "singleton?")
                                  (("1" (INST 1 "a")
                                    (("1" (SKOLEM 1 "c")
                                      (("1" (TYPEPRED "c")
                                        (("1" (SKOLEM -3 "d")
                                          (("1" (LEMMA "N_s_squares_unique")
                                            (("1"
                                              (INST -1 "n" "k" "a" "c" "b" "d")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST 1 "b") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST 1 "b") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "N_s_sd_part")
                        (("2"
                          (LEMMA "singleton_elt_lem[(square_div_N_s(n, k))]")
                          (("2"
                            (INST -1 "{b: (square_div_N_s(n, k)) |
              EXISTS (a: (square_free_N_s(n, k))): m = a * b}"
                             "b")
                            (("2" (ASSERT)
                              (("2" (HIDE 2 3)
                                (("2" (PROP)
                                  (("1" (EXPAND "singleton?")
                                    (("1" (INST 1 "b")
                                      (("1" (SKOLEM 1 "d")
                                        (("1" (TYPEPRED "d")
                                          (("1" (SKOLEM -3 "c")
                                            (("1" (LEMMA "N_s_squares_unique")
                                              (("1"
                                                (INST -1 "n" "k" "a" "c" "b"
                                                 "d")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (INST 1 "a") NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST 1 "a") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|singleton?| CONST-DECL "bool" |sets| NIL)
    (|a| SKOLEM-CONST-DECL "(square_free_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|b| SKOLEM-CONST-DECL "(square_div_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|N_s_charac| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|b| SKOLEM-CONST-DECL "(square_div_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|a| SKOLEM-CONST-DECL "(square_free_N_s(n, k))" |inf_prime_harmonic_prime|
     NIL)
    (|N_s_squares_unique| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|singleton_elt_lem| FORMULA-DECL NIL |sets| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|y| SKOLEM-CONST-DECL "({fs: finseq[posnat] |
    EXISTS (a: (square_free_N_s(n, k)), b: (square_div_N_s(n, k))):
      m = a * b AND fs`length = 2 AND fs`seq(0) = a AND fs`seq(1) = b})"
     |inf_prime_harmonic_prime| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|even_pos_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|N_s_sf_part| CONST-DECL "(square_free_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (|N_s_sd_part| CONST-DECL "(square_div_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL
   (|N_s_finseq_fun| SUBTYPE
    "{fs: finite_sequences[posnat].finseq | EXISTS (a: (inf_prime_harmonic_prime.square_free_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)), b: (inf_prime_harmonic_prime.square_div_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k))): booleans.AND(inf_prime_harmonic_prime.m = number_fields.*(a, b), booleans.AND(fs`length = 2, booleans.AND(fs`seq(0) = a, fs`seq(1) = b)))}"
    "(sets[finseq[posnat]].singleton?)")))
 (|square_div_finseq_bij| 0
  (|square_div_finseq_bij-1| NIL 3944499328
   ("" (SKEEP)
    ((""
      (INST 1
       "LAMBDA(x:(square_div_N_s(n, k))): (# length := 1, seq := LAMBDA(y: below[1]): x #)")
      (("1" (EXPAND "bijective?")
        (("1" (PROP)
          (("1" (EXPAND "injective?")
            (("1" (SKEEP)
              (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST -1 "0") NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (EXPAND "surjective?")
            (("2" (SKEEP)
              (("2" (TYPEPRED "y_1")
                (("2" (EXPAND "square_div_finseq_set")
                  (("2" (SKEEP)
                    (("2" (INST 1 "v") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "square_div_finseq_set") (("2" (INST 1 "x") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|square_div_finseq_set| CONST-DECL "set[finseq[posnat]]"
     |inf_prime_harmonic_prime| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|N_s_inj| 0
  (|N_s_inj-1| NIL 3944493666
   ("" (SKEEP)
    ((""
      (INST 1
       "lambda(m: (N_s(n, k))): (# length := 2, seq := LAMBDA(i:nat): IF i = 0 THEN N_s_sf_part(n, k, m) ELSE N_s_sd_part(n, k, m) ENDIF#)")
      (("1" (EXPAND "injective?")
        (("1" (SKEEP)
          (("1" (EXPAND "restrict")
            (("1" (DECOMPOSE-EQUALITY)
              (("1" (INST-CP -1 "0")
                (("1" (INST -1 "1")
                  (("1" (LIFT-IF)
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "x1")
                        (("1" (TYPEPRED "x2")
                          (("1" (LEMMA "N_s_part_id")
                            (("1" (INST-CP -1 "n" "k" "x1")
                              (("1" (INST -1 "n" "k" "x2")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "cartesian_product_set")
          (("2" (EXPAND "Union")
            (("2" (EXPAND "restrict")
              (("2"
                (INST 1
                 "{fs:finseq[posnat] | EXISTS(v: (square_div_N_s(n, k))): fs = (# length := 2, seq := LAMBDA (s: below[2]): IF s = 0 THEN N_s_sf_part(n, k, m) ELSE v ENDIF #)}")
                (("1" (INST 1 "N_s_sd_part(n, k, m)") NIL NIL)
                 ("2" (INST 1 "N_s_sf_part(n, k, m)")
                  (("2" (ASSERT)
                    (("2" (EXPAND "cartesian_product_one")
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "add_first")
                          (("2" (DECOMPOSE-EQUALITY)
                            (("1" (IFF)
                              (("1" (PROP)
                                (("1" (SKEEP)
                                  (("1"
                                    (INST 1
                                     "(# length := 1, seq := LAMBDA (x: below[1]): v #)")
                                    (("1" (PROP)
                                      (("1" (EXPAND "square_div_finseq_set")
                                        (("1" (INST 1 "v") NIL NIL)) NIL)
                                       ("2" (EXPAND "insert?")
                                        (("2" (REPLACES -1)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (LIFT-IF)
                                                (("1" (PROP)
                                                  (("1" (EXPAND "finseq_appl")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKEEP)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (SKEEP)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "square_div_finseq_set")
                                    (("2" (SKEEP)
                                      (("2" (INST 1 "v")
                                        (("2" (REPLACES -1)
                                          (("2" (EXPAND "insert?")
                                            (("2" (REPLACES -1)
                                              (("2" (DECOMPOSE-EQUALITY)
                                                (("1" (DECOMPOSE-EQUALITY)
                                                  (("1" (LIFT-IF)
                                                    (("1" (PROP)
                                                      (("1"
                                                        (EXPAND "finseq_appl")
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKEEP)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKEEP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (EXPAND "square_div_finseq_set")
                                (("2" (SKEEP)
                                  (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|N_s_sd_part| CONST-DECL "(square_div_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|N_s_sf_part| CONST-DECL "(square_free_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|square_div_finseq_set| CONST-DECL "set[finseq[posnat]]"
     |inf_prime_harmonic_prime| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|cartesian_product_set| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|N_s_part_id| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|add_first| CONST-DECL "finseq" |seq_extras| |structures|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|even_pos_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (|insert?| CONST-DECL "finseq" |seq_extras| |structures|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|m| SKOLEM-CONST-DECL "(N_s(n, k))" |inf_prime_harmonic_prime| NIL)
    (|cartesian_product_one| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|Union| CONST-DECL "set" |sets| NIL))
   SHOSTAK))
 (|N_s_Card_ineq_TCC1| 0
  (|N_s_Card_ineq_TCC1-1| NIL 3937499154
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "n" "LAMBDA(i:(N_s(n, k))): i-1")
        (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "i")
            (("2" (EXPAND "N_s") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|N_s_Card_ineq| SUBTYPE
    "inf_prime_harmonic_prime.N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)"
    "finite_set[posnat]")))
 (|N_s_Card_ineq_TCC2| 0
  (|N_s_Card_ineq_TCC2-1| NIL 3937499154
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "n" "LAMBDA(i:(square_free_N_s(n, k))):i-1")
        (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "i")
            (("2" (EXPAND "square_free_N_s")
              (("2" (EXPAND "extend")
                (("2" (PROP)
                  (("2" (EXPAND "N_s") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|N_s_Card_ineq| SUBTYPE
    "inf_prime_harmonic_prime.square_free_N_s(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)"
    "finite_set[posnat]")))
 (|N_s_Card_ineq| 0
  (|N_s_Card_ineq-1| NIL 3937499197
   ("" (SKEEP)
    (("" (LEMMA "cartesian_product_set_card[posnat]")
      (("" (INST -1 "square_free_N_s(n, k)" "square_div_finseq_set(n,k)")
        (("" (PROP)
          (("1" (LEMMA "card_less_than_equal[posnat, finseq[posnat]]")
            (("1"
              (INST -1 "N_s(n, k)" "cartesian_product_set(square_free_N_s(n, k),
                                 square_div_finseq_set(n, k))")
              (("1" (FLATTEN)
                (("1" (HIDE -1)
                  (("1" (PROP)
                    (("1" (REWRITE* "card_def")
                      (("1" (REPLACES -2)
                        (("1" (LEMMA "card_equal[posnat, finseq[posnat]]")
                          (("1"
                            (INST -1 "square_div_N_s(n, k)"
                             "square_div_finseq_set(n, k)")
                            (("1" (REWRITE* "card_def")
                              (("1" (FLATTEN)
                                (("1" (HIDE -1)
                                  (("1" (ASSERT)
                                    (("1" (HIDE (-1 2))
                                      (("1" (EXPAND "card_eq")
                                        (("1" (LEMMA "square_div_finseq_bij")
                                          (("1" (INST -1 "n" "k") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE (-1 2))
                      (("2" (EXPAND "card_le")
                        (("2" (LEMMA "N_s_inj")
                          (("2" (INST -1 "n" "k") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "is_finite")
              (("2" (INST 1 "n" "LAMBDA(i:(square_free_N_s(n, k))): i-1")
                (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
                 ("2" (SKEEP)
                  (("2" (TYPEPRED "i")
                    (("2" (EXPAND "square_free_N_s")
                      (("2" (EXPAND "extend")
                        (("2" (PROP)
                          (("2" (EXPAND "N_s") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 2)
            (("3" (EXPAND "is_finite")
              (("3"
                (INST 1 "n"
                 "LAMBDA(fs:(square_div_finseq_set(n, k))): fs`seq(0)-1")
                (("1" (EXPAND "injective?")
                  (("1" (SKEEP)
                    (("1" (DECOMPOSE-EQUALITY)
                      (("1" (TYPEPRED "x1")
                        (("1" (TYPEPRED "x2")
                          (("1" (EXPAND "square_div_finseq_set")
                            (("1" (SKEEP)
                              (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY)
                        (("2" (TYPEPRED "x!1")
                          (("2" (TYPEPRED "x1")
                            (("2" (EXPAND "square_div_finseq_set")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (TYPEPRED "fs`seq(0)")
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "fs")
                        (("1" (EXPAND "square_div_finseq_set")
                          (("1" (SKEEP)
                            (("1" (REPLACES -1)
                              (("1" (BETA)
                                (("1" (TYPEPRED "v")
                                  (("1" (EXPAND "square_div_N_s")
                                    (("1" (EXPAND "extend")
                                      (("1" (PROP)
                                        (("1" (EXPAND "N_s")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "fs")
                      (("2" (EXPAND "square_div_finseq_set")
                        (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (SKEEP)
                  (("3" (TYPEPRED "fs")
                    (("3" (EXPAND "square_div_finseq_set")
                      (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (HIDE 1)
            (("4" (DECOMPOSE-EQUALITY)
              (("4"
                (INST -1 "(# length := 1, seq := (LAMBDA(x:below[1]): 1) #)")
                (("4" (EXPAND "emptyset")
                  (("4" (EXPAND "square_div_finseq_set")
                    (("4" (INST 1 "1")
                      (("4" (EXPAND "square_div_N_s")
                        (("4" (EXPAND "extend")
                          (("4" (PROP)
                            (("1" (INST 1 "1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (EXPAND "N_s")
                              (("2" (SKEEP)
                                (("2" (TYPEPRED "p")
                                  (("2" (EXPAND "prime?")
                                    (("2" (FLATTEN)
                                      (("2" (REWRITE "one_div_one")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cartesian_product_set_card| FORMULA-DECL NIL |cartesian_product_finite|
     |algebra|)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|cartesian_product_set| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|N_s_inj| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|card_le| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|square_div_finseq_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|card_eq| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|card_less_than_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|square_div_finseq_set| CONST-DECL "set[finseq[posnat]]"
     |inf_prime_harmonic_prime| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL))
   SHOSTAK))
 (|primes_cart_comp_TCC1| 0
  (|primes_cart_comp_TCC1-1| NIL 3944680536
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (PROP)
        (("1" (INST 1 "2" "LAMBDA(i: nat): IF i = 1 THEN 0 ELSE 1 ENDIF")
          (("1" (EXPAND "injective?")
            (("1" (SKEEP)
              (("1" (EXPAND "restrict")
                (("1" (LIFT-IF)
                  (("1" (PROP)
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (LIFT-IF)
                      (("2" (PROP)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "x2")
                          (("2" (TYPEPRED "x1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL)
         ("2" (EXPAND "empty?")
          (("2" (INST -1 "1")
            (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n /= 1}" |inf_prime_harmonic_prime| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL))
   NIL
   (|primes_cart_comp| SUBTYPE
    "{k: naturalnumbers.nat | booleans.OR(k = 1, k = inf_prime_harmonic_prime.n)}"
    "non_empty_finite_set[nat]")))
 (|card_primes_cart_comp| 0
  (|card_primes_cart_comp-1| NIL 3944678759
   ("" (SKEEP)
    (("" (REWRITE "Card_bijection")
      ((""
        (INST 1
         "LAMBDA(i:(primes_cart_comp(n))): IF i = 1 THEN 0 ELSE 1 ENDIF")
        (("" (EXPAND "bijective?")
          (("" (PROP)
            (("1" (EXPAND "injective?")
              (("1" (SKEEP)
                (("1" (LIFT-IF)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "x2")
                          (("2" (EXPAND "primes_cart_comp")
                            (("2" (PROP)
                              (("2" (TYPEPRED "x1")
                                (("2" (EXPAND "primes_cart_comp")
                                  (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "surjective?")
              (("2" (SKEEP)
                (("2" (TYPEPRED "y")
                  (("2" (CASE-REPLACE "y = 0")
                    (("1" (INST 1 "1")
                      (("1" (EXPAND "primes_cart_comp")
                        (("1" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("2" (CASE-REPLACE "y = 1")
                      (("1" (INST 2 "n")
                        (("1" (TYPEPRED "n")
                          (("1" (LIFT-IF) (("1" (PROP) NIL NIL)) NIL)) NIL)
                         ("2" (EXPAND "primes_cart_comp")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Card_bijection| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n /= 1}" |inf_prime_harmonic_prime| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|primes_cart_produc_TCC1| 0
  (|primes_cart_produc_TCC1-1| NIL 3944680092
   ("" (SKEEP)
    (("" (LEMMA "prime_enum_id")
      (("" (INST -1 "i")
        (("" (PROP)
          (("1" (ASSERT) NIL NIL)
           ("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|primes_cart_produc| SUBTYPE
    "prime_extra.prime_enumeration(inf_prime_harmonic_prime.i)"
    "{n: naturalnumbers.nat | n /= 1}")))
 (|card_primes_cart_TCC1| 0
  (|card_primes_cart_TCC1-1| NIL 3944680092
   ("" (SKEEP)
    (("" (LEMMA "cartesian_product_n_finite[nat]")
      (("" (EXPAND "primes_cart_produc")
        (("" (INST?)
          (("" (HIDE 2)
            (("" (SKEEP)
              (("" (LEMMA "prime_enum_id")
                (("" (INST?)
                  (("" (EXPAND "prime?")
                    (("" (PROP)
                      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                       ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cartesian_product_n_finite| FORMULA-DECL NIL |cartesian_product_finite|
     |algebra|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL))
   NIL
   (|card_primes_cart| SUBTYPE
    "inf_prime_harmonic_prime.primes_cart_produc(inf_prime_harmonic_prime.n)"
    "finite_set[finseq[nat]]")))
 (|card_primes_cart| 0
  (|card_primes_cart-1| NIL 3944680096
   ("" (SKEEP)
    (("" (REWRITE "card_def" :DIR RL)
      ((""
        (CASE
            "FORALL(i:nat): prime_enumeration(i) = 0 OR prime_enumeration(i) > 1")
        (("1" (LEMMA "cartesian_product_n_card[nat]")
          (("1" (EXPAND "primes_cart_produc")
            (("1"
              (INST -1 "(# length := n,
                   seq
                     := restrict[nat, below[n], non_empty_finite_set[nat]]
                            (LAMBDA (i: nat):
                               primes_cart_comp(prime_enumeration(i))) #)")
              (("1" (ASSERT)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "card_fs")
                    (("1" (EXPAND "finseq_appl")
                      (("1" (EXPAND "restrict")
                        (("1" (EXPAND "product")
                          (("1"
                            (CASE
                                "FORALL(k:nat| k <= n-1): product_rec((# length := n,
                     seq
                       := LAMBDA (i_1: below[n]):
                            card[nat]
                                (primes_cart_comp(prime_enumeration(i_1))) #),
                  k) = 2 ^ (k+1)")
                            (("1" (INST -1 "n-1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (HIDE 2)
                              (("2" (MEASURE-INDUCT "k" "k")
                                (("1" (SKEEP)
                                  (("1" (CASE-REPLACE "x = 0")
                                    (("1" (HIDE -)
                                      (("1" (EXPAND "product_rec")
                                        (("1" (EXPAND "prime_enumeration")
                                          (("1" (LEMMA "card_primes_cart_comp")
                                            (("1" (INST -1 "2")
                                              (("1" (REWRITE "card_def")
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST -1 "x-1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "product_rec" 2)
                                          (("1" (EXPAND "^")
                                            (("1" (EXPAND "expt" 2)
                                              (("1" (REPLACES -1)
                                                (("1"
                                                  (LEMMA
                                                   "card_primes_cart_comp")
                                                  (("1" (INST?)
                                                    (("1" (REWRITE "card_def")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (INST -1 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (SKEEP)
                                    (("2" (LEMMA "card_primes_cart_comp")
                                      (("2" (INST?)
                                        (("1" (REWRITE "card_def")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (HIDE 2)
                                  (("3" (SKEEP)
                                    (("3" (INST?)
                                      (("3" (PROP)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (ASSERT) NIL NIL)
                                         ("4" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE 2)
                              (("3" (SKEEP)
                                (("3" (REWRITE "card_def")
                                  (("1" (LEMMA "card_primes_cart_comp")
                                    (("1" (INST?)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (INST?) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("4" (HIDE 2)
                              (("4" (SKEEP)
                                (("4" (INST?)
                                  (("4" (PROP)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL)
                                     ("3" (ASSERT) NIL NIL)
                                     ("4" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKEEP)
                  (("2" (INST?)
                    (("2" (PROP)
                      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                       ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKEEP)
            (("2" (LEMMA "prime_enum_id")
              (("2" (INST?)
                (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|cartesian_product_n_card| FORMULA-DECL NIL |cartesian_product_finite|
     |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|product| CONST-DECL "posnat" |product_seq| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "{k: nat | k <= n - 1}" |inf_prime_harmonic_prime|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|card_primes_cart_comp| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|product_rec| DEF-DECL "posnat" |product_seq_scaf| |reals|)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|card_fs| CONST-DECL "finseq[nat]" |cartesian_product_finite| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL))
   SHOSTAK))
 (|square_free_inj_fun_TCC1| 0
  (|square_free_inj_fun_TCC1-1| NIL 3945086874 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|cartesian_product_n| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL))
   NIL
   (|square_free_inj_fun| SUBTYPE
    "(# length := inf_prime_harmonic_prime.k, seq := restrict[nat, below[k], nat].restrict(LAMBDA (i: naturalnumbers.nat): IF divides.divides(prime_extra.prime_enumeration(i), inf_prime_harmonic_prime.m) THEN prime_extra.prime_enumeration(i) ELSE 1 ENDIF) #)"
    "(inf_prime_harmonic_prime.primes_cart_produc(inf_prime_harmonic_prime.k))")))
 (|sf_inj_fun_divides_TCC1| 0
  (|sf_inj_fun_divides_TCC1-1| NIL 3945174676 ("" (SUBTYPE-TCC) NIL NIL)
   ((|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL))
   NIL
   (|sf_inj_fun_divides| SUBTYPE "inf_prime_harmonic_prime.i"
    "below[square_free_inj_fun(n, k, m)`length]")))
 (|sf_inj_fun_divides_TCC2| 0
  (|sf_inj_fun_divides_TCC2-1| NIL 3945191525 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|sf_inj_fun_divides| SUBTYPE "inf_prime_harmonic_prime.k" "posnat")))
 (|sf_inj_fun_divides| 0
  (|sf_inj_fun_divides-1| NIL 3945174676
   ("" (SKEEP)
    (("" (EXPAND "square_free_inj_fun")
      (("" (EXPAND "restrict")
        (("" (LIFT-IF) (("" (PROP) (("" (REWRITE "one_divides") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|one_divides| FORMULA-DECL NIL |divides| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   SHOSTAK))
 (|sf_inj_gcd_one_TCC1| 0
  (|sf_inj_gcd_one_TCC1-1| NIL 3945361710 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL))
   NIL
   (|sf_inj_gcd_one| SUBTYPE "inf_prime_harmonic_prime.j"
    "below[square_free_inj_fun(n, k, m)`length]")))
 (|sf_inj_gcd_one_TCC2| 0
  (|sf_inj_gcd_one_TCC2-1| NIL 3945361710 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   NIL
   (|sf_inj_gcd_one| SUBTYPE
    "inf_prime_harmonic_prime.square_free_inj_fun(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k, inf_prime_harmonic_prime.m)`seq(inf_prime_harmonic_prime.j)"
    "{jj: integers.int | booleans.=>(inf_prime_harmonic_prime.square_free_inj_fun(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k, inf_prime_harmonic_prime.m)`seq(inf_prime_harmonic_prime.i) = 0, jj /= 0)}")))
 (|sf_inj_gcd_one| 0
  (|sf_inj_gcd_one-1| NIL 3945361710
   ("" (SKEEP)
    (("" (EXPAND "square_free_inj_fun")
      (("" (EXPAND "restrict")
        (("" (LIFT-IF)
          (("" (LIFT-IF)
            (("" (PROP)
              (("1"
                (CASE
                    "FORALL(k:nat): divides(prime_enumeration(k), m) => prime?(prime_enumeration(k))")
                (("1" (INST-CP -1 "i")
                  (("1" (INST -1 "j")
                    (("1" (ASSERT)
                      (("1" (LEMMA "gcd_dif_primes_eq_one")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (EXPAND "/=")
                              (("1" (LEMMA "prime_enum_inj")
                                (("1" (INST -1 "i" "j")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (SKEEP)
                    (("2" (LEMMA "prime_enum_id")
                      (("2" (INST -1 "k!1")
                        (("2" (PROP)
                          (("2" (REPLACES -1)
                            (("2" (REWRITE "zero_div_zero") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "gcd_one_right") NIL NIL)
               ("3" (REWRITE "gcd_one_left") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|zero_div_zero| FORMULA-DECL NIL |divides| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime_enum_inj| FORMULA-DECL NIL |prime_extra| NIL)
    (|gcd_dif_primes_eq_one| FORMULA-DECL NIL |number_util| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|gcd_one_right| FORMULA-DECL NIL |number_util| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|gcd_one_left| FORMULA-DECL NIL |number_util| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   SHOSTAK))
 (|product_primes_cart_TCC1| 0
  (|product_primes_cart_TCC3-1| NIL 3945089007 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|product_primes_cart| SUBTYPE "0" "T_low[{i: nat | i < k}]")))
 (|product_primes_cart_TCC2| 0
  (|product_primes_cart_TCC2-1| NIL 3945089733 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|product_primes_cart| SUBTYPE "inf_prime_harmonic_prime.n"
    "T_high[{i: nat | i < k}]")))
 (|product_primes_cart_TCC3| 0
  (|product_primes_cart_TCC1-1| NIL 3945086874 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|cartesian_product_n| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|product_primes_cart| SUBTYPE "inf_prime_harmonic_prime.i"
    "below[fs`length]")))
 (|product_primes_cart_TCC4| 0
  (|product_primes_cart_TCC2-1| NIL 3945086874 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cartesian_product_n| CONST-DECL "set[finseq[T]]"
     |cartesian_product_finite| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL
   (|product_primes_cart| ASSUMING
    "reals@product[{i: naturalnumbers.nat | reals.<(i, inf_prime_harmonic_prime.k)}].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|ppcart_posnat| 0
  (|ppcart_posnat-1| NIL 3945177951
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "i" "i")
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "product_primes_cart")
              (("1" (EXPAND "product")
                (("1" (EXPAND "product")
                  (("1" (EXPAND "square_free_inj_fun")
                    (("1" (EXPAND "restrict")
                      (("1" (EXPAND "prime_enumeration")
                        (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "product_primes_cart")
                (("1" (EXPAND "product" 2)
                  (("1" (ASSERT)
                    (("1" (CASE "square_free_inj_fun(n, k, m)`seq(x) > 0")
                      (("1" (EXPAND ">")
                        (("1" (LEMMA "lt_times_lt_pos1")
                          (("1"
                            (INST -1 "0" "1" "product(0, x - 1,
               LAMBDA (i: nat | i < k): square_free_inj_fun(n, k, m)`seq(i))"
                             "square_free_inj_fun(n, k, m)`seq(x)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "square_free_inj_fun")
                          (("2" (EXPAND "restrict")
                            (("2" (LIFT-IF)
                              (("2" (PROP)
                                (("1" (LEMMA "prime_enum_id")
                                  (("1" (INST -1 "x")
                                    (("1" (SPLIT)
                                      (("1" (REPLACES -1)
                                        (("1" (TYPEPRED "m")
                                          (("1" (REWRITE " zero_div_zero") NIL
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "prime?")
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|m| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|zero_div_zero| FORMULA-DECL NIL |divides| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| |reals|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|x| SKOLEM-CONST-DECL "{i: nat | i < k}" |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|ppcart_gcd_TCC1| 0
  (|ppcart_gcd_TCC1-1| NIL 3945177709 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|ppcart_gcd| SUBTYPE "inf_prime_harmonic_prime.j"
    "{n: naturalnumbers.nat | reals.<(n, inf_prime_harmonic_prime.k)}")))
 (|ppcart_gcd_TCC2| 0
  (|ppcart_gcd_TCC2-1| NIL 3945177709 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| |reals|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL))
   NIL
   (|ppcart_gcd| SUBTYPE
    "inf_prime_harmonic_prime.product_primes_cart(inf_prime_harmonic_prime.k, inf_prime_harmonic_prime.square_free_inj_fun(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k, inf_prime_harmonic_prime.m), inf_prime_harmonic_prime.j)"
    "{jj: integers.int | booleans.=>(inf_prime_harmonic_prime.square_free_inj_fun(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k, inf_prime_harmonic_prime.m)`seq(inf_prime_harmonic_prime.i) = 0, jj /= 0)}")))
 (|ppcart_gcd| 0
  (|ppcart_gcd-1| NIL 3945177709
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "j" "j")
      (("1" (SKEEP)
        (("1" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "product_primes_cart")
              (("1" (EXPAND "product")
                (("1" (EXPAND "product")
                  (("1" (REWRITE "sf_inj_gcd_one") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "product_primes_cart")
                (("1" (EXPAND "product" 2)
                  (("1" (LEMMA "gcd_one_prod_eq_one")
                    (("1"
                      (INST -1 "square_free_inj_fun(n, k, m)`seq(i)"
                       "product[{i: nat | i < k}]
               (0, x - 1,
                LAMBDA (i: nat | i < k):
                  square_free_inj_fun(n, k, m)`seq(i))"
                       "square_free_inj_fun(n, k, m)`seq(x)")
                      (("1" (ASSERT)
                        (("1" (HIDE-ALL-BUT 1)
                          (("1" (PROP)
                            (("1" (EXPAND "square_free_inj_fun")
                              (("1" (EXPAND "restrict")
                                (("1" (LIFT-IF)
                                  (("1" (PROP)
                                    (("1" (REPLACES -2)
                                      (("1" (REWRITE "zero_div_zero") NIL NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "sf_inj_gcd_one") NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)
                       ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (LEMMA "ppcart_posnat")
          (("2" (INST -1 "n" "k" "m" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|i| SKOLEM-CONST-DECL "{i: posnat | i < k}" |inf_prime_harmonic_prime|
     NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sf_inj_gcd_one| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|zero_div_zero| FORMULA-DECL NIL |divides| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|gcd_one_prod_eq_one| FORMULA-DECL NIL |number_util| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|x| SKOLEM-CONST-DECL "{j: nat | j < i}" |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ppcart_posnat| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|product_prime_cart_id_TCC1| 0
  (|product_prime_cart_id_TCC1-1| NIL 3945175547 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|product_prime_cart_id| SUBTYPE
    "(number_fields.-)(inf_prime_harmonic_prime.k, 1)"
    "{n: naturalnumbers.nat | reals.<(n, inf_prime_harmonic_prime.k)}")))
 (|product_prime_cart_id| 0
  (|product_prime_cart_id-1| NIL 3945086924
   ("" (SKEEP)
    ((""
      (CASE
          "FORALL(k_1:nat| k_1 < k):FORALL(l:nat): product_primes_cart(k, square_free_inj_fun(n, k, m), k_1) = l => divides(l, m)")
      (("1" (INST -1 "k-1") (("1" (INST -1 "l") (("1" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE -1 2)
        (("2" (MEASURE-INDUCT "k_1" "k_1")
          (("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (CASE-REPLACE "x = 0")
                (("1" (HIDE -1 -2)
                  (("1" (EXPAND "product_primes_cart")
                    (("1" (EXPAND "product")
                      (("1" (EXPAND "product")
                        (("1" (EXPAND "square_free_inj_fun")
                          (("1" (EXPAND "restrict")
                            (("1" (LIFT-IF)
                              (("1" (PROP)
                                (("1" (EXPAND "prime_enumeration")
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (REPLACE -1 2 RL HIDE)
                                  (("2" (REWRITE "one_divides") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "x-1")
                  (("1" (ASSERT)
                    (("1"
                      (INST -1
                       "product_primes_cart(k, square_free_inj_fun(n, k, m), x - 1)")
                      (("1" (EXPAND "product_primes_cart" -2)
                        (("1" (EXPAND "product_primes_cart")
                          (("1" (EXPAND "product" -2)
                            (("1" (LEMMA "sf_inj_fun_divides")
                              (("1" (INST -1 "n" "k" "m" "x")
                                (("1" (LEMMA "divides_gcd_one")
                                  (("1"
                                    (INST -1
                                     "square_free_inj_fun(n, k, m)`seq(x)"
                                     "product[{i: nat | i < k}]
           (0, x - 1,
            LAMBDA (i: nat | i < k): square_free_inj_fun(n, k, m)`seq(i))"
                                     "m")
                                    (("1" (ASSERT)
                                      (("1" (HIDE-ALL-BUT 1)
                                        (("1" (LEMMA "ppcart_gcd")
                                          (("1" (INST -1 "n" "k" "m" "x" "x-1")
                                            (("1"
                                              (EXPAND "product_primes_cart")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "{k_1: nat | k_1 < k}" |inf_prime_harmonic_prime|
     NIL)
    (|k| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|sf_inj_fun_divides| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|divides_gcd_one| FORMULA-DECL NIL |number_util| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|ppcart_gcd| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|one_divides| FORMULA-DECL NIL |divides| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   SHOSTAK))
 (|product_sf_inj_id| 0
  (|product_sf_inj_id-1| NIL 3945088077
   ("" (SKEEP)
    (("" (LEMMA "product_prime_cart_id")
      (("" (INST -1 "n" "k" "m" "l")
        (("" (ASSERT)
          (("" (EXPAND "divides")
            (("" (SKEEP)
              (("" (LEMMA "posnat_divides_posnat")
                (("" (INST -1 "m" "l" "x")
                  (("" (ASSERT)
                    (("" (CASE-REPLACE "x = 1")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (LEMMA "one_prime_decomposition_ind")
                        (("2" (INST -1 "x")
                          (("2" (ASSERT)
                            (("2" (SKEEP)
                              (("2" (EXPAND "divides")
                                (("2" (SKEEP)
                                  (("2" (REPLACES -1)
                                    (("2" (TYPEPRED "m")
                                      (("2" (EXPAND "square_free_N_s")
                                        (("2" (EXPAND "extend")
                                          (("2" (PROP)
                                            (("2" (EXPAND "N_s")
                                              (("2" (FLATTEN)
                                                (("2" (INST -2 "p")
                                                  (("2" (SPLIT)
                                                    (("1"
                                                      (LEMMA
                                                       "prime_enum_small_primes_bij")
                                                      (("1" (INST -1 "k" "p")
                                                        (("1" (SKOLEM -1 "i")
                                                          (("1"
                                                            (EXPAND
                                                             "product_primes_cart")
                                                            (("1"
                                                              (NAME-REPLACE
                                                               "fs"
                                                               "LAMBDA (i: nat | i < k): square_free_inj_fun(n, k, m)`seq(i)")
                                                              (("1"
                                                                (CASE
                                                                    "FORALL (n:nat| n < k):
     FORALL(i:nat| i <= n):
      product(0, n, fs) = fs(i) *
            product(0, n, LAMBDA(j:nat| j < k): IF j = i THEN 1 else fs(j) ENDIF)")
                                                                (("1"
                                                                  (INST -1
                                                                   "k-1")
                                                                  (("1"
                                                                    (INST -1
                                                                     "i")
                                                                    (("1"
                                                                      (REPLACES
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "fs")
                                                                        (("1"
                                                                          (NAME-REPLACE
                                                                           "v"
                                                                           "product(0, k - 1,
               LAMBDA (j: nat | j < k):
                 IF j = i THEN 1
                 ELSE square_free_inj_fun(n, k, m)`seq(j)
                 ENDIF)")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "square_free_inj_fun")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "restrict")
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (PROP)
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -3)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -2
                                                                                       -7
                                                                                       RL
                                                                                       HIDE)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "p")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "divides")
                                                                                          (("1"
                                                                                            (INST
                                                                                             1
                                                                                             "x_1 * v")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (TYPEPRED
                                                                                           "p")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "prime?")
                                                                                            (("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACES
                                                                                     -2)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "divides")
                                                                                      (("2"
                                                                                        (INST
                                                                                         1
                                                                                         "l * x_1")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE-ALL-BUT
                                                                             1)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2"
                                                                    (MEASURE-INDUCT
                                                                     "n" "n")
                                                                    (("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (CASE-REPLACE
                                                                           "x!1 = 0")
                                                                          (("1"
                                                                            (HIDE
                                                                             -2)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "product")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "product")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (INST
                                                                             -1
                                                                             "x!1-1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "product"
                                                                                 2)
                                                                                (("1"
                                                                                  (LIFT-IF)
                                                                                  (("1"
                                                                                    (PROP)
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "FORALL(m: nat| m < i!1): product(0, m, fs) = product[{i: nat | i < k}]
              (0, m,
               LAMBDA (j: nat | j < k): IF j = i!1 THEN 1 ELSE fs(j) ENDIF)")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "i!1-1")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (MEASURE-INDUCT
                                                                                             "m"
                                                                                             "m")
                                                                                            (("2"
                                                                                              (SKEEP)
                                                                                              (("2"
                                                                                                (CASE-REPLACE
                                                                                                 "x!2 = 0")
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "product")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "product")
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "x!2-1")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "product"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (REPLACES
                                                                                                         -1)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (CASE
                                                                                          "i!1 < x!1")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -2
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (REPLACES
                                                                                           -2)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "divides")
                                                      (("2" (INST 1 "l * x_1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|product_prime_cart_id| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_enum_small_primes_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|x!2| SKOLEM-CONST-DECL "{m: nat | m < i!1}" |inf_prime_harmonic_prime|
     NIL)
    (|i!1| SKOLEM-CONST-DECL "{i: nat | i <= x!1}" |inf_prime_harmonic_prime|
     NIL)
    (|x!1| SKOLEM-CONST-DECL "{n: nat | n < k}" |inf_prime_harmonic_prime| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|fs| SKOLEM-CONST-DECL "[{i: nat | i < k} -> nat]"
     |inf_prime_harmonic_prime| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|prod_nat| APPLICATION-JUDGEMENT "nat" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|one_prime_decomposition_ind| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_divides_posnat| FORMULA-DECL NIL |number_util| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|square_free_N_s_Card_ineq| 0
  (|square_free_N_s_Card_ineq-1| NIL 3944653855
   ("" (SKEEP)
    (("" (CASE-REPLACE "k = 0")
      (("1" (EXPAND "^")
        (("1" (EXPAND "expt")
          (("1" (CASE "Card[posnat](square_free_N_s(n, 0)) = 1")
            (("1" (ASSERT) NIL NIL)
             ("2" (LEMMA "card_one[posnat]")
              (("2" (INST -1 "square_free_N_s(n, 0)")
                (("2" (REWRITE "card_def")
                  (("2" (REPLACE -1 1 LR HIDE)
                    (("2" (INST 1 "1")
                      (("2" (EXPAND "singleton")
                        (("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY)
                            (("2" (IFF)
                              (("2" (PROP)
                                (("1" (EXPAND "square_free_N_s")
                                  (("1" (EXPAND "extend")
                                    (("1" (PROP)
                                      (("1" (EXPAND "N_s")
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "small_primes")
                                            (("1" (EXPAND "prime_enumeration")
                                              (("1" (CASE "x!1 > 1")
                                                (("1"
                                                  (LEMMA
                                                   "one_prime_decomposition_ind")
                                                  (("1" (INST -1 "x!1")
                                                    (("1" (ASSERT)
                                                      (("1" (SKEEP)
                                                        (("1" (INST -4 "p")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED "p")
                                                              (("1"
                                                                (EXPAND
                                                                 "prime?")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "square_free_N_s")
                                  (("2" (EXPAND "extend")
                                    (("2" (PROP)
                                      (("1" (EXPAND "N_s")
                                        (("1" (SKEEP)
                                          (("1" (TYPEPRED "k!1")
                                            (("1" (REPLACES -5)
                                              (("1" (REWRITE "one_div_one")
                                                (("1" (EXPAND ">")
                                                  (("1"
                                                    (LEMMA "lt_times_lt_pos1")
                                                    (("1"
                                                      (INST -1 "1" "2" "k!1"
                                                       "k!1")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "N_s")
                                        (("2" (ASSERT)
                                          (("2" (SKEEP)
                                            (("2" (REPLACES -2)
                                              (("2" (REWRITE "one_div_one")
                                                (("1" (TYPEPRED "p")
                                                  (("1" (EXPAND "prime?")
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (TYPEPRED "p")
                                                  (("2" (EXPAND "prime?")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "card_less_than_equal[posnat, finseq[nat]]")
        (("2" (INST -1 "square_free_N_s(n, k)" "primes_cart_produc(k)")
          (("1" (FLATTEN)
            (("1" (HIDE -1)
              (("1" (PROP)
                (("1" (REWRITE* "card_def")
                  (("1" (REWRITE "card_primes_cart") NIL NIL)) NIL)
                 ("2" (EXPAND "card_le")
                  (("2"
                    (INST 1
                     "LAMBDA(i:(square_free_N_s(n, k))): square_free_inj_fun(n, k, i)")
                    (("1" (EXPAND "injective?")
                      (("1" (SKEEP)
                        (("1" (LEMMA "product_sf_inj_id")
                          (("1"
                            (INST-CP -1 "n" "k" "x1"
                             "product_primes_cart(k, square_free_inj_fun(n, k, x1), k - 1)")
                            (("1" (REPLACES -3)
                              (("1" (INST -1 "n" "k" "x2" "x1")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (LEMMA "ppcart_posnat")
                              (("2" (INST -1 "n" "k" "x1" "k-1")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 3) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "cartesian_product_n_finite[nat]")
            (("2" (EXPAND "primes_cart_produc")
              (("2" (INST?)
                (("2" (HIDE 2)
                  (("2" (SKEEP)
                    (("2" (LEMMA "prime_enum_id")
                      (("2" (INST?)
                        (("2" (EXPAND "prime?")
                          (("2" (PROP)
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                             ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|card_one| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|one_prime_decomposition_ind| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|small_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|primes_cart_produc| CONST-DECL "set[finseq[nat]]"
     |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|card_le| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|product_sf_inj_id| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|ppcart_posnat| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|product_primes_cart| CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|x1| SKOLEM-CONST-DECL "(square_free_N_s(n, k))"
     |inf_prime_harmonic_prime| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|square_free_inj_fun| CONST-DECL "(primes_cart_produc(k))"
     |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|card_primes_cart| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|primes_cart_comp| CONST-DECL "non_empty_finite_set[nat]"
     |inf_prime_harmonic_prime| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|cartesian_product_n_finite| FORMULA-DECL NIL |cartesian_product_finite|
     |algebra|)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|card_less_than_equal| FORMULA-DECL NIL |card_finite| |sets_aux|))
   SHOSTAK))
 (|N_b_union_fs_finite_TCC1| 0
  (|N_b_union_fs_finite_TCC1-1| NIL 3944989408
   ("" (SKEEP)
    (("" (LEMMA "prime_enum_id")
      (("" (INST?)
        (("" (EXPAND "prime?")
          (("" (PROP)
            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
             ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|N_b_union_fs_finite| SUBTYPE
    "prime_extra.prime_enumeration((number_fields.+)(inf_prime_harmonic_prime.x1, inf_prime_harmonic_prime.k))"
    "posnat")))
 (|N_b_union_fs_finite| 0
  (|N_b_union_fs_finite-1| NIL 3944989409
   ("" (SKEEP)
    (("" (LIFT-IF)
      (("" (ASSERT)
        (("" (PROP)
          (("" (EXPAND "is_finite")
            (("" (LEMMA "N_div_bij")
              (("" (INST -1 "prime_enumeration(k+x1)" "n")
                (("1" (SKEEP)
                  (("1" (EXPAND "bijective?")
                    (("1" (FLATTEN)
                      (("1" (INST 2 "floor(n / prime_enumeration(k+x1))" "f")
                        (("1" (HIDE -)
                          (("1" (LEMMA "prime_enum_id")
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (EXPAND "prime?")
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -1)
                                      (("1" (TYPEPRED "n")
                                        (("1" (LEMMA "floor_def")
                                          (("1"
                                            (INST -1
                                             "n / prime_enumeration(k + x1)")
                                            (("1" (FLATTEN)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (CASE
                                                      "0 <= n / prime_enumeration(k+x1)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE -1 2 3)
                                                    (("2" (EXPAND ">")
                                                      (("2"
                                                        (LEMMA
                                                         " both_sides_div_pos_lt1")
                                                        (("2"
                                                          (INST -1
                                                           "prime_enumeration(k + x1)"
                                                           "0" "n")
                                                          (("1" (SIMPLIFY -1)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "prime_enum_id")
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (EXPAND "prime?")
                        (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|N_div_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|floor_def| FORMULA-DECL NIL |floor_ceil| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|x1| SKOLEM-CONST-DECL "below[n]" |inf_prime_harmonic_prime| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|N_b_union_finseq_TCC1| 0
  (|N_b_union_finseq_TCC1-1| NIL 3944660097
   ("" (SKEEP)
    (("" (LEMMA "prime_enum_id")
      (("" (INST?)
        (("" (PROP)
          (("1" (EXPAND "prime?")
            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|N_b_union_finseq| SUBTYPE
    "prime_extra.prime_enumeration((number_fields.+)(inf_prime_harmonic_prime.i, inf_prime_harmonic_prime.k))"
    "posnat")))
 (|N_b_union_finseq_TCC2| 0
  (|N_b_union_finseq_TCC2-1| NIL 3944660097
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "N_b_union_fs_finite") (("" (INST -1 "n" "k" "x1") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|N_b_union_fs_finite| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   NIL
   (|N_b_union_finseq| SUBTYPE
    "restrict[nat, below[n], set[posnat]].restrict(LAMBDA (i: naturalnumbers.nat): IF prime_extra.prime_enumeration((number_fields.+)(i, inf_prime_harmonic_prime.k)) /= 0 THEN inf_prime_harmonic_prime.N_div(prime_extra.prime_enumeration((number_fields.+)(i, inf_prime_harmonic_prime.k)), inf_prime_harmonic_prime.n) ELSE sets[posnat].emptyset ENDIF)"
    "[below[n] -> finite_set[posnat]]")))
 (|N_b_union_Card_TCC1| 0
  (|N_b_union_Card_TCC1-1| NIL 3944661448
   ("" (SKEEP)
    (("" (EXPAND "N_b_union_finseq")
      (("" (EXPAND "union_finseq") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|N_b_union_finseq| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime|
     NIL)
    (|union_finseq| CONST-DECL "set[T]" |union_set_extra| NIL))
   NIL
   (|N_b_union_Card| SUBTYPE
    "inf_prime_harmonic_prime.N_b_union_finseq(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)"
    "finite_set[posnat]")))
 (|N_b_union_Card| 0
  (|teste2| "teste" 3944661977
   ("" (SKEEP)
    (("" (REWRITE "card_def[posnat]" :DIR RL)
      (("" (EXPAND "N_b_union_finseq")
        (("" (LEMMA "union_finseq_ineq2[posnat]")
          (("" (INST?)
            (("1"
              (CASE
                  "FORALL(l:nat| l <= n): union_finseq_card_sum((# length := n,
                                seq
                                  := restrict[nat, below[n], set[posnat]]
                                         (LAMBDA (i: nat):
                                            IF prime_enumeration(i + k) /= 0 THEN N_div(prime_enumeration(i + k), n)
                                            ELSE emptyset[posnat]
                                            ENDIF) #),
                             l) =  sigma(k, k - 1 + l,
             LAMBDA (i: nat): IF prime_enumeration(i) /= 0 THEN floor(n / prime_enumeration(i)) ELSE 0 ENDIF)")
              (("1" (INST -1 "n") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE -1 2)
                (("2" (MEASURE-INDUCT "l" "l")
                  (("1" (SKEEP)
                    (("1" (CASE-REPLACE "x = 0")
                      (("1" (HIDE -)
                        (("1" (EXPAND "union_finseq_card_sum")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (INST -1 "x-1")
                        (("1" (EXPAND "sigma" 2)
                          (("1" (ASSERT)
                            (("1" (LIFT-IF)
                              (("1" (PROP)
                                (("1" (EXPAND "union_finseq_card_sum" 2)
                                  (("1" (REPLACES -1)
                                    (("1" (EXPAND "finseq_appl")
                                      (("1" (EXPAND "restrict")
                                        (("1" (LIFT-IF)
                                          (("1" (PROP)
                                            (("1" (REWRITE "card_def")
                                              (("1" (REWRITE "Card_N_div")
                                                (("1" (LEMMA "prime_enum_id")
                                                  (("1" (INST?)
                                                    (("1" (EXPAND "prime?")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (LEMMA "prime_enum_id")
                                                (("2" (INST?)
                                                  (("2" (EXPAND "prime?")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "union_finseq_card_sum" 1)
                                    (("2" (EXPAND "finseq_appl")
                                      (("2" (EXPAND "restrict")
                                        (("2" (REPLACES -2)
                                          (("2" (ASSERT)
                                            (("2" (REWRITE "card_emptyset") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SKEEP)
                      (("2" (SKEEP)
                        (("2" (LEMMA "N_b_union_fs_finite")
                          (("2" (INST -1 "n" "k" "x1")
                            (("2" (EXPAND "restrict")
                              (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE 2)
                    (("3" (SKEEP)
                      (("3" (LEMMA "prime_enum_id")
                        (("3" (INST?)
                          (("3" (EXPAND "prime?")
                            (("3" (PROP)
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE-ALL-BUT 1)
                (("3" (SKEEP)
                  (("3" (SKEEP)
                    (("3" (LEMMA "N_b_union_fs_finite")
                      (("3" (INST -1 "n" "k" "x1")
                        (("3" (EXPAND "restrict")
                          (("3" (LIFT-IF) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (HIDE-ALL-BUT 1)
                (("4" (SKEEP)
                  (("4" (LEMMA "prime_enum_id")
                    (("4" (INST?)
                      (("4" (EXPAND "prime?")
                        (("4" (PROP)
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (SKEEP)
                (("2" (LEMMA "N_b_union_fs_finite")
                  (("2" (INST -1 "n" "k" "x1")
                    (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (SKEEP)
                (("3" (LEMMA "prime_enum_id")
                  (("3" (INST?)
                    (("3" (EXPAND "prime?")
                      (("3" (PROP)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|N_b_union_finseq| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|union_finseq_ineq2| FORMULA-DECL NIL |union_set_extra| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| |reals|)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|union_finseq_card_sum| DEF-DECL "nat" |union_set_extra| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|card_emptyset| FORMULA-DECL NIL |finite_sets| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|Card_N_div| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "{l: nat | l <= n}" |inf_prime_harmonic_prime| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|N_b_union_fs_finite| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK)
  (|N_b_union_Card-1| NIL 3944661448
   ("" (SKEEP)
    (("" (REWRITE "card_def" :DIR RL)
      (("" (LEMMA "union_finseq_ineq[posnat]") (("" (POSTPONE) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|N_b_union_inj| 0
  (|N_b_union_inj-1| NIL 3944663628
   ("" (SKEEP)
    (("" (INST 1 "LAMBDA(v: (N_b(n, k))): v")
      (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "N_b_union_finseq")
          (("2" (LEMMA "union_finseq_subset[posnat]")
            (("2"
              (INST -1 "v" "(# length := n,
                      seq
                        := restrict[nat, below[n], set[posnat]]
                               (LAMBDA (i: nat):
                                  IF prime_enumeration(i + k) /= 0 THEN N_div(prime_enumeration(i + k), n)
                                  ELSE emptyset[posnat]
                                  ENDIF) #)")
              (("1" (FLATTEN)
                (("1" (HIDE -1)
                  (("1" (PROP)
                    (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND "member")
                        (("2" (TYPEPRED "v")
                          (("2" (EXPAND "N_b")
                            (("2" (PROP)
                              (("2" (SKEEP)
                                (("2" (LEMMA "prime_enum_big_primes_bij")
                                  (("2" (INST -1 "k" "p")
                                    (("2" (SKOLEM -1 "m")
                                      (("2" (EXPAND "finseq_appl")
                                        (("2" (EXPAND "restrict")
                                          (("2" (INST 1 "m-k")
                                            (("1" (PROP)
                                              (("1" (EXPAND "N_div")
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (REPLACES -1)
                                                (("2" (TYPEPRED "p")
                                                  (("2" (EXPAND "prime?")
                                                    (("2" (FLATTEN)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (LEMMA "prime_enum_ineq2")
                                              (("2" (INST -1 "m")
                                                (("2" (PROP)
                                                  (("1" (REPLACES -2)
                                                    (("1"
                                                      (LEMMA "divisor_smaller")
                                                      (("1" (INST -1 "p" "v")
                                                        (("1" (PROP)
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "p")
                                                          (("2"
                                                            (EXPAND "prime?")
                                                            (("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REPLACES -1)
                                                    (("2" (TYPEPRED "p")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKEEP)
                  (("2" (LEMMA "N_b_union_fs_finite")
                    (("2" (INST -1 "n" "k" "x1")
                      (("2" (EXPAND "restrict")
                        (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP)
                  (("3" (LEMMA "prime_enum_id")
                    (("3" (INST?)
                      (("3" (EXPAND "prime?")
                        (("3" (PROP)
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|N_b_union_finseq| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime|
     NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|N_b| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|N_div| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|prime_enum_big_primes_bij| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|prime_enum_ineq2| FORMULA-DECL NIL |prime_extra| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |seq_extras|
     |structures|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |finite_sets_inductions|
     |finite_sets|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|m| SKOLEM-CONST-DECL "{n: nat | n >= k}" |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|big_primes| CONST-DECL "set[(prime?)]" |inf_prime_harmonic_prime| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_harmonic_prime| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|N_b_union_fs_finite| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|union_finseq_subset| FORMULA-DECL NIL |union_set_extra| NIL))
   SHOSTAK))
 (|N_b_Card_ineq_TCC1| 0
  (|N_b_Card_ineq_TCC1-1| NIL 3941444946
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "n" "LAMBDA(i:(N_b(n, k))):i-1")
        (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "i")
            (("2" (EXPAND "N_b") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|N_b| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|N_b_Card_ineq| SUBTYPE
    "inf_prime_harmonic_prime.N_b(inf_prime_harmonic_prime.n, inf_prime_harmonic_prime.k)"
    "finite_set[posnat]")))
 (|N_b_Card_ineq_TCC2| 0
  (|N_b_Card_ineq_TCC2-1| NIL 3944661448
   ("" (SKEEP) (("" (REWRITE "end_series_conv" :DIR RL) NIL NIL)) NIL)
   ((|end_series_conv| FORMULA-DECL NIL |series| |series|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL))
   NIL
   (|N_b_Card_ineq| SUBTYPE
    "series.series(inf_prime_harmonic_prime.inverse_primes, inf_prime_harmonic_prime.k)"
    "(convergence_sequences.convergent?)")))
 (|N_b_Card_ineq| 0
  (|N_b_Card_ineq-1| NIL 3944936400
   ("" (SKEEP)
    (("" (LEMMA "card_less_than_equal[posnat, posnat]")
      (("" (INST -1 "N_b(n, k)" "N_b_union_finseq(n, k)")
        (("1" (REWRITE* "card_def")
          (("1" (FLATTEN)
            (("1" (HIDE -1)
              (("1" (PROP)
                (("1" (LEMMA "N_b_union_Card")
                  (("1" (INST -1 "n" "k")
                    (("1" (CASE "convergent?(series(n * inverse_primes))")
                      (("1"
                        (CASE
                            "FORALL(n_1:nat):abs(IF prime_enumeration(n_1) = 0 OR n_1 < k OR n_1 >= k + n THEN 0
          ELSE floor(n / prime_enumeration(n_1))
          ENDIF)
       <= (n * inverse_primes)(n_1)")
                        (("1"
                          (CASE-REPLACE "sigma(k, n + k - 1,
             LAMBDA (i: nat):
               IF prime_enumeration(i) /= 0
                 THEN floor(n / prime_enumeration(i))
               ELSE 0
               ENDIF) = inf_sum(k, LAMBDA (i: nat):
               IF prime_enumeration(i) = 0 OR  i < k OR i >= n+k
                 THEN 0
               ELSE floor(n / prime_enumeration(i))
               ENDIF)")
                          (("1" (HIDE -1)
                            (("1" (LEMMA "inf_sum_le")
                              (("1"
                                (INST -1 "LAMBDA (i: nat):
                 IF prime_enumeration(i) = 0 OR i < k OR i >= n + k THEN 0
                 ELSE floor(n / prime_enumeration(i))
                 ENDIF"
                                 "n * inverse_primes" "k")
                                (("1" (PROP)
                                  (("1" (LEMMA "inf_sum_scal")
                                    (("1" (INST -1 "inverse_primes" "n" "k")
                                      (("1" (PROP)
                                        (("1" (REPLACE -1 -2 RL HIDE)
                                          (("1" (EXPAND "inf_sum")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2"
                                          (REWRITE "end_series_conv" :DIR RL)
                                          NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-1 1))
                                    (("2" (SKEEP)
                                      (("2" (INST -1 "n_1")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REWRITE "end_series_conv" :DIR RL) NIL
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (EXPAND "inf_sum")
                              (("2"
                                (CASE-REPLACE "series(LAMBDA (i: nat):
                      IF prime_enumeration(i) = 0 OR i < k OR i >= k + n
                        THEN 0
                      ELSE floor(n / prime_enumeration(i))
                      ENDIF,
                    k) = series(LAMBDA (i: nat):
                      IF prime_enumeration(i) = 0 OR i < k OR i >= k + n
                        THEN 0
                      ELSE floor(n / prime_enumeration(i))
                      ENDIF)")
                                (("1" (HIDE -)
                                  (("1" (LEMMA "zero_tail_series_limit")
                                    (("1"
                                      (INST -1 "LAMBDA (i: nat):
                      IF prime_enumeration(i) = 0 OR i < k OR i >= k + n
                        THEN 0
                      ELSE floor(n / prime_enumeration(i))
                      ENDIF"
                                       "k+n-1")
                                      (("1" (PROP)
                                        (("1" (REPLACES -1)
                                          (("1" (EXPAND "series")
                                            (("1"
                                              (CASE
                                                  "FORALL(l:nat| l < k+n): sigma(k, l,
            LAMBDA (i: nat):
              IF prime_enumeration(i) /= 0
                THEN floor(n / prime_enumeration(i))
              ELSE 0
              ENDIF)
       =
       sigma(0, l,
             LAMBDA (i: nat):
               IF prime_enumeration(i) = 0 OR i < k OR i >= k + n THEN 0
               ELSE floor(n / prime_enumeration(i))
               ENDIF)")
                                              (("1" (INST -1 "k+n-1")
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (HIDE 2)
                                                (("2" (MEASURE-INDUCT "l" "l")
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (CASE-REPLACE "x = 0")
                                                      (("1" (EXPAND "sigma")
                                                        (("1" (LIFT-IF)
                                                          (("1" (PROP)
                                                            (("1" (LIFT-IF)
                                                              (("1" (PROP)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "sigma")
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "sigma")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (ASSERT)
                                                              (("3"
                                                                (EXPAND
                                                                 "sigma")
                                                                (("3" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (INST -1 "x-1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "sigma" 2)
                                                            (("1" (LIFT-IF)
                                                              (("1" (PROP)
                                                                (("1" (LIFT-IF)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "sigma")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (LIFT-IF)
                                                                  (("2" (PROP)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (REPLACES
                                                                       -1)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKEEP) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (SKEEP) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP)
                                          (("2" (LIFT-IF)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKEEP) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (DECOMPOSE-EQUALITY)
                                    (("1" (EXPAND "series")
                                      (("1"
                                        (CASE-REPLACE
                                         "FORALL(l:nat| l < k): sigma(0, l,
             LAMBDA (i: nat):
               IF prime_enumeration(i) = 0 OR i < k OR i >= k + n THEN 0
               ELSE floor(n / prime_enumeration(i))
               ENDIF) = 0")
                                        (("1" (LEMMA "sigma_split_ge ")
                                          (("1"
                                            (INST -1 "LAMBDA (i: nat):
              IF prime_enumeration(i) = 0 OR i < k OR i >= k + n THEN 0
              ELSE floor(n / prime_enumeration(i))
              ENDIF"
                                             "x!1" "k-1" "0")
                                            (("1" (PROP)
                                              (("1" (REPLACES -1)
                                                (("1" (INST -1 "k-1")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL)
                                               ("3" (CASE "x!1 < k")
                                                (("1" (INST -2 "x!1")
                                                  (("1" (REPLACES -2)
                                                    (("1" (EXPAND "sigma")
                                                      (("1" (LIFT-IF)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKEEP) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (MEASURE-INDUCT "l" "l")
                                            (("1" (SKEEP)
                                              (("1" (CASE-REPLACE "x = 0")
                                                (("1" (EXPAND "sigma")
                                                  (("1" (EXPAND "sigma")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -1 "x-1")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "sigma" 2)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKEEP) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKEEP) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKEEP) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "conv_series?")
                            (("3" (REWRITE "end_series_conv" :DIR RL)
                              (("3" (LEMMA "comparison_test_gen")
                                (("3"
                                  (INST -1 "LAMBDA (i: nat):
                           IF prime_enumeration(i) = 0 OR
                               i < k OR i >= k + n
                             THEN 0
                           ELSE floor(n / prime_enumeration(i))
                           ENDIF"
                                   "n * inverse_primes")
                                  (("1" (PROP)
                                    (("1" (INST 1 "0")
                                      (("1" (SKEEP)
                                        (("1" (INST -2 "n_1") NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (SKEEP) NIL NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKEEP)
                            (("2"
                              (CASE
                                  "prime_enumeration(n_1) = 0 OR n/prime_enumeration(n_1) >= 0")
                              (("1" (LIFT-IF)
                                (("1" (PROP)
                                  (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                                   ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
                                   ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)
                                   ("7" (GRIND) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (LEMMA "prime_enum_id")
                                  (("2" (INST?)
                                    (("2" (PROP)
                                      (("2" (EXPAND "prime?")
                                        (("2" (FLATTEN)
                                          (("2"
                                            (LEMMA "both_sides_times_pos_ge2")
                                            (("2"
                                              (INST -1 "prime_enumeration(n_1)"
                                               " n / prime_enumeration(n_1)"
                                               "0")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -2)
                                                  (("1" (SIMPLIFY -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (PROP) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKEEP) NIL NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-3 1))
                        (("2" (LEMMA "series_m_scal")
                          (("2" (INST -1 "inverse_primes" "n" "0")
                            (("2"
                              (CASE
                                  "FORALL(a: sequence[real]): series(a, 0) = series(a)")
                              (("1" (INST-CP -1 "inverse_primes")
                                (("1" (INST -1 "n * inverse_primes")
                                  (("1" (REPLACES -1)
                                    (("1" (REPLACES -1)
                                      (("1" (REPLACE -1 1 RL HIDE)
                                        (("1" (REWRITE "conv_series_scal") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "series")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "card_le")
                  (("2" (REWRITE "N_b_union_inj") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "N_b_union_finseq")
          (("2" (EXPAND "union_finseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|card_less_than_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|union_finseq| CONST-DECL "set[T]" |union_set_extra| NIL)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card_le| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|N_b_union_inj| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|N_b_union_Card| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|n_1| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_times_pos_ge2| FORMULA-DECL NIL |real_props| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|inf_sum_le| FORMULA-DECL NIL |series| |series|)
    (|end_series_conv| FORMULA-DECL NIL |series| |series|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|inf_sum_scal| FORMULA-DECL NIL |series| |series|)
    (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|x| SKOLEM-CONST-DECL "{l: nat | l < k}" |inf_prime_harmonic_prime| NIL)
    (|sigma_split_ge| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|x| SKOLEM-CONST-DECL "{l: nat | l < k + n}" |inf_prime_harmonic_prime|
     NIL)
    (|zero_tail_series_limit| FORMULA-DECL NIL |series_lems| |series|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|comparison_test_gen| FORMULA-DECL NIL |series| |series|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|series_m_scal| FORMULA-DECL NIL |series| |series|)
    (|conv_series_scal| FORMULA-DECL NIL |series| |series|)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|N_b_union_finseq| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime|
     NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|N_b| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   SHOSTAK))
 (|N_Card_ineq| 0
  (|N_Card_ineq-1| NIL 3944652826
   ("" (PROP)
    (("" (SKEEP)
      (("" (LEMMA "N_s_Card_ineq")
        (("" (INST -1 "n" "k")
          (("" (CASE "Card[posnat](N_s(n, k)) <= 2 ^ k * sqrt(n)")
            (("1" (HIDE -2)
              (("1" (LEMMA "N_b_Card_ineq")
                (("1" (INST -1 "n" "k")
                  (("1" (ASSERT)
                    (("1" (LEMMA "union_N_s_N_b")
                      (("1" (INST -1 "n" "k")
                        (("1" (REPLACES -1)
                          (("1" (LEMMA "card_union_ineq[posnat]")
                            (("1" (INST -1 "N_s(n, k)" "N_b(n, k)")
                              (("1" (REWRITE* "card_def")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "square_free_N_s_Card_ineq")
                (("2" (INST -1 "n" "k")
                  (("2" (LEMMA "square_div_N_s_Card_ineq")
                    (("2" (INST -1 "n" "k")
                      (("2" (LEMMA "le_times_le_pos")
                        (("2"
                          (INST -1 "Card[posnat](square_free_N_s(n, k))"
                           "Card[posnat](square_div_N_s(n, k))" "sqrt(n)"
                           "2 ^ k")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|square_free_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|square_div_N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|square_div_N_s_Card_ineq| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|square_free_N_s_Card_ineq| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL)
    (|union_N_s_N_b| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|N_b| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|card_union_ineq| FORMULA-DECL NIL |union_set_extra| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|N_b_Card_ineq| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|N_s| CONST-DECL "set[posnat]" |inf_prime_harmonic_prime| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|N_s_Card_ineq| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL))
   SHOSTAK))
 (|prime_is_infinite| 0
  (|prime_is_infinite-1| NIL 3944564434
   ("" (LEMMA "prime_series_div_eq_infinity")
    (("" (PROP)
      (("" (EXPAND "conv_series?")
        (("" (LEMMA "N_Card_ineq")
          (("" (PROP)
            (("" (LEMMA "Card_N")
              (("" (LEMMA "exists_border_constant")
                (("" (PROP)
                  (("1" (SKEEP)
                    (("1" (INST -2 "2^(2*k+2)")
                      (("1" (INST -3 "2 ^ (2 * k + 2)" "k")
                        (("1" (REPLACES -2)
                          (("1"
                            (CASE-REPLACE "sqrt(2 ^(2 * k + 2)) = 2 ^ (k+1)")
                            (("1" (HIDE -1)
                              (("1" (EXPAND "^")
                                (("1" (REWRITE "expt_plus_aux" :DIR RL)
                                  (("1" (LEMMA "lt_times_lt_pos1")
                                    (("1"
                                      (INST -1
                                       "limit(series(inverse_primes, k))"
                                       "expt(2, 2 + 2 * k)" "1/2"
                                       "expt(2, 2 + 2 * k)")
                                      (("1" (ASSERT)
                                        (("1"
                                          (CASE-REPLACE
                                           "1/2 * expt(2, 2 + 2 * k) = expt(2, 1 + 2 * k)")
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "lt_plus_lt1")
                                              (("1"
                                                (INST -1 "expt(2, 1 + 2 * k)"
                                                 "expt(2, 1 + 2 * k)"
                                                 "expt(2, 1 + 2 * k)"
                                                 "expt(2, 2 + 2 * k) * limit(series(inverse_primes, k))")
                                                (("1" (PROP)
                                                  (("1" (HIDE -2 -3)
                                                    (("1"
                                                      (CASE-REPLACE
                                                       " expt(2, 1 + 2 * k) + expt(2, 1 + 2 * k) =  expt(2, 2 + 2 * k)")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2"
                                                          (NAME-REPLACE "a"
                                                           " expt(2, 1 + 2 * k) + expt(2, 1 + 2 * k)")
                                                          (("2" (EXPAND "expt")
                                                            (("2" (EXPAND "a")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2"
                                              (NAME-REPLACE "b"
                                               "expt(2, 1 + 2 * k)")
                                              (("2" (EXPAND "expt")
                                                (("2" (EXPAND "b")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "limit_nonneg")
                                        (("1"
                                          (REWRITE "end_series_conv" :DIR RL)
                                          NIL NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2"
                                            (CASE
                                                "FORALL(n:nat): inverse_primes(n) >= 0")
                                            (("1" (MEASURE-INDUCT "x1" "x1")
                                              (("1" (SKEEP)
                                                (("1" (CASE-REPLACE "x = 0")
                                                  (("1" (EXPAND "series")
                                                    (("1" (EXPAND "sigma")
                                                      (("1" (INST -3 "0")
                                                        (("1" (LIFT-IF)
                                                          (("1"
                                                            (EXPAND "sigma")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST -1 "x-1")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "series")
                                                        (("1"
                                                          (EXPAND "sigma" 2)
                                                          (("1" (LIFT-IF)
                                                            (("1" (ASSERT)
                                                              (("1" (PROP)
                                                                (("1"
                                                                  (INST -2 "x")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (SKEEP)
                                                (("2" (EXPAND "inverse_primes")
                                                  (("2" (LIFT-IF)
                                                    (("2" (ASSERT)
                                                      (("2" (PROP)
                                                        (("2"
                                                          (LEMMA
                                                           "prime_enum_id")
                                                          (("2" (INST -1 "n")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "prime?")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (HIDE -1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       ">=")
                                                                      (("2"
                                                                        (EXPAND
                                                                         ">")
                                                                        (("2"
                                                                          (LEMMA
                                                                           "both_sides_times_pos_le1")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "prime_enumeration(n) "
                                                                             "0"
                                                                             "1/prime_enumeration(n)")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (EXPAND "^")
                                (("2" (LEMMA "sqrt_square")
                                  (("2" (INST -1 "expt(2, 1 + k)")
                                    (("2" (REWRITE "expt_plus_aux" :DIR RL) NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|N_Card_ineq| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|Card_N| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|k| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|inverse_primes| CONST-DECL "sequence[real]" |inf_prime_harmonic_prime|
     NIL)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|lt_plus_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|a| SKOLEM-CONST-DECL "posint" |inf_prime_harmonic_prime| NIL)
    (|b| SKOLEM-CONST-DECL "posnat" |inf_prime_harmonic_prime| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|prime_enum_id| FORMULA-DECL NIL |prime_extra| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|prime_enumeration| DEF-DECL "nat" |prime_extra| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |inf_prime_harmonic_prime| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|end_series_conv| FORMULA-DECL NIL |series| |series|)
    (|limit_nonneg| FORMULA-DECL NIL |series_lems| |series|)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|exists_border_constant| FORMULA-DECL NIL |inf_prime_harmonic_prime| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|)
    (|prime_series_div_eq_infinity| FORMULA-DECL NIL |inf_prime_harmonic_prime|
     NIL))
   SHOSTAK)))

