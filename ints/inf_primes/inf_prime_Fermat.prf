(|inf_prime_Fermat|
 (|Fermat_num_is_odd_gt_2| 0
  (|Fermat_num_is_odd_gt_2-1| NIL 3927385542
   ("" (SKEEP)
    (("" (EXPAND "Fermat_number")
      (("" (CASE-REPLACE "n = 0")
        (("1" (GRIND) NIL NIL)
         ("2" (CASE-REPLACE "n = 1")
          (("1" (GRIND) NIL NIL)
           ("2" (LEMMA "increasing_expt_aux")
            (("2" (INST -1 "2" "n-2")
              (("1" (SIMPLIFY -1)
                (("1" (SPLIT)
                  (("1" (EXPAND "expt" 1 1) (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (LEMMA "increasing_expt_aux")
                    (("2" (INST -1 "2" "expt(2, n)-2")
                      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|prod_Fermat_TCC1| 0
  (|prod_Fermat_TCC1-1| NIL 3927385532 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|prod_Fermat| SUBTYPE "0" "T_low[nat]")))
 (|prod_Fermat_TCC2| 0
  (|prod_Fermat_TCC2-1| NIL 3927385532 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|prod_Fermat| SUBTYPE "inf_prime_Fermat.n" "T_high[nat]")))
 (|prod_Fermat_TCC3| 0
  (|prod_Fermat_TCC3-1| NIL 3946143353 ("" (ASSUMING-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|prod_Fermat| ASSUMING "ints@product[nat].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|prod_Fermat_nums_TCC1| 0
  (|prod_Fermat_nums_TCC1-1| NIL 3927385532 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|prod_Fermat_nums| SUBTYPE "(number_fields.-)(inf_prime_Fermat.n, 1)"
    "nat")))
 (|prod_Fermat_nums| 0
  (|prod_Fermat_nums-1| NIL 3927385639
   ("" (MEASURE-INDUCT "n" "n")
    (("" (SKEEP)
      (("" (CASE-REPLACE "x = 1")
        (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
         ("2" (INST -1 "x-1")
          (("1" (ASSERT)
            (("1" (EXPAND "prod_Fermat")
              (("1" (EXPAND "product" 2)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "Fermat_number")
                    (("1" (SIMPLIFY)
                      (("1" (LEMMA "expt_plus_aux")
                        (("1" (INST?)
                          (("1" (REPLACE -1 2 RL HIDE) (("1" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|product| DEF-DECL "int" |product| |ints|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prod_posnat| APPLICATION-JUDGEMENT "posnat" |product| |ints|)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prod_Fermat| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|Fermat_divides_prod| 0
  (|Fermat_divides_prod-1| NIL 3927386964
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "k" "k")
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "prod_Fermat")
              (("1" (EXPAND "product")
                (("1" (REWRITE "divides_prod1")
                  (("1" (REWRITE "divides_reflexive") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "prod_Fermat")
                (("1" (EXPAND "product" 2)
                  (("1" (REWRITE "divides_prod2") NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|prod_Fermat| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|divides_prod1| FORMULA-DECL NIL |divides| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |ints|)
    (|T_high| TYPE-EQ-DECL NIL |product| |ints|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prod_posnat| APPLICATION-JUDGEMENT "posnat" |product| |ints|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|divides_reflexive| FORMULA-DECL NIL |divides| NIL)
    (|product| DEF-DECL "int" |product| |ints|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides_prod2| FORMULA-DECL NIL |divides| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|Fermat_gcd_one_TCC1| 0
  (|Fermat_gcd_one_TCC1-1| NIL 3927385532 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL))
   NIL
   (|Fermat_gcd_one| SUBTYPE
    "inf_prime_Fermat.Fermat_number(inf_prime_Fermat.m)"
    "{jj: integers.int | booleans.=>(inf_prime_Fermat.Fermat_number(inf_prime_Fermat.n) = 0, jj /= 0)}")))
 (|Fermat_gcd_one| 0
  (|Fermat_gcd_one-1| NIL 3927386006
   ("" (SKEEP)
    ((""
      (CASE "FORALL (a : nat, b : nat | a < b):
        gcd(Fermat_number(a), Fermat_number(b)) = 1")
      (("1" (CASE "n < m")
        (("1" (INST?) NIL NIL)
         ("2" (CASE "m < n")
          (("1" (INST -2 "m" "n") (("1" (REWRITE "gcd_sym") NIL NIL)) NIL)
           ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (SKEEP)
          (("2" (LEMMA "prod_Fermat_nums")
            (("2" (INST -1 "b")
              (("2" (CASE-REPLACE "Fermat_number(b) = prod_Fermat(b-1)+2")
                (("1" (HIDE -1 -2)
                  (("1" (LEMMA "Fermat_divides_prod")
                    (("1" (INST -1 "a" "b-a-1")
                      (("1" (SIMPLIFY)
                        (("1" (LEMMA "gcd_mod")
                          (("1" (INST?)
                            (("1" (SIMPLIFY)
                              (("1" (REPLACE -1 1 RL HIDE)
                                (("1" (EXPAND "divides")
                                  (("1" (SKEEP)
                                    (("1" (REPLACE -1 1)
                                      (("1" (LEMMA "mod_it_is")
                                        (("1"
                                          (INST -1 "2+Fermat_number(a)*x" "2"
                                           "x" "Fermat_number(a)")
                                          (("1" (SPLIT)
                                            (("1" (REPLACE -1 1 RL)
                                              (("1" (HIDE-ALL-BUT 1)
                                                (("1"
                                                  (LEMMA
                                                   "Fermat_num_is_odd_gt_2")
                                                  (("1" (INST?)
                                                    (("1" (FLATTEN)
                                                      (("1" (EXPAND "odd?")
                                                        (("1" (SKEEP)
                                                          (("1" (REPLACE -1 1)
                                                            (("1"
                                                              (LEMMA "gcd_mod")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (SIMPLIFY)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1
                                                                             RL
                                                                             HIDE)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "mod_it_is")
                                                                      (("1"
                                                                        (INST?)
                                                                        (("1"
                                                                          (SIMPLIFY)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -2
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 1
                                                                                 RL)
                                                                                (("1"
                                                                                  (HIDE-ALL-BUT
                                                                                   1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "gcd_minus")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "gcd_same")
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2"
                                                (LEMMA
                                                 "Fermat_num_is_odd_gt_2")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2"
                                              (LEMMA "Fermat_num_is_odd_gt_2")
                                              (("2" (INST -1 "a")
                                                (("2" (FLATTEN)
                                                  (("2" (LEMMA "pos_times_ge")
                                                    (("2" (INST?)
                                                      (("2" (SIMPLIFY)
                                                        (("2" (FLATTEN)
                                                          (("2" (HIDE -2)
                                                            (("2" (SPLIT)
                                                              (("1" (PROPAX)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (LEMMA "Fermat_gcd_one_TCC1")
        (("3" (SKEEP) (("3" (INST -1 "a" "b") (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|gcd_sym| FORMULA-DECL NIL |gcd| |ints|)
    (|n| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (|m| SKOLEM-CONST-DECL "{m: nat | n /= m}" |inf_prime_Fermat| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gcd_mod| FORMULA-DECL NIL |gcd| |ints|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x| SKOLEM-CONST-DECL "int" |inf_prime_Fermat| NIL)
    (|a| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Fermat_num_is_odd_gt_2| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL)
    (|gcd_same| FORMULA-DECL NIL |gcd| |ints|)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|gcd_minus| FORMULA-DECL NIL |gcd| |ints|)
    (|j| SKOLEM-CONST-DECL "int" |inf_prime_Fermat| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|mod_it_is| FORMULA-DECL NIL |mod| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fermat_divides_prod| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|prod_Fermat| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prod_Fermat_nums| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|Fermat_gcd_one_TCC1| SUBTYPE-TCC NIL |inf_prime_Fermat| NIL))
   SHOSTAK))
 (|gcd_eq1_diff_primes_TCC1| 0
  (|gcd_eq1_diff_primes_TCC1-1| NIL 3927385532 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_eq1_diff_primes| SUBTYPE "inf_prime_Fermat.k"
    "{jj: integers.int | booleans.=>(inf_prime_Fermat.n = 0, jj /= 0)}")))
 (|gcd_eq1_diff_primes| 0
  (|gcd_eq1_diff_primes-1| NIL 3927387658
   ("" (SKEEP)
    (("" (TYPEPRED "p1")
      (("" (TYPEPRED "p2")
        (("" (HIDE -3)
          (("" (EXPAND "prime?")
            (("" (FLATTEN)
              (("" (HIDE -1)
                (("" (REPLACES -5)
                  (("" (EXPAND "gcd")
                    ((""
                      (TYPEPRED
                       "max({k_1: posnat | divides(k_1, n) AND divides(k_1, k)})")
                      (("1" (HIDE -1)
                        (("1" (REPLACES -7)
                          (("1" (INST -3 "p2")
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "gcd_noem")
                        (("2" (REWRITE "gcd_prep") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{a: posnat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_bounded_posnat| |ints|)
    (|k| SKOLEM-CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|p2| SKOLEM-CONST-DECL "{p2: (prime?) | divides(p2, k)}"
     |inf_prime_Fermat| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gcd_prep| FORMULA-DECL NIL |divides_lems| |ints|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|gcd_noem| FORMULA-DECL NIL |divides_lems| |ints|)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|))
   SHOSTAK))
 (|prime_divides| 0
  (|prime_divides-1| NIL 3927387702
   ("" (MEASURE-INDUCT+ "n" "n")
    (("" (CASE "x!1 = 0")
      (("1" (REPLACES -1)
        (("1" (HIDE -1 1)
          (("1" (INST 1 "2")
            (("1" (REWRITE "divides_zero") NIL NIL)
             ("2" (LEMMA "prime_2") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (CASE "x!1 = 2")
        (("1" (REPLACES -1)
          (("1" (INST 3 "2")
            (("1" (REWRITE "divides_reflexive") NIL NIL)
             ("2" (LEMMA "prime_2") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (CASE "prime?(x!1)")
          (("1" (INST 4 "x!1") (("1" (REWRITE "divides_reflexive") NIL NIL))
            NIL)
           ("2" (EXPAND "prime?" 1)
            (("2" (SPLIT)
              (("1" (SKEEP)
                (("1" (LEMMA "divisor_smaller")
                  (("1" (INST?)
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (INST -3 "j")
                        (("2" (SPLIT)
                          (("1" (SKEEP)
                            (("1" (INST 6 "p")
                              (("1" (LEMMA "divides_transitive")
                                (("1" (INST -1 "x!1" "j" "p")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (PROPAX) NIL NIL)
                                     ("3" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|divides_zero| FORMULA-DECL NIL |divides| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|divides_transitive| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides_reflexive| FORMULA-DECL NIL |divides| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|min_prime_Fermat_nonempty| 0
  (|min_prime_Fermat_nonempty-1| NIL 3936913403
   ("" (SKEEP)
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?")
        (("" (EXPAND "member")
          (("" (LEMMA "prime_divides")
            (("" (INST -1 "Fermat_number(n)")
              (("" (SPLIT)
                (("1" (SKEEP) (("1" (INST -2 "p") NIL NIL)) NIL)
                 ("2" (HIDE -1)
                  (("2" (LEMMA "fermat_num_is_odd_gt_2")
                    (("2" (INST -1 "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|Fermat_num_is_odd_gt_2| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_divides| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|min_prime_Fermat_TCC1| 0
  (|min_prime_Fermat_TCC1-1| NIL 3927385532
   ("" (LEMMA "min_prime_Fermat_nonempty") (("" (PROPAX) NIL NIL)) NIL)
   ((|min_prime_Fermat_nonempty| FORMULA-DECL NIL |inf_prime_Fermat| NIL)) NIL
   (|min_prime_Fermat| SUBTYPE
    "{p: (primes.prime?) | divides.divides(p, inf_prime_Fermat.Fermat_number(inf_prime_Fermat.n))}"
    "(sets[(primes.prime?)].nonempty?)")))
 (|min_prime_Fermat_TCC2| 0
  (|min_prime_Fermat_TCC2-1| NIL 3927385532 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|min_prime_Fermat| SUBTYPE "inf_prime_Fermat.x" "nat")))
 (|nat_to_Fermat_primes_injective| 0
  (|nat_to_Fermat_primes_injective-1| NIL 3927387765
   ("" (INST 1 "min_prime_Fermat")
    (("1" (EXPAND "injective?")
      (("1" (SKEEP)
        (("1" (EXPAND "min_prime_Fermat")
          (("1"
            (NAME-REPLACE "m1"
             "min({p: (prime?) | divides(p, Fermat_number(x1))})")
            (("1"
              (NAME-REPLACE "m2"
               "min({p: (prime?) | divides(p, Fermat_number(x2))})")
              (("1" (TYPEPRED "m1")
                (("1" (TYPEPRED "m2")
                  (("1" (REPLACES -7)
                    (("1" (HIDE -4 -6)
                      (("1" (CASE "x1 /= x2")
                        (("1" (LEMMA "Fermat_gcd_one")
                          (("1" (INST -1 "x1" "x2")
                            (("1" (LEMMA "gcd_eq1_diff_primes")
                              (("1"
                                (INST -1 "Fermat_number(x1)"
                                 "Fermat_number(x2)" "m2" "m2")
                                (("1" (SPLIT)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (TYPEPRED "x")
                  (("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("3" (REWRITE "min_prime_Fermat_nonempty") NIL NIL))
              NIL)
             ("2" (SKEEP)
              (("2" (TYPEPRED "x")
                (("2" (EXPAND "prime?")
                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("3" (REWRITE "min_prime_Fermat_nonempty") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "Fermat_min_primes") (("2" (INST 1 "x1") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|injective?| CONST-DECL "bool" |functions| NIL)
    (|Fermat_gcd_one| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|gcd_eq1_diff_primes| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|m2| SKOLEM-CONST-DECL "{a |
   divides(a, Fermat_number(x2)) AND
    FORALL (x: (prime?)): divides(x, Fermat_number(x2)) IMPLIES a <= x}"
     |inf_prime_Fermat| NIL)
    (|x1| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (|x2| SKOLEM-CONST-DECL "nat" |inf_prime_Fermat| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|min_prime_Fermat_nonempty| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Fermat_min_primes| CONST-DECL "set[(prime?)]" |inf_prime_Fermat| NIL)
    (|min_prime_Fermat| CONST-DECL "(prime?)" |inf_prime_Fermat| NIL))
   SHOSTAK))
 (|Fermat_min_primes_is_infinite| 0
  (|Fermat_min_primes_is_infinite-1| NIL 3927387920
   ("" (LEMMA "infinite_def")
    (("" (INST -1 "Fermat_min_primes")
      (("" (FLATTEN)
        (("" (SPLIT)
          (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
           ("2" (HIDE -1)
            (("2" (SPLIT)
              (("1" (PROPAX) NIL NIL)
               ("2" (LEMMA "nat_to_fermat_primes_injective")
                (("2" (SKEEP) (("2" (INST 1 "f") NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Fermat_min_primes| CONST-DECL "set[(prime?)]" |inf_prime_Fermat| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|f| SKOLEM-CONST-DECL "[nat -> (Fermat_min_primes)]" |inf_prime_Fermat|
     NIL)
    (|nat_to_Fermat_primes_injective| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|infinite_def| FORMULA-DECL NIL |infinite_nat_def| |sets_aux|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   SHOSTAK))
 (|primes_is_infinite| 0
  (|primes_is_infinite-1| NIL 3927387975
   ("" (LEMMA "subset_card_le")
    (("" (INST -1 "Fermat_min_primes" "fullset[(prime?)]")
      (("" (SPLIT)
        (("1" (LEMMA "infinite_card_le")
          (("1" (INST -1 "Fermat_min_primes" "fullset[(prime?)]")
            (("1" (LEMMA "Fermat_min_primes_is_infinite")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                 ("3" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Fermat_min_primes| CONST-DECL "set[(prime?)]" |inf_prime_Fermat| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|Fermat_number| CONST-DECL "posnat" |inf_prime_Fermat| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|min_prime_Fermat| CONST-DECL "(prime?)" |inf_prime_Fermat| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|infinite_card_le| FORMULA-DECL NIL |infinite_card| |sets_aux|)
    (|Fermat_min_primes_is_infinite| FORMULA-DECL NIL |inf_prime_Fermat| NIL)
    (|subset_card_le| FORMULA-DECL NIL |card_sets_lemmas| |sets_aux|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   SHOSTAK)))

