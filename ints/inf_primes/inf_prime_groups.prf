(|inf_prime_groups|
 (|Mersenne_number_TCC1| 0
  (|Mersenne_number_TCC1-1| NIL 3947768333 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|Mersenne_number| SUBTYPE "inf_prime_groups.p" "nat")))
 (|Mersenne_number_TCC2| 0
  (|Mersenne_number_TCC2-1| NIL 3947768333
   ("" (SKEEP)
    (("" (LEMMA "increasing_expt_aux")
      (("" (INST -1 "2" "p-2")
        (("1" (ASSERT) NIL NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL))
   NIL
   (|Mersenne_number| SUBTYPE
    "(number_fields.-)(exponentiation.expt(2, inf_prime_groups.p), 1)"
    "posnat")))
 (|two_not_zero_coset| 0
  (|two_not_zero_coset-1| NIL 3940923905
   ("" (SKEEP)
    (("" (CASE "n > 2")
      (("1" (REWRITE "zn_zero_coset_char")
        (("1" (LEMMA "divisor_smaller")
          (("1" (INST -1 "n" "2")
            (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "n")
        (("2" (CASE-REPLACE "n = 2")
          (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|nz_coset_product_is_nz_coset| 0
  (|nz_coset_product_is_nz_coset-1| NIL 3942754601
   ("" (SKEEP)
    (("" (CASE-REPLACE "product(Z, nZ(n))(x1) = product(Z, nZ(n))(x1`1, x1`2)")
      (("1" (TYPEPRED "x1`1" "x1`2")
        (("1" (EXPAND "coset?")
          (("1" (FLATTEN)
            (("1" (EXPAND "left_coset?")
              (("1" (HIDE -2 -4 -5)
                (("1" (SKOLEM -1 "b")
                  (("1" (SKOLEM -2 "a")
                    (("1" (REPLACES -)
                      (("1" (REWRITE "zn_product_charac")
                        (("1" (REWRITE* "zn_zero_coset_char")
                          (("1" (LEMMA "prime_divides_prod")
                            (("1" (INST -1 "n")
                              (("1" (PROP)
                                (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|zn_product_charac| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|power_zp_nz_coset_TCC1| 0
  (|power_zp_nz_coset_TCC1-1| NIL 3942763414 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (> CONST-DECL "bool" |reals| NIL)
    (|p!1| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|power_zp_nz_coset| SUBTYPE "inf_prime_groups.p" "posnat")))
 (|power_zp_nz_coset_TCC2| 0
  (|power_zp_nz_coset_TCC2-1| NIL 3942763414
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (INST 1 "1+nZ(p)")
            (("1" (PROP)
              (("1" (REWRITE "zn_identity") NIL NIL)
               ("2" (REWRITE "zn_zero_coset_char")
                (("2" (REWRITE "one_div_one") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL))
   NIL (|power_zp_nz_coset| EXISTENCE "" "nz_coset(inf_prime_groups.p)")))
 (|power_zp_nz_coset_TCC3| 0
  (|power_zp_nz_coset_TCC3-1| NIL 3942763414
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (CASE "p > 1")
        (("1" (PROP)
          (("1" (REWRITE "zn_product_pair") NIL NIL)
           ("2" (LEMMA "nz_coset_product_is_nz_coset")
            (("2" (INST?)
              (("1" (TYPEPRED "p") (("1" (PROP) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nz_coset_product_is_nz_coset| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|power_zp_nz_coset| SUBTYPE
    "restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.p))], [nz_coset(inf_prime_groups.p), nz_coset(inf_prime_groups.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(inf_prime_groups.p)))"
    "[[nz_coset(inf_prime_groups.p), nz_coset(inf_prime_groups.p)] -> nz_coset(inf_prime_groups.p)]")))
 (|power_zp_nz_coset_TCC4| 0
  (|power_zp_nz_coset_TCC4-1| NIL 3942763414
   ("" (SKEEP)
    (("" (CASE "p > 1")
      (("1" (PROP)
        (("1" (REWRITE "zn_identity") NIL NIL)
         ("2" (REWRITE "zn_zero_coset_char")
          (("2" (REWRITE "one_div_one") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (TYPEPRED "p")
        (("2" (EXPAND "prime?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL
   (|power_zp_nz_coset| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(inf_prime_groups.p))"
    "nz_coset(inf_prime_groups.p)")))
 (|nz_coset_power_id_TCC1| 0
  (|nz_coset_power_id_TCC1-1| NIL 3947769364
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("1" (EXPAND "/=")
        (("1" (REWRITE "zn_zero_coset_char")
          (("1" (TYPEPRED "p")
            (("1" (EXPAND "prime?") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "p")
        (("2" (EXPAND "prime?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|nz_coset_power_id| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(inf_prime_groups.a, ring_zn.nZ(inf_prime_groups.p))"
    "nz_coset(inf_prime_groups.p)")))
 (|nz_coset_power_id| 0
  (|nz_coset_power_id-1| NIL 3947769365
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "i" "i")
      (("1" (SKEEP)
        (("1" (CASE-REPLACE "x = 0")
          (("1" (HIDE -2)
            (("1" (EXPAND "power_zp_nz_coset")
              (("1" (EXPAND "power")
                (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "power_zp_nz_coset")
                (("1" (EXPAND "power" 2)
                  (("1" (REPLACES -1)
                    (("1" (REWRITE "zn_product_charac")
                      (("1" (EXPAND "expt" 2 2) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (TYPEPRED "p")
                        (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (PROP)
          (("1" (REWRITE "zn_identity")
            (("1" (TYPEPRED "p")
              (("1" (EXPAND "prime?") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (REWRITE " zn_zero_coset_char")
            (("2" (TYPEPRED "p")
              (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "p")
        (("3" (EXPAND "prime?") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|a| SKOLEM-CONST-DECL "{a: int | NOT divides(p, a)}" |inf_prime_groups|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|power_zp_nz_coset| CONST-DECL "nz_coset(p)" |inf_prime_groups| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|power| DEF-DECL "T" |monoid_def| |algebra|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|zn_product_charac| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |inf_prime_groups| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   SHOSTAK))
 (|nz_prime_is_group_TCC1| 0
  (|nz_prime_is_group_TCC1-1| NIL 3943377285
   ("" (SKEEP)
    (("" (INST 1 "1+nZ(n)")
      (("" (PROP)
        (("1" (REWRITE "zn_identity") NIL NIL)
         ("2" (REWRITE "zn_zero_coset_char")
          (("2" (REWRITE "one_div_one")
            (("2" (EXPAND "prime?")
              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL (|nz_prime_is_group| EXISTENCE "" "nz_coset(inf_prime_groups.n)")))
 (|nz_prime_is_group_TCC2| 0
  (|nz_prime_is_group_TCC2-1| NIL 3943377285
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (PROP)
        (("1" (REWRITE "zn_product_pair") NIL NIL)
         ("2" (LEMMA "nz_coset_product_is_nz_coset")
          (("2" (INST -1 "n" "x1") (("2" (PROP) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nz_coset_product_is_nz_coset| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL))
   NIL
   (|nz_prime_is_group| SUBTYPE
    "restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.n)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.n))], [nz_coset(inf_prime_groups.n), nz_coset(inf_prime_groups.n)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(inf_prime_groups.n)))"
    "[[nz_coset(inf_prime_groups.n), nz_coset(inf_prime_groups.n)] -> nz_coset(inf_prime_groups.n)]")))
 (|nz_prime_is_group_TCC3| 0
  (|nz_prime_is_group_TCC3-1| NIL 3943377285
   ("" (SKEEP)
    (("" (PROP)
      (("1" (REWRITE "zn_identity") NIL NIL)
       ("2" (REWRITE "zn_zero_coset_char")
        (("2" (REWRITE "one_div_one")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL
   (|nz_prime_is_group| SUBTYPE
    "((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(inf_prime_groups.n)))"
    "nz_coset(inf_prime_groups.n)")))
 (|nz_prime_is_group| 0
  (|nz_prime_is_group-1| NIL 3943377286
   ("" (SKEEP)
    ((""
      (CASE "FORALL (x: (restrict[setof[int], nz_coset(n), bool](Z(n)))): remove
          [coset[int,
                 restrict[[numfield, numfield], [int, int], numfield]
                     (+)](Z, nZ(n))]
          (nZ(n),
           restrict
               [setof[int],
                coset[int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)](Z, nZ(n)),
                bool]
               (Z(n)))
          (x)")
      (("1" (LEMMA " Zp_prime_is_division_ring")
        (("1" (INST -1 "n")
          (("1" (PROP)
            (("1" (EXPAND "division_ring?")
              (("1" (FLATTEN)
                (("1" (HIDE -1 -4)
                  (("1" (EXPAND "group?")
                    (("1" (FLATTEN)
                      (("1" (SPLIT)
                        (("1" (HIDE -2)
                          (("1" (EXPAND "monoid?")
                            (("1" (FLATTEN)
                              (("1" (SPLIT)
                                (("1" (HIDE -2)
                                  (("1" (EXPAND "monad?")
                                    (("1" (FLATTEN)
                                      (("1" (SPLIT)
                                        (("1" (HIDE-ALL-BUT (-1 -4 1))
                                          (("1" (EXPAND "star_closed?")
                                            (("1" (SKEEP)
                                              (("1" (INST -1 "x" "y")
                                                (("1" (EXPAND "member")
                                                  (("1" (EXPAND "remove")
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (EXPAND "member")
                                                        (("1" (PROP) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -1 "y") NIL NIL)
                                                 ("3" (INST -1 "x") NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "member")
                                          (("2" (EXPAND "restrict")
                                            (("2" (EXPAND "Z")
                                              (("2" (EXPAND "/")
                                                (("2" (REWRITE "zn_identity")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (EXPAND "identity?")
                                          (("3" (SKEEP)
                                            (("3" (INST -3 "x")
                                              (("1" (PROP)
                                                (("1" (EXPAND "restrict")
                                                  (("1" (PROPAX) NIL NIL)) NIL)
                                                 ("2" (EXPAND "restrict")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -3 "x") NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "associative?")
                                  (("2" (SKEEP)
                                    (("2" (EXPAND "restrict")
                                      (("2" (INST -2 "x" "y" "z")
                                        (("1" (INST -2 "z")
                                          (("1" (EXPAND "restrict")
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (INST -2 "y")
                                          (("2" (EXPAND "restrict")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("3" (INST -2 "x")
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "inv_exists?")
                          (("2" (SKEEP)
                            (("2" (INST -2 "x")
                              (("1" (SKEEP)
                                (("1" (INST 1 "y")
                                  (("1" (PROP) NIL NIL)
                                   ("2" (TYPEPRED "y")
                                    (("2" (EXPAND "remove")
                                      (("2" (EXPAND "member")
                                        (("2" (EXPAND "restrict")
                                          (("2" (PROP) (("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST -2 "x") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "remove")
          (("2" (EXPAND "member")
            (("2" (EXPAND "restrict")
              (("2" (EXPAND "Z")
                (("2" (EXPAND "/") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKEEP)
        (("3" (EXPAND "restrict")
          (("3" (HIDE 2)
            (("3" (REWRITE "lcoset_iff_coset" :DIR RL)
              (("3" (EXPAND "left_coset?")
                (("3" (INST 1 "0")
                  (("1" (REWRITE "left_zero") NIL NIL)
                   ("2" (EXPAND "Z")
                    (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (EXPAND "Z")
        (("4" (SKEEP) (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|remove| CONST-DECL "set" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|x| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|y| SKOLEM-CONST-DECL "(remove
     [coset[int,
            restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                     nZ(n))]
     (nZ(n),
      restrict
          [setof[int],
           coset[int,
                 restrict[[numfield, numfield], [int, int], numfield]
                     (+)](Z, nZ(n)),
           bool]
          (Z(n))))"
     |inf_prime_groups| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|z| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|y| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|x| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|x| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|y| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|x| SKOLEM-CONST-DECL "(restrict[setof[int], nz_coset(n), bool](Z(n)))"
     |inf_prime_groups| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|Zp_prime_is_division_ring| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   SHOSTAK))
 (|nz_prime_is_finite_group| 0
  (|nz_prime_is_finite_group-1| NIL 3936949408
   ("" (SKEEP*)
    (("" (LEMMA "Zp_prime_is_division_ring")
      (("" (EXPAND "finite_group?")
        (("" (SPLIT)
          (("1" (INST -1 "n")
            (("1" (ASSERT)
              (("1" (EXPAND "division_ring?")
                (("1" (FLATTEN)
                  (("1" (HIDE -1)
                    (("1" (EXPAND "group?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (HIDE -2 -3)
                            (("1" (EXPAND "monoid?")
                              (("1" (FLATTEN)
                                (("1" (SPLIT)
                                  (("1" (HIDE -2)
                                    (("1" (EXPAND "monad?")
                                      (("1" (FLATTEN)
                                        (("1" (SPLIT)
                                          (("1" (HIDE -2 -3)
                                            (("1" (EXPAND "star_closed?")
                                              (("1" (SKEEP)
                                                (("1" (INST -1 "x" "y")
                                                  (("1" (EXPAND "member")
                                                    (("1" (EXPAND "remove")
                                                      (("1" (EXPAND "restrict")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "remove")
                                                    (("2" (EXPAND "member")
                                                      (("2" (EXPAND "restrict")
                                                        (("2" (TYPEPRED "y")
                                                          (("2" (EXPAND "Z" 1)
                                                            (("2" (EXPAND "/")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (EXPAND "remove")
                                                    (("3" (EXPAND "member")
                                                      (("3" (EXPAND "restrict")
                                                        (("3" (EXPAND "Z")
                                                          (("3" (TYPEPRED "x")
                                                            (("3" (EXPAND "/")
                                                              (("3" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 -3)
                                            (("2" (EXPAND "member")
                                              (("2" (EXPAND "remove")
                                                (("2" (EXPAND "restrict")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE -1 -2)
                                            (("3" (EXPAND "identity?")
                                              (("3" (SKEEP)
                                                (("3" (INST -1 "x")
                                                  (("1" (EXPAND "restrict")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2" (EXPAND "remove")
                                                    (("2" (EXPAND "member")
                                                      (("2" (HIDE 2)
                                                        (("2"
                                                          (EXPAND "restrict")
                                                          (("2" (EXPAND "Z")
                                                            (("2" (EXPAND "/")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE -1)
                                    (("2" (EXPAND "associative?")
                                      (("2" (SKEEP)
                                        (("2" (INST -1 "x" "y" "z")
                                          (("1" (EXPAND "restrict")
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (HIDE 2)
                                            (("2" (EXPAND "remove")
                                              (("2" (EXPAND "member")
                                                (("2" (EXPAND "restrict")
                                                  (("2" (EXPAND "Z")
                                                    (("2" (EXPAND "/")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (EXPAND "remove")
                                            (("3" (HIDE 2)
                                              (("3" (EXPAND "member")
                                                (("3" (EXPAND "restrict")
                                                  (("3" (EXPAND "Z")
                                                    (("3" (EXPAND "/")
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("4" (HIDE 2)
                                            (("4" (EXPAND "remove")
                                              (("4" (EXPAND "member")
                                                (("4" (EXPAND "restrict")
                                                  (("4" (EXPAND "Z")
                                                    (("4" (EXPAND "/")
                                                      (("4" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 -3)
                            (("2" (EXPAND "inv_exists?")
                              (("2" (SKEEP)
                                (("2" (INST -1 "x")
                                  (("1" (SKEEP)
                                    (("1" (INST 1 "y")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (TYPEPRED "y")
                                        (("2" (EXPAND "remove")
                                          (("2" (ASSERT)
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "restrict")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "remove")
                                    (("2" (EXPAND "member")
                                      (("2" (EXPAND "restrict")
                                        (("2" (EXPAND "Z")
                                          (("2" (EXPAND "/")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE -1)
            (("2" (LEMMA "Zn_card_n")
              (("2" (INST -1 "n")
                (("2" (TYPEPRED "card(Z(n))")
                  (("2" (LEMMA "card_remove[setof[int]]")
                    (("2" (INST -1 "Z(n)" "nZ(n)")
                      (("2" (LIFT-IF)
                        (("2" (PROP)
                          (("1" (LEMMA "card_eq_bij[setof[int], nz_coset(n)]")
                            (("1" (REPLACE -5 -3)
                              (("1" (LEMMA "card_bij[setof[int]]")
                                (("1"
                                  (INST -1 "n-1"
                                   "remove[set[int]](nZ(n), Z(n))")
                                  (("1" (ASSERT)
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "is_finite")
                                        (("1" (INST 1 "n-1" "f")
                                          (("1" (EXPAND "bijective?")
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "injective?")
                                                  (("1" (HIDE-ALL-BUT (-1 1))
                                                    (("1" (SKEEP)
                                                      (("1" (INST -1 "x1" "x2")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (PROP)
                                              (("1" (EXPAND "remove")
                                                (("1" (EXPAND "member")
                                                  (("1" (EXPAND "Z")
                                                    (("1" (EXPAND "/")
                                                      (("1" (EXPAND "Z")
                                                        (("1" (FLATTEN) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "remove")
                                                (("2" (ASSERT) NIL NIL)) NIL)
                                               ("3" (EXPAND "restrict")
                                                (("3" (PROPAX) NIL NIL)) NIL)
                                               ("4" (EXPAND "restrict")
                                                (("4" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "nz_ideal")
                            (("2" (INST -1 "n")
                              (("2" (EXPAND "ideal?")
                                (("2" (LEMMA "ideal_is_coset")
                                  (("2" (EXPAND "Z")
                                    (("2" (EXPAND "/")
                                      (("2" (HIDE-ALL-BUT (-1 1))
                                        (("2" (INST -1 "Z" "nZ(n)")
                                          (("2" (LEMMA "nz_ideal")
                                            (("2" (INST -1 "n") NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Zp_prime_is_division_ring| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|n| SKOLEM-CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|y| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|y| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|z| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(n), bool](remove[set[int]](nZ(n), Z(n))))"
     |inf_prime_groups| NIL)
    (|y| SKOLEM-CONST-DECL "(remove
     [coset[int,
            restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                     nZ(n))]
     (nZ(n),
      restrict
          [setof[int],
           coset[int,
                 restrict[[numfield, numfield], [int, int], numfield]
                     (+)](Z, nZ(n)),
           bool]
          (Z(n))))"
     |inf_prime_groups| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Zn_card_n| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|card_bij| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_eq_bij| FORMULA-DECL NIL |finite_sets_card_eq| |finite_sets|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|finite_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|period_nz_coset_TCC1| 0
  (|period_nz_coset_TCC1-1| NIL 3942929548
   ("" (SKEEP)
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?")
        (("" (INST -1 "p-1")
          (("1" (EXPAND "member")
            (("1" (TYPEPRED "a")
              (("1" (EXPAND "coset?")
                (("1" (FLATTEN)
                  (("1" (EXPAND "left_coset?")
                    (("1" (SKOLEM -1 "b")
                      (("1" (REPLACES -1)
                        (("1" (LEMMA "fermats_little_theorem3")
                          (("1" (INST -1 "b" "p")
                            (("1" (PROP)
                              (("1" (EXPAND "power_eq_one_nz_coset")
                                (("1" (REWRITE "nz_coset_power_id")
                                  (("1" (EXPAND "^")
                                    (("1" (LIFT-IF)
                                      (("1" (PROP)
                                        (("1" (REWRITE "equal_cosets_rem") NIL
                                          NIL)
                                         ("2" (TYPEPRED "p")
                                          (("2" (EXPAND "prime?")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE "zn_zero_coset_char") NIL
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "zn_zero_coset_char")
                                (("2" (TYPEPRED "p")
                                  (("2" (EXPAND "prime?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "p")
            (("2" (EXPAND "prime?")
              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fermats_little_theorem3| FORMULA-DECL NIL |fermats_little_theorem|
     |numbers|)
    (|nz_coset_power_id| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|power_eq_one_nz_coset| CONST-DECL "set[posnat]" |inf_prime_groups| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   NIL
   (|period_nz_coset| SUBTYPE
    "inf_prime_groups.power_eq_one_nz_coset(inf_prime_groups.p, inf_prime_groups.a)"
    "(sets[posnat].nonempty?)")))
 (|nz_coset_period_def_equiv_TCC1| 0
  (|nz_coset_period_def_equiv_TCC1-1| NIL 3943360601
   ("" (LEMMA "nz_prime_is_finite_group")
    (("" (SKEEP)
      (("" (INST -1 "p")
        (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nz_prime_is_finite_group| FORMULA-DECL NIL |inf_prime_groups| NIL))
   NIL
   (|nz_coset_period_def_equiv| SUBTYPE
    "restrict[set[int], nz_coset(inf_prime_groups.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(inf_prime_groups.p), ring_zn.Z(inf_prime_groups.p)))"
    "finite_group[nz_coset(p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p)), coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p))], [nz_coset(p), nz_coset(p)], set[int]](product[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*)](Z, nZ(p))), (+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(1, nZ(p))]")))
 (|nz_coset_period_def_equiv_TCC2| 0
  (|nz_coset_period_def_equiv_TCC2-1| NIL 3943360601 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|right_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   NIL
   (|nz_coset_period_def_equiv| SUBTYPE "inf_prime_groups.a"
    "(restrict[set[int], nz_coset(inf_prime_groups.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(inf_prime_groups.p), ring_zn.Z(inf_prime_groups.p))))")))
 (|nz_coset_period_def_equiv_TCC3| 0
  (|nz_coset_period_def_equiv_TCC3-1| NIL 3943360601
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (TYPEPRED "p")
            (("" (LEMMA "nz_prime_is_finite_group")
              (("" (INST -1 "p")
                (("1" (PROP)
                  (("1" (EXPAND "finite_group?")
                    (("1" (FLATTEN)
                      (("1" (HIDE -2)
                        (("1"
                          (CASE-REPLACE
                           "fullset[nz_coset(p)] = remove[set[int]](nZ(p), Z(p))")
                          (("1" (HIDE-ALL-BUT (-4 1))
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (EXPAND "restrict")
                                (("1" (EXPAND "remove")
                                  (("1" (EXPAND "member")
                                    (("1" (EXPAND "fullset")
                                      (("1" (EXPAND "Z")
                                        (("1" (EXPAND "/")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nz_prime_is_finite_group| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|finite_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   NIL
   (|nz_coset_period_def_equiv| ASSUMING
    "algebra@finite_groups[nz_coset(inf_prime_groups.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(inf_prime_groups.p))], [nz_coset(inf_prime_groups.p), nz_coset(inf_prime_groups.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(inf_prime_groups.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(inf_prime_groups.p))].finite_groups"
    "fullset_is_group: ASSUMPTION group_def[finite_groups.T, finite_groups.*, finite_groups.one].group?(sets[finite_groups.T].fullset)")))
 (|nz_coset_period_def_equiv| 0
  (|nz_coset_period_def_equiv-1| NIL 3943360502
   ("" (SKEEP)
    (("" (EXPAND "period_nz_coset")
      (("" (EXPAND "period")
        (("" (EXPAND "power_eq_one_nz_coset")
          (("" (EXPAND "power_zp_nz_coset")
            (("" (EXPAND "^") (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|period_nz_coset| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|power_eq_one_nz_coset| CONST-DECL "set[posnat]" |inf_prime_groups| NIL)
    (^ CONST-DECL "T" |group| |algebra|)
    (|power_zp_nz_coset| CONST-DECL "nz_coset(p)" |inf_prime_groups| NIL)
    (|period| CONST-DECL "posnat" |finite_groups| |algebra|))
   SHOSTAK))
 (|Mersenne_divisor_is_odd| 0
  (|Mersenne_divisor_is_odd-1| NIL 3947768334
   ("" (SKEEP)
    (("" (EXPAND "divides")
      (("" (SKEEP)
        (("" (EXPAND "Mersenne_number")
          (("" (EXPAND "expt")
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (TYPEPRED "p")
                  (("1" (EXPAND "prime?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (CASE "odd?(d * x)")
                  (("1" (CASE "even?(d)")
                    (("1" (LEMMA "even_times_int_is_even")
                      (("1" (INST -1 "d" "x")
                        (("1" (REWRITE "odd_iff_not_even") NIL NIL)) NIL))
                      NIL)
                     ("2" (LEMMA "odd_iff_not_even")
                      (("2" (INST -1 "d") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|divides| CONST-DECL "bool" |divides| NIL)
    (|Mersenne_number| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| JUDGEMENT-TCC NIL |integers| NIL)
    (|odd_iff_not_even| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|d| SKOLEM-CONST-DECL "int" |inf_prime_groups| NIL)
    (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL))
   SHOSTAK))
 (|Mersenne_prime_divisor_not_divide_2| 0
  (|Mersenne_prime_divisor_not_divide_2-1| NIL 3947772521
   ("" (SKEEP)
    (("" (LEMMA "prime_2")
      (("" (EXPAND "prime?")
        (("" (INST -1 "q")
          (("1" (ASSERT)
            (("1" (TYPEPRED "q")
              (("1" (PROP)
                (("1" (TYPEPRED "q")
                  (("1" (EXPAND "prime?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (LEMMA "Mersenne_divisor_is_odd")
                  (("2" (INST -1 "q" "p")
                    (("2" (ASSERT)
                      (("2" (REPLACES -2)
                        (("2" (REWRITE "odd_iff_not_even") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "q")
            (("2" (EXPAND "prime?")
              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|q| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Mersenne_divisor_is_odd| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|odd_iff_not_even| FORMULA-DECL NIL |naturalnumbers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   SHOSTAK))
 (|Mersenne_divisor_Fermat_prop_TCC1| 0
  (|Mersenne_divisor_Fermat_prop_TCC1-1| NIL 3947769003
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "int" |inf_prime_groups| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|Mersenne_number| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL))
   NIL (|Mersenne_divisor_Fermat_prop| SUBTYPE "inf_prime_groups.q" "posnat")))
 (|Mersenne_divisor_Fermat_prop_TCC2| 0
  (|Mersenne_divisor_Fermat_prop_TCC2-1| NIL 3947769003
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("1" (LEMMA "Mersenne_divisor_is_odd")
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (REWRITE "two_not_zero_coset")
              (("1" (TYPEPRED "q")
                (("1" (EXPAND "prime?")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "q")
        (("2" (EXPAND "prime?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|two_not_zero_coset| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Mersenne_divisor_is_odd| FORMULA-DECL NIL |inf_prime_groups| NIL))
   NIL
   (|Mersenne_divisor_Fermat_prop| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(2, ring_zn.nZ(inf_prime_groups.q))"
    "nz_coset(inf_prime_groups.q)")))
 (|Mersenne_divisor_Fermat_prop_TCC3| 0
  (|Mersenne_divisor_Fermat_prop_TCC3-1| NIL 3947769003
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "int" |inf_prime_groups| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|Mersenne_number| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL))
   NIL
   (|Mersenne_divisor_Fermat_prop| SUBTYPE
    "(number_fields.-)(inf_prime_groups.q, 1)" "nat")))
 (|Mersenne_divisor_Fermat_prop| 0
  (|Mersenne_divisor_Fermat_prop-1| NIL 3947769003
   ("" (SKEEP)
    (("" (LEMMA "fermats_little_theorem3")
      (("" (INST -1 "2" "q")
        (("" (LEMMA "Mersenne_prime_divisor_not_divide_2")
          (("" (INST -1 "q" "p")
            (("" (ASSERT)
              (("" (EXPAND "^")
                (("" (LIFT-IF)
                  (("" (PROP)
                    (("1" (REWRITE "nz_coset_power_id")
                      (("1" (REWRITE "equal_cosets_rem") NIL NIL)) NIL)
                     ("2" (TYPEPRED "q")
                      (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fermats_little_theorem3| FORMULA-DECL NIL |fermats_little_theorem|
     |numbers|)
    (|Mersenne_prime_divisor_not_divide_2| FORMULA-DECL NIL |inf_prime_groups|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nz_coset_power_id| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Mersenne_divisor_Fermat_prop2| 0
  (|Mersenne_divisor_Fermat_prop2-1| NIL 3947772074
   ("" (SKEEP)
    (("" (LEMMA "same_remainder")
      (("" (INST -1 "q" "Mersenne_number(p)" "0")
        (("1" (FLATTEN)
          (("1" (HIDE -1)
            (("1" (ASSERT)
              (("1" (EXPAND "Mersenne_number")
                (("1" (LEMMA "rem_sum_elim2")
                  (("1" (INST -1 "q" "1" "expt(2, p) - 1" "0")
                    (("1" (FLATTEN)
                      (("1" (HIDE -1)
                        (("1" (ASSERT)
                          (("1" (REWRITE "nz_coset_power_id")
                            (("1" (REWRITE "equal_cosets_rem")
                              (("1" (TYPEPRED "p")
                                (("1" (EXPAND "prime?")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "p")
                              (("2" (EXPAND "prime?") (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("3" (LEMMA "Mersenne_prime_divisor_not_divide_2")
                              (("3" (INST -1 "q" "p")
                                (("3" (EXPAND "Mersenne_number")
                                  (("3" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "p")
                      (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("3" (TYPEPRED "q")
                      (("3" (EXPAND "prime?") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "q")
          (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem_sum_elim2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|Mersenne_prime_divisor_not_divide_2| FORMULA-DECL NIL |inf_prime_groups|
     NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nz_coset_power_id| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|q| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|Mersenne_number| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|primes_is_infinite| 0
  (|primes_is_infinite-1| NIL 3947772691
   ("" (NAME "max_p" "max_finite_set_nat.max(fullset[(prime?)])")
    (("1" (CASE "prime?(max_p)")
      (("1" (LEMMA "prime_divides")
        (("1" (INST -1 "Mersenne_number(max_p)")
          (("1" (PROP)
            (("1" (SKOLEM -1 "q")
              (("1" (TYPEPRED "q")
                (("1" (LEMMA "Mersenne_divisor_is_odd")
                  (("1" (INST -1 "q" "max_p")
                    (("1" (ASSERT)
                      (("1" (CASE "q > 1")
                        (("1"
                          (LEMMA
                           "period_divides_order_element[nz_coset(q),product(Z, nZ(q)), (+)(1, nZ(q))]")
                          (("1"
                            (INST-CP -1 "remove(nZ(q),Z(q))" "max_p" "2+nZ(q)")
                            (("1"
                              (INST -1 "remove(nZ(q),Z(q))" "q-1" "2+nZ(q)")
                              (("1" (PROP)
                                (("1" (REWRITE* "nz_coset_period_def_equiv")
                                  (("1"
                                    (CASE-REPLACE
                                     "period_nz_coset(q, 2 + nZ(q)) = max_p")
                                    (("1" (HIDE -1 -2)
                                      (("1" (LEMMA "divisor_smaller")
                                        (("1" (INST -1 "max_p" "q-1")
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "max_p")
                                              (("1" (INST -2 "q")
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "fullset")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "prime?" -7)
                                      (("2" (FLATTEN)
                                        (("2"
                                          (INST -7
                                           "period_nz_coset(q, 2 + nZ(q))")
                                          (("1" (ASSERT)
                                            (("1" (HIDE-ALL-BUT 2)
                                              (("1" (EXPAND "/=")
                                                (("1"
                                                  (EXPAND "period_nz_coset")
                                                  (("1"
                                                    (TYPEPRED
                                                     "min(power_eq_one_nz_coset(q, 2 + nZ(q)))")
                                                    (("1" (REPLACES -4)
                                                      (("1"
                                                        (EXPAND
                                                         "power_eq_one_nz_coset")
                                                        (("1" (HIDE-ALL-BUT -2)
                                                          (("1"
                                                            (EXPAND
                                                             "power_zp_nz_coset")
                                                            (("1"
                                                              (EXPAND "power")
                                                              (("1"
                                                                (EXPAND
                                                                 "power")
                                                                (("1"
                                                                  (REWRITE
                                                                   "zn_product_charac")
                                                                  (("1"
                                                                    (TYPEPRED
                                                                     "q")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "equal_cosets_rem")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "modulo_arithmetic.rem_one")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "rem_mod")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (CASE-REPLACE
                                                                             "q = 2")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "rem_self")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "prime?")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "^")
                                  (("2" (ASSERT)
                                    (("2"
                                      (LEMMA "Mersenne_divisor_Fermat_prop2")
                                      (("2" (INST?)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "power_zp_nz_coset")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (EXPAND "^")
                                  (("3" (LIFT-IF)
                                    (("3" (ASSERT)
                                      (("3"
                                        (LEMMA "Mersenne_divisor_Fermat_prop")
                                        (("3" (INST?)
                                          (("3" (ASSERT)
                                            (("3" (EXPAND "power_zp_nz_coset")
                                              (("3" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (HIDE 2)
                                  (("4" (EXPAND "^")
                                    (("4" (ASSERT)
                                      (("4"
                                        (LEMMA "Mersenne_divisor_Fermat_prop2")
                                        (("4" (INST?)
                                          (("4" (ASSERT)
                                            (("4" (EXPAND "power_zp_nz_coset")
                                              (("4" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SPLIT)
                                (("1" (REWRITE "zn_identity") NIL NIL)
                                 ("2" (REWRITE "two_not_zero_coset") NIL NIL)
                                 ("3" (EXPAND "restrict")
                                  (("3" (EXPAND "remove")
                                    (("3" (EXPAND "member")
                                      (("3" (SPLIT)
                                        (("1" (EXPAND "/=")
                                          (("1" (LEMMA "two_not_zero_coset")
                                            (("1" (INST -1 "q")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "Z")
                                          (("2" (EXPAND "/")
                                            (("2" (REWRITE "zn_identity") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (ASSERT) NIL NIL)
                               ("4" (LEMMA "nz_prime_is_finite_group")
                                (("4" (INST -1 "q")
                                  (("1" (PROP) NIL NIL) ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)
                               ("6" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (EXPAND "restrict")
                              (("2" (REWRITE "zn_identity")
                                (("2" (SPLIT)
                                  (("1" (EXPAND "/=")
                                    (("1" (LEMMA "two_not_zero_coset")
                                      (("1" (INST -1 "q")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "remove")
                                    (("2" (EXPAND "member")
                                      (("2" (EXPAND "Z")
                                        (("2" (EXPAND "/")
                                          (("2" (REWRITE "zn_identity")
                                            (("2" (EXPAND "/=")
                                              (("2"
                                                (LEMMA "two_not_zero_coset")
                                                (("2" (INST -1 "q")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (LEMMA "nz_prime_is_finite_group")
                              (("3" (INST -1 "q")
                                (("1" (PROP) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)
                             ("5" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (REWRITE "zn_identity")
                            (("2" (EXPAND "/=")
                              (("2" (REWRITE "zn_zero_coset_char")
                                (("2" (REWRITE "one_div_one")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKEEP)
                            (("3" (REWRITE "zn_product_pair")
                              (("3" (REWRITE "nz_coset_product_is_nz_coset")
                                NIL NIL))
                              NIL))
                            NIL)
                           ("4" (INST 1 "1+nZ(q)")
                            (("1" (REWRITE "zn_identity")
                              (("1" (EXPAND "/=")
                                (("1" (REWRITE "zn_zero_coset_char")
                                  (("1" (REWRITE "one_div_one")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)
                           ("6" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (TYPEPRED "q")
                          (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "Mersenne_number")
              (("2" (LEMMA "increasing_expt_aux")
                (("2" (INST -1 "2" "max_p-2")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (CASE "prime?(max_p)")
                    (("1" (EXPAND "prime?") (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "max_p")
        (("2" (CASE-REPLACE "fullset[(prime?)] = (prime?)")
          (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)
           ("2" (EXPAND "restrict")
            (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (PROP)
      (("1" (SKEEP)
        (("1" (PROP)
          (("1" (EXPAND "prime?") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (CASE-REPLACE "fullset[(prime?)] = (prime?)")
            (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (EXPAND "restrict")
              (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "is_finite") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (EXPAND "empty?")
        (("3" (INST -1 "2")
          (("3" (EXPAND "member")
            (("3" (EXPAND "fullset") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_p| SKOLEM-CONST-DECL "{a: nat |
   fullset[(prime?)](a) AND FORALL x: fullset[(prime?)](x) IMPLIES x <= a}"
     |inf_prime_groups| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Mersenne_number| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|increasing_expt_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|Mersenne_divisor_is_odd| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|nz_coset| TYPE-EQ-DECL NIL |inf_prime_groups| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|period_divides_order_element| FORMULA-DECL NIL |finite_groups| |algebra|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Mersenne_divisor_Fermat_prop| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (^ CONST-DECL "T" |group| |algebra|)
    (|Mersenne_divisor_Fermat_prop2| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|nz_coset_period_def_equiv| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|power| DEF-DECL "T" |monoid_def| |algebra|)
    (|zn_product_charac| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|rem_self| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_one| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|power_zp_nz_coset| CONST-DECL "nz_coset(p)" |inf_prime_groups| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (|power_eq_one_nz_coset| CONST-DECL "set[posnat]" |inf_prime_groups| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|period_nz_coset| CONST-DECL "posnat" |inf_prime_groups| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|two_not_zero_coset| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nz_prime_is_finite_group| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|finite_group| NONEMPTY-TYPE-EQ-DECL NIL |group| |algebra|)
    (|finite_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|q| SKOLEM-CONST-DECL "(prime?)" |inf_prime_groups| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (|zn_zero_coset_char| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nz_coset_product_is_nz_coset| FORMULA-DECL NIL |inf_prime_groups| NIL)
    (|prime_divides| FORMULA-DECL NIL |number_util| |ints|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_finite_set_nat| |ints|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|fullset| CONST-DECL "set" |sets| NIL))
   SHOSTAK)))

