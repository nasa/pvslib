(|gcd| (|gcd_TCC1| 0 (|gcd_TCC1-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (REWRITE "gcd_noem") (("" (ASSERT) (("" (REWRITE "gcd_prep") NIL NIL)) NIL)) NIL)) NIL) ((|gcd_noem| FORMULA-DECL NIL |divides_lems| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gcd_prep| FORMULA-DECL NIL |divides_lems| NIL)) NIL (|gcd| SUBTYPE "{k: integers.posnat | booleans.AND(divides.divides(k, gcd.i), divides.divides(k, gcd.j))}" "{A: (sets[posnat].nonempty?) | EXISTS UB: FORALL (y: (A)): reals.<=(y, max_bounded_posnat.UB)}"))) (|gcd_divides_TCC1| 0 (|gcd_divides_TCC1-1| |nil| 3319536974 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gcd_divides| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|gcd_divides| 0 (|gcd_divides-2| "" 3790081284 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (TYPEPRED "max({k: posnat | divides(k, i!1) AND divides(k, j!1)})") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "gcd_noem") (("2" (REWRITE "gcd_prep") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|gcd_noem| FORMULA-DECL NIL |divides_lems| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gcd_prep| FORMULA-DECL NIL |divides_lems| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|max| CONST-DECL "{a: posnat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}" |max_bounded_posnat| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|gcd_divides-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (TYPEPRED "max({k: posnat | divides(k, i!1) AND divides(k, j!1)})") (("1" (ASSERT) (("1" (PROP) NIL NIL)) NIL) ("2" (REWRITE "gcd_noem") (("2" (REWRITE "gcd_prep") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|gcd_is_max| 0 (|gcd_is_max-2| "" 3790081284 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (TYPEPRED "max({k: posnat | divides(k, i!1) AND divides(k, j!1)})") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "gcd_noem") (("2" (ASSERT) (("2" (REWRITE "gcd_prep") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|gcd_noem| FORMULA-DECL NIL |divides_lems| NIL) (|gcd_prep| FORMULA-DECL NIL |divides_lems| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|kk!1| SKOLEM-CONST-DECL "nzint" |gcd| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|max| CONST-DECL "{a: posnat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}" |max_bounded_posnat| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|gcd_is_max-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (TYPEPRED "max({k: posnat | divides(k, i!1) AND divides(k, j!1)})") (("1" (INST?) (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "gcd_noem") (("2" (ASSERT) (("2" (REWRITE "gcd_prep") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|gcd_def| 0 (|gcd_def-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (SPLIT +) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (LEMMA "gcd_is_max") (("1" (INST?) (("1" (INST -1 "mm!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "gcd") (("2" (LEMMA "max_def") (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "maximum?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "gcd_noem") (("2" (REWRITE "gcd_prep") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gcd_is_max| FORMULA-DECL NIL |gcd| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (<= CONST-DECL "bool" |reals| NIL) (|j!1| SKOLEM-CONST-DECL "int" |gcd| NIL) (|i!1| SKOLEM-CONST-DECL "int" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|maximum?| CONST-DECL "bool" |max_bounded_posnat| NIL) (|gcd_prep| FORMULA-DECL NIL |divides_lems| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gcd_noem| FORMULA-DECL NIL |divides_lems| NIL) (|max_def| FORMULA-DECL NIL |max_bounded_posnat| NIL)) NIL)) (|gcd_0_pos| 0 (|gcd_0_pos-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (LEMMA "max_def") (("" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -1 2) (("1" (EXPAND "maximum?") (("1" (SPLIT) (("1" (EXPAND "divides") (("1" (INST + "0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "divides") (("2" (INST + "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (EXPAND "divides") (("3" (SKOSIMP*) (("3" (TYPEPRED "mm!1") (("3" (TYPEPRED "x!1") (("3" (LEMMA "pos_times_gt") (("3" (HIDE -4) (("3" (INST?) (("3" (ASSERT) (("3" (REPLACE -4) (("3" (LEMMA "both_sides_times_pos_le1") (("3" (INST -1 "x!1" "1" "x!3") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (REWRITE "gcd_noem") NIL NIL) ("2" (REWRITE "gcd_prep") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (<= CONST-DECL "bool" |reals| NIL) (|mm!1| SKOLEM-CONST-DECL "posnat" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|maximum?| CONST-DECL "bool" |max_bounded_posnat| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|gcd_prep| FORMULA-DECL NIL |divides_lems| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gcd_noem| FORMULA-DECL NIL |divides_lems| NIL) (|max_def| FORMULA-DECL NIL |max_bounded_posnat| NIL)) NIL)) (|gcd_abs_TCC1| 0 (|gcd_abs_TCC1-1| |nil| 3319536974 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL)) NIL (|gcd_abs| SUBTYPE "real_defs.abs(gcd.j)" "{jj: integers.int | booleans.=>(real_defs.abs(gcd.i) = 0, jj /= 0)}"))) (|gcd_abs| 0 (|gcd_abs-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (CASE "{k: posnat | divides(k, i!1) AND divides(k, j!1)}
                  = {k: posnat | divides(k, abs(i!1)) AND divides(k, abs(j!1))}") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :|hide?| T) (("2" (IFF) (("2" (SPLIT +) (("1" (FLATTEN) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (PROP) (("1" (INST + "IF i!1 < 0 THEN -x!2 ELSE x!2 ENDIF") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST + "IF i!1 < 0 THEN -x!2 ELSE x!2 ENDIF") (("2" (GRIND) NIL NIL)) NIL) ("3" (INST + "IF j!1 < 0 THEN -x!3 ELSE x!3 ENDIF") (("3" (GRIND) NIL NIL)) NIL) ("4" (INST + "IF j!1 < 0 THEN -x!3 ELSE x!3 ENDIF") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "divides") (("2" (SKOSIMP*) (("2" (PROP) (("1" (INST + "IF i!1 < 0 THEN -x!2 ELSE x!2 ENDIF") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (INST + "IF i!1 < 0 THEN -x!2 ELSE x!2 ENDIF") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (INST + "IF j!1 < 0 THEN -x!3 ELSE x!3 ENDIF") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1) (("4" (INST + "IF j!1 < 0 THEN -x!3 ELSE x!3 ENDIF") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL)) NIL)) (|gcd_0_neg| 0 (|gcd_0_neg-2| "" 3790081285 ("" (SKOSIMP*) (("" (REWRITE "gcd_abs") (("" (REWRITE "gcd_0_pos") NIL NIL)) NIL)) NIL) ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gcd_abs| FORMULA-DECL NIL |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|abs_neg_rew| FORMULA-DECL NIL |abs_rews| NIL) (|abs_nat_rew| FORMULA-DECL NIL |abs_rews| NIL) (|abs_0_rew| FORMULA-DECL NIL |abs_rews| NIL) (|gcd_0_pos| FORMULA-DECL NIL |gcd| NIL)) SHOSTAK) (|gcd_0_neg-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (REWRITE "gcd_abs") (("" (EXPAND "abs") (("" (REWRITE "gcd_0_pos") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|gcd_sym| 0 (|gcd_sym-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (CASE-REPLACE "{k: posnat | divides(k, i!1) AND divides(k, j!1)}
           = {k: posnat | divides(k, j!1) AND divides(k, i!1)}") (("" (HIDE 2) (("" (APPLY-EXTENSIONALITY 1 :|hide?| T) (("" (IFF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|gcd_lt_nat_TCC1| 0 (|gcd_lt_nat_TCC1-1| |nil| 3319536974 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gcd_lt_nat| SUBTYPE "gcd.m" "{jj: integers.int | booleans.=>(gcd.n = 0, jj /= 0)}"))) (|gcd_lt_nat| 0 (|gcd_lt_nat-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (TYPEPRED "gcd(n!1, m!1)") (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (NAME-REPLACE "NN" "gcd(n!1,m!1)") (("" (CASE-REPLACE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "pos_times_ge") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "both_sides_times_pos_le1") (("2" (INST -1 "NN" "1" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)) NIL)) (|gcd_lt_TCC1| 0 (|gcd_lt_TCC1-1| |nil| 3319536974 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gcd_lt| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|gcd_lt| 0 (|gcd_lt-2| "" 3790081285 ("" (SKOSIMP*) (("" (LEMMA "gcd_lt_nat") (("" (INST-CP -1 "abs(j!1)" "abs(i!1)") (("" (INST -1 "abs(i!1)" "abs(j!1)") (("" (SPLIT -1) (("1" (SPLIT -2) (("1" (REWRITE "gcd_sym" -2) (("1" (REWRITE "gcd_abs" +) (("1" (NAME-REPLACE "GCD" "gcd(abs(i!1), abs(j!1))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd_lt_nat| FORMULA-DECL NIL |gcd| NIL) (|gcd_abs| FORMULA-DECL NIL |gcd| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|gcd_lt-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (LEMMA "gcd_lt_nat") (("" (INST-CP -1 "abs(j!1)" "abs(i!1)") (("" (INST -1 "abs(i!1)" "abs(j!1)") (("" (SPLIT -1) (("1" (SPLIT -2) (("1" (REWRITE "gcd_sym" -2) (("1" (REWRITE "gcd_abs" +) (("1" (NAME-REPLACE "GCD" "gcd(abs(i!1), abs(j!1))") (("1" (GRIND) NIL NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|gcd_0| 0 (|gcd_0-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (TYPEPRED "ii!1") (("" (FLATTEN) (("" (REWRITE "gcd_abs") (("" (REWRITE "gcd_0_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|abs_0_rew| FORMULA-DECL NIL |abs_rews| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gcd_abs| FORMULA-DECL NIL |gcd| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|gcd_0_pos| FORMULA-DECL NIL |gcd| NIL)) NIL)) (|gcd_mod_TCC1| 0 (|gcd_mod_TCC1-1| |nil| 3407857358 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|gcd_mod| SUBTYPE "gcd.i" "{jj: integers.int | booleans.=>(mod.mod(gcd.j, gcd.i) = 0, jj /= 0)}"))) (|gcd_mod_TCC2| 0 (|gcd_mod_TCC2-1| |nil| 3407857358 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gcd_mod| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|gcd_mod| 0 (|gcd_mod-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "gcd") (("" (CASE "{k: posnat | divides(k, mod(j!1, i!1)) AND divides(k, i!1)}
                           = {k: posnat | divides(k, i!1) AND divides(k, j!1)}") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 1 :|hide?| T) (("2" (REWRITE "divides_mod") (("2" (REWRITE "divides_mod") (("2" (REWRITE "divides_mod") (("2" (CASE-REPLACE "mod(i!1, x!1) = 0") (("1" (ASSERT) (("1" (IFF 1) (("1" (LEMMA "mod_0_divides") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (PROP) (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "mod" -1 2) (("1" (NAME "T1" "floor(j!1 / (x!1 * x!2)) * x!2 ") (("1" (CASE-REPLACE "floor(j!1 / (x!1 * x!2)) * x!1 * x!2 = floor(j!1 / (x!1 * x!2)) * x!2 * x!1") (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (LEMMA "mod_sum") (("1" (INST -1 "j!1" "x!1" "-T1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mod_0_divides") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "divides") (("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (EXPAND "mod" 1 2) (("2" (NAME-REPLACE "T1" "div(x!1 * x!3, x!1 * x!2)") (("2" (HIDE -1 -2) (("2" (CASE-REPLACE "x!1 * x!3 - T1 * x!1 * x!2 = x!1*(x!3 - T1*x!2)") (("1" (NAME-REPLACE "T2" "(x!3 - T1 * x!2)") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides_mod| FORMULA-DECL NIL |divides_lems| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|mod_0_divides| FORMULA-DECL NIL |mod_lems| NIL) (|div| CONST-DECL "integer" |div| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod_sum| FORMULA-DECL NIL |mod| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|i!1| SKOLEM-CONST-DECL "int" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|gcd_mod_div| 0 (|gcd_mod_div-2| "" 3790081286 ("" (SKOSIMP*) (("" (REWRITE "gcd_mod" :|dir| RL) (("" (LEMMA "gcd_divides") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd_mod| FORMULA-DECL NIL |gcd| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gcd_divides| FORMULA-DECL NIL |gcd| NIL)) SHOSTAK) (|gcd_mod_div-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (REWRITE "gcd_mod" :|dir| RL) (("" (LEMMA "gcd_divides") (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|gcd_factors_nat_TCC1| 0 (|gcd_factors_nat_TCC1-1| |nil| 3319536974 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gcd_factors_nat| SUBTYPE "gcd.m" "{jj: integers.int | booleans.=>(gcd.n = 0, jj /= 0)}"))) (|gcd_factors_nat| 0 (|gcd_factors_nat-2| "" 3790081287 ("" (INDUCT "m" 1 "NAT_induction") (("1" (SKOSIMP*) (("1" (CASE-REPLACE "j!1 = 0") (("1" (ASSERT) (("1" (REWRITE "gcd_sym") (("1" (REWRITE "gcd_0_pos") (("1" (INST + "1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mod_pos") (("2" (INST - "n!1" "j!1") (("1" (FLATTEN) (("1" (INST - "mod(n!1,j!1)") (("1" (ASSERT) (("1" (INST - "j!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_mod" + :|dir| RL) (("1" (REWRITE "gcd_sym" +) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (EXPAND "mod") (("1" (INST + "jp!1" "ip!1 - div(n!1,j!1)*jp!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|mod_pos| FORMULA-DECL NIL |mod| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|div| CONST-DECL "integer" |div| NIL) (|div_nat| FORMULA-DECL NIL |div| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gcd_mod| FORMULA-DECL NIL |gcd| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |gcd| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gcd_0_pos| FORMULA-DECL NIL |gcd| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|gcd_factors_nat-1| |nil| 3319536974 ("" (INDUCT "m" 1 "NAT_induction") (("1" (SKOSIMP*) (("1" (CASE-REPLACE "j!1 = 0") (("1" (ASSERT) (("1" (REWRITE "gcd_sym") (("1" (REWRITE "gcd_0_pos") (("1" (INST + "1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mod_pos") (("2" (INST - "n!1" "j!1") (("1" (FLATTEN) (("1" (INST - "mod(n!1,j!1)") (("1" (ASSERT) (("1" (INST - "j!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_mod" + :|dir| RL) (("1" (REWRITE "gcd_sym" +) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (EXPAND "mod") (("1" (INST + "jp!1" "ip!1 - div(n!1,j!1)*jp!1") (("1" (ASSERT) (("1" (EXPAND "div") (("1" (EXPAND "abs") (("1" (EXPAND "sgn") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL)) (|gcd_factors| 0 (|gcd_factors-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (REWRITE "gcd_abs") (("" (LEMMA "gcd_factors_nat") (("" (INST?) (("" (SPLIT -1) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST + "IF i!1 < 0 THEN -ip!1 ELSE ip!1 ENDIF" "IF j!1 < 0 THEN -jp!1 ELSE jp!1 ENDIF") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd_abs| FORMULA-DECL NIL |gcd| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gcd_factors_nat| FORMULA-DECL NIL |gcd| NIL)) NIL)) (|divides_gcd| 0 (|divides_gcd-1| |nil| 3319536974 ("" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (LEMMA "gcd_factors") (("" (INST?) (("" (ASSERT) (("" (REPLACE -2) (("" (ASSERT) (("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (HIDE -1) (("" (REPLACE -1) (("" (HIDE -1) (("" (INST 1 "ip!1 *  x!1 + jp!1 * x!2 ") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|divides| CONST-DECL "bool" |divides| NIL) (|gcd_factors| FORMULA-DECL NIL |gcd| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|gcd_same_TCC1| 0 (|gcd_same_TCC1-1| |nil| 3453735305 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|gcd_same| SUBTYPE "gcd.p" "{jj: integers.int | booleans.=>(gcd.p = 0, jj /= 0)}"))) (|gcd_same| 0 (|gcd_same-1| |nil| 3453735363 ("" (SKOSIMP) (("" (EXPAND "gcd") (("" (REWRITE "max_def") (("1" (EXPAND "maximum?") (("1" (REWRITE "divides_reflexive") (("1" (SKOSIMP) (("1" (FORWARD-CHAIN "divisor_smaller") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (PROP) (("1" (REWRITE "nonempty_exists") (("1" (INST + "1") (("1" (REWRITE "one_divides") NIL NIL)) NIL)) NIL) ("2" (INST + "p!1") (("2" (SKOLEM-TYPEPRED) (("2" (FORWARD-CHAIN "divisor_smaller") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) (|one_divides| FORMULA-DECL NIL |divides| NIL) (|p!1| SKOLEM-CONST-DECL "posint" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|maximum?| CONST-DECL "bool" |max_bounded_posnat| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|divisor_smaller| FORMULA-DECL NIL |divides| NIL) (|divides_reflexive| FORMULA-DECL NIL |divides| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|max_def| FORMULA-DECL NIL |max_bounded_posnat| NIL)) NIL)) (|gcd_minus| 0 (|gcd_minus-1| |nil| 3453735393 ("" (SKOSIMP) (("" (EXPAND "gcd") (("" (REWRITE "congruence") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY) (("1" (IFF) (("1" (PROP) (("1" (REWRITE "divides_diff") NIL NIL) ("2" (LEMMA "divides_sum") (("2" (INST - "p!1" "q!1 - p!1" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("1" (REWRITE "nonempty_exists") (("1" (INST + "1") (("1" (REWRITE "one_divides") (("1" (REWRITE "one_divides") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "p!1") (("2" (SKOLEM-TYPEPRED) (("2" (USE "divisor_smaller") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (PROP) (("1" (REWRITE "nonempty_exists") (("1" (INST + "1") (("1" (REWRITE "one_divides") (("1" (REWRITE "one_divides") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "p!1") (("2" (SKOLEM-TYPEPRED) (("2" (USE "divisor_smaller") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divisor_smaller| FORMULA-DECL NIL |divides| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) (|one_divides| FORMULA-DECL NIL |divides| NIL) (|p!1| SKOLEM-CONST-DECL "posint" |gcd| NIL) (|q!1| SKOLEM-CONST-DECL "posint" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|divides_sum| FORMULA-DECL NIL |divides| NIL) (|divides_diff| FORMULA-DECL NIL |divides| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|max| CONST-DECL "{a: posnat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}" |max_bounded_posnat| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|congruence| FORMULA-DECL NIL |functions| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|gcd_times_TCC1| 0 (|gcd_times_TCC1-1| |nil| 3453735305 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|gcd_times| SUBTYPE "number_fields.*(gcd.q, gcd.l)" "{jj: integers.int | booleans.=>(number_fields.*(gcd.p, gcd.l) = 0, jj /= 0)}"))) (|gcd_times| 0 (|gcd_times-3| "" 3882145061 ("" (MEASURE-INDUCT+ "p + q" ("p" "q")) (("1" (SKOSIMP) (("1" (CASE-REPLACE "x!1 = x!2") (("1" (HIDE -2) (("1" (REWRITE "gcd_same") (("1" (REWRITE "gcd_same") NIL NIL)) NIL)) NIL) ("2" (CASE "x!1 < x!2") (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "l!1") NIL NIL)) NIL)) NIL) ("2" (REWRITE "gcd_sym") (("2" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "l!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (ASSERT) (("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (ASSERT) NIL NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK) (|gcd_times-2| |nil| 3453735638 ("" (MEASURE-INDUCT+ "p + q" (P Q)) (("1" (SKOSIMP) (("1" (CASE-REPLACE "x!1 = x!2") (("1" (HIDE -2) (("1" (REWRITE "gcd_same") (("1" (REWRITE "gcd_same") NIL NIL)) NIL)) NIL) ("2" (CASE "x!1 < x!2") (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "l!1") NIL NIL)) NIL)) NIL) ("2" (REWRITE "gcd_sym") (("2" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "l!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (ASSERT) (("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (ASSERT) NIL NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (ASSERT) NIL NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|x!2| SKOLEM-CONST-DECL "posint" |gcd| NIL) (|x!1| SKOLEM-CONST-DECL "posint" |gcd| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gcd_minus| FORMULA-DECL NIL |gcd| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|gcd_same| FORMULA-DECL NIL |gcd| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|gcd_times-1| |nil| 3453735428 (";;; Proof gcd_times-1 for formula gcd_fractions.gcd_times" (MEASURE-INDUCT+ "p + q" (P Q)) (("1" (SKOSIMP) (("1" (CASE-REPLACE "x!1 = x!2") (("1" (HIDE -2) (("1" (REWRITE "gcd_same") (("1" (REWRITE "gcd_same") NIL))))) ("2" (CASE "x!1 < x!2") (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 2) (("1" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "k!1") NIL))))) ("2" (REWRITE "gcd_sym") (("2" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_minus" +) (("1" (SWAP-REL 3) (("1" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))) ("2" (FLATTEN) (("2" (CANCEL-BY -1 "k!1") NIL))))))))))))) ("2" (ASSERT) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL))))) ("4" (SKOSIMP) (("4" (ASSERT) NIL))) ("5" (ASSERT) (("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP) (("5" (ASSERT) NIL))))))) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP) (("6" (ASSERT) NIL))))) ("7" (HIDE-ALL-BUT 1) (("7" (SKOSIMP) (("7" (ASSERT) NIL))))) ("8" (ASSERT) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKOSIMP) (("9" (ASSERT) NIL))))) ("10" (ASSERT) NIL)) ";;; developed with shostak decision procedures") NIL NIL)) (|rel_prime_lem| 0 (|rel_prime_lem-1| |nil| 3408109358 ("" (SKOSIMP*) (("" (EXPAND "rel_prime") (("" (SPLIT +) (("1" (FLATTEN) (("1" (LEMMA "gcd_factors") (("1" (INST?) (("1" (REPLACE -3) (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (NAME "K" "gcd(i!1, j!1)") (("2" (REPLACE -1) (("2" (CASE "divides(K, i!1) AND divides(K, j!1)") (("1" (FLATTEN) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (FACTOR -2) (("1" (NAME "MM" "(m!1 * x!1 + n!1 * x!2)") (("1" (REPLACE -1) (("1" (LEMMA "product_1") (("1" (INST - "K" "MM") (("1" (ASSERT) (("1" (LEMMA "pos_times_le") (("1" (INST - "K" "MM") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|product_1| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gcd_factors| FORMULA-DECL NIL |gcd| NIL)) SHOSTAK)) (|rel_prime_div_prod| 0 (|rel_prime_div_prod-1| |nil| 3539695165 ("" (SKEEP) (("" (CASE "i = 0 OR j = 0") (("1" (CASE "i = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (REPLACE -1) (("1" (EXPAND "rel_prime" -) (("1" (REWRITE "gcd_0") (("1" (CASE "k = 0") (("1" (REPLACE -1) (("1" (EXPAND "divides" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "divides") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (EXPAND "rel_prime") (("2" (REWRITE "gcd_sym") (("2" (REWRITE "gcd_0") (("2" (EXPAND "divides") (("2" (COPY 2) (("2" (INST + "k") (("2" (INST + "-k") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1) (("2" (REWRITE "rel_prime_lem" -1) (("2" (SKOSIMP*) (("2" (MULT-BY -1 "k") (("2" (ASSERT) (("2" (REPLACE -1 +) (("2" (ASSERT) (("2" (EXPAND "divides" -) (("2" (SKOSIMP*) (("2" (REPLACE -2) (("2" (EXPAND "divides") (("2" (INST + "k*m!1+n!1*x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gcd_0| FORMULA-DECL NIL |gcd| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rel_prime_lem| FORMULA-DECL NIL |gcd| NIL)) SHOSTAK)) (|rel_prime_sym| 0 (|rel_prime_sym-1| |nil| 3539711449 ("" (SKEEP) (("" (EXPAND "rel_prime") (("" (REWRITE "gcd_sym") NIL NIL)) NIL)) NIL) ((|rel_prime| CONST-DECL "bool" |gcd| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL)) NIL)) (|rel_prime_mult_right_TCC1| 0 (|rel_prime_mult_right_TCC1-1| |nil| 3539712193 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|rel_prime_mult_right| SUBTYPE "gcd.k" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|rel_prime_mult_right_TCC2| 0 (|rel_prime_mult_right_TCC2-1| |nil| 3539712193 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|rel_prime_mult_right| SUBTYPE "number_fields.*(gcd.j, gcd.k)" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|rel_prime_mult_right| 0 (|rel_prime_mult_right-1| |nil| 3539712194 ("" (SKEEP) (("" (REWRITE "rel_prime_lem") (("" (REWRITE "rel_prime_lem") (("" (SKOSIMP*) (("" (REWRITE "rel_prime_lem") (("1" (MULT-EQ -3 -4) (("1" (ASSERT) (("1" (INST + "n!1*n!2" "i*m!1*m!2+k*m!1*n!2+j*m!2*n!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "j = 0 OR k = 0") (("1" (GROUND) NIL NIL) ("2" (LEMMA "nzreal_times_nzreal_is_nzreal") (("2" (INST - "j" "k") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rel_prime_lem| FORMULA-DECL NIL |gcd| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal_times_nzreal_is_nzreal| JUDGEMENT-TCC NIL |real_types| NIL) (|j| SKOLEM-CONST-DECL "int" |gcd| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|k| SKOLEM-CONST-DECL "int" |gcd| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rel_prime_mult_left_TCC1| 0 (|rel_prime_mult_left_TCC1-1| |nil| 3539712538 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|rel_prime_mult_left| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>(gcd.k = 0, jj /= 0)}"))) (|rel_prime_mult_left_TCC2| 0 (|rel_prime_mult_left_TCC2-1| |nil| 3539712538 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|rel_prime_mult_left| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>(number_fields.*(gcd.i, gcd.k) = 0, jj /= 0)}"))) (|rel_prime_mult_left| 0 (|rel_prime_mult_left-1| |nil| 3539712539 ("" (SKEEP) (("" (REWRITE "rel_prime_sym" -3) (("" (REWRITE "rel_prime_sym" -4) (("" (REWRITE "rel_prime_sym" +) (("1" (LEMMA "rel_prime_mult_right") (("1" (INST - "j" "i" "k") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "nzreal_times_nzreal_is_nzreal") (("2" (INST - "i" "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rel_prime_sym| FORMULA-DECL NIL |gcd| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rel_prime_mult_right| FORMULA-DECL NIL |gcd| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal_times_nzreal_is_nzreal| JUDGEMENT-TCC NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|compute_gcd_TCC1| 0 (|compute_gcd_TCC1-1| |nil| 3586790620 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.+)((number_fields.-)((number_fields.-)(gcd.i), gcd.j), 3)" "naturalnumber"))) (|compute_gcd_TCC2| 0 (|compute_gcd_TCC2-1| |nil| 3586790620 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.+)((number_fields.+)((number_fields.-)(gcd.i), gcd.j), 2)" "naturalnumber"))) (|compute_gcd_TCC3| 0 (|compute_gcd_TCC3-1| |nil| 3586790620 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.+)((number_fields.-)(gcd.i, gcd.j), 2)" "naturalnumber"))) (|compute_gcd_TCC4| 0 (|compute_gcd_TCC4-1| |nil| 3586790620 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.+)((number_fields.+)(gcd.i, gcd.j), 1)" "naturalnumber"))) (|compute_gcd_TCC5| 0 (|compute_gcd_TCC5-1| |nil| 3586790620 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.+)(gcd.i, gcd.j)" "naturalnumber"))) (|compute_gcd_TCC6| 0 (|compute_gcd_TCC6-1| |nil| 3586790620 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.j" "{jj: integers.int | booleans.=>((number_fields.-)(gcd.i) = 0, jj /= 0)}"))) (|compute_gcd_TCC7| 0 (|compute_gcd_TCC7-1| |nil| 3586790620 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| TERMINATION "gcd.compute_gcd((number_fields.-)(gcd.i), gcd.j)" "NIL"))) (|compute_gcd_TCC8| 0 (|compute_gcd_TCC8-1| |nil| 3586790620 ("" (SKEEP) (("" (TYPEPRED "v(-i,j)") (("1" (REWRITE "gcd_abs" -) (("1" (REWRITE "gcd_abs" +) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_neg_rew| FORMULA-DECL NIL |abs_rews| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gcd_abs| FORMULA-DECL NIL |gcd| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.compute_gcd((number_fields.-)(gcd.i), gcd.j)" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC9| 0 (|compute_gcd_TCC9-1| |nil| 3586790620 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| SUBTYPE "(number_fields.-)(gcd.j)" "{jj: integers.int | booleans.=>(gcd.i = 0, jj /= 0)}"))) (|compute_gcd_TCC10| 0 (|compute_gcd_TCC10-1| |nil| 3586790620 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| TERMINATION "gcd.compute_gcd(gcd.i, (number_fields.-)(gcd.j))" "NIL"))) (|compute_gcd_TCC11| 0 (|compute_gcd_TCC11-1| |nil| 3586790620 ("" (SKEEP) (("" (TYPEPRED "v(i,-j)") (("1" (REWRITE "gcd_abs" -) (("1" (REWRITE "gcd_abs" +) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_neg_rew| FORMULA-DECL NIL |abs_rews| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gcd_abs| FORMULA-DECL NIL |gcd| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.compute_gcd(gcd.i, (number_fields.-)(gcd.j))" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC12| 0 (|compute_gcd_TCC12-1| |nil| 3586790620 ("" (SKEEP) (("" (REPLACE -1) (("" (ASSERT) (("" (TYPEPRED "j") (("" (ASSERT) (("" (REWRITE "gcd_0_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gcd_0_pos| FORMULA-DECL NIL |gcd| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.j" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC13| 0 (|compute_gcd_TCC13-1| |nil| 3586790620 ("" (SKEEP) (("" (ASSERT) (("" (REPLACE -1) (("" (REWRITE "gcd_sym") (("" (REWRITE "gcd_0_pos") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|gcd_0_pos| FORMULA-DECL NIL |gcd| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.i" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC14| 0 (|compute_gcd_TCC14-1| |nil| 3586790620 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|compute_gcd| TERMINATION "gcd.compute_gcd(gcd.j, gcd.i)" "NIL"))) (|compute_gcd_TCC15| 0 (|compute_gcd_TCC15-1| |nil| 3586790620 ("" (SKOSIMP*) (("" (TYPEPRED "v!1(j!1,i!1)") (("1" (REPLACE -2) (("1" (LEMMA "gcd_sym") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.compute_gcd(gcd.j, gcd.i)" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC16| 0 (|compute_gcd_TCC16-2| |nil| 3591024730 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "rem") (("" (ASSERT) (("" (REPLACE -2) (("" (EXPAND "mod") (("" (CASE "i = j*floor(i/j)") (("1" (NAME "a" "floor(i/j)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (HIDE -) (("1" (LEMMA "gcd_def") (("1" (INST - "j*a" "j" "j") (("1" (ASSERT) (("1" (EXPAND "divides") (("1" (GROUND) (("1" (INST + "a") NIL NIL) ("2" (INST + "1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKOSIMP*) (("3" (TYPEPRED "mm") (("3" (CASE "x!2 <= 0") (("1" (MULT-BY -2 "-x!2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!2 >=1") (("1" (MULT-BY -1 "mm") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|abs_nat_rew| FORMULA-DECL NIL |abs_rews| NIL) (|gcd_def| FORMULA-DECL NIL |gcd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x!2| SKOLEM-CONST-DECL "int" |gcd| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.j" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}")) (|compute_gcd_TCC16-1| |nil| 3586790620 ("" (SKEEP) (("" (SKEEP) (("" (REPLACE -1) (("" (LEMMA "gcd_mod") (("" (INST - "j" "i") (("" (ASSERT) (("" (REPLACE -3 :|dir| RL) (("" (REWRITE "gcd_0") (("" (LEMMA "gcd_sym") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|compute_gcd| SUBTYPE "gcd.j" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC17| 0 (|compute_gcd_TCC17-2| "" 3790081294 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|compute_gcd| SUBTYPE "gcd.rem" "{jj: integers.int | booleans.=>(gcd.j = 0, jj /= 0)}")) (|compute_gcd_TCC17-1| |nil| 3586790620 ("" (SKEEP) (("" (ASSERT) (("" (SKEEP) (("" (CASE "NOT divides(j,i)") (("1" (EXPAND "mod") (("1" (EXPAND "divides") (("1" (INST + "floor(i/j)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gcd_def") (("2" (INST - "i" "j" "j") (("2" (ASSERT) (("2" (SPLIT) (("1" (EXPAND "divides" 1) (("1" (INST + "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "divides" -2) (("2" (SKEEP -2) (("2" (CASE "NOT x>0") (("1" (MULT-BY 1 "mm") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "NOT x>=1") (("1" (ASSERT) NIL NIL) ("2" (MULT-BY -1 "mm") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|compute_gcd| SUBTYPE "gcd.rem" "{jj: integers.int | booleans.=>(gcd.j = 0, jj /= 0)}"))) (|compute_gcd_TCC18| 0 (|compute_gcd_TCC18-1| |nil| 3586790620 ("" (SKEEP) (("" (SKEEP) (("" (ASSERT) (("" (CASE "rem > 0") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (CASE "rem<i") (("1" (ASSERT) (("1" (SPLIT +) (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "mod(i,j)") (("1" (REPLACE -5 :|dir| RL) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "mod(i,j)") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 8) (("2" (EXPAND "mod" -1) (("2" (REPLACES -1) (("2" (TYPEPRED "floor(i/j)") (("2" (MULT-BY -1 "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|compute_gcd| TERMINATION "gcd.compute_gcd(gcd.j, gcd.rem)" "NIL"))) (|compute_gcd_TCC19| 0 (|compute_gcd_TCC19-2| |nil| 3591024818 ("" (SKOSIMP*) (("" (TYPEPRED "v!1(j!1,rem!1)") (("1" (REPLACES -2) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (REWRITE "gcd_sym" +) (("1" (REWRITE "gcd_mod") (("1" (REWRITE "gcd_sym" +) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gcd_sym| FORMULA-DECL NIL |gcd| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|gcd_mod| FORMULA-DECL NIL |gcd| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|compute_gcd| SUBTYPE "gcd.compute_gcd(gcd.j, gcd.rem)" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}")) (|compute_gcd_TCC19-1| |nil| 3586790620 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(j,rem)") (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (COPY 7) (("1" (HIDE 8) (("1" (HIDE -) (("1" (INVOKE (NAME "A1" "%1") (! 1 1)) (("1" (INVOKE (NAME "A2" "%1") (! 1 2)) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (CASE "divides(A1,A2) AND divides(A2,A1)") (("1" (FLATTEN) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (COPY -2) (("1" (REPLACE -2 -1) (("1" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "x!2 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "x!1 < 0") (("1" (MULT-BY -1 "A1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!2 < 0") (("1" (MULT-BY -1 "A2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "x!1 = 1 OR x!2 = 1") (("1" (GROUND) NIL NIL) ("2" (FLATTEN) (("2" (CASE "x!1 > 1") (("1" (CASE "x!2 > 1") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) (("1" (MULT-BY -1 "A1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT +) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|compute_gcd| SUBTYPE "gcd.compute_gcd(gcd.j, gcd.rem)" "{kj: integers.posnat | kj = gcd.gcd(gcd.i, gcd.j)}"))) (|compute_gcd_TCC20| 0 (|compute_gcd_TCC20-2| "" 3790081294 ("" (SKEEP) NIL NIL) NIL SHOSTAK (|compute_gcd| SUBTYPE "gcd.j" "nonzero_integer")) (|compute_gcd_TCC20-1| |nil| 3586790953 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(j,rem)") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE "EXISTS (kk:int): i = kk*j + rem") (("1" (SKEEP -1) (("1" (LEMMA "gcd_def") (("1" (INST - "i" "j" "gcd(j,rem)") (("1" (ASSERT) (("1" (SPLIT +) (("1" (TYPEPRED "gcd(j,rem)") (("1" (EXPAND "divides") (("1" (SKOLEM -2 "xj") (("1" (SKOLEM -3 "xrem") (("1" (INST + "xj*kk + xrem") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gcd_def") (("2" (INST - "j" "rem" "gcd(j,rem)") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST - "mm") (("2" (ASSERT) (("2" (EXPAND "divides") (("2" (SKOLEM -1 "xi") (("2" (SKOLEM -2 "xj") (("2" (INST + "xi - kk*xj") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (INST + "floor(i/j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|compute_gcd| SUBTYPE "gcd.j" "nonzero_integer"))) (|rel_prime_inverse_TCC1| 0 (|rel_prime_inverse_TCC1-1| |nil| 3542976467 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|rel_prime_inverse| SUBTYPE "gcd.m" "{jj: integers.int | booleans.=>(gcd.n = 0, jj /= 0)}"))) (|rel_prime_inverse_TCC2| 0 (|rel_prime_inverse_TCC2-1| |nil| 3542976467 ("" (SUBTYPE-TCC) NIL NIL) ((|divides| CONST-DECL "bool" |divides| NIL) (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd| NIL) (|rel_prime| CONST-DECL "bool" |gcd| NIL)) NIL (|rel_prime_inverse| SUBTYPE "gcd.m" "nonzero_integer"))) (|rel_prime_inverse| 0 (|rel_prime_inverse-1| |nil| 3542976469 ("" (LEMMA "pigeonhole_principle_nat") (("" (SKEEP) (("" (INST - "m" "LAMBDA (k:below(m)): mod(n*k,m)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "bijective?") (("1" (GROUND) (("1" (EXPAND "surjective?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE (2 3)) (("2" (EXPAND "injective?") (("2" (SKEEP) (("2" (CASE "NOT divides(m,n*x1-n*x2)") (("1" (EXPAND "mod") (("1" (EXPAND "divides") (("1" (INST + "floor(n*x1/m)-floor(n*x2/m)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (LEMMA "rel_prime_div_prod") (("2" (INST - "m" "n" "x1-x2") (("2" (ASSERT) (("2" (SPLIT -) (("1" (TYPEPRED "x1") (("1" (TYPEPRED "x2") (("1" (CASE "NOT abs(x1-x2)<m") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "divides" -4) (("2" (SKOSIMP*) (("2" (REPLACE -4) (("2" (REWRITE "abs_mult") (("2" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "abs(x!1)>=1") (("1" (MULT-BY -1 "m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rel_prime_sym") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (ASSERT) (("2" (TYPEPRED "mod(n*k,m)") (("2" (ASSERT) (("2" (LEMMA "mod_pos") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|abs_nat_rew| FORMULA-DECL NIL |abs_rews| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rel_prime_sym| FORMULA-DECL NIL |gcd| NIL) (|rel_prime_div_prod| FORMULA-DECL NIL |gcd| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|divides| CONST-DECL "bool" |divides| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|m| SKOLEM-CONST-DECL "nat" |gcd| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |gcd| NIL) (|pigeonhole_principle_nat| FORMULA-DECL NIL |pigeonhole| NIL)) SHOSTAK)))
