(|number_util|
 (|prime_divides| 0
  (|prime_divides-1| NIL 3950092941
   ("" (MEASURE-INDUCT+ "n" "n")
    (("" (CASE "x!1 = 0")
      (("1" (REPLACES -1)
        (("1" (HIDE -1 1)
          (("1" (INST 1 "2")
            (("1" (REWRITE "divides_zero") NIL NIL)
             ("2" (LEMMA "prime_2") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (CASE "x!1 = 2")
        (("1" (REPLACES -1)
          (("1" (INST 3 "2")
            (("1" (REWRITE "divides_reflexive") NIL NIL)
             ("2" (LEMMA "prime_2") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (CASE "prime?(x!1)")
          (("1" (INST 4 "x!1") (("1" (REWRITE "divides_reflexive") NIL NIL))
            NIL)
           ("2" (EXPAND "prime?" 1)
            (("2" (SPLIT)
              (("1" (SKEEP)
                (("1" (LEMMA "divisor_smaller")
                  (("1" (INST?)
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (INST -3 "j")
                        (("2" (SPLIT)
                          (("1" (SKEEP)
                            (("1" (INST 6 "p")
                              (("1" (LEMMA "divides_transitive")
                                (("1" (INST -1 "x!1" "j" "p")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (PROPAX) NIL NIL)
                                     ("3" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (|divides_zero| FORMULA-DECL NIL |divides| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |number_util| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|divides_transitive| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides_reflexive| FORMULA-DECL NIL |divides| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prod_posnat| APPLICATION-JUDGEMENT "posnat" |product| |ints|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|posnat_divides_posnat| 0
  (|posnat_divides_posnat-1| NIL 3945101866
   ("" (SKEEP)
    (("" (LEMMA "pos_times_lt")
      (("" (INST -1 "b" "c")
        (("" (REPLACE -2 -1 RL)
          (("" (FLATTEN) (("" (HIDE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|divisor_posnat_strict_smaller| 0
  (|divisor_posnat_strict_smaller-1| NIL 3945170760
   ("" (SKEEP)
    (("" (LEMMA "divisor_smaller")
      (("" (INST -1 "c" "a")
        (("" (ASSERT)
          (("" (SPLIT)
            (("1" (EXPAND "<=")
              (("1" (REPLACES -1)
                (("1" (TYPEPRED "b")
                  (("1" (EXPAND ">")
                    (("1" (LEMMA "lt_times_lt_pos1")
                      (("1" (INST -1 "1" "a" "b" "a") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "divides")
              (("2" (INST 1 "b") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|prime_gcd_rel_TCC1| 0
  (|prime_gcd_rel_TCC1-1| NIL 3945102796 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|prime_gcd_rel| SUBTYPE "number_util.a"
    "{jj: integers.int | booleans.=>(number_util.p = 0, jj /= 0)}")))
 (|prime_gcd_rel| 0
  (|prime_gcd_rel-1| NIL 3945102797
   ("" (SKEEP)
    (("" (TYPEPRED "gcd(p, a)")
      (("" (TYPEPRED "p")
        (("" (EXPAND "prime?")
          (("" (FLATTEN)
            (("" (INST -1 "gcd(p, a)") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|gcd_one_left| 0
  (|gcd_one_left-1| NIL 3945268340
   ("" (SKEEP)
    (("" (TYPEPRED "gcd(1, n)") (("" (REWRITE "one_div_one") NIL NIL)) NIL))
    NIL)
   ((|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL))
   SHOSTAK))
 (|gcd_one_right_TCC1| 0
  (|gcd_one_right_TCC1-1| NIL 3945268457 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|gcd_one_right| SUBTYPE "1"
    "{jj: integers.int | booleans.=>(number_util.n = 0, jj /= 0)}")))
 (|gcd_one_right| 0
  (|gcd_one_right-1| NIL 3945268458
   ("" (SKEEP)
    (("" (TYPEPRED "gcd(n, 1)") (("" (REWRITE "one_div_one") NIL NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL))
   SHOSTAK))
 (|gcd_dif_primes_eq_one_TCC1| 0
  (|gcd_dif_primes_eq_one_TCC1-1| NIL 3945268609 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_dif_primes_eq_one| SUBTYPE "number_util.q"
    "{jj: integers.int | booleans.=>(number_util.p = 0, jj /= 0)}")))
 (|gcd_dif_primes_eq_one| 0
  (|gcd_dif_primes_eq_one-1| NIL 3945268610
   ("" (SKEEP)
    (("" (TYPEPRED "gcd(p, q)")
      (("" (REWRITE "prime_gcd_rel")
        (("" (TYPEPRED "q")
          (("" (EXPAND "prime?")
            (("" (FLATTEN)
              (("" (INST -1 "p")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "p")
                    (("1" (EXPAND "prime?") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "p")
                  (("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_gcd_rel| FORMULA-DECL NIL |number_util| NIL))
   SHOSTAK))
 (|product_eq_gcd_one_TCC1| 0
  (|product_eq_gcd_one_TCC1-1| NIL 3945101298 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|product_eq_gcd_one| SUBTYPE "number_util.c"
    "{jj: integers.int | booleans.=>(number_util.a = 0, jj /= 0)}")))
 (|product_eq_gcd_one| 0
  (|product_eq_gcd_one-1| NIL 3945101299
   ("" (SKEEP)
    (("" (LEMMA "gcd_factors")
      (("" (INST -1 "a" "c")
        (("" (SPLIT)
          (("1" (SKOLEM -1 ("x" "y"))
            (("1" (HIDE -2)
              (("1" (REPLACES -2)
                (("1" (CASE "d = (x * a) * d + y * (c * d)")
                  (("1" (REPLACE -3 -1 RL HIDE)
                    (("1" (EXPAND "divides")
                      (("1" (INST 1 "x * d + y * b") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|gcd_factors| FORMULA-DECL NIL |gcd| |ints|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|gcd_one_divides_prod| 0
  (|gcd_one_divides_prod-1| NIL 3945270147
   ("" (SKEEP)
    (("" (EXPAND "divides" -3)
      (("" (SKEEP)
        (("" (LEMMA "product_eq_gcd_one")
          (("" (INST -1 "a" "x" "b" "c") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|product_eq_gcd_one| FORMULA-DECL NIL |number_util| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|gcd_one_prod_eq_one_TCC1| 0
  (|gcd_one_prod_eq_one_TCC1-1| NIL 3945268909 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_prod_eq_one| SUBTYPE "number_util.b"
    "{jj: integers.int | booleans.=>(number_util.a = 0, jj /= 0)}")))
 (|gcd_one_prod_eq_one_TCC2| 0
  (|gcd_one_prod_eq_one_TCC2-1| NIL 3945278817 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_prod_eq_one| SUBTYPE "number_util.c"
    "{jj: integers.int | booleans.=>(number_util.a = 0, jj /= 0)}")))
 (|gcd_one_prod_eq_one_TCC3| 0
  (|gcd_one_prod_eq_one_TCC3-1| NIL 3945268909 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_prod_eq_one| SUBTYPE
    "number_fields.*(number_util.b, number_util.c)"
    "{jj: integers.int | booleans.=>(number_util.a = 0, jj /= 0)}")))
 (|gcd_one_prod_eq_one| 0
  (|gcd_one_prod_eq_one-1| NIL 3945268910
   ("" (SKEEP)
    (("" (LEMMA "rel_prime_lem")
      (("" (INST-CP -1 "a" "b")
        (("" (INST-CP -1 "a" "c")
          (("" (EXPAND "rel_prime")
            (("" (SPLIT)
              (("1" (SPLIT)
                (("1" (REPLACES (-1 -2))
                  (("1" (SKOLEM -2 ("x" "y"))
                    (("1" (SKOLEM -3 ("u" "v"))
                      (("1" (INST -1 "a" "b * c")
                        (("1" (SPLIT)
                          (("1" (ASSERT)
                            (("1"
                              (CASE "(x * b + y * a) * (u * c + v * a) = 1")
                              (("1" (INST 1 "u*x" "a*v*y+c*u*y+b*v*x")
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (REPLACES -) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rel_prime_lem| FORMULA-DECL NIL |gcd| |ints|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rel_prime| CONST-DECL "bool" |gcd| |ints|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|gcd_one_pot_eq_one_TCC1| 0
  (|gcd_one_pot_eq_one_TCC1-1| NIL 3947077224 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_pot_eq_one| SUBTYPE "number_util.b"
    "{jj: integers.int | booleans.=>(number_util.a = 0, jj /= 0)}")))
 (|gcd_one_pot_eq_one_TCC2| 0
  (|gcd_one_pot_eq_one_TCC2-1| NIL 3947077224 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_pot_eq_one| SUBTYPE "number_util.i"
    "{i: integers.int | booleans.OR(number_util.a /= 0, reals.>=(i, 0))}")))
 (|gcd_one_pot_eq_one_TCC3| 0
  (|gcd_one_pot_eq_one_TCC3-1| NIL 3947077224 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_pot_eq_one| SUBTYPE "number_util.j"
    "{i: integers.int | booleans.OR(number_util.b /= 0, reals.>=(i, 0))}")))
 (|gcd_one_pot_eq_one_TCC4| 0
  (|gcd_one_pot_eq_one_TCC4-1| NIL 3947077224 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|gcd_one_pot_eq_one| SUBTYPE
    "exponentiation.^(number_util.b, number_util.j)"
    "{jj: integers.int | booleans.=>(exponentiation.^(number_util.a, number_util.i) = 0, jj /= 0)}")))
 (|gcd_one_pot_eq_one| 0
  (|gcd_one_pot_eq_one-1| NIL 3947077226
   ("" (SKEEP)
    ((""
      (CASE
          "FORALL(a, b:nzint): FORALL(i:nat): gcd(a,b) = 1 => gcd(a,b^i) = 1")
      (("1" (INST-CP -1 "a" "b" "j")
        (("1" (ASSERT)
          (("1" (INST -1 "b^j" "a" "i")
            (("1" (REWRITE "gcd_sym")
              (("1" (ASSERT) (("1" (REWRITE "gcd_sym") NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT 1)
        (("2" (SKEEP)
          (("2" (MEASURE-INDUCT "i" "i")
            (("2" (SKEEP)
              (("2" (CASE-REPLACE "x = 0")
                (("1" (HIDE -)
                  (("1" (EXPAND "^")
                    (("1" (EXPAND "expt")
                      (("1" (REWRITE "gcd_one_right") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "x-1")
                  (("1" (ASSERT)
                    (("1" (EXPAND "^")
                      (("1" (EXPAND "expt" 2)
                        (("1" (REWRITE "gcd_one_prod_eq_one") NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|gcd| CONST-DECL "{k: posnat | divides(k, i) AND divides(k, j)}" |gcd|
     |ints|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|gcd_sym| FORMULA-DECL NIL |gcd| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|gcd_one_prod_eq_one| FORMULA-DECL NIL |number_util| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|gcd_one_right| FORMULA-DECL NIL |number_util| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|divides_gcd_one| 0
  (|divides_gcd_one-1| NIL 3945276167
   ("" (SKEEP)
    (("" (EXPAND "divides")
      (("" (SKEEP)
        (("" (SKOLEM -4 "y")
          (("" (REPLACE -3 -4)
            (("" (LEMMA "product_eq_gcd_one")
              (("" (INST?)
                (("" (ASSERT)
                  (("" (SPLIT)
                    (("1" (EXPAND "divides")
                      (("1" (SKOLEM -1 "z")
                        (("1" (REPLACES -1)
                          (("1" (REPLACE -4 -3 LR HIDE)
                            (("1" (INST 1 "z") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|product_eq_gcd_one| FORMULA-DECL NIL |number_util| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|prod_selection_prop_TCC1| 0
  (|prod_selection_prop_TCC1-1| NIL 3945103258 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|prod_selection_prop| SUBTYPE "0" "T_low[nat]")))
 (|prod_selection_prop_TCC2| 0
  (|prod_selection_prop_TCC2-1| NIL 3945103258 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|prod_selection_prop| SUBTYPE "number_util.n" "T_high[nat]")))
 (|prod_selection_prop_TCC3| 0
  (|prod_selection_prop_TCC4-1| NIL 3945103258 ("" (ASSUMING-TCC) NIL NIL) NIL
   NIL
   (|prod_selection_prop| ASSUMING "ints@product[nat].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (|prod_selection_prop| 0
  (|prod_selection_prop-1| NIL 3945103260
   ("" (MEASURE-INDUCT "n" "n")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 0")
          (("1" (EXPAND "product")
            (("1" (EXPAND "product")
              (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (EXPAND "product" 2)
                (("1" (LIFT-IF)
                  (("1" (PROP)
                    (("1"
                      (CASE
                          "FORALL(m: nat| m < i): product[nat](0, m, a) = product[nat]
              (0, m, LAMBDA (j: nat): IF j = i THEN 1 ELSE a(j) ENDIF)")
                      (("1" (INST -1 "x-1")
                        (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (MEASURE-INDUCT "m" "m")
                          (("2" (SKEEP)
                            (("2" (CASE-REPLACE "x!1 = 0")
                              (("1" (EXPAND "product")
                                (("1" (EXPAND "product")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL)
                               ("2" (INST -1 "x!1-1")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "product" 2)
                                    (("1" (REPLACES -1) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "i < x")
                      (("1" (INST -2 "a" "i")
                        (("1" (REPLACES -2) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|product| DEF-DECL "int" |product| |ints|)
    (|T_high| TYPE-EQ-DECL NIL |product| |ints|)
    (|T_low| TYPE-EQ-DECL NIL |product| |ints|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)))

