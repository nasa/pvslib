(|Cauchy_product|
 (|sigma_reverse_TCC1| 0
  (|sigma_reverse_TCC1-1| NIL 3949570415 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sigma_reverse| SUBTYPE "0" "T_low[below[1 + n]]")))
 (|sigma_reverse_TCC2| 0
  (|sigma_reverse_TCC2-1| NIL 3949570415 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sigma_reverse| SUBTYPE "Cauchy_product.n" "T_high[below[1 + n]]")))
 (|sigma_reverse_TCC3| 0
  (|sigma_reverse_TCC3-1| NIL 3949570415 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|sigma_reverse| ASSUMING "reals@sigma[below[1 + n]].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (|sigma_reverse_TCC4| 0
  (|sigma_reverse_TCC4-1| NIL 3949570415 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sigma_reverse| SUBTYPE
    "(number_fields.-)(Cauchy_product.n, Cauchy_product.i)" "nat")))
 (|sigma_reverse| 0
  (|sigma_reverse-1| NIL 3949570416
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "n" "n")
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 0")
          (("1" (HIDE -)
            (("1" (EXPAND "sigma")
              (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1"
                (CASE-REPLACE
                 "sigma[below[x]](0, x - 1, LAMBDA (i: below[x]): a(i)) = sigma[below[1 + x]](0, x - 1, LAMBDA (i: below[1 + x]): a(i))")
                (("1" (HIDE -1)
                  (("1" (EXPAND "sigma" 2 1)
                    (("1" (REPLACES -1)
                      (("1" (REWRITE "sigma_first[below[1+x]]")
                        (("1" (ASSERT)
                          (("1"
                            (CASE
                                "FORALL(n: below[x]):  sigma[below[x]](0, n, LAMBDA (i: below[x]): a(-1 - i + x)) =
       sigma[below[1 + x]](1, n+1, LAMBDA (i: below[1 + x]): a(x - i))")
                            (("1" (INST -1 "x-1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (HIDE 2 3)
                              (("2" (MEASURE-INDUCT "n" "n")
                                (("1" (SKEEP)
                                  (("1" (CASE-REPLACE "x_1 = 0")
                                    (("1" (HIDE -)
                                      (("1" (EXPAND "sigma")
                                        (("1" (EXPAND "sigma")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST -1 "x_1-1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma" 2 (1 2))
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE 2 3) (("3" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (REWRITE "sigma_diff_eq") NIL NIL)) NIL)
                 ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sigma_diff_eq| FORMULA-DECL NIL |sigma_below_sub| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma_first| FORMULA-DECL NIL |sigma| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|partial_sum_aux| 0
  (|partial_sum_aux-1| NIL 3947925592
   ("" (SKEEP)
    (("" (SKEEP)
      ((""
        (CASE "FORALL(a, b: sequence[real]): FORALL(n: nat):
      conv_sum(a, b, n) =
          sigma[below[n+1]](0, n, LAMBDA(i:below[n+1]): a(i) * series(b)(n-i))")
        (("1" (INST -1 "a" "b" "n")
          (("1" (LEMMA "sigma_reverse")
            (("1"
              (INST -1
               "LAMBDA(i:nat): IF i <= n THEN a(i) * series(b)(n - i) ELSE 0 ENDIF"
               "n")
              (("1"
                (CASE-REPLACE "sigma[below[1 + n]]
          (0, n,
           LAMBDA (i_1: below[1 + n]):
             IF i_1 <= n THEN a(i_1) * series(b)(n - i_1) ELSE 0 ENDIF) = sigma[below[1 + n]](0, n,
           LAMBDA (i_1: below[1 + n]):
             a(i_1) * series(b)(n - i_1))")
                (("1" (HIDE -1)
                  (("1"
                    (CASE-REPLACE " sigma[below[1 + n]]
           (0, n,
            LAMBDA (i_1: below[1 + n]):
              IF n - i_1 <= n THEN a(n - i_1) * series(b)(n - (n - i_1))
              ELSE 0
              ENDIF) =  sigma[below[1 + n]](0, n,
            LAMBDA (i_1: below[1 + n]):a(n - i_1) * series(b)(n - (n - i_1)))")
                    (("1" (HIDE -1)
                      (("1" (SIMPLIFY -1) (("1" (REPLACES -1) NIL NIL)) NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (REWRITE "sigma_eq[below[n+1]]") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (REWRITE "sigma_eq[below[n+1]]") NIL NIL)) NIL))
                NIL)
               ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKEEP)
            (("2" (EXPAND "conv_sum")
              (("2" (EXPAND "series")
                (("2" (MEASURE-INDUCT "n" "n")
                  (("2" (SKEEP)
                    (("2" (CASE-REPLACE "x = 0")
                      (("1" (HIDE -2)
                        (("1" (EXPAND "sigma")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (INST -1 "x-1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "sigma" 2 1)
                            (("1" (REPLACES -1)
                              (("1" (EXPAND "sigma" 2 5)
                                (("1" (REWRITE "sigma_sum[below[1+x]]" :DIR RL)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "sigma" 2 3)
                                      (("1" (EXPAND "sigma" 2 5)
                                        (("1" (REWRITE "sigma_diff_eq") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sigma_sum| FORMULA-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_diff_eq| FORMULA-DECL NIL |sigma_below_sub| |reals|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_reverse| FORMULA-DECL NIL |Cauchy_product| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|conv_sum| CONST-DECL "real" |Cauchy_product| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|Cauchy_product_aux| 0
  (|Cauchy_product_aux-1| NIL 3947929821
   ("" (SKEEP)
    (("" (LEMMA "partial_sum_aux")
      (("" (INST -1 "a" "b" "n")
        (("" (REPLACES -1)
          ((""
            (NAME-REPLACE "f" "LAMBDA (i: below[1 + n]):
               a(n - i) * (series(b)(i) - inf_sum(b))")
            ((""
              (CASE-REPLACE "f = LAMBDA (i: below[1 + n]):
               a(n - i) * series(b)(i) - a(n - i) * inf_sum(b)")
              (("1" (HIDE -1)
                (("1" (LEMMA "sigma_minus[below[n+1]]")
                  (("1"
                    (INST -1
                     "LAMBDA (i: below[1 + n]): a(n - i) * series(b)(i)"
                     "LAMBDA (i: below[1 + n]): a(n - i) * inf_sum(b)" "n" "0")
                    (("1" (REPLACE -1 1 RL HIDE)
                      (("1"
                        (CASE-REPLACE
                         "sigma[below[n+1]](0, n, LAMBDA (i: below[1 + n]): a(n - i) * inf_sum(b)) = series(a)(n) * inf_sum(b)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (REWRITE "sigma_scal_right[below[n+1]]")
                            (("2" (LEMMA "sigma_reverse")
                              (("2" (INST -1 "a" "n")
                                (("2" (REPLACE -1 1 RL HIDE)
                                  (("2"
                                    (CASE
                                        "FORALL(n:nat): sigma[below[1 + n]](0, n, LAMBDA (i: below[1 + n]): a(i)) = series(a)(n)")
                                    (("1" (INST -1 "n")
                                      (("1" (REPLACES -1) NIL NIL)) NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "series")
                                        (("2" (MEASURE-INDUCT "n" "n")
                                          (("2" (SKEEP)
                                            (("2" (CASE-REPLACE "x = 0")
                                              (("1" (HIDE -)
                                                (("1" (EXPAND "sigma")
                                                  (("1" (EXPAND "sigma")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -1 "x-1")
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "sigma" 2)
                                                    (("1"
                                                      (REPLACE -1 2 RL HIDE)
                                                      (("1"
                                                        (REWRITE
                                                         "sigma_diff_eq")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (DECOMPOSE-EQUALITY)
                  (("2" (EXPAND "f") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|partial_sum_aux| FORMULA-DECL NIL |Cauchy_product| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sigma_minus| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_reverse| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sigma_diff_eq| FORMULA-DECL NIL |sigma_below_sub| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_scal_right| FORMULA-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Cauchy_prod_ineq_aux| 0
  (|Cauchy_prod_ineq_aux-1| NIL 3949748139
   ("" (SKEEP)
    (("" (PROP)
      (("1" (LEMMA "both_sides_div_pos_lt1")
        (("1" (INST -1 "1+x" "0" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
       ("2" (LEMMA "both_sides_div_pos_lt1")
        (("2" (INST -1 "x+1" "x" "x+1")
          (("2" (FLATTEN)
            (("2" (HIDE -1)
              (("2" (ASSERT) (("2" (REWRITE "div_simp") NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|Cauchy_product_ineq1| 0
  (|Cauchy_product_ineq1-1| NIL 3949575765
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (EXPAND "convergent?" -1)
        (("" (SKEEP)
          (("" (LEMMA "limit_equiv")
            (("" (INST?)
              (("" (FLATTEN)
                (("" (HIDE -2)
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (REPLACE -2 -3 RL HIDE)
                        (("" (EXPAND "convergence")
                          (("" (HIDE -1)
                            (("" (INST -1 "epsilon/(abs(inf_sum(b))+1)")
                              (("1" (SKOLEM -1 "N")
                                (("1" (INST 1 "N")
                                  (("1" (SKEEP)
                                    (("1" (INST -1 "n")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "inf_sum")
                                          (("1"
                                            (LEMMA "both_sides_times_pos_lt1")
                                            (("1"
                                              (INST -1 "abs(limit(series(b)))"
                                               "abs(series(a)(n) - limit(series(a)))"
                                               "epsilon / (1 + abs(limit(series(b))))")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (HIDE -2)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         " epsilon / (1 + abs(limit(series(b)))) * abs(limit(series(b))) =  epsilon * (abs(limit(series(b)))/(1 + abs(limit(series(b)))))")
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (LEMMA
                                                             "Cauchy_prod_ineq_aux")
                                                            (("1" (INST?)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "lt_times_lt_pos1")
                                                                  (("1"
                                                                    (INST -1
                                                                     " abs(limit(series(b))) / (1 + abs(limit(series(b))))"
                                                                     "epsilon"
                                                                     "1"
                                                                     "epsilon")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (CASE-REPLACE
                                                 "abs(limit(series(b))) = 0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "conv_series?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit_equiv| FORMULA-DECL NIL |convergence_ops| |analysis|)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Cauchy_prod_ineq_aux| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|b| SKOLEM-CONST-DECL "sequence[real]" |Cauchy_product| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|))
   SHOSTAK))
 (|Cauchy_product_ineq2_TCC1| 0
  (|Cauchy_product_ineq2_TCC1-1| NIL 3949594825 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|))
   NIL
   (|Cauchy_product_ineq2| SUBTYPE "Cauchy_product.N" "T_low[below[1 + n]]")))
 (|Cauchy_product_ineq2| 0
  (|Cauchy_product_ineq2-1| NIL 3949594826
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (EXPAND "convergent?" -2)
        (("" (SKEEP)
          (("" (LEMMA "limit_equiv")
            (("" (INST?)
              (("" (FLATTEN)
                (("" (HIDE -2)
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (REPLACE -2 -4 RL HIDE)
                        (("" (EXPAND "convergence")
                          (("" (CASE "inf_sum(abs(a))+1 > 0")
                            (("1" (INST -4 "epsilon/(inf_sum(abs(a))+1)")
                              (("1" (SKOLEM -4 "N")
                                (("1" (INST 1 "N")
                                  (("1" (SKEEP)
                                    (("1" (LEMMA "sigma_le[below[1+n]]")
                                      (("1"
                                        (INST -1 "LAMBDA (i: below[1 + n]):
             abs(a(n - i)) * abs(series(b)(i) - inf_sum(b))"
                                         " LAMBDA (i: below[1 + n]): abs(a(n - i)) * (epsilon / (inf_sum(abs(a)) + 1))"
                                         "n" "N")
                                        (("1" (ASSERT)
                                          (("1" (PROP)
                                            (("1"
                                              (REWRITE
                                               "sigma_scal_right[below[n+1]]")
                                              (("1"
                                                (CASE
                                                    "sigma[below[n+1]](N, n, LAMBDA (i: below[1 + n]): abs(a(n - i))) <= inf_sum(abs(a))")
                                                (("1" (HIDE -6)
                                                  (("1"
                                                    (NAME-REPLACE "sum_N_n"
                                                     "sigma[below[n + 1]](N, n, LAMBDA (i: below[1 + n]): abs(a(n - i)))")
                                                    (("1"
                                                      (LEMMA "le_times_le_pos")
                                                      (("1"
                                                        (INST -1 "sum_N_n"
                                                         "(epsilon / (1 + inf_sum(abs(a))))"
                                                         "(epsilon / (1 + inf_sum(abs(a))))"
                                                         "inf_sum(abs(a))")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "inf_sum(abs(a)) * (epsilon / (1 + inf_sum(abs(a)))) = epsilon * (inf_sum(abs(a)) / (1 + inf_sum(abs(a))))")
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (CASE
                                                                    "epsilon * (inf_sum(abs(a)) / (1 + inf_sum(abs(a)))) < epsilon")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 1))
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Cauchy_prod_ineq_aux")
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "lt_times_lt_pos1")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "inf_sum(abs(a)) / (1 + inf_sum(abs(a)))"
                                                                             "epsilon"
                                                                             "1"
                                                                             "epsilon")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (-3 1))
                                                          (("2" (EXPAND ">")
                                                            (("2" (EXPAND ">=")
                                                              (("2"
                                                                (LEMMA
                                                                 "both_sides_div_pos_le1")
                                                                (("2"
                                                                  (INST -1
                                                                   "1 + inf_sum(abs(a))"
                                                                   "0"
                                                                   "epsilon")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-2 -4 1))
                                                  (("2"
                                                    (CASE
                                                        "sigma[below[n + 1]](N, n, LAMBDA (i: below[1 + n]): abs(a(n - i))) <= sigma[below[n + 1]](0, n, LAMBDA (i: below[1 + n]): abs(a(n - i)))")
                                                    (("1"
                                                      (LEMMA "sigma_reverse")
                                                      (("1"
                                                        (INST -1
                                                         "LAMBDA(i:nat): IF i <= n THEN abs(a(n-i)) ELSE 0 ENDIF"
                                                         "n")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "sigma[below[1 + n]]
          (0, n,
           LAMBDA (i_1: below[1 + n]):
             IF i_1 <= n THEN abs(a(n - i_1)) ELSE 0 ENDIF) = sigma[below[1 + n]]
          (0, n,
           LAMBDA (i_1: below[1 + n]): abs(a(n - i_1)))")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "sigma[below[1 + n]]
           (0, n,
            LAMBDA (i_1: below[1 + n]):
              IF n - i_1 <= n THEN abs(a(n - (n - i_1))) ELSE 0 ENDIF) =
         sigma(0, n, abs(a))")
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "limit_series_shift")
                                                                    (("1"
                                                                      (INST -1
                                                                       "abs(a)"
                                                                       "n+1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "inf_sum")
                                                                          (("1"
                                                                            (REPLACES
                                                                             -1)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "le_plus_le")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "limit(series(LAMBDA (n_1: nat): abs(a)(1 + n_1 + n)))"
                                                                                 "sigma[below[n + 1]](N, n, LAMBDA (i: below[1 + n]): abs(a(n - i)))"
                                                                                 "sigma(0, n, abs(a))"
                                                                                 "0")
                                                                                (("1"
                                                                                  (PROP)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "limit_nonneg")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "tail_series_conv")
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "series")
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "sigma_ge_0")
                                                                                                (("2"
                                                                                                  (SKEEP)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "abs")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   1)
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (SIMPLIFY 1)
                                                                  (("2"
                                                                    (CASE
                                                                        "FORALL(k:below[1+n]): sigma[below[1 + n]](0, k, LAMBDA (i_1: below[1 + n]): abs(a(i_1))) = sigma(0, k, abs(a))")
                                                                    (("1"
                                                                      (INST -1
                                                                       "n")
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (MEASURE-INDUCT
                                                                         "k"
                                                                         "k")
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (CASE-REPLACE
                                                                             "x = 0")
                                                                            (("1"
                                                                              (HIDE
                                                                               -2)
                                                                              (("1"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (INST
                                                                               -1
                                                                               "x-1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "sigma"
                                                                                   2)
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (HIDE 2)
                                                                      (("3"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT 1)
                                                            (("2"
                                                              (REWRITE
                                                               "sigma_eq[below[n+1]]")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (SKEEP)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE 2)
                                                      (("2"
                                                        (LEMMA
                                                         "sigma_split[below[n+1]]")
                                                        (("2"
                                                          (INST -1
                                                           "LAMBDA (i: below[1 + n]): abs(a(n - i))"
                                                           "n" "0" "N-1")
                                                          (("2" (ASSERT)
                                                            (("2" (REPLACES -1)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-4 1))
                                              (("2" (SKOLEM 1 "i")
                                                (("2" (INST -1 "i")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA
                                                       "both_sides_times_pos_lt2")
                                                      (("2"
                                                        (INST -1
                                                         "abs(a(n - i))"
                                                         "abs(series(b)(i) - inf_sum(b))"
                                                         "epsilon / (1 + inf_sum(abs(a)))")
                                                        (("2" (FLATTEN)
                                                          (("2" (HIDE -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "inf_sum")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP) (("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("3" (SKEEP)
                                          (("3" (EXPAND "conv_series?")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2"
                                  (CASE " epsilon / (1 + inf_sum(abs(a))) > 0")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (EXPAND ">")
                                      (("2" (LEMMA "both_sides_div_pos_lt1")
                                        (("2"
                                          (INST -1 "1 + inf_sum(abs(a))" "0"
                                           "epsilon")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-2 1))
                              (("2" (EXPAND "inf_sum")
                                (("2" (LEMMA "limit_nonneg")
                                  (("2" (INST?)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE -1 2)
                                      (("2" (SKEEP)
                                        (("2" (EXPAND "series")
                                          (("2" (LEMMA "sigma_ge_0")
                                            (("2" (INST?)
                                              (("2" (PROP)
                                                (("2" (SKEEP)
                                                  (("2" (EXPAND "abs")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "conv_series?")
                              (("3" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit_equiv| FORMULA-DECL NIL |convergence_ops| |analysis|)
    (|abs| CONST-DECL "sequence[real]" |series| |series|)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|b| SKOLEM-CONST-DECL "sequence[real]" |Cauchy_product| NIL)
    (|n| SKOLEM-CONST-DECL "{n: nat | n >= N}" |Cauchy_product| NIL)
    (N SKOLEM-CONST-DECL "nat" |Cauchy_product| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Cauchy_prod_ineq_aux| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|x| SKOLEM-CONST-DECL "below[1 + n]" |Cauchy_product| NIL)
    (|limit_series_shift| FORMULA-DECL NIL |series| |series|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|tail_series_conv| FORMULA-DECL NIL |series| |series|)
    (|sigma_ge_0| FORMULA-DECL NIL |sigma| |reals|)
    (|limit_nonneg| FORMULA-DECL NIL |series_lems| |series|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|le_plus_le| FORMULA-DECL NIL |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sigma_reverse| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|sigma_scal_right| FORMULA-DECL NIL |sigma| |reals|)
    (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|epsilon| SKOLEM-CONST-DECL "posreal" |Cauchy_product| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|a| SKOLEM-CONST-DECL "sequence[real]" |Cauchy_product| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|))
   SHOSTAK))
 (|conv_ineq_aux_exists| 0
  (|conv_ineq_aux_exists-1| NIL 3949755305
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "nonempty?")
        (("1" (EXPAND "empty?")
          (("1" (INST -1 "abs(series(b)(0) - inf_sum(b))")
            (("1" (EXPAND "member") (("1" (INST 1 "0") NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "b")
        (("2" (EXPAND "conv_series?")
          (("2" (REWRITE "convergence_cauchy")
            (("2" (LEMMA "cauchy_bounded")
              (("2" (INST -1 "series(b)")
                (("2" (ASSERT)
                  (("2" (PROP)
                    (("2" (EXPAND "bounded_above?")
                      (("2" (SKOLEM -1 "p")
                        (("2" (EXPAND "bounded_below?")
                          (("2" (SKOLEM -2 "m")
                            (("2" (EXPAND "above_bounded")
                              (("2" (INST 1 "max(-m,p)+abs(-inf_sum(b))")
                                (("2" (EXPAND "upper_bound")
                                  (("2" (SKEEP)
                                    (("2" (TYPEPRED "z")
                                      (("2" (SKEEP)
                                        (("2" (REPLACES -1)
                                          (("2" (REWRITE "add_neg" :DIR RL)
                                            (("2" (LEMMA "triangle")
                                              (("2" (INST?)
                                                (("2" (INST -2 "i")
                                                  (("2" (INST -3 "i")
                                                    (("2"
                                                      (CASE
                                                          "abs(series(b)(i)) <= max(-m, p)")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (HIDE -1 -4 2)
                                                        (("2"
                                                          (EXPAND "abs" 1 1)
                                                          (("2" (LIFT-IF)
                                                            (("2" (PROP)
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL NIL NIL
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|cauchy_bounded| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|above_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence_cauchy| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|conv_ineq_aux_TCC1| 0
  (|conv_ineq_aux_TCC1-1| NIL 3949642423
   ("" (LEMMA "conv_ineq_aux_exists") (("" (PROPAX) NIL NIL)) NIL)
   ((|conv_ineq_aux_exists| FORMULA-DECL NIL |Cauchy_product| NIL)) NIL
   (|conv_ineq_aux| SUBTYPE
    "{x: reals.real | EXISTS (i: naturalnumbers.nat): x = real_defs.abs((number_fields.-)(series.series(Cauchy_product.b)(i), series.inf_sum(Cauchy_product.b)))}"
    "sup_set[real]")))
 (|conv_ineq_aux_TCC2| 0
  (|conv_ineq_aux_TCC2-1| NIL 3949755092
   ("" (SKEEP)
    ((""
      (TYPEPRED "sup[real]
          ({x: real | EXISTS (i: nat): x = abs(series(b)(i) - inf_sum(b))})")
      (("1" (EXPAND "least_upper_bound")
        (("1" (PROP)
          (("1" (HIDE -2)
            (("1" (EXPAND "upper_bound")
              (("1" (INST -1 "abs(series(b)(0) - inf_sum(b))")
                (("1" (ASSERT) NIL NIL) ("2" (INST 1 "0") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (REWRITE "conv_ineq_aux_exists") NIL NIL))
      NIL))
    NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|conv_ineq_aux_exists| FORMULA-DECL NIL |Cauchy_product| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upper_bound| CONST-DECL "bool" |bound_defs| |reals|) NIL NIL NIL
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|sup| CONST-DECL "{x | least_upper_bound(<=)(x, Su)}" |bounded_reals|
     |reals|)
    (|above_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|sup_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|least_upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|conv_ineq_aux| SUBTYPE
    "bounded_reals[real].sup({x: reals.real | EXISTS (i: naturalnumbers.nat): x = real_defs.abs((number_fields.-)(series.series(Cauchy_product.b)(i), series.inf_sum(Cauchy_product.b)))})"
    "nnreal")))
 (|Cauchy_product_ineq3_TCC1| 0
  (|Cauchy_product_ineq3_TCC1-1| NIL 3949610830 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|))
   NIL
   (|Cauchy_product_ineq3| SUBTYPE "(number_fields.-)(Cauchy_product.k, 1)"
    "T_high[below[1 + n]]")))
 (|Cauchy_product_ineq3| 0
  (|Cauchy_product_ineq3-1| NIL 3949610836
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (LEMMA "series_limit_0")
        (("" (INST -1 "a")
          (("" (ASSERT)
            (("" (REWRITE "limit_def")
              (("" (EXPAND "convergence")
                (("" (CASE "0 < conv_ineq_aux(b)+1")
                  (("1" (INST -2 "epsilon/k/(conv_ineq_aux(b)+1)")
                    (("1" (SKOLEM -2 "N")
                      (("1" (INST 1 "N+k")
                        (("1" (SKEEP)
                          (("1" (LEMMA "sigma_le[below[1+n]]")
                            (("1"
                              (INST -1
                               "LAMBDA (i: below[1 + n]): abs(a(n - i)) * abs(series(b)(i) - inf_sum(b))"
                               "LAMBDA (i: below[1 + n]): epsilon / k / (conv_ineq_aux(b) + 1) * conv_ineq_aux(b)"
                               "k-1" "0")
                              (("1" (PROP)
                                (("1" (LEMMA "sigma_const[below[n+1]]")
                                  (("1"
                                    (INST -1 "k-1" "0"
                                     "epsilon / k / (conv_ineq_aux(b) + 1) * conv_ineq_aux(b)")
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1" (REPLACES -1)
                                          (("1"
                                            (CASE-REPLACE
                                             "k * ((epsilon / k / (1 + conv_ineq_aux(b))) * conv_ineq_aux(b)) = epsilon * (conv_ineq_aux(b) / (1 + conv_ineq_aux(b)))")
                                            (("1"
                                              (CASE
                                                  "epsilon * (conv_ineq_aux(b) / (1 + conv_ineq_aux(b))) < epsilon")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2"
                                                  (LEMMA
                                                   "Cauchy_prod_ineq_aux")
                                                  (("2" (INST?)
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1")
                                                        (("2"
                                                          (INST -1 "epsilon"
                                                           "(conv_ineq_aux(b) / (1 + conv_ineq_aux(b)))"
                                                           "1")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-2 1))
                                              (("2"
                                                (CASE-REPLACE
                                                 "k * ((epsilon / k / (1 + conv_ineq_aux(b))) * conv_ineq_aux(b)) = (k * (epsilon / k))/ (1 + conv_ineq_aux(b)) * conv_ineq_aux(b)")
                                                (("2" (HIDE 2)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (SKOLEM 1 "i")
                                    (("2" (INST -2 "n-i")
                                      (("2" (ASSERT)
                                        (("2"
                                          (CASE
                                              "abs(series(b)(i) - inf_sum(b)) <= conv_ineq_aux(b)")
                                          (("1" (LEMMA "lt_times_lt_pos1")
                                            (("1"
                                              (INST -1 "abs(a(n - i))"
                                               "abs(series(b)(i) - inf_sum(b))"
                                               "epsilon / k / (1 + conv_ineq_aux(b))"
                                               "conv_ineq_aux(b)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT (-4 1))
                                            (("2" (EXPAND "conv_ineq_aux")
                                              (("2"
                                                (TYPEPRED
                                                 "sup({x: real | EXISTS (i: nat): x = abs(series(b)(i) - inf_sum(b))})")
                                                (("1"
                                                  (EXPAND "least_upper_bound")
                                                  (("1" (PROP)
                                                    (("1" (HIDE -2)
                                                      (("1"
                                                        (EXPAND "upper_bound")
                                                        (("1"
                                                          (INST -1
                                                           "abs(series(b)(i) - inf_sum(b))")
                                                          (("1" (INST 1 "i")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (REWRITE
                                                   "conv_ineq_aux_exists")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL)
                   ("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|series_limit_0| FORMULA-DECL NIL |series| |series|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Cauchy_prod_ineq_aux| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sigma_const| FORMULA-DECL NIL |sigma| |reals|)
    (|sup| CONST-DECL "{x | least_upper_bound(<=)(x, Su)}" |bounded_reals|
     |reals|)
    (|above_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|sup_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|least_upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|b| SKOLEM-CONST-DECL "sequence[real]" |Cauchy_product| NIL)
    (|k| SKOLEM-CONST-DECL "posnat" |Cauchy_product| NIL)
    (|i| SKOLEM-CONST-DECL "subrange(0, k - 1)" |Cauchy_product| NIL)
    (|conv_ineq_aux_exists| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inf_sum| CONST-DECL "real" |series| |series|)
    (|series| CONST-DECL "sequence[real]" |series| |series|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|conv_ineq_aux| CONST-DECL "nnreal" |Cauchy_product| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit_def| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|conv_series?| CONST-DECL "bool" |series| |series|))
   SHOSTAK))
 (|Cauchy_product_convergence_TCC1| 0
  (|Cauchy_product_convergence_TCC1-1| NIL 3949670673
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (LEMMA "series.convergent_abs")
        (("" (INST -1 "a") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|convergent_abs| FORMULA-DECL NIL |series| |series|))
   NIL
   (|Cauchy_product_convergence| SUBTYPE "Cauchy_product.a"
    "(series.conv_series?)")))
 (|Cauchy_product_convergence| 0
  (|Cauchy_product_convergence-1| NIL 3949670686
   ("" (SKEEP)
    (("" (EXPAND "convergence")
      (("" (SKEEP)
        (("" (LEMMA "Cauchy_product_ineq1")
          (("" (INST -1 "a" "b" "epsilon/3")
            (("" (ASSERT)
              (("" (PROP)
                (("1" (SKOLEM -1 "L")
                  (("1" (LEMMA "Cauchy_product_ineq2")
                    (("1" (INST -1 "a" "b" "epsilon/3")
                      (("1" (ASSERT)
                        (("1" (SKEEP)
                          (("1" (LEMMA "Cauchy_product_ineq3")
                            (("1" (INST -1 "a" "b" "epsilon/3" "N")
                              (("1" (ASSERT)
                                (("1" (PROP)
                                  (("1" (SKOLEM -1 "M")
                                    (("1" (INST 1 "max(L, M)")
                                      (("1" (SKOLEM 1 "j")
                                        (("1" (PROP)
                                          (("1" (INST -1 "j")
                                            (("1" (INST -2 "j")
                                              (("1" (INST -3 "j")
                                                (("1" (EXPAND "series" 1)
                                                  (("1"
                                                    (CASE-REPLACE "sigma(0, j,
                LAMBDA (i: nat):
                  sigma[below[i + 1]]
                      (0, i, LAMBDA (j: below[i + 1]): a(j) * b(i - j))) = conv_sum(a, b, j)")
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (REWRITE
                                                         "Cauchy_product_aux")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))
           + series(a)(j) * inf_sum(b)
           - inf_sum(a) * inf_sum(b) = sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))
           + (series(a)(j) - inf_sum(a)) * inf_sum(b)")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (LEMMA
                                                               "triangle")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (CASE
                                                                      "abs(sigma[below[1 + j]]
               (0, j,
                LAMBDA (i: below[1 + j]):
                  series(b)(i) * a(j - i) - a(j - i) * inf_sum(b)))
        + abs((series(a)(j) - inf_sum(a)) * inf_sum(b)) < epsilon")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (CASE
                                                                          " abs(sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))) < epsilon-epsilon/3")
                                                                      (("1"
                                                                        (HIDE-ALL-BUT
                                                                         (-1 -5
                                                                          1))
                                                                        (("1"
                                                                          (REWRITE
                                                                           "abs_mult")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         (-1 -4
                                                                          2))
                                                                        (("2"
                                                                          (LEMMA
                                                                           "sigma_abs[below[j+1]]")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b)"
                                                                             "j"
                                                                             "0")
                                                                            (("2"
                                                                              (CASE
                                                                                  "sigma[below[j+1]](0, j,
             LAMBDA (n: below[1 + j]):
               abs(series(b)(n) * a(j - n) - a(j - n) * inf_sum(b))) < epsilon - epsilon / 3")
                                                                              (("1"
                                                                                (HIDE
                                                                                 -5
                                                                                 -6
                                                                                 -7)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 -1
                                                                                 2)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "sigma_eq[below[j+1]]")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "LAMBDA (n: below[1 + j]):
             abs(series(b)(n) * a(j - n) - a(j - n) * inf_sum(b))"
                                                                                     "LAMBDA (i: below[1 + j]):
             abs(a(j - i)) * abs(series(b)(i) - inf_sum(b))"
                                                                                     "j"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (REPLACES
                                                                                         -1)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "sigma_split[below[j+1]]")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "LAMBDA (i: below[1 + j]):
              abs(a(j - i)) * abs(series(b)(i) - inf_sum(b))"
                                                                                             "j"
                                                                                             "0"
                                                                                             "N-1")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("2"
                                                                                          (SKOLEM
                                                                                           1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "abs_mult"
                                                                                             :DIR
                                                                                             RL)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND
                                                           "conv_series?")
                                                          (("2"
                                                            (REWRITE
                                                             "convergent_abs")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "conv_sum")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "conv_series?")
                                    (("2" (REWRITE "convergent_abs") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE "N = 0")
                                (("1" (HIDE 1)
                                  (("1" (INST 1 "L")
                                    (("1" (SKOLEM 1 "j")
                                      (("1" (PROP)
                                        (("1" (INST -2 "j")
                                          (("1" (INST -3 "j")
                                            (("1" (EXPAND "series" 1)
                                              (("1"
                                                (CASE-REPLACE "sigma(0, j,
                LAMBDA (i: nat):
                  sigma[below[i + 1]]
                      (0, i, LAMBDA (j: below[i + 1]): a(j) * b(i - j))) = conv_sum(a, b, j)")
                                                (("1" (HIDE -1)
                                                  (("1"
                                                    (REWRITE
                                                     "Cauchy_product_aux")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))
           + series(a)(j) * inf_sum(b)
           - inf_sum(a) * inf_sum(b) = sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))
           + (series(a)(j) - inf_sum(a)) * inf_sum(b)")
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (LEMMA "triangle")
                                                          (("1" (INST?)
                                                            (("1"
                                                              (CASE
                                                                  "abs(sigma[below[1 + j]]
               (0, j,
                LAMBDA (i: below[1 + j]):
                  series(b)(i) * a(j - i) - a(j - i) * inf_sum(b)))
        + abs((series(a)(j) - inf_sum(a)) * inf_sum(b)) < epsilon")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (CASE
                                                                      " abs(sigma[below[1 + j]]
              (0, j,
               LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b))) < epsilon/3")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 -5 1))
                                                                    (("1"
                                                                      (REWRITE
                                                                       "abs_mult")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE
                                                                     (-1 -4 2))
                                                                    (("2"
                                                                      (LEMMA
                                                                       "sigma_abs[below[j+1]]")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "LAMBDA (i: below[1 + j]):
                 series(b)(i) * a(j - i) - a(j - i) * inf_sum(b)"
                                                                         "j"
                                                                         "0")
                                                                        (("2"
                                                                          (CASE
                                                                              "sigma[below[j+1]](0, j,
             LAMBDA (n: below[1 + j]):
               abs(series(b)(n) * a(j - n) - a(j - n) * inf_sum(b))) < epsilon / 3")
                                                                          (("1"
                                                                            (HIDE
                                                                             -5
                                                                             -6
                                                                             -7)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "sigma_eq[below[j+1]]")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "LAMBDA (n: below[1 + j]):
             abs(series(b)(n) * a(j - n) - a(j - n) * inf_sum(b))"
                                                                                 "LAMBDA (i: below[1 + j]):
             abs(a(j - i)) * abs(series(b)(i) - inf_sum(b))"
                                                                                 "j"
                                                                                 "0")
                                                                                (("2"
                                                                                  (PROP)
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE-ALL-BUT
                                                                                     1)
                                                                                    (("2"
                                                                                      (SKOLEM
                                                                                       1
                                                                                       "i")
                                                                                      (("2"
                                                                                        (REWRITE
                                                                                         "abs_mult"
                                                                                         :DIR
                                                                                         RL)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2"
                                                      (EXPAND "conv_series?")
                                                      (("2"
                                                        (REWRITE
                                                         "convergent_abs")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "conv_sum")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "conv_series?")
                  (("2" (REWRITE "convergent_abs") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|Cauchy_product_ineq1| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|convergent_abs| FORMULA-DECL NIL |series| |series|)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|sigma_abs| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Cauchy_product_aux| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|conv_sum| CONST-DECL "real" |Cauchy_product| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|Cauchy_product_ineq3| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|Cauchy_product_ineq2| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Cauchy_product_conv| 0
  (|Cauchy_product_conv-1| NIL 3949596726
   ("" (SKEEP)
    (("" (EXPAND "conv_series?" 1)
      (("" (EXPAND "convergent?")
        (("" (LEMMA "Cauchy_product_convergence")
          (("" (INST -1 "a" "b")
            (("" (ASSERT) (("" (INST 1 "inf_sum(a) * inf_sum(b)") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Cauchy_product_convergence| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|))
   SHOSTAK))
 (|Cauchy_product_TCC1| 0
  (|Cauchy_product_TCC2-1| NIL 3949597335
   ("" (LEMMA "Cauchy_product_conv") (("" (PROPAX) NIL NIL)) NIL)
   ((|Cauchy_product_conv| FORMULA-DECL NIL |Cauchy_product| NIL)) NIL
   (|Cauchy_product| SUBTYPE
    "LAMBDA (i: naturalnumbers.nat): sigma[below[1 + i]].sigma(0, i, LAMBDA (j: nat_types[1 + i].below): number_fields.*(Cauchy_product.a(j), Cauchy_product.b((number_fields.-)(i, j))))"
    "(series.conv_series?)")))
 (|Cauchy_product| 0
  (|Cauchy_product-1| NIL 3949598315
   ("" (SKEEP)
    (("" (LEMMA "Cauchy_product_convergence")
      (("" (INST -1 "a" "b")
        (("" (ASSERT)
          (("" (EXPAND "inf_sum" 1 3)
            (("" (LEMMA "limit_equiv")
              (("" (INST?)
                (("" (FLATTEN) (("" (HIDE -2) (("" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Cauchy_product_convergence| FORMULA-DECL NIL |Cauchy_product| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|limit_equiv| FORMULA-DECL NIL |convergence_ops| |analysis|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

