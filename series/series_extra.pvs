%------------------------------------------------------------------------------
% Authors:
%
%		Bruno Berto de Oliveira Ribeiro
%		Universidade de Brasília - Brazil
%
% 		Thaynara Arielly de Lima
% 		Universidade Federal de Goiás - Brazil
%
%		Mauricio Ayala-Rincón
%		Universidade de Brasília - Brazil
%
%               Mariano M. Moscato
%               AMA @ NASA LaRC - USA
%
%------------------------------------------------------------------------------

series_extra: THEORY

  BEGIN

  IMPORTING series_aux, reals@sigma, ints@max_finite_set_nat,
            triangle_numbers, ints@sequence_extra, Cauchy_product

  %———— Triangle numbers aux

  Tri_strict_increasing: LEMMA
    FORALL(n: nat): FORALL(k:posnat): Tri(n) < Tri(n+k)

  Tri_lt: LEMMA
    FORALL(n, k: nat):
       Tri(n) < Tri(k) => n < k

  Tri_le: LEMMA
    FORALL(n, k: nat):
       Tri(n) <= Tri(k) => n <= k

  lower_inv_triang(k:nat): nat = max({n: nat| Tri(n) <= k})

  triang_num_id: LEMMA
   FORALL(n:nat, k:nat| k <= n): lower_inv_triang(Tri(n)+k) = n


  triang_decomp: LEMMA
    FORALL(i:nat): EXISTS(n:nat, k:nat| k <= n): i = Tri(n)+k

  s_prod_idx1(i:nat): nat = i-Tri(lower_inv_triang(i))

  s_prod_idx2(i:nat): nat = lower_inv_triang(i)-i+
   			         Tri(lower_inv_triang(i))

  s_prod_idx1_id: LEMMA
   FORALL(n:nat, k:nat| k <= n): s_prod_idx1(Tri(n)+k) = k

  s_prod_idx2_id: LEMMA
   FORALL(n:nat, k:nat| k <= n): s_prod_idx2(Tri(n)+k) = n-k

  s_prod_identity: LEMMA
    FORALL(a, b: sequence[real], n: nat):
      sigma[nat](Tri(n), Tri(n)+n,
  		LAMBDA(i:nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i)))
  	= sigma[below[n+1]](0, n, LAMBDA(i:below[n+1]): a(i)*b(n-i))

  s_prod_identity2: LEMMA
    FORALL(a, b: sequence[real]): FORALL(n:nat):
      sigma[nat](0, Tri(n)+n,
  		LAMBDA(i:nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i)))
  	= sigma(0, n, LAMBDA(i:nat): sigma[below[i+1]](0, i, LAMBDA(j:below[i+1]): a(j)*b(i-j)))

  Tri_ineq_aux: LEMMA
    FORALL(n: nat, k: nat | k <= n, m: nat):
       Tri(m) <= Tri(n)+k => m <= n

  %——— Series product (flattened)

  s_prod_convergence: THEOREM
   FORALL(a, b: sequence[nnreal]):
     conv_series?(a) AND conv_series?(b) =>
       convergence(series(LAMBDA(i:nat):
	 a(s_prod_idx1(i)) * b(s_prod_idx2(i))), inf_sum(a) * inf_sum(b))

  s_prod_conv: COROLLARY
   FORALL(a, b: sequence[nnreal]):
     conv_series?(a) AND conv_series?(b) =>
      conv_series?(LAMBDA(i:nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i)))
    	   
  lim_series_product: COROLLARY
    FORALL(a, b: sequence[nnreal]):
     	convergent?(series(a)) AND convergent?(series(b))
  	 => limit(series(a)) * limit(series(b)) =
  	    limit(series(
  	    LAMBDA(i:nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i))))

  %———— series/ sum inequality auxiliary ————

  convergent_seq_sort: LEMMA
     FORALL(a, b:sequence[real], n:nat):
        strict_decreasing?(a) AND
        (FORALL(i: nat| i <= n): EXISTS(j:nat): a(i) = b(j)) =>
	(EXISTS(phi:[nat->nat] | bijective?(phi)):
	   FORALL(i: nat | i <= n): a(i) = b(phi(i)))
	  
  sigma_series_ineq: LEMMA
    FORALL(a, b: sequence[posreal], n:nat):
      (strict_decreasing?(a) AND convergent?(series(b)) AND
         FORALL(i:nat | i <= n): EXISTS(j:nat): a(i) = b(j)) =>       
         sigma(0, n, a) < limit(series(b))

  END series_extra
