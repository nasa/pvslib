(|power_series_deriv| (|deriv_domain| 0 (|deriv_domain-1| |nil| 3472465975 ("" (LEMMA "connected_deriv_domain[T]") (("" (LEMMA "connected_domain") (("" (LEMMA "not_one_element") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|connected_domain| FORMULA-DECL NIL |power_series_deriv| NIL) (|not_one_element| FORMULA-DECL NIL |power_series_deriv| NIL) (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL)) SHOSTAK)) (|IMP_power_series_deriv_scaf_TCC1| 0 (|IMP_power_series_deriv_scaf_TCC1-1| |nil| 3471695693 ("" (LEMMA "connected_domain") (("" (PROPAX) NIL NIL)) NIL) ((|connected_domain| FORMULA-DECL NIL |power_series_deriv| NIL)) NIL (|IMP_power_series_deriv_scaf| ASSUMING "power_series_deriv_scaf[T].power_series_deriv_scaf" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|IMP_power_series_deriv_scaf_TCC2| 0 (|IMP_power_series_deriv_scaf_TCC2-1| |nil| 3471698428 ("" (LEMMA "not_one_element") (("" (PROPAX) NIL NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |power_series_deriv| NIL)) NIL (|IMP_power_series_deriv_scaf| ASSUMING "power_series_deriv_scaf[T].power_series_deriv_scaf" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|IMP_power_series_deriv_scaf_TCC3| 0 (|IMP_power_series_deriv_scaf_TCC3-1| |nil| 3471698428 ("" (SKOSIMP*) (("" (LEMMA "open") (("" (INST?) NIL NIL)) NIL)) NIL) ((|open| FORMULA-DECL NIL |power_series_deriv| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|IMP_power_series_deriv_scaf| ASSUMING "power_series_deriv_scaf[T].power_series_deriv_scaf" "open: ASSUMPTION FORALL (x: power_series_deriv_scaf.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_deriv_scaf.T_pred(y))"))) (|IMP_power_series_deriv_scaf_TCC4| 0 (|IMP_power_series_deriv_scaf_TCC4-1| |nil| 3471698428 ("" (LEMMA "ball") (("" (ASSERT) NIL NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|ball| FORMULA-DECL NIL |power_series_deriv| NIL)) NIL (|IMP_power_series_deriv_scaf| ASSUMING "power_series_deriv_scaf[T].power_series_deriv_scaf" "ball: ASSUMPTION FORALL (x: power_series_deriv_scaf.T): booleans.IMPLIES(power_series_deriv_scaf.T_pred(x), power_series_deriv_scaf.T_pred((number_fields.-)(x)))"))) (|powerseries_deriv_TCC1| 0 (|powerseries_deriv_TCC1-1| |nil| 3297517343 ("" (SUBTYPE-TCC) NIL NIL) ((|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|) (|series| CONST-DECL "sequence[real]" |series| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|powerseries_deriv| SUBTYPE "power_series.powerseries(power_series_deriv.a)(power_series_deriv.xx)" "(convergence_sequences.convergent?)"))) (|powerseries_deriv_TCC2| 0 (|yes| "" 3791889270 ("" (SKOSIMP*) (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (LEMMA "deriv_domain") (("" (LEMMA "deriv_domain") (("" (LEMMA "deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|deriv_powerseries_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|deriv_domain| FORMULA-DECL NIL |power_series_deriv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) SHOSTAK (|powerseries_deriv| SUBTYPE "series.series(power_series_derivseq[T].deriv_powerseq(power_series_deriv.a, power_series_deriv.x))" "(convergence_sequences.convergent?)")) (|powerseries_deriv_TCC2-2| |nil| 3791889247 ("" (SKOSIMP*) (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) NIL)))))) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL (|powerseries_deriv| SUBTYPE "series.series(power_series_derivseq[T].deriv_powerseq(power_series_deriv.a, power_series_deriv.x))" "(convergence_sequences.convergent?)")) (|powerseries_deriv_TCC2-1| |nil| 3297517343 ("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA "deriv_domain[T]") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|powerseries_deriv| SUBTYPE "series.series(power_series_derivseq[T].deriv_powerseq(power_series_deriv.a, power_series_deriv.x))" "(convergence_sequences.convergent?)"))) (|powerseries_deriv_TCC3| 0 (|powerseries_deriv_TCC3-2| "" 3790091666 ("" (SKOSIMP*) (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|deriv_powerseries_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) SHOSTAK (|powerseries_deriv| SUBTYPE "power_series_deriv.f" "deriv_fun[T]")) (|powerseries_deriv_TCC3-1| |nil| 3299589853 ("" (SKOSIMP*) (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK (|powerseries_deriv| SUBTYPE "power_series_deriv.f" "deriv_fun[T]"))) (|powerseries_deriv| 0 (|powerseries_deriv-13| "" 3882460654 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("" (INST?) (("" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                                                        (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "adh") (("2" (LEMMA "deriv_domain") (("2" (EXPAND "deriv_domain?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "y!1") (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                                                                                                            (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                                                                                                                  IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                                                                                                                  ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                                                                                                        k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                  ENDIF)
                                                                                                                                                                                                                                                                                                                               (n!1)) =
                                                                                                                                                                                                                                                                                                                                  IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                                                                                                                  ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                                                                                                                  ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                                                                                                               abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "open") (("3" (SKOSIMP*) (("3" (LEMMA "deriv_domain") (("3" (INST?) (("3" (EXPAND "deriv_domain?") (("3" (HIDE -1 -2 -3) (("3" (EXPAND "derivable?" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                                                                                                          a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               2)") (("1" (HIDE -1) (("1" (LEMMA "limit_eq_rew") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("2" (REWRITE "series_diff") (("2" (EXPAND "powerseq") (("2" (EXPAND "-") (("2" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                                                                             ENDIF
                                                                                                                                                                                                                                                                                                                                                                                                              - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                                                                             (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
x!2 *
x_1 = 0 THEN 0
a!1(x_1) * (x!1 + x!2) ^ x_1 -
a!1(x_1) * x!1 ^ x_1
k:
a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "deriv_domain") (("3" (EXPAND "deriv_domain?") (("3" (SKOSIMP*) (("3" (LEMMA "Gseq_conv") (("3" (INST - "a!1" "x!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "not_one_element?") (("2" (LEMMA "deriv_domain") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|powerseries_deriv-12| "" 3791886690 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("" (INST?) (("" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                                                        (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "adh") (("2" (LEMMA "deriv_domain") (("2" (EXPAND "deriv_domain?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST - X!1) (("2" (SKOSIMP*) (("2" (INST + Y!1) (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_domain") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                                                                                                            (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                                                                                                                  IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                                                                                                                  ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                                                                                                        k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                  ENDIF)
                                                                                                                                                                                                                                                                                                                               (n!1)) =
                                                                                                                                                                                                                                                                                                                                  IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                                                                                                                  ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                                                                                                                  ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                                                                                                               abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable?" -1) (("3" (INST?) (("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) (("3" (LEMMA "deriv_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "open") (("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (INST?) (("4" (EXPAND "deriv_domain?") (("4" (HIDE -1 -2 -3) (("4" (EXPAND "derivable?" -1) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                                                                                                          a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL) ("4" (LEMMA "deriv_domain") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
limit_eq_rew") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("2" (REWRITE "series_diff") (("2" (EXPAND "powerseq") (("2" (EXPAND "-") (("2" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                                                                             ENDIF
                                                                                                                                                                                                                                                                                                                                                                                                              - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                                                                             (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
x!2 *
x_1 = 0 THEN 0
a!1(x_1) * (x!1 + x!2) ^ x_1 -
a!1(x_1) * x!1 ^ x_1
k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "deriv_domain") (("3" (EXPAND "deriv_domain?") (("3" (SKOSIMP*) (("3" (LEMMA "Gseq_conv") (("3" (INST - "a!1" "x!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "Gseq_conv") (("4" (INST?) (("4" (ASSERT) (("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "not_one_element?") (("2" (LEMMA "deriv_domain") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |power_series_deriv| NIL) (|deriv_powerseries_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|deriv_fun_def| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_powerseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|derivative_squeeze_delta| FORMULA-DECL NIL |derivatives_alt| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NQ CONST-DECL "real" |derivatives_def| |analysis|) (|conv_series?| CONST-DECL "bool" |series| NIL) (|inf_sum| CONST-DECL "real" |series| NIL) (|Gseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|delta!1| SKOLEM-CONST-DECL "posreal" |power_series_deriv| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|delta!1| SKOLEM-CONST-DECL "posreal" |power_series_deriv| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|xp!1| SKOLEM-CONST-DECL "T" |power_series_deriv| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv| NIL) (|A2seq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Gseq_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|inf_sum_le| FORMULA-DECL NIL |series| NIL) (|inf_sum_Gseq_abs| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|GET_tk| CONST-DECL "{tk: between[T](x, x + h) | ((x + h) ^ k - x ^ k) / h = k * tk ^ (k - 1)}" |power_series_deriv_scaf| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|open| FORMULA-DECL NIL |power_series_deriv| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (MAX SKOLEM-CONST-DECL "{z: nonneg_real | z >= abs(x!1) AND z >= abs(xp!1)}" |power_series_deriv| NIL) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv| NIL) (|abs_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|abs_eq_0| FORMULA-DECL NIL |abs_lems| |reals|) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|n!1| SKOLEM-CONST-DECL "upfrom(2)" |power_series_deriv| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|both_sides_expt_pos_ge| FORMULA-DECL NIL |exponentiation| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|deriv_x_to_n| FORMULA-DECL NIL |derivatives| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value_abs| FORMULA-DECL NIL |derivative_props| |analysis|) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|abs_abs| FORMULA-DECL NIL |real_props| NIL) (|convergent_scal| FORMULA-DECL NIL |convergence_ops| |analysis|) (|series_m_scal| FORMULA-DECL NIL |series| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (|inf_sum_scal| FORMULA-DECL NIL |series| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|) (|restrict| CONST-DECL "R" |restrict| NIL) (|deriv_domain| FORMULA-DECL NIL |power_series_deriv| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|y!1| SKOLEM-CONST-DECL "{u: nzreal | T_pred(u + x!1)}" |power_series_deriv| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|cv_abs| FORMULA-DECL NIL |lim_of_functions| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|cv_scal| FORMULA-DECL NIL |lim_of_functions| |analysis|) (|A2_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|limit_diff| FORMULA-DECL NIL |convergence_ops| |analysis|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|limit_eq_rew| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|convergent_diff| FORMULA-DECL NIL |convergence_ops| |analysis|) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|conv_scaf2| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|series_m_eq| FORMULA-DECL NIL |series| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|series_m_diff| FORMULA-DECL NIL |series| NIL) (|lim_deriv_alt| FORMULA-DECL NIL |power_series_derivseq| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|conv_scaf3| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|x!2| SKOLEM-CONST-DECL "(A[T](x!1))" |power_series_deriv| NIL) (|inf_sum_eq| FORMULA-DECL NIL |series| NIL) (|series_diff| FORMULA-DECL NIL |series| NIL) (|limit_scal| FORMULA-DECL NIL |convergence_ops| |analysis|) (|series_first| FORMULA-DECL NIL |series| NIL) (|series_scal| FORMULA-DECL NIL |series| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|a!1| SKOLEM-CONST-DECL "sequence[real]" |power_series_deriv| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|connected_domain| FORMULA-DECL NIL |power_series_deriv| NIL)) SHOSTAK) (|powerseries_deriv-11| |nil| 3445341646 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                                                        (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "adh") (("2" (LEMMA "deriv_domain") (("2" (EXPAND "deriv_domain?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST - X!1) (("2" (SKOSIMP*) (("2" (INST + Y!1) (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                                                                                                            (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                                                                                                                  IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                                                                                                                  ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                                                                                                        k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                  ENDIF)
                                                                                                                                                                                                                                                                                                                               (n!1)) =
                                                                                                                                                                                                                                                                                                                                  IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                                                                                                                  ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                                                                                                                  ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                                                                                                               abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable?" -1) (("3" (INST?) (("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) (("3" (LEMMA "deriv_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "open") (("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (INST?) (("4" (EXPAND "deriv_domain?") (("4" (HIDE -1 -2 -3) (("4" (EXPAND "derivable?" -1) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                                                                                                          a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ENDIF)
deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
limit_eq_rew") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("2" (REWRITE "series_diff") (("2" (EXPAND "powerseq") (("2" (EXPAND "-") (("2" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                                                                             ENDIF
                                                                                                                                                                                                                                                                                                                                                                                                              - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                                                                             (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                                             IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                             ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           1 / x!2 *
x_1 = 0 THEN 0
a!1(x_1) * (x!1 + x!2) ^ x_1 -
a!1(x_1) * x!1 ^ x_1
k:
a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) (("3" (LEMMA "deriv_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "deriv_domain") (("3" (EXPAND "deriv_domain?") (("3" (SKOSIMP*) (("3" (LEMMA "Gseq_conv") (("3" (INST - "a!1" "x!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "Gseq_conv") (("4" (INST?) (("4" (ASSERT) (("4" (SKOSIMP*) (("4" (LEMMA "deriv_domain") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "not_one_element?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_domain") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|powerseries_deriv-10| |nil| 3374403867 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                                            (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "adh_A_lem[T]") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                                                                               (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                                                                                      IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                                                                                      ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                                                                            k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                                                                                      ENDIF)
                                                                                                                                                                                                                                                                                                   (n!1)) =
                                                                                                                                                                                                                                                                                                      IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                                                                                      ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                                                                                      ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                                                                                 abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                                                   (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                                                                                                 (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable" -1) (("3" (INST?) (("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "open") (("4" (SKOSIMP*) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) (("5" (HIDE-ALL-BUT (-2 1)) (("5" (EXPAND "derivable" -1) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                                                                            a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) NIL NIL) ("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
limit_eq_rew") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("2" (REWRITE "series_diff") (("2" (EXPAND "powerseq") (("2" (EXPAND "-") (("2" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                           IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                                                           ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                                                           ENDIF
                                                                                                                                                                                                                                                                                                                                                                                            - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                                                           (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                                           IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                           ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            a!1(x_1) * x!1 ^ x_1
k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) NIL NIL) ("5" (LEMMA "connected_domain") (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|powerseries_deriv-9| |nil| 3299837690 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                                (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "adh_A_lem[T]") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL) ("3" (SKOSIMP*) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                                                  (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                                                          IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                                                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                                                k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                                                          ENDIF)
                                                                                                                                                                                                                                                                       (n!1)) =
                                                                                                                                                                                                                                                                          IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                                                          ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                                                          ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                                                   abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                                                               (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                                                           (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable" -1) (("3" (INST?) (("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "open") (("4" (SKOSIMP*) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) (("5" (HIDE-ALL-BUT (-2 1)) (("5" (EXPAND "derivable" -1) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                                              a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) NIL NIL) ("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
limit_eq_rew") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "x!3 = 1") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("2" (REWRITE "series_diff") (("2" (EXPAND "powerseq") (("2" (EXPAND "-") (("2" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                         IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                                         ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                                         ENDIF
                                                                                                                                                                                                                                                                                                                                                                          - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                                         (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                                         IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                         ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      a!1(x_1) * x!1 ^ x_1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ENDIF) = (LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) NIL NIL) ("5" (LEMMA "connected_domain") (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|powerseries_deriv-8| |nil| 3299584269 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                                    (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "adh_A_lem[T]") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL) ("3" (SKOSIMP*) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv[T]") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                                                     (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs[T]") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                                              IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                                              ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                                                    k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                                              ENDIF)
                                                                                                                                                                                                                                           (n!1)) =
                                                                                                                                                                                                                                              IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                                              ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                                              ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                                                     abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                                                           (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                                                                     (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "derivable" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                                                a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv[T]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
k < 2 THEN k* a!1(k)
k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  - deriv_powerseq(a!1, x!1),
series((LAMBDA k:
k < 2 THEN k* a!1(k)
k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)

deriv_powerseq(a!1, x!1),
limit_eq") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv[T]") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2[T]") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "x!3 = 1") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -3) (("2" (ASSERT) (("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2[T]") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_diff") (("1" (EXPAND "powerseq") (("1" (EXPAND "-") (("1" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                     IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                                     ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                                     ENDIF
                                                                                                                                                                                                                                                                                                                                                      - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                                     (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                                     IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                     ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                                                     1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                                            a!1(x_1) * x!1 ^ x_1
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ENDIF) = (LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                       a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE 2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "*") (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                                                     1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                                            a!1(x_1) * x!1 ^ x_1
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ENDIF) = (LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                       a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3[T]") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "conv_scaf1[T]") (("2" (INST?) (("2" (INST - "x!1") (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST? -7) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (INST? -7) (("3" (HIDE 2) (("3" (TYPEPRED "x!2") (("3" (EXPAND "A") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3[T]") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (TYPEPRED "x!2") (("4" (EXPAND "A") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv[T]") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) NIL NIL) ("5" (LEMMA "connected_domain") (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST? -3) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|powerseries_deriv-7| |nil| 3299582506 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (LEMMA "connected_domain") (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_powerseries?") (("" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (NAME "FA" "(LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (REPLACE -1) (("1" (NAME "FG" "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (CASE-REPLACE "limit(series(deriv_powerseq(a!1, x!1))) = FG(x!1)") (("1" (LEMMA "derivative_squeeze_delta[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1))) =
                                                                                                                                                                                                                                                        (LAMBDA (h: (A[T](x!1))): inf_sum(2,Gseq(a!1,x!1,h)))") (("1" (CASE "EXISTS xp: abs(xp) > abs(x!1) AND (xp >= 0 IFF x!1 >= 0)") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (CASE "xp!1 /= 0") (("1" (FLATTEN) (("1" (INST + "(LAMBDA (h: (A[T](x!1))): abs(h)*inf_sum(2,A2seq(a!1,x!1,xp!1)))") (("1" (SPLIT +) (("1" (NAME-REPLACE "LL" "inf_sum(2, A2seq(a!1, x!1, xp!1))") (("1" (LEMMA "cv_scal[(A[T](x!1))]") (("1" (INST - "0" "LL" "(LAMBDA (h: (A[T](x!1))): abs(h))" "0") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE 2) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "cv_abs[(A[T](x!1))]") (("1" (INST?) (("1" (EXPAND "restrict") (("1" (EXPAND "abs") (("1" (PROPAX) NIL))))) ("2" (LEMMA "adh_A_lem[T]") (("2" (INST?) NIL))))))))))))))))) ("2" (SKOSIMP*) NIL) ("3" (SKOSIMP*) NIL))) ("2" (HIDE 2) (("2" (EXPAND "conv_series?") (("2" (LEMMA "A2_conv") (("2" (INST - "a!1" "x!1" "xp!1") (("2" (ASSERT) NIL))))))))) ("3" (ASSERT) NIL))) ("2" (INST + "abs(xp!1 - x!1)") (("1" (SKOSIMP*) (("1" (HIDE -4 -5 -6 -7 -10) (("1" (CASE "(LAMBDA (h: (A[T](x!1))): (NQ(FA, x!1)(h) - FG(x!1)))(h!1) =
                                                                                                                                                                                                        (LAMBDA (h: (A[T](x!1))): inf_sum(2, Gseq(a!1, x!1, h)))(h!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "inf_sum_scal") (("1" (INST?) (("1" (LEMMA "A2_conv") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "inf_sum_le") (("1" (INST - "abs(Gseq(a!1, x!1, h!1))" "abs(h!1)*A2seq(a!1, x!1, xp!1)" "2") (("1" (SPLIT -1) (("1" (LEMMA "inf_sum_Gseq_abs") (("1" (INST?) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "Gseq") (("2" (CASE-REPLACE "abs(abs(LAMBDA (k):
                                                                                                                                                                                                                  IF k < 2 THEN k * a!1(k)
                                                                                                                                                                                                                  ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                                                                                                                                                        k * a!1(k) * x!1 ^ (k - 1)
                                                                                                                                                                                                                  ENDIF)
                                                                                                                                                                                                               (n!1)) =
                                                                                                                                                                                                                  IF n!1 < 2 THEN abs(n!1 * a!1(n!1))
                                                                                                                                                                                                                  ELSE abs(n!1) * abs(a!1(n!1)) * abs(GET_tk(x!1, h!1, n!1) ^ (n!1 - 1) -  x!1 ^ (n!1 - 1))
                                                                                                                                                                                                                  ENDIF") (("1" (EXPAND "A2seq") (("1" (ASSERT) (("1" (HIDE -1 -2 -5) (("1" (EXPAND "*") (("1" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, n!1)") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1)) <=
                                                                                                                                                                                                                       abs(max(abs(x!1), abs(xp!1)) ^ (n!1 - 2)) * abs(n!1 - 1) * abs(h!1)") (("1" (MULT-BY -1 "abs(a!1(n!1))*abs(n!1)") (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (NAME "MAX" "max(abs(x!1), abs(xp!1))") (("2" (REPLACE -1) (("2" (LEMMA "mean_value_abs[T]") (("2" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "(n!1-1)" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "TK = x!1") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                                                                                                                                                                                       (n!1-1)*c!1^(n!1-2)") (("1" (HIDE -1 -2 -3) (("1" (LEMMA "abs_neg") (("1" (INST - "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (REPLACE -1 - RL) (("1" (REPLACE -4 + RL) (("1" (REWRITE "abs_mult") (("1" (NAME-REPLACE "NM1" "abs((n!1 - 1))") (("1" (HIDE -1 -4 -8 -9) (("1" (CASE-REPLACE "abs(c!1 ^ (n!1 - 2)) <= abs(MAX ^ (n!1 - 2))") (("1" (CASE-REPLACE "abs(x!1 - TK) <= abs(h!1)") (("1" (MULT-INEQ -1 -2) (("1" (MULT-BY -1 "NM1") (("1" (ASSERT) NIL))) ("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL))))))) ("2" (HIDE -1 -2 -3 3) (("2" (REVEAL -16) (("2" (TYPEPRED "GET_tk(x!1, h!1, n!1)") (("2" (GRIND) NIL))))))))) ("2" (HIDE 3) (("2" (TYPEPRED "TK") (("2" (REVEAL -27 -28) (("2" (CASE "abs(c!1) <= abs(MAX)") (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (CASE-REPLACE "n!1 = 2") (("1" (ASSERT) NIL) ("2" (CASE-REPLACE "c!1 = 0") (("1" (LEMMA "zero_hat") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "abs" 2) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))) ("2" (INST - "(n!1 - 2)" "abs(MAX)" "abs(c!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (ASSERT) NIL))))))) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL))))) ("3" (LEMMA "abs_eq_0") (("3" (INST?) (("3" (ASSERT) NIL))))) ("4" (ASSERT) NIL))))))))) ("2" (HIDE 2) (("2" (GRIND :EXCLUDE "^") NIL))))))))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "deriv" -2) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1) =
                                                                                                                                                                                                                                                                               (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL) ("2" (REPLACE -2) (("2" (PROPAX) NIL))) ("3" (EXPAND "derivable" -1) (("3" (INST?) NIL))))))))))) ("3" (EXPAND "derivable" -1) (("3" (INST?) NIL))))))))))))))) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs" 1 2) (("2" (NAME-REPLACE "GG" "GET_tk(x!1, h!1, n!1) ^ (n!1 - 1)") (("2" (NAME-REPLACE "XX" "x!1 ^ (n!1 - 1)") (("2" (CASE-REPLACE "a!1(n!1) * GG * n!1 - a!1(n!1) * XX * n!1 =
                                                                                                                                                                                                                                                                  a!1(n!1) * n!1 *(GG - XX)") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL))))))))))))))))) ("2" (ASSERT) NIL))))))))))) ("3" (ASSERT) (("3" (SKOSIMP*) (("3" (ASSERT) NIL))))) ("4" (ASSERT) (("4" (SKOSIMP*) (("4" (ASSERT) NIL))))) ("5" (ASSERT) (("5" (SKOSIMP*) (("5" (ASSERT) NIL))))))))))))) ("3" (HIDE 2) (("3" (LEMMA "convergent_scal") (("3" (INST - "abs(h!1)" "series(A2seq(a!1, x!1, xp!1), 2)") (("3" (ASSERT) (("3" (LEMMA "series_m_scal") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))) ("2" (REPLACE -3) (("2" (PROPAX) NIL))) ("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL))))))))) ("4" (PROPAX) NIL) ("5" (PROPAX) NIL))))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))))) ("2" (SKOSIMP*) (("2" (LEMMA "A2_conv") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL))))))))))) ("3" (SKOSIMP*) NIL))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))))))) ("2" (HIDE 2) (("2" (HIDE -) (("2" (CASE "x!1 >= 0") (("1" (LEMMA "open") (("1" (INST - "x!1") (("1" (SKOSIMP*) (("1" (INST + "x!1 + delta!1/2") (("1" (GRIND) NIL) ("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))) ("2" (LEMMA "open") (("2" (INST - "x!1") (("2" (SKOSIMP*) (("2" (INST + "x!1 - delta!1/2") (("1" (GRIND) NIL) ("2" (INST - "x!1 - delta!1/2") (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "NQ") (("1" (EXPAND "inf_sum") (("1" (REPLACE -2 * RL) (("1" (CASE-REPLACE "(FA(x!1 + x!2) - FA(x!1)) / x!2 =
                                                                                                                                                                                                                                                                                                                                      inf_sum(1,(LAMBDA k:
                                                                                                                                                                                                                                                                                                                                            a!1(k)*(((x!1+x!2)^k - x!1^k)/x!2)))") (("1" (LEMMA "inf_sum_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k: IF k < 2 THEN k*a!1(k) ELSE a!1(k)*k*GET_tk(x!1,x!2,k)^(k-1) ENDIF)") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "lim_deriv_alt" +) (("1" (EXPAND "inf_sum") (("1" (HIDE -1 -2) (("1" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_m_diff") (("1" (CASE-REPLACE "series((LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          IF k < 2 THEN k* a!1(k)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ELSE k* a!1(k)* GET_tk(x!1, x!2,k) ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ENDIF)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        - deriv_powerseq(a!1, x!1),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       1) = series((LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          IF k < 2 THEN k* a!1(k)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ELSE k * a!1(k)*GET_tk(x!1, x!2,k) ^ (k - 1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ENDIF)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        - deriv_powerseq(a!1, x!1),
limit_eq") (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL) ("2" (HIDE 2) (("2" (LEMMA "series_m_diff") (("2" (INST?) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "deriv_powerseries_conv") (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (PROP) (("1" (LEMMA "conv_scaf2") (("1" (INST?) (("1" (INST -1 "x!1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))))))))))))) ("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))) ("3" (HIDE 2) (("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (EXPAND "conv_series?") (("3" (INST?) NIL))))))))))))) ("4" (HIDE 2) (("4" (REWRITE "series_m_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (EXPAND "Gseq") (("1" (ASSERT) NIL))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))) ("2" (HIDE 2) (("2" (EXPAND "series") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sigma_first") (("1" (ASSERT) (("1" (EXPAND "deriv_powerseq") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (PROPAX) NIL))))))))) ("2" (CASE-REPLACE "x!3 = 0") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL))) ("2" (ASSERT) (("2" (CASE-REPLACE "x!3 = 1") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (EXPAND "deriv_powerseq") (("1" (PROPAX) NIL))))))))) ("2" (ASSERT) NIL))))))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))) ("4" (SKOSIMP*) (("4" (ASSERT) NIL))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))) ("4" (SKOSIMP*) (("4" (ASSERT) NIL))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (INST? -3) (("2" (ASSERT) (("2" (LEMMA "end_series_conv") (("2" (INST?) (("2" (ASSERT) NIL))))))))))) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf2") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST?) NIL))))))))))) ("4" (SKOSIMP*) (("4" (ASSERT) NIL))) ("5" (SKOSIMP*) (("5" (ASSERT) NIL))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (CASE-REPLACE "k!1 = 1") (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (FIELD 1) NIL))))))) ("2" (ASSERT) NIL))))))))))))) ("3" (HIDE 2) (("3" (LEMMA "conv_scaf3") (("3" (INST?) (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL))))))))))))) ("4" (HIDE 2) (("4" (EXPAND "conv_series?") (("4" (LEMMA "conv_scaf2") (("4" (INST?) (("4" (INST - "x!1") (("4" (ASSERT) (("4" (INST?) NIL))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))))))))) ("2" (HIDE 2) (("2" (REPLACE -3 * RL) (("2" (EXPAND "inf_sum") (("2" (EXPAND "powerseries") (("2" (REWRITE "limit_diff" :DIR RL) (("1" (REWRITE "series_diff") (("1" (EXPAND "powerseq") (("1" (EXPAND "-") (("1" (CASE-REPLACE "(LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                 IF x = 0 THEN a!1(0)
                                                                                                                                                                                                                                                                                                                                 ELSE a!1(x) * (x!1 + x!2) ^ x
                                                                                                                                                                                                                                                                                                                                 ENDIF
                                                                                                                                                                                                                                                                                                                                  - IF x = 0 THEN a!1(0) ELSE a!1(x) * x!1 ^ x ENDIF) =
                                                                                                                                                                                                                                                                                                                                 (LAMBDA (x: nat):
                                                                                                                                                                                                                                                                                                                                 IF x = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                 ELSE a!1(x) * (x!1 + x!2) ^ x - a!1(x) * x!1 ^ x ENDIF)") (("1" (HIDE -1) (("1" (HIDE -) (("1" (LEMMA "limit_scal") (("1" (INST?) (("1" (INST - "1/x!2") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (REWRITE "series_scal") (("1" (REWRITE "series_first" +) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                           1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                            IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                            ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                  a!1(x_1) * x!1 ^ x_1
                                                                                                                                                                                                                                                                                                                                                                                                                            ENDIF) = (LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                             a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE 2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "*") (("2" (CASE-REPLACE "(LAMBDA (x_1: nat):
                                                                                                                                                                                                                                                                                                                                                                                                                           1 / x!2 *
                                                                                                                                                                                                                                                                                                                                                                                                                            IF x_1 = 0 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                            ELSE a!1(x_1) * (x!1 + x!2) ^ x_1 -
                                                                                                                                                                                                                                                                                                                                                                                                                                  a!1(x_1) * x!1 ^ x_1
                                                                                                                                                                                                                                                                                                                                                                                                                            ENDIF) = (LAMBDA k:
                                                                                                                                                                                                                                                                                                                                                                                                                             a!1(k) * (((x!1 + x!2) ^ k - x!1 ^ k) / x!2))") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf3") (("1" (INST?) (("1" (EXPAND "conv_series?") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!2") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REPLACE -1) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (LEMMA "conv_scaf1") (("2" (INST?) (("2" (INST - "x!1") (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))))) ("2" (HIDE 2) (("2" (INST? -7) NIL))) ("3" (HIDE 2) (("3" (INST? -7) (("3" (HIDE 2) (("3" (TYPEPRED "x!2") (("3" (EXPAND "A") (("3" (PROPAX) NIL))))))))))))))))))))) ("3" (HIDE 2) (("3" (HIDE -1 -2 -3) (("3" (EXPAND "conv_series?") (("3" (LEMMA "conv_scaf3") (("3" (INST?) (("3" (INST - "x!1") (("3" (ASSERT) (("3" (INST - "x!2") (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL))))))))))))))))))) ("4" (HIDE 2) (("4" (TYPEPRED "x!2") (("4" (EXPAND "A") (("4" (PROPAX) NIL))))))))))))))) ("2" (SKOSIMP*) (("2" (LEMMA "Gseq_conv") (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL))))))))) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL))) ("4" (SKOSIMP*) NIL))))) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (LEMMA "Gseq_conv") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) NIL))))))))))) ("4" (SKOSIMP*) NIL) ("5" (LEMMA "connected_domain") (("5" (SKOSIMP*) NIL))))))))))))) ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL))) ("3" (INST? -3) NIL))) ("2" (PROPAX) NIL))))) ("2" (PROPAX) NIL))))))))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL)))))))))))))))) NIL) NIL NIL) (|powerseries_deriv-6| |nil| 3297597284 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergence") (("2" (REPLACE -1 * RL) (("2" (NAME "ktkm1" "(LAMBDA k: k*(k-1))") (("2" (CASE "FORALL (x0:T,h:(A(x!1)), k: upfrom(2)): EXISTS (c: between[T](x0,x0+h)):
                                                                                (x0+h)^k - x0^k = h*k*x0^(k-1) + (1/2)*ktkm1(k)*c^(k-2)*h^2") (("1" (LEMMA "derivative_squeeze[T]") (("1" (INST?) (("1" (EXPAND "convergence" -1) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE "convergent?(series(deriv_powerseq(a!1, x!1)))") (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))):
                    (NQ(f, x!1)(h) -
                      limit(series(deriv_powerseq(a!1, x!1))))) =
                  (LAMBDA (h: (A[T](x!1))): (NQ(f, x!1)(h))) -
                      const_fun[(A[T](x!1))](limit(series(deriv_powerseq(a!1, x!1))))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))): (NQ(f, x!1)(h))) =
              (LAMBDA (h: (A[T](x!1))): limit(powerseries(a!1)(x!1+h)) - limit(powerseries(a!1)(x!1)))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))):
                     limit(powerseries(a!1)(x!1 + h)) -
                      limit(powerseries(a!1)(x!1))) = 
             (LAMBDA (h: (A[T](x!1))): 
          limit(series(LAMBDA (k: nat): a!1(k) * ((h + x!1) ^ k) - x!1^k)))") (("1" (HIDE -1) (("1" (CASE "EXISTS (CC: [upfrom(2) ->  real]):
                  (LAMBDA (h:(A(x!1)),(k: upfrom(2))):
     (x!1+h)^k - x!1^k) = 
                 (LAMBDA (h:(A(x!1)),(k: upfrom(2))):h*k*x!1^(k-1) + (1/2)*ktkm1(k)*CC(k-2)*h^2)") (("1" (SKOSIMP*) (("1" (CASE-REPLACE "(LAMBDA (h: (A[T](x!1))):
                     limit(series(LAMBDA (k: nat):
                                    a!1(k) * ((h + x!1) ^ k) - x!1 ^ k)))
 = (LAMBDA (h: (A[T](x!1))): limit(series(LAMBDA (k: nat):

 a!1(k) * (h * k * x!1 ^ (k - 1) + (1 / 2) * ktkm1(k) * CC!1(k - 2) * h ^ 2))))") (("1" (HIDE -1 -2 -4) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "-") (("2" (EXPAND "const_fun") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -2 -3) (("2" (LEMMA "Taylors[T]") (("1" (INST - "x0!1" "x0!1+h!1" "(LAMBDA x: x^k!1)" "1") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1-1" "k!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (HIDE -2) (("1" (REPLACE -4 * RL) (("1" (HIDE -4) (("1" (ASSERT) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "h!1 ^ 1 = h!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "derivable_n_times") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "k!1" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "derivable_n_times") (("2" (REPLACE -2) (("2" (HIDE -2) (("2" (EXPAND "derivable_n_times") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "k!1-1" "k!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "h!1") (("2" (TYPEPRED "x0!1") (("2" (EXPAND "A") (("2" (FLATTEN) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "not_one_element") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (INST?) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (LEMMA "deriv_powerseries_conv") (("2" (INST?) (("2" (REPLACE -4) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (FLATTEN) (("3" (SKOSIMP*) (("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (REPLACE -3) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|powerseries_deriv-5| |nil| 3297596207 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergence") (("2" (REPLACE -1 * RL) (("2" (NAME "ktkm1" "(LAMBDA k: k*(k-1))") (("2" (CASE "FORALL (x0,h:T, k: upfrom(2)): EXISTS (c: between[T](x0,x0+h)):
                                                                   (x0+h)^k - x0^k = h*k*x0^(k-1) + (1/2)*ktkm1(k)*c^(k-2)*h^2") (("1" (POSTPONE) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -2 -3) (("2" (LEMMA "Taylors[T]") (("1" (INST - "x0!1" "x0!1+h!1" "(LAMBDA x: x^k!1)" "1") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1-1" "k!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (HIDE -2) (("1" (REPLACE -4 * RL) (("1" (HIDE -4) (("1" (ASSERT) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "h!1 ^ 1 = h!1") (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "derivable_n_times") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "k!1" "1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "derivable_n_times") (("2" (REPLACE -2) (("2" (HIDE -2) (("2" (EXPAND "derivable_n_times") (("2" (LEMMA "deriv_x_to_n[T]") (("2" (INST - "k!1-1" "k!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (TYPEPRED "h!1") (("2" (TYPEPRED "x0!1") (("2" (POSTPONE) NIL))))))))) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL))) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL))))))))))) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "not_one_element") (("3" (INST?) NIL))))))) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (INST?) (("4" (INST?) (("4" (ASSERT) NIL))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (LEMMA "deriv_powerseries_conv") (("2" (INST?) (("2" (REPLACE -4) (("2" (INST?) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL))))) ("3" (HIDE -1) (("3" (FLATTEN) (("3" (SKOSIMP*) (("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (REPLACE -3) (("3" (INST?) NIL)))))))))))))))) NIL) NIL NIL) (|powerseries_deriv-4| |nil| 3297591983 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergence") (("2" (REPLACE -1 * RL) (("2" (NAME "ktkm1" "(LAMBDA k: k*(k-1))") (("2" (CASE "FORALL (x0,h:T, k: upfrom(2)): EXISTS (c: between[T](x0,x0+h)):
                                                      (x0+h)^k - x0^k = h*k*x0^(k-1) + (1/2)*ktkm1(k)*c^(k-2)*h^2") (("1" (POSTPONE) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -2 -3) (("2" (LEMMA "Taylors[T]") (("1" (INST - "x0!1" "x0!1+h!1" "(LAMBDA x: x^k!1)" "1") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (CASE-REPLACE "deriv[T](deriv[T]((LAMBDA x: x ^ k!1)))(c!1) =
                                                                         ktkm1(k!1) * c!1 ^ (k!1 - 2)") (("1" (CASE-REPLACE "deriv((LAMBDA x: x ^ k!1)) =
                                                        (LAMBDA x: k!1*x ^(k!1-1))") (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "(-1 * h!1) ^ 2 = h!1 ^ 2") (("1" (NAME "YY" "c!1 ^ (k!1 - 2)") (("1" (REPLACE -1) (("1" (POSTPONE) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))) ("2" (ASSERT) (("2" (POSTPONE) NIL))))))))) ("2" (HIDE 2) (("2" (POSTPONE) NIL))) ("3" (POSTPONE) NIL))) ("2" (HIDE 2) (("2" (POSTPONE) NIL))) ("3" (POSTPONE) NIL) ("4" (POSTPONE) NIL))))))))))))))))))))))))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))))) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "not_one_element") (("3" (INST?) NIL))))))) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (INST?) (("4" (INST?) (("4" (ASSERT) NIL))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (LEMMA "deriv_powerseries_conv") (("2" (INST?) (("2" (REPLACE -4) (("2" (INST?) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL))))) ("3" (HIDE -1) (("3" (FLATTEN) (("3" (SKOSIMP*) (("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (REPLACE -3) (("3" (INST?) NIL)))))))))))))))) NIL) NIL NIL) (|powerseries_deriv-3| |nil| 3297528860 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergence") (("2" (REPLACE -1 * RL) (("2" (NAME "ktkm1" "(LAMBDA k: k*(k-1))") (("2" (CASE "FORALL (x0,h:T, k: upfrom(2)): EXISTS (c: between[T](x0,x0+h)):
                                         (x0+h)^k - x0^k = h*k*x0^(k-1) + (1/2)*ktkm1(k)*c^(k-2)*h^2") (("1" (POSTPONE) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -2 -3) (("2" (LEMMA "Taylors[T]") (("1" (INST - "x0!1+h!1" "x0!1" "(LAMBDA x: x^k!1)" "1") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (CASE-REPLACE "deriv[T](deriv[T]((LAMBDA x: x ^ k!1)))(c!1) =
                                                         ktkm1(k!1) * c!1 ^ (k!1 - 2)") (("1" (CASE-REPLACE "deriv((LAMBDA x: x ^ k!1)) =
                                      (LAMBDA x: k!1*x ^(k!1-1))") (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE-REPLACE "(-1 * h!1) ^ 2 = h!1 ^ 2") (("1" (NAME "YY" "c!1 ^ (k!1 - 2)") (("1" (REPLACE -1) (("1" (POSTPONE) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))) ("2" (ASSERT) (("2" (POSTPONE) NIL))))))))) ("2" (HIDE 2) (("2" (POSTPONE) NIL))) ("3" (POSTPONE) NIL))) ("2" (HIDE 2) (("2" (POSTPONE) NIL))) ("3" (POSTPONE) NIL) ("4" (POSTPONE) NIL))))))))))))))))))))))))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))))) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "not_one_element") (("3" (INST?) NIL))))))) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (INST?) (("4" (INST?) (("4" (ASSERT) NIL))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (LEMMA "deriv_powerseries_conv") (("2" (INST?) (("2" (REPLACE -4) (("2" (INST?) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL))))) ("3" (HIDE -1) (("3" (FLATTEN) (("3" (SKOSIMP*) (("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (REPLACE -3) (("3" (INST?) NIL)))))))))))))))) NIL) NIL NIL) (|powerseries_deriv-2| |nil| 3297527447 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) NIL NIL) (|powerseries_deriv-1| |nil| 3297517626 ("" (SKOSIMP*) (("" (SKOLETIN 1) (("1" (ASSERT) (("1" (LEMMA "deriv_fun_def[T]") (("1" (INST?) (("1" (INST - "(LAMBDA x: limit(series(deriv_powerseq(a!1, x))))") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergence") (("2" (REPLACE -1 * RL) (("2" (NAME "ktkm1" "(LAMBDA k: k*(k-1))") (("2" (CASE "FORALL (x0,h:T, k: upfrom(2)): EXISTS (c: between[T](x!1,x0)):
               (x0+h)^k - x0^k = h*k*x0^(k-1) + (1/2)*ktkm1(k)*c^(k-2)*h^2") (("1" (POSTPONE) NIL NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -2 -3) (("2" (LEMMA "Taylors[T]") (("1" (INST - "x!1" "x0!1" "(LAMBDA x: x^k!1)" "1") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (NAME "XDEL" "(x0!1 - x!1)") (("1" (REPLACE -1) (("1" (CASE-REPLACE "deriv[T](deriv[T]((LAMBDA x: x ^ k!1)))(c!1) = 
                           ktkm1(k!1) * c!1 ^ (k!1 - 2)") (("1" (HIDE -1) (("1" (CASE-REPLACE "deriv((LAMBDA x: x ^ k!1))(x!1) = k!1*x!1^(k!1-1)") (("1" (HIDE -1) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "not_one_element") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (INST?) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (LEMMA "deriv_powerseries_conv") (("2" (INST?) (("2" (REPLACE -4) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (FLATTEN) (("3" (SKOSIMP*) (("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (REPLACE -3) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|powerseries_derivable| 0 (|powerseries_derivable-1| |nil| 3298198161 ("" (SKOSIMP*) (("" (LEMMA "powerseries_deriv") (("" (INST?) (("" (REPLACE -2) (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|powerseries_deriv| FORMULA-DECL NIL |power_series_deriv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|powerseries_cont| 0 (|powerseries_cont-4| "" 3790091683 ("" (SKOSIMP*) (("" (LEMMA "powerseries_derivable") (("" (INST?) (("" (ASSERT) (("" (EXPAND "continuous?") (("" (SKOSIMP*) (("" (EXPAND "derivable?") (("" (INST?) (("" (LEMMA "derivable_continuous[T]") (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powerseries_derivable| FORMULA-DECL NIL |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|a!1| SKOLEM-CONST-DECL "sequence[real]" |power_series_deriv| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|derivable_continuous| FORMULA-DECL NIL |derivatives_def| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|powerseries_cont-3| "o" 3445341662 ("" (SKOSIMP*) (("" (LEMMA "powerseries_derivable") (("" (INST?) (("" (ASSERT) (("" (EXPAND "continuous?") (("" (SKOSIMP*) (("" (EXPAND "derivable?") (("" (INST?) (("" (LEMMA "derivable_continuous[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "deriv_domain") (("3" (EXPAND "deriv_domain?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL) NIL) (|powerseries_cont-2| "o" 3304438573 ("" (SKOSIMP*) (("" (LEMMA "powerseries_derivable") (("" (INST?) (("" (ASSERT) (("" (EXPAND "continuous") (("" (SKOSIMP*) (("" (EXPAND "derivable?") (("" (INST?) (("" (LEMMA "derivable_continuous[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL) SHOSTAK) (|powerseries_cont-1| |nil| 3304438520 ("" (SKOSIMP*) (("" (LEMMA "powerseries_derivable") (("" (INST?) (("" (ASSERT) (("" (EXPAND "continuous") (("" (SKOSIMP*) (("" (EXPAND "derivable?") (("" (INST?) (("" (LEMMA "derivable_continuous[T]") (("1" (INST?) (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) NIL))))))) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL))) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL)))))))))))))))))))) NIL) NIL NIL)) (|Inf_sum_derivable| 0 (|Inf_sum_derivable-1| |nil| 3298196058 ("" (SKOSIMP*) (("" (LEMMA "powerseries_deriv") (("" (INST?) (("" (EXPAND "conv_powerseries?") (("" (REPLACE -2) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "Inf_sum") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powerseries_deriv| FORMULA-DECL NIL |power_series_deriv| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|deriv_Inf_sum_TCC1| 0 (|deriv_Inf_sum_TCC1-1| |nil| 3298199128 ("" (SKOSIMP*) (("" (REWRITE "Inf_sum_derivable") NIL NIL)) NIL) ((|Inf_sum_derivable| FORMULA-DECL NIL |power_series_deriv| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)) SHOSTAK (|deriv_Inf_sum| SUBTYPE "power_series_conv[T].Inf_sum(power_series_deriv.a)" "deriv_fun[T]"))) (|deriv_Inf_sum_TCC2| 0 (|deriv_Inf_sum_TCC2-1| |nil| 3298199128 ("" (SKOSIMP*) (("" (REWRITE "conv_derivseq") NIL NIL)) NIL) ((|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL)) SHOSTAK (|deriv_Inf_sum| SUBTYPE "power_series_derivseq[T].derivseq(power_series_deriv.a)" "(power_series_conv[T].conv_powerseries?)"))) (|deriv_Inf_sum| 0 (|deriv_Inf_sum-1| |nil| 3298198251 ("" (SKOSIMP*) (("" (LEMMA "powerseries_deriv") (("" (INST?) (("" (REPLACE -2) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "Inf_sum") (("" (REPLACE -2 * RL) (("" (HIDE -2) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "powerseries" +) (("1" (LEMMA "deriv_series_shift") (("1" (INST?) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "derivseq_conv") (("2" (INST?) (("2" (INST?) (("2" (REPLACE -3) (("2" (EXPAND "powerseries") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "deriv_powerseries_conv") (("3" (INST?) (("3" (SKOSIMP*) (("3" (REPLACE -3) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powerseries_deriv| FORMULA-DECL NIL |power_series_deriv| NIL) (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|a!1| SKOLEM-CONST-DECL "sequence[real]" |power_series_deriv| NIL) (|deriv_powerseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (|deriv_series_shift| FORMULA-DECL NIL |power_series_derivseq| NIL) (|derivseq_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|deriv_powerseries_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|deriv_Inf_sum_derivable| 0 (|deriv_Inf_sum_derivable-1| |nil| 3298201761 ("" (SKOSIMP*) (("" (EXPAND "Inf_sum") (("" (LEMMA "deriv_Inf_sum") (("" (INST?) (("" (ASSERT) (("" (EXPAND "Inf_sum") (("" (REPLACE -1) (("" (HIDE -1) (("" (LEMMA "powerseries_derivable") (("" (HIDE -2) (("" (INST?) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (SKOSIMP*) (("2" (EXPAND "powerseries") (("2" (REWRITE "derivseq_conv") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|derivseq_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (|powerseries_derivable| FORMULA-DECL NIL |power_series_deriv| NIL) (|deriv_Inf_sum| FORMULA-DECL NIL |power_series_deriv| NIL)) NIL)) (|Inf_sum_derivable_n_times| 0 (|Inf_sum_derivable_n_times-1| |nil| 3298201873 ("" (EXPAND "Inf_sum") (("" (INDUCT "n" 1) (("1" (SKOSIMP*) (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "derivable_n_times?" 1) (("2" (SPLIT +) (("1" (LEMMA "powerseries_derivable") (("1" (EXPAND "powerseries") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_Inf_sum") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "Inf_sum") (("2" (EXPAND "powerseries") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 1) (("2" (REWRITE "conv_derivseq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (EXPAND "conv_powerseries?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|deriv_Inf_sum| FORMULA-DECL NIL |power_series_deriv| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|powerseries_derivable| FORMULA-DECL NIL |power_series_deriv| NIL) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL)) NIL)))
