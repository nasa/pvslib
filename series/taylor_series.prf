(|taylor_series| (|T_pred_0| 0 (|T_pred_0-1| |nil| 3298383901 ("" (NAME "XX" "choose({X:T | TRUE})") (("1" (LEMMA "ball") (("1" (INST - "XX") (("1" (ASSERT) (("1" (LEMMA "connected_domain") (("1" (EXPAND "connected?") (("1" (CASE "XX >= 0") (("1" (INST - "-XX" "XX" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "XX" "-XX" "0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|ball| FORMULA-DECL NIL |taylor_series| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|connected_domain| FORMULA-DECL NIL |taylor_series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|IMP_power_series_deriv_TCC1| 0 (|IMP_power_series_deriv_TCC1-1| |nil| 3298366313 ("" (LEMMA "connected_domain") (("" (PROPAX) NIL NIL)) NIL) ((|connected_domain| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|IMP_power_series_deriv| ASSUMING "power_series_deriv[T].power_series_deriv" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|IMP_power_series_deriv_TCC2| 0 (|IMP_power_series_deriv_TCC2-2| "" 3790091757 ("" (LEMMA "not_one_element") (("" (PROPAX) NIL NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|IMP_power_series_deriv| ASSUMING "power_series_deriv[T].power_series_deriv" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")) (|IMP_power_series_deriv_TCC2-1| |nil| 3298366313 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (INST?) NIL NIL)) NIL)) NIL) NIL SHOSTAK (|IMP_power_series_deriv| ASSUMING "power_series_deriv[T].power_series_deriv" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|IMP_power_series_deriv_TCC3| 0 (|IMP_power_series_deriv_TCC3-1| |nil| 3298366313 ("" (SKOSIMP*) (("" (LEMMA "open") (("" (INST?) NIL NIL)) NIL)) NIL) ((|open| FORMULA-DECL NIL |taylor_series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|IMP_power_series_deriv| ASSUMING "power_series_deriv[T].power_series_deriv" "open: ASSUMPTION FORALL (x: power_series_deriv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_deriv.T_pred(y))"))) (|IMP_power_series_deriv_TCC4| 0 (|IMP_power_series_deriv_TCC4-1| |nil| 3298366313 ("" (LEMMA "ball") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ball| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|IMP_power_series_deriv| ASSUMING "power_series_deriv[T].power_series_deriv" "ball: ASSUMPTION FORALL (x: power_series_deriv.T): booleans.IMPLIES(power_series_deriv.T_pred(x), power_series_deriv.T_pred((number_fields.-)(x)))"))) (|deriv_domain| 0 (|deriv_domain-2| "" 3882429061 ("" (LEMMA CONNECTED_DOMAIN) (("" (LEMMA NOT_ONE_ELEMENT) (("" (LEMMA "connected_deriv_domain[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|deriv_domain-1| |nil| 3472466626 ("" (LEMMA CONNECTED_DOMAIN) (("" (LEMMA NOT_ONE_ELEMENT) (("" (LEMMA CONNECTED_DERIV_DOMAIN[T]) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|) (|connected_domain| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK)) (|Inf_sum_0_TCC1| 0 (|Inf_sum_0_TCC1-1| |nil| 3298366313 ("" (SKOSIMP*) (("" (NAME "XX" "epsilon({X:T | TRUE})") (("" (LEMMA "ball") (("" (INST - "XX") (("" (ASSERT) (("" (LEMMA "connected_domain") (("" (EXPAND "connected?") (("" (CASE "XX >= 0") (("1" (INST - "-XX" "XX" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "XX" "-XX" "0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|epsilon| CONST-DECL "T" |epsilons| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|connected_domain| FORMULA-DECL NIL |taylor_series| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ball| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|Inf_sum_0| SUBTYPE "0" "T"))) (|Inf_sum_0| 0 (|Inf_sum_0-1| |nil| 3298299936 ("" (SKOSIMP*) (("" (EXPAND "Inf_sum") (("" (ASSERT) (("" (EXPAND "powerseries") (("" (EXPAND "powerseq") (("" (CASE-REPLACE "(LAMBDA (k: nat): a!1(k) * 0 ^ k) =
                       (LAMBDA (k: nat):
                       IF k = 0 THEN a!1(0) ELSE 0 ENDIF)") (("1" (HIDE -1) (("1" (EXPAND "series") (("1" (LEMMA "sigma_first[nat]") (("1" (INST?) (("1" (CASE-REPLACE "(LAMBDA (n: nat):
                  sigma(0, n,
                        (LAMBDA (k: nat): IF k = 0 THEN a!1(0) ELSE 0 ENDIF))) =
                 (LAMBDA (n: nat): a!1(0) )") (("1" (LEMMA "limit_const") (("1" (INST - "a!1(0)") (("1" (ASSERT) (("1" (EXPAND "const_fun") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LEMMA "sigma_first[nat]") (("2" (INST?) (("2" (ASSERT) (("2" (CASE-REPLACE "x!1 = 0") (("1" (EXPAND "sigma" 1) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_restrict_to") (("2" (EXPAND "restrict") (("2" (LEMMA "sigma_const") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| |reals|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sigma_const| FORMULA-DECL NIL |sigma| |reals|) (|sigma_restrict_to| FORMULA-DECL NIL |sigma| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|limit_const| FORMULA-DECL NIL |convergence_ops| |analysis|) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|nderivseq_lem| 0 (|nderivseq_lem-1| |nil| 3298373671 ("" (SKOSIMP*) (("" (EXPAND "nderivseq") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (REWRITE "factorial_plus1") (("" (ASSERT) (("" (EXPAND "derivseq") (("" (NAME-REPLACE "FNX" "factorial(n!1 + x!1)") (("" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nderivseq| CONST-DECL "sequence[real]" |taylor_series| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|factorial_plus1| FORMULA-DECL NIL |factorial| |ints|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|conv_nderivseq| 0 (|conv_nderivseq-1| |nil| 3298367015 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "nderivseq") (("1" (CASE-REPLACE "(LAMBDA (k: nat): factorial(k) / factorial(k) * a!1(k)) = a!1") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "nderivseq_lem") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (REWRITE "conv_derivseq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|nderivseq_lem| FORMULA-DECL NIL |taylor_series| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nderivseq| CONST-DECL "sequence[real]" |taylor_series| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|Inf_sum_derivable_n_times| 0 (|Inf_sum_derivable_n_times-2| "" 3790091759 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "derivable_n_times?" 1) (("2" (REWRITE "Inf_sum_derivable") (("2" (INST - "derivseq(a!1)") (("2" (REWRITE "conv_derivseq") (("2" (REWRITE "deriv_Inf_sum") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Inf_sum_derivable| FORMULA-DECL NIL |power_series_deriv| NIL) (|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|deriv_Inf_sum| FORMULA-DECL NIL |power_series_deriv| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|Inf_sum_derivable_n_times-1| |nil| 3298373838 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "derivable_n_times?" 1) (("2" (REWRITE "Inf_sum_derivable") (("2" (INST - "derivseq(a!1)") (("2" (REWRITE "conv_derivseq") (("2" (REWRITE "deriv_Inf_sum") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "connected_domain") (("4" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL) SHOSTAK)) (|nderiv_Inf_sum_TCC1| 0 (|nderiv_Inf_sum_TCC1-1| |nil| 3298366314 ("" (SKOSIMP*) (("" (REWRITE "Inf_sum_derivable_n_times") NIL NIL)) NIL) ((|Inf_sum_derivable_n_times| FORMULA-DECL NIL |taylor_series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)) SHOSTAK (|nderiv_Inf_sum| SUBTYPE "power_series_conv[T].Inf_sum(taylor_series.a)" "nderiv_fun[T](taylor_series.n)"))) (|nderiv_Inf_sum_TCC2| 0 (|nderiv_Inf_sum_TCC2-1| |nil| 3298366314 ("" (SKOSIMP*) (("" (LEMMA " conv_nderivseq") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|conv_nderivseq| FORMULA-DECL NIL |taylor_series| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|nderiv_Inf_sum| SUBTYPE "taylor_series.nderivseq(taylor_series.n, taylor_series.a)" "(power_series_conv[T].conv_powerseries?)"))) (|nderiv_Inf_sum| 0 (|nderiv_Inf_sum-1| |nil| 3298302128 ("" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderivseq") (("1" (CASE-REPLACE "(LAMBDA (k: nat): factorial(k) / factorial(k) * a!1(k)) = a!1") (("1" (HIDE 2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nderiv" 1) (("2" (LEMMA "deriv_Inf_sum") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (INST?) (("2" (REWRITE "conv_derivseq") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (CASE-REPLACE "nderivseq(j!1, derivseq(a!1)) = nderivseq(1 + j!1, a!1)") (("2" (HIDE 2) (("2" (EXPAND "nderivseq") (("2" (EXPAND "derivseq") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (NAME-REPLACE "AA" "a!1(1 + j!1 + x!1)") (("2" (CASE-REPLACE "factorial(1 + j!1 + x!1) = (1 + j!1 + x!1)*factorial(j!1 + x!1)") (("1" (NAME-REPLACE "FF" "factorial(j!1 + x!1)") (("1" (FIELD 1) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "factorial" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (REWRITE "conv_nderivseq") NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (REWRITE "Inf_sum_derivable_n_times") NIL NIL)) NIL)) NIL)) NIL) ((|Inf_sum_derivable_n_times| FORMULA-DECL NIL |taylor_series| NIL) (|conv_nderivseq| FORMULA-DECL NIL |taylor_series| NIL) (|deriv_Inf_sum| FORMULA-DECL NIL |power_series_deriv| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|nderivseq| CONST-DECL "sequence[real]" |taylor_series| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|Taylor_expansion| 0 (|Taylor_expansion-1| |nil| 3298298896 ("" (SKOSIMP*) (("" (REPLACE -2) (("" (LEMMA "nderiv_Inf_sum") (("" (INST?) (("" (ASSERT) (("" (REPLACE -1) (("" (HIDE -1) (("" (LEMMA "Inf_sum_0") (("" (REWRITE "Inf_sum_0") (("1" (LEMMA "Inf_sum_derivable_n_times") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "nderivseq") (("1" (EXPAND "factorial" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "conv_nderivseq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|Inf_sum_0| FORMULA-DECL NIL |taylor_series| NIL) (|conv_nderivseq| FORMULA-DECL NIL |taylor_series| NIL) (|Inf_sum_derivable_n_times| FORMULA-DECL NIL |taylor_series| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nderivseq| CONST-DECL "sequence[real]" |taylor_series| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nderiv_Inf_sum| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK)) (|Taylor_seq_TCC1| 0 (|Taylor_seq_TCC1-1| |nil| 3298631644 ("" (SKOSIMP*) (("" (REWRITE "T_pred_0") NIL NIL)) NIL) ((|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|Taylor_seq| SUBTYPE "0" "T"))) (|Taylor_seq_TCC2| 0 (|Taylor_seq_TCC2-1| |nil| 3298631644 ("" (SKOSIMP*) (("" (TYPEPRED "f!1") (("" (EXPAND "inf_deriv_fun?") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) SHOSTAK (|Taylor_seq| SUBTYPE "taylor_series.f" "nderiv_fun[T](taylor_series.n)"))) (|Taylor_seq_term_TCC1| 0 (|Taylor_seq_term_TCC1-1| |nil| 3298631644 ("" (SKOSIMP*) (("" (REWRITE "T_pred_0") NIL NIL)) NIL) ((|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|Taylor_seq_term| SUBTYPE "0" "T"))) (|Taylor_seq_term_TCC2| 0 (|Taylor_seq_term_TCC2-1| |nil| 3298631644 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|Taylor_seq_term| SUBTYPE "taylor_series.n" "{i: integers.int | booleans.OR(taylor_series.x /= 0, reals.>=(i, 0))}"))) (|Taylor_seq_term_TCC3| 0 (|Taylor_seq_term_TCC3-1| |nil| 3298631644 ("" (SKOSIMP*) (("" (REWRITE "T_pred_0") NIL NIL)) NIL) ((|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (|Taylor_seq_term| SUBTYPE "0" "T"))) (|Taylor_seq_term| 0 (|Taylor_seq_term-2| "" 3790091761 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "Taylor_seq") (("" (EXPAND "Taylor_term") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|Taylor_term| CONST-DECL "real" |taylors| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Taylor_seq| CONST-DECL "real" |taylor_series| NIL) (|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|Taylor_seq_term-1| |nil| 3298383588 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Taylor_seq") (("1" (EXPAND "Taylor_term") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL) ("3" (REWRITE "T_pred_0") (("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL) SHOSTAK)) (GET_C_TCC1 0 (GET_C_TCC1-1 |nil| 3298631645 ("" (SKOSIMP*) (("" (TYPEPRED "f!1") (("" (EXPAND "inf_deriv_fun?") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) SHOSTAK (GET_C SUBTYPE "taylor_series.f" "nderiv_fun[T]((number_fields.+)(1, taylor_series.k))"))) (GET_C_TCC2 0 (GET_C_TCC2-1 |nil| 3298631645 ("" (SKOSIMP*) (("" (REWRITE "T_pred_0") NIL NIL)) NIL) ((|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL)) SHOSTAK (GET_C SUBTYPE "0" "T"))) (GET_C_TCC3 0 (GET_C_TCC3-3 |nil| 3306575811 ("" (INST + "(LAMBDA (f:(inf_deriv_fun?[T]), x:T, k: nat):
                             choose({c: between[T](0, x) |
                                      powerseries(Taylor_seq(f))(x)(k) =
                                       f(x) -
                                        Taylor_rem(k, f, 0, x, c)}))") (("1" (SKOSIMP*) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (LEMMA "Taylors_inf[T]") (("1" (INST - "0" "x!1" "f!1" "k!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST - "c!1") (("1" (LEMMA "Taylor_seq_term") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "powerseries") (("1" (EXPAND "powerseq") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (EXPAND "series") (("1" (CASE-REPLACE "(LAMBDA (k: nat): Taylor_seq(f!1)(k) * x!1 ^ k
                                     ) = (LAMBDA n:
                                               IF n = 0 THEN f!1(0) ELSE Taylor_seq(f!1)(n) * x!1 ^ n ENDIF)") (("1" (HIDE 2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "Taylor_seq") (("1" (EXPAND "nderiv") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "T_pred_0") NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "f!1") (("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|Taylors_inf| FORMULA-DECL NIL |taylors| |analysis|) (|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Taylor_seq_term| FORMULA-DECL NIL |taylor_series| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|Taylor_seq| CONST-DECL "real" |taylor_series| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|Taylor_rem| CONST-DECL "real" |taylors| |analysis|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (GET_C EXISTENCE "" "[d: [(inf_deriv_fun?[T]), T, nat] -> {c: taylors[T].between(0, d`2) | power_series.powerseries(taylor_series.Taylor_seq(d`1))(d`2)(d`3) = (number_fields.-)(d`1(d`2), taylors[T].Taylor_rem(d`3, d`1, 0, d`2, c))}]")) (GET_C_TCC3-2 |nil| 3298627880 ("" (INST + "(LAMBDA (f:(inf_deriv_fun?[T]), x:T, k: nat):
                     choose({c: between[T](0, x) |
                              powerseries(Taylor_seq[T](f))(x)(k) =
                               f(x) -
                                Taylor_rem[T](k, f, 0, x, c)}))") (("1" (SKOSIMP*) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (LEMMA "Taylors_inf[T]") (("1" (INST - "0" "x!1" "f!1" "k!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST - "c!1") (("1" (LEMMA "Taylor_seq_term") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "powerseries") (("1" (EXPAND "powerseq") (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (EXPAND "series") (("1" (CASE-REPLACE "(LAMBDA (k: nat):
              IF k = 0 THEN Taylor_seq[T](f!1)(0)
              ELSE Taylor_seq[T](f!1)(k) * x!1 ^ k
              ENDIF) = (LAMBDA n:
               IF n = 0 THEN f!1(0) ELSE Taylor_seq(f!1)(n) * x!1 ^ n ENDIF)") (("1" (HIDE 2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "Taylor_seq") (("1" (EXPAND "nderiv") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "T_pred_0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (SKOSIMP*) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (REWRITE "T_pred_0") NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (TYPEPRED "f!1") (("5" (EXPAND "inf_deriv_fun?") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("6" (LEMMA "not_one_element") (("6" (SKOSIMP*) NIL NIL)) NIL) ("7" (LEMMA "connected_domain") (("7" (SKOSIMP*) NIL NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL) NIL (GET_C EXISTENCE "" "[d: [(inf_deriv_fun?[T]), T, nat] -> {c: taylors[T].between(0, d`2) | power_series.powerseries(taylor_series.Taylor_seq(d`1))(d`2)(d`3) = (number_fields.-)(d`1(d`2), taylors[T].Taylor_rem(d`3, d`1, 0, d`2, c))}]")) (GET_C_TCC3-1 |nil| 3298627046 ("" (INST + "(LAMBDA (f:(inf_deriv_fun?[T]), x:T, k: nat):
                   choose({c: between[T](0, x) |
                            powerseries(Taylor_seq[T](f))(x)(k) =
                             f(x) -
                              Taylor_rem[T](1 + k, f, 0, x, c)}))") (("1" (SKOSIMP*) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (LEMMA "Taylors_inf[T]") (("1" (INST - "0" "x!1" "f!1" "k!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST - "c!1") (("1" (LEMMA "Taylor_seq_term") (("1" (INST?) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (SKOSIMP*) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (REWRITE "T_pred_0") NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (TYPEPRED "f!1") (("5" (EXPAND "inf_deriv_fun?") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("6" (LEMMA "not_one_element") (("6" (SKOSIMP*) NIL NIL)) NIL) ("7" (LEMMA "connected_domain") (("7" (SKOSIMP*) NIL NIL)) NIL)) NIL) NIL SHOSTAK (GET_C EXISTENCE "" "[d: [(inf_deriv_fun?[T]), T, nat] -> {c: taylors[T].between(0, d`2) | power_series.powerseries(taylor_series.Taylor_seq(d`1))(d`2)(d`3) = (number_fields.-)(d`1(d`2), taylors[T].Taylor_rem(d`3, d`1, 0, d`2, c))}]"))) (|is_taylor_prep_TCC1| 0 (|is_taylor_prep_TCC1-1| |nil| 3298631645 ("" (SKOSIMP*) (("" (EXPAND "inf_deriv_fun?") (("" (INST?) NIL NIL)) NIL)) NIL) ((|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|is_taylor_prep| SUBTYPE "taylor_series.f" "nderiv_fun[T]((number_fields.+)(1, taylor_series.n))"))) (|is_taylor_prep| 0 (|is_taylor_prep-3| |nil| 3306575640 ("" (SKOSIMP*) (("" (EXPAND "conv_powerseries?") (("" (SKOSIMP*) (("" (CASE-REPLACE "powerseries(Taylor_seq(f!1))(x!1) = (LAMBDA n:
                          f!1(x!1) - Taylor_rem(n, f!1, 0, x!1, GET_C(f!1,x!1,n)))") (("1" (HIDE -1) (("1" (INST?) (("1" (LEMMA "convergent_diff") (("1" (INST - "(LAMBDA n: f!1(x!1))" "(LAMBDA n: Taylor_rem(n, f!1, 0, x!1, GET_C(f!1, x!1, n)))") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "convergent_const") (("1" (EXPAND "const_fun") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL) ("3" (SKOSIMP*) (("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "T_pred_0") NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "inf_deriv_fun?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "T_pred_0") NIL NIL) ("4" (SKOSIMP*) (("4" (EXPAND "inf_deriv_fun?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (|Taylor_seq| CONST-DECL "real" |taylor_series| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|Taylor_rem| CONST-DECL "real" |taylors| |analysis|) (GET_C CONST-DECL "{c: between[T](0, x) |
   powerseries(Taylor_seq(f))(x)(k) = f(x) - Taylor_rem(k, f, 0, x, c)}" |taylor_series| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |taylor_series| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|convergent_const| FORMULA-DECL NIL |convergence_ops| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|T_pred_0| FORMULA-DECL NIL |taylor_series| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|convergent_diff| FORMULA-DECL NIL |convergence_ops| |analysis|)) NIL) (|is_taylor_prep-2| |nil| 3298631567 ("" (SKOSIMP*) (("" (EXPAND "conv_powerseries?") (("" (SKOSIMP*) (("" (CASE-REPLACE "powerseries(Taylor_seq[T](f!1))(x!1) = (LAMBDA n:
                        f!1(x!1) - Taylor_rem(n, f!1, 0, x!1, GET_C(f!1,x!1,n)))") (("1" (HIDE -1) (("1" (INST?) (("1" (LEMMA "convergent_diff") (("1" (INST - "(LAMBDA n: f!1(x!1))" "(LAMBDA n: Taylor_rem(n, f!1, 0, x!1, GET_C(f!1, x!1, n)))") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "convergent_const") (("1" (EXPAND "const_fun") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL) ("3" (SKOSIMP*) (("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "T_pred_0") NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "inf_deriv_fun?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "T_pred_0") NIL NIL) ("4" (SKOSIMP*) (("4" (EXPAND "inf_deriv_fun?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL) NIL) (|is_taylor_prep-1| |nil| 3298379071 ("" (SKOSIMP*) (("" (EXPAND "conv_powerseries?") (("" (SKOSIMP*) (("" (LEMMA "convergent_diff") (("" (INST - "(LAMBDA (k: nat): f!1(x!1))" "(LAMBDA k: Taylor_rem(k+1, f!1, 0, x!1, GET_C(f!1,x!1,k)))") (("1" (EXPAND "-") (("1" (EXPAND "powerseries") (("1" (LEMMA "Taylor_seq_term") (("1" (INST?) (("1" (EXPAND "powerseq") (("1" (INST - "x!1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "T_pred_0") NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|is_taylor_TCC1| 0 (|is_taylor_TCC1-1| |nil| 3298374726 ("" (SKOSIMP*) (("" (LEMMA "is_taylor_prep") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (SKOSIMP*) (("" (INST?) (("" (EXPAND "convergent?") (("" (INST + "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|is_taylor_prep| FORMULA-DECL NIL |taylor_series| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|is_taylor| SUBTYPE "taylor_series.Taylor_seq(taylor_series.f)" "(power_series_conv[T].conv_powerseries?)"))) (|is_taylor| 0 (|is_taylor-3| "" 3790091763 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "Inf_sum") (("" (EXPAND "powerseries") (("" (LEMMA "limit_def") (("" (INST?) (("" (INST - "f!1(x!1)") (("" (ASSERT) (("" (HIDE 2) (("" (INST?) (("" (EXPAND "convergence") (("" (SKOSIMP*) (("" (INST - "epsilon!1") (("" (SKOSIMP*) (("" (INST + "n!1") (("" (SKOSIMP*) (("" (INST - "i!1") (("" (ASSERT) (("" (NAME "C" "GET_C(f!1, x!1, i!1)") (("" (TYPEPRED "C") (("" (EXPAND "powerseries") (("" (REPLACE -5) (("" (HIDE -5) (("" (LEMMA "abs_neg") (("" (INST - "Taylor_rem(i!1, f!1, 0, x!1, C)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |taylor_series| NIL) (T FORMAL-NONEMPTY-SUBTYPE-DECL NIL |taylor_series| NIL) (|Taylor_seq| CONST-DECL "real" |taylor_series| NIL) (|inf_deriv_fun?| CONST-DECL "bool" |taylors| |analysis|) (|Inf_sum| CONST-DECL "real" |power_series_conv| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|series| CONST-DECL "sequence[real]" |series| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|Taylor_rem| CONST-DECL "real" |taylors| |analysis|) (GET_C CONST-DECL "{c: between[T](0, x) |
   powerseries(Taylor_seq(f))(x)(k) = f(x) - Taylor_rem(k, f, 0, x, c)}" |taylor_series| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|limit_def| FORMULA-DECL NIL |convergence_sequences| |analysis|)) SHOSTAK) (|is_taylor-2| "sdf" 3298630239 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Inf_sum") (("1" (EXPAND "powerseries") (("1" (LEMMA "limit_def") (("1" (INST?) (("1" (INST - "f!1(x!1)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST?) (("1" (EXPAND "convergence") (("1" (SKOSIMP*) (("1" (INST - "epsilon!1") (("1" (SKOSIMP*) (("1" (INST + "n!1") (("1" (SKOSIMP*) (("1" (INST - "i!1") (("1" (ASSERT) (("1" (NAME "C" "GET_C(f!1, x!1, i!1)") (("1" (TYPEPRED "C") (("1" (EXPAND "powerseries") (("1" (REPLACE -5) (("1" (HIDE -5) (("1" (LEMMA "abs_neg") (("1" (INST - "Taylor_rem(i!1, f!1, 0, x!1, C)") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "T_pred_0") NIL NIL) ("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "is_taylor_prep") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conv_powerseries?") (("2" (SPLIT -1) (("1" (EXPAND "powerseries") (("1" (INST?) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "convergent?") (("2" (INST + "0") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "is_taylor_prep") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "convergent?") (("2" (INST + "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sdf| "sdf" 3298630207 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Inf_sum") (("1" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|is_taylor-1| |nil| 3298374780 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Inf_sum") (("1" (EXPAND "powerseries") (("1" (LEMMA "limit_def") (("1" (INST?) (("1" (INST - "f!1(x!2)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "convergence") (("1" (SKOSIMP*) (("1" (LEMMA "Taylors_inf[T]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "powerseq") (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)))
