(|power_series_deriv_scaf| (|deriv_domain| 0 (|deriv_domain-1| |nil| 3471698080 ("" (LEMMA "connected_domain") (("" (LEMMA "not_one_element") (("" (LEMMA "connected_deriv_domain[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|) (|connected_domain| FORMULA-DECL NIL |power_series_deriv_scaf| NIL)) SHOSTAK)) (|IMP_power_series_derivseq_TCC1| 0 (|IMP_power_series_derivseq_TCC1-1| |nil| 3299583481 ("" (LEMMA "connected_domain") (("" (PROPAX) NIL NIL)) NIL) ((|connected_domain| FORMULA-DECL NIL |power_series_deriv_scaf| NIL)) SHOSTAK (|IMP_power_series_derivseq| ASSUMING "power_series_derivseq[T].power_series_derivseq" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|IMP_power_series_derivseq_TCC2| 0 (|IMP_power_series_derivseq_TCC2-1| |nil| 3299583481 ("" (LEMMA "not_one_element") (("" (PROPAX) NIL NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |power_series_deriv_scaf| NIL)) SHOSTAK (|IMP_power_series_derivseq| ASSUMING "power_series_derivseq[T].power_series_derivseq" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|IMP_power_series_derivseq_TCC3| 0 (|IMP_power_series_derivseq_TCC3-1| |nil| 3299583481 ("" (LEMMA "open") (("" (PROPAX) NIL NIL)) NIL) ((|open| FORMULA-DECL NIL |power_series_deriv_scaf| NIL)) SHOSTAK (|IMP_power_series_derivseq| ASSUMING "power_series_derivseq[T].power_series_derivseq" "open: ASSUMPTION FORALL (x: power_series_derivseq.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_derivseq.T_pred(y))"))) (|IMP_power_series_derivseq_TCC4| 0 (|IMP_power_series_derivseq_TCC4-1| |nil| 3299583481 ("" (LEMMA "ball") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ball| FORMULA-DECL NIL |power_series_deriv_scaf| NIL)) SHOSTAK (|IMP_power_series_derivseq| ASSUMING "power_series_derivseq[T].power_series_derivseq" "ball: ASSUMPTION FORALL (x: power_series_derivseq.T): booleans.IMPLIES(power_series_derivseq.T_pred(x), power_series_derivseq.T_pred((number_fields.-)(x)))"))) (|GET_tk_prep_TCC1| 0 (|GET_tk_prep_TCC2-1| |nil| 3298801888 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|GET_tk_prep| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(power_series_deriv_scaf.h, power_series_deriv_scaf.x) = 0), reals.>=(i, 0))}"))) (|GET_tk_prep_TCC2| 0 (|GET_tk_prep_TCC3-1| |nil| 3298801888 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|GET_tk_prep| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR(power_series_deriv_scaf.x /= 0, reals.>=(i, 0))}"))) (|GET_tk_prep_TCC3| 0 (|GET_tk_prep_TCC4-1| |nil| 3790091548 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|GET_tk_prep| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 1))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.tk /= 0, reals.>=(i, 0))}"))) (|GET_tk_prep| 0 (|GET_tk_prep-2| "" 3790091686 ("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "mean_value[T]") (("1" (INST - "x!1" "x!1 + h!1" "(LAMBDA (x:T): x^k!1)") (("1" (ASSERT) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST -6 "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ k!1) = (LAMBDA (x: T): x ^ k!1)") (("1" (HIDE -1) (("1" (CASE "deriv(LAMBDA (x: T): x ^ k!1)(c!1) =
                          (LAMBDA (x: T): x ^ (k!1 - 1) * k!1)(c!1)") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1+h!1" "x!1" "(LAMBDA (x:T): x^k!1)") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -6 "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ k!1) = (LAMBDA (x: T): x ^ k!1)") (("1" (HIDE -1) (("1" (CASE "deriv(LAMBDA (x: T): x ^ k!1)(c!1) =
                                           (LAMBDA (x: T): x ^ (k!1 - 1) * k!1)(c!1)") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|connected_domain| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|not_one_element| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|h!1| SKOLEM-CONST-DECL "(A(x!1))" |power_series_deriv_scaf| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|deriv_x_to_n| FORMULA-DECL NIL |derivatives| |analysis|) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|empty?| CONST-DECL "bool" |sets| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|GET_tk_prep-1| |nil| 3298801536 ("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "mean_value[T]") (("1" (INST - "x!1" "x!1 + h!1" "(LAMBDA (x:T): x^k!1)") (("1" (ASSERT) (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "k!1" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST -6 "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ k!1) = (LAMBDA (x: T): x ^ k!1)") (("1" (HIDE -1) (("1" (CASE "deriv(LAMBDA (x: T): x ^ k!1)(c!1) =
                          (LAMBDA (x: T): x ^ (k!1 - 1) * k!1)(c!1)") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1+h!1" "x!1" "(LAMBDA (x:T): x^k!1)") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -6 "c!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ k!1) = (LAMBDA (x: T): x ^ k!1)") (("1" (HIDE -1) (("1" (CASE "deriv(LAMBDA (x: T): x ^ k!1)(c!1) =
                                           (LAMBDA (x: T): x ^ (k!1 - 1) * k!1)(c!1)") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (REPLACE -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_domain[T]") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|GET_tk_TCC1| 0 (|GET_tk_TCC1-1| NIL 3882428785 ("" (SUBTYPE-TCC) NIL NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|GET_tk| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(power_series_deriv_scaf.h, power_series_deriv_scaf.x) = 0), reals.>=(i, 0))}"))) (|GET_tk_TCC2| 0 (|GET_tk_TCC2-1| NIL 3882428785 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|GET_tk| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR(power_series_deriv_scaf.x /= 0, reals.>=(i, 0))}"))) (|GET_tk_TCC3| 0 (|GET_tk_TCC3-1| NIL 3882428785 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|GET_tk| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 1))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.tk /= 0, reals.>=(i, 0))}"))) (|GET_tk_TCC4| 0 (|GET_tk_TCC1-1| |nil| 3298736072 ("" (WITH-TCCS (INST + "(LAMBDA (d: [x: T, (A[T](x)), posnat]):
                            choose({tk: between[T](d`1, d`1 + d`2) |
                                          ((d`1 + d`2) ^ d`3 - d`1 ^ d`3) / d`2 =
                                           d`3 * tk ^ (d`3 - 1)}))")) (("" (SKOSIMP*) (("" (LEMMA "GET_tk_prep") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|GET_tk_prep| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK (|GET_tk| EXISTENCE "" "[d: [x: T, (A(x)), posnat] -> {tk: taylors[T].between(d`1, (number_fields.+)(d`1, d`2)) | number_fields./(((number_fields.-)(exponentiation.^((number_fields.+)(d`2, d`1), d`3), exponentiation.^(d`1, d`3))), d`2) = number_fields.*(d`3, exponentiation.^(tk, ((number_fields.-)(d`3, 1))))}]"))) (|Gseq_TCC1| 0 (|Gseq_TCC1-1| |nil| 3298736072 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|Gseq| SUBTYPE "power_series_deriv_scaf.k" "posnat"))) (|Gseq_TCC2| 0 (|Gseq_TCC2-1| |nil| 3298736073 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|Gseq| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 1))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.GET_tk(power_series_deriv_scaf.x, power_series_deriv_scaf.h, power_series_deriv_scaf.k) /= 0, reals.>=(i, 0))}"))) (|Gseq_TCC3| 0 (|Gseq_TCC3-1| |nil| 3298801889 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|Gseq| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 1))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.x /= 0, reals.>=(i, 0))}"))) (|conv_scaf0_TCC1| 0 (|conv_scaf0_TCC1-1| |nil| 3298999556 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|conv_scaf0| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 2))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.x /= 0, reals.>=(i, 0))}"))) (|conv_scaf0| 0 (|conv_scaf0-3| |nil| 3352091397 ("" (SKOSIMP*) (("" (LEMMA "conv_series_shift") (("" (INST?) (("1" (INST - "2") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "a!1" "_") (("1" (REPLACE -2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "derivseq(a!1)" "_") (("1" (CASE-REPLACE "conv_powerseries?(derivseq(a!1))") (("1" (EXPAND "derivseq") (("1" (EXPAND "powerseq") (("1" (LEMMA "powerseries_abs_conv") (("1" (EXPAND "powerseries") (("1" (EXPAND "powerseq") (("1" (NAME "NP2NP1" "(LAMBDA n: (n+2)*(n+1))") (("1" (INST - "(LAMBDA n: NP2NP1(n)*a!1(2 + n))") (("1" (EXPAND "abs" -2) (("1" (SPLIT -2) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (n: nat): abs(NP2NP1(n) * a!1(2 + n) * x!1 ^ n))
                  = (LAMBDA n:
                                          abs(a!1(2 + n)) * abs(x!1 ^ n) * abs(1 + n) *
                                           abs(2 + n))") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (HIDE 2) (("1" (REPLACE -2 + RL) (("1" (ASSERT) (("1" (HIDE -1) (("1" (REWRITE "abs_mult" :DIR RL) (("1" (REWRITE "abs_mult" :DIR RL) (("1" (REWRITE "abs_mult" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (REPLACE -2 + RL) (("2" (ASSERT) (("2" (HIDE -) (("2" (REWRITE "abs_mult" :DIR RL) (("2" (REWRITE "abs_mult" :DIR RL) (("2" (REWRITE "abs_mult" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -4) (("2" (INST -3 "x!2") (("2" (CASE-REPLACE "(LAMBDA (k: nat):
                          2 * (a!1(2 + k) * x!2 ^ k) +
                           3 * (k * a!1(2 + k) * x!2 ^ k)
                           + k * k * a!1(2 + k) * x!2 ^ k)
                     = (LAMBDA (k: nat): NP2NP1(k) * a!1(2 + k) * x!2 ^ k
                                  )") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 + RL) (("2" (HIDE -) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "powerseries") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_series_shift| FORMULA-DECL NIL |series| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|powerseries_abs_conv| FORMULA-DECL NIL |power_series_conv| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|derivseq_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|conv_scaf0-2| |nil| 3352091069 ("" (SKOSIMP*) (("" (LEMMA "conv_series_shift") (("" (INST?) (("1" (INST - "2") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "a!1" "_") (("1" (REPLACE -2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "derivseq(a!1)" "_") (("1" (CASE-REPLACE "conv_powerseries?(derivseq(a!1))") (("1" (EXPAND "derivseq") (("1" (REWRITE "apow_rew") (("1" (EXPAND "apowerseq") (("1" (LEMMA "powerseries_abs_conv") (("1" (EXPAND "powerseries") (("1" (REWRITE "apow_rew") (("1" (EXPAND "apowerseq") (("1" (NAME "NP2NP1" "(LAMBDA n: (n+2)*(n+1))") (("1" (INST - "(LAMBDA n: NP2NP1(n)*a!1(2 + n))") (("1" (EXPAND "abs" -2) (("1" (REWRITE "abs_mult" -) (("1" (SPLIT -2) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (n: nat):
                                          IF n = 0 THEN abs(NP2NP1(0)) * abs(a!1(2))
                                          ELSE abs(NP2NP1(n) * a!1(2 + n) * x!1 ^ n)
                                          ENDIF) = (LAMBDA n:
                                          abs(a!1(2 + n)) * abs(x!1 ^ n) * abs(1 + n) *
                                           abs(2 + n))") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (HIDE 2) (("1" (REPLACE -2 * RL) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))) ("2" (HIDE -) (("2" (GRIND) NIL))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -4) (("2" (INST -3 "x!2") (("2" (CASE-REPLACE "(LAMBDA (k: nat):
                                  IF k = 0 THEN 2 * a!1(2)
                                  ELSE 2 * (a!1(2 + k) * x!2 ^ k) +
                                        3 * (k * a!1(2 + k) * x!2 ^ k)
                                        + k * k * a!1(2 + k) * x!2 ^ k
                                  ENDIF) = (LAMBDA (k: nat):
                                  IF k = 0 THEN NP2NP1(0) * a!1(2)
                                  ELSE NP2NP1(k) * a!1(2 + k) * x!2 ^ k
                                  ENDIF)") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "powerseries") (("2" (INST?) NIL))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL)))))))) NIL) NIL NIL) (|conv_scaf0-1| |nil| 3298998432 ("" (SKOSIMP*) (("" (LEMMA "conv_series_shift") (("" (INST?) (("1" (INST - "2") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "a!1" "_") (("1" (REPLACE -2) (("1" (LEMMA "derivseq_conv") (("1" (INST - "derivseq(a!1)" "_") (("1" (CASE-REPLACE "conv_powerseries?(derivseq(a!1))") (("1" (EXPAND "derivseq") (("1" (EXPAND "powerseq") (("1" (LEMMA "powerseries_abs_conv") (("1" (EXPAND "powerseries") (("1" (EXPAND "powerseq") (("1" (NAME "NP2NP1" "(LAMBDA n: (n+2)*(n+1))") (("1" (INST - "(LAMBDA n: NP2NP1(n)*a!1(2 + n))") (("1" (EXPAND "abs" -2) (("1" (REWRITE "abs_mult" -) (("1" (SPLIT -2) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (n: nat):
                                  IF n = 0 THEN abs(NP2NP1(0)) * abs(a!1(2))
                                  ELSE abs(NP2NP1(n) * a!1(2 + n) * x!1 ^ n)
                                  ENDIF) = (LAMBDA n:
                                  abs(a!1(2 + n)) * abs(x!1 ^ n) * abs(1 + n) *
                                   abs(2 + n))") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (HIDE 2) (("1" (REPLACE -2 * RL) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (HIDE -4) (("2" (INST -3 "x!2") (("2" (CASE-REPLACE "(LAMBDA (k: nat):
                          IF k = 0 THEN 2 * a!1(2)
                          ELSE 2 * (a!1(2 + k) * x!2 ^ k) +
                                3 * (k * a!1(2 + k) * x!2 ^ k)
                                + k * k * a!1(2 + k) * x!2 ^ k
                          ENDIF) = (LAMBDA (k: nat):
                          IF k = 0 THEN NP2NP1(0) * a!1(2)
                          ELSE NP2NP1(k) * a!1(2 + k) * x!2 ^ k
                          ENDIF)") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE 2) (("2" (LIFT-IF) (("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "powerseries") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|A2seq_TCC1| 0 (|A2seq_TCC1-1| |nil| 3299340671 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)) SHOSTAK (|A2seq| SUBTYPE "((number_fields.-)(power_series_deriv_scaf.k, 2))" "{i: integers.int | booleans.OR(power_series_deriv_scaf.ALPH /= 0, reals.>=(i, 0))}"))) (|A2_conv_scaf| 0 (|A2_conv_scaf-4| |nil| 3352112983 ("" (SKOSIMP*) (("" (EXPAND "powerseq") (("" (CASE-REPLACE "abs(LAMBDA (k: nat): a!1(k) * x!1 ^ k) =
                          (LAMBDA (k: nat): abs(a!1(k) * x!1 ^ k))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(LAMBDA (k_1: nat): abs(a!1)(k_1) * abs(x!1) ^ k_1) =
     (LAMBDA (k_1: nat): abs(a!1(k_1)) * abs(x!1^ k_1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "abs_mult") NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (REWRITE "abs_mult" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) (("2" (LEMMA "abs_expt") (("2" (EXPAND "^") (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "abs") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_expt| FORMULA-DECL NIL |exponent_props| |reals|) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL) (|A2_conv_scaf-3| |nil| 3352112910 ("" (SKOSIMP*) (("" (REWRITE "apow_rew") (("" (REWRITE "apow_rew") (("" (EXPAND "apowerseq") (("" (EXPAND "abs" 1) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_hat") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL))))))))))))) ("2" (HIDE 3) (("2" (GRIND) NIL))))))))) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (ASSERT) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1) ^ k!1 >= x!1 ^ k!1") (("1" (CASE-REPLACE "abs(a!1(k!1)) >= a!1(k!1)") (("1" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL))))) ("2" (NAME "AA" "abs(x!1) ^ k!1") (("2" (CASE "AA > 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (NAME "CC" "abs(a!1(k!1))") (("1" (CASE "CC >= 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (MULT-INEQ -3 -4) (("1" (ASSERT) (("1" (POSTPONE) NIL))) ("2" (REVEAL -1 -2) (("2" (ASSERT) (("2" (REPLACE -2 * RL) (("2" (GROUND) (("1" (REPLACE -4 + :DIR RL) (("1" (HIDE-ALL-BUT (1 -2 3 4)) (("1" (LEMMA "abs_expt") (("1" (EXPAND "^") (("1" (INST - "k!1" "x!1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (GRIND :EXCLUDE "expt") NIL))))))))))))))) ("2" (REPLACE -2 + :DIR RL) (("2" (HIDE-ALL-BUT (1 3 4)) (("2" (LEMMA "abs_expt") (("2" (EXPAND "^") (("2" (INST - "k!1" "x!1") (("2" (REPLACE -1) (("2" (HIDE -1 3) (("2" (GRIND :EXCLUDE "expt") NIL))))))))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))) ("2" (ASSERT) (("2" (REPLACE -1 + :DIR RL) (("2" (HIDE-ALL-BUT (1 2 3)) (("2" (LEMMA "abs_expt") (("2" (EXPAND "^") (("2" (INST - "k!1" "x!1") (("2" (ASSERT) (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "expt_eq_0") (("2" (EXPAND "^") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))) ("2" (HIDE 3) (("2" (ASSERT) NIL))))) ("2" (HIDE 3) (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (REWRITE "abs_0") (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (HIDE 3) (("2" (GRIND) NIL))))))) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (ASSERT) NIL))))) ("4" (SKOSIMP*) (("4" (LIFT-IF) (("4" (GROUND) NIL)))))))))))))))) NIL) NIL NIL) (|A2_conv_scaf-2| |nil| 3352094498 ("" (SKOSIMP*) (("" (REWRITE "apow_rew") (("" (REWRITE "apow_rew") (("" (EXPAND "apowerseq") (("" (EXPAND "abs" 1) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_hat") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (ASSERT) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1) ^ k!1 >= x!1 ^ k!1") (("1" (CASE-REPLACE "abs(a!1(k!1)) >= a!1(k!1)") (("1" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (REWRITE "abs_0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (NAME "AA" "abs(x!1) ^ k!1") (("2" (CASE "AA > 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (NAME "CC" "abs(a!1(k!1))") (("1" (CASE "CC >= 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (MULT-INEQ -3 -4) (("1" (FLATTEN) (("1" (REVEAL -1 -2) (("1" (SPLIT +) (("1" (REPLACE -1 * RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -2 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL 1) (("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (ASSERT) (("2" (REPLACE -1 * RL) (("2" (HIDE - 4) (("2" (LEMMA "expt_pos") (("2" (INST?) (("1" (LEMMA "abs_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REWRITE "abs_hat" :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (REWRITE "abs_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL) NIL) (|A2_conv_scaf-1| |nil| 3299581520 ("" (SKOSIMP*) (("" (EXPAND "powerseq") (("" (EXPAND "abs" 1) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_hat") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "IF x!1 < 0 THEN -x!1 ELSE x!1 ENDIF = abs(x!1)") (("1" (ASSERT) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1) ^ k!1 >= x!1 ^ k!1") (("1" (CASE-REPLACE "abs(a!1(k!1)) >= a!1(k!1)") (("1" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "AA" "abs(x!1) ^ k!1") (("2" (CASE "AA > 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (NAME "CC" "abs(a!1(k!1))") (("1" (CASE "CC >= 0") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (MULT-INEQ -3 -4) (("1" (FLATTEN) (("1" (REVEAL -1 -2) (("1" (SPLIT +) (("1" (REPLACE -1 * RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -2 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "abs_hat") (("1" (REWRITE "abs_hat") (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL 1) (("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (ASSERT) (("2" (REPLACE -1 * RL) (("2" (HIDE - 4) (("2" (LEMMA "expt_pos") (("2" (INST?) (("1" (LEMMA "abs_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REWRITE "abs_hat" :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (REWRITE "abs_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL) NIL)) (|A2_conv| 0 (|A2_conv-7| "" 3790091696 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (CASE "T_pred(ALPH)") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                                            IF k < 2 THEN k
                                                                            ELSE abs(k) * abs(k - 1) *
                                                                                  abs(a!1(k) * ALPH ^ (k - 2))
                                                                            ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (INST -1 "3") (("1" (LEMMA "powerseries_abs_conv") (("1" (INST - "fseq(a!1)") (("1" (SPLIT -1) (("1" (INST - "ALPH") (("1" (CASE-REPLACE "abs(powerseq(fseq(a!1),ALPH)) = powerseq((LAMBDA n:
                                     abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
                                     abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (REWRITE "apow_rew") (("1" (EXPAND "apowerseq") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                                                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                                                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                                                                                                ALPH ^ k
                                                                                                                                                          ENDIF)
                                                                                                                                                   = (LAMBDA n:
                                                                                                                                                          abs(1 + n) * abs(2 + n) *
                                                                                                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (HIDE -1) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (REWRITE "abs_mult") (("2" (ASSERT) (("2" (REWRITE "abs_hat") (("2" (CASE-REPLACE "abs(ALPH) = ALPH") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -8) (("2" (HIDE -2 -3 -4 -5 2 4) (("2" (REPLACE -1 * RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "fseq") (("2" (REWRITE "A2_conv_scaf") (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = (LAMBDA n: abs(1 + n) * abs(2 + n) * abs(a!1(2 + n)))") (("1" (HIDE 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = abs(fseq(a!1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) (("1" (EXPAND "fseq") (("1" (CASE-REPLACE "(2 * a!1(2 + x!2) + 3 * (a!1(2 + x!2) * x!2) +
                                               a!1(2 + x!2) * x!2 * x!2) = a!1(2 + x!2) * (1 + x!2) * (2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (HIDE -1) (("1" (CASE-REPLACE "a!1(2 + x!2) + a!1(2 + x!2) * x!2 = (1+x!2)*a!1(2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) (("2" (EXPAND "derivseq") (("2" (EXPAND "fseq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ball") (("2" (INST - "x!1") (("2" (LEMMA "ball") (("2" (INST - "xp!1") (("2" (HIDE -5 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|A2seq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|derivseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|conv_series_shift| FORMULA-DECL NIL |series| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|powerseries_abs_conv| FORMULA-DECL NIL |power_series_conv| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|apowerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|abs_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|apow_rew| FORMULA-DECL NIL |power_series| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|A2_conv_scaf| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|fseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|xp!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (ALPH SKOLEM-CONST-DECL "{z: nonneg_real | z >= abs(x!1) AND z >= abs(xp!1)}" |power_series_deriv_scaf| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|conv_derivseq| FORMULA-DECL NIL |power_series_derivseq| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|ball| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK) (|A2_conv-6| "asdf" 3352094804 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (CASE "T_pred(ALPH)") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                                            IF k < 2 THEN k
                                                                            ELSE abs(k) * abs(k - 1) *
                                                                                  abs(a!1(k) * ALPH ^ (k - 2))
                                                                            ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (INST -1 "3") (("1" (LEMMA "powerseries_abs_conv") (("1" (INST - "fseq(a!1)") (("1" (SPLIT -1) (("1" (INST - "ALPH") (("1" (CASE-REPLACE "abs(powerseq(fseq(a!1),ALPH)) = powerseq((LAMBDA n:
                                     abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
                                     abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (REWRITE "apow_rew") (("1" (EXPAND "apowerseq") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                                                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                                                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                                                                                                ALPH ^ k
                                                                                                                                                          ENDIF)
                                                                                                                                                   = (LAMBDA n:
                                                                                                                                                          abs(1 + n) * abs(2 + n) *
                                                                                                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (HIDE -1) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (REWRITE "abs_mult") (("2" (ASSERT) (("2" (REWRITE "abs_hat") (("2" (CASE-REPLACE "abs(ALPH) = ALPH") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -8) (("2" (HIDE -2 -3 -4 -5 2 4) (("2" (REPLACE -1 * RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "fseq") (("2" (REWRITE "A2_conv_scaf") (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = (LAMBDA n: abs(1 + n) * abs(2 + n) * abs(a!1(2 + n)))") (("1" (HIDE 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = abs(fseq(a!1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) (("1" (EXPAND "fseq") (("1" (CASE-REPLACE "(2 * a!1(2 + x!2) + 3 * (a!1(2 + x!2) * x!2) +
                                               a!1(2 + x!2) * x!2 * x!2) = a!1(2 + x!2) * (1 + x!2) * (2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (HIDE -1) (("1" (CASE-REPLACE "a!1(2 + x!2) + a!1(2 + x!2) * x!2 = (1+x!2)*a!1(2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) (("2" (EXPAND "derivseq") (("2" (EXPAND "fseq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ball") (("2" (INST - "x!1") (("2" (LEMMA "ball") (("2" (INST - "xp!1") (("2" (HIDE -5 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|A2_conv-5| "asdf" 3299581548 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (CASE "T_pred(ALPH)") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                                    IF k < 2 THEN k
                                                                    ELSE abs(k) * abs(k - 1) *
                                                                          abs(a!1(k) * ALPH ^ (k - 2))
                                                                    ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (INST -1 "3") (("1" (LEMMA "powerseries_abs_conv") (("1" (INST - "fseq(a!1)") (("1" (SPLIT -1) (("1" (INST - "ALPH") (("1" (CASE-REPLACE "abs(powerseq(fseq(a!1),ALPH)) = powerseq((LAMBDA n:
                         abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
                         abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (EXPAND "powerseq") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                                                                                ALPH ^ k
                                                                                                                                          ENDIF)
                                                                                                                                   = (LAMBDA n:
                                                                                                                                          abs(1 + n) * abs(2 + n) *
                                                                                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (HIDE -1) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (REWRITE "abs_mult") (("2" (ASSERT) (("2" (REWRITE "abs_hat") (("2" (CASE-REPLACE "abs(ALPH) = ALPH") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -8) (("2" (HIDE -2 -3 -4 -5 2 4) (("2" (REPLACE -1 * RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "fseq") (("2" (REWRITE "A2_conv_scaf") (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = (LAMBDA n: abs(1 + n) * abs(2 + n) * abs(a!1(2 + n)))") (("1" (HIDE 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = abs(fseq(a!1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) (("1" (EXPAND "fseq") (("1" (CASE-REPLACE "(2 * a!1(2 + x!2) + 3 * (a!1(2 + x!2) * x!2) +
                             a!1(2 + x!2) * x!2 * x!2) = a!1(2 + x!2) * (1 + x!2) * (2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (HIDE -1) (("1" (CASE-REPLACE "a!1(2 + x!2) + a!1(2 + x!2) * x!2 = (1+x!2)*a!1(2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (ASSERT) (("3" (HIDE 2) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (ASSERT) (("4" (EXPAND "abs") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) (("2" (EXPAND "derivseq") (("2" (EXPAND "fseq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ball") (("2" (INST - "x!1") (("2" (LEMMA "ball") (("2" (INST - "xp!1") (("2" (HIDE -5 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|A2_conv-4| "asdf" 3299574319 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (CASE "T_pred(ALPH)") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                            IF k < 2 THEN k
                                                            ELSE abs(k) * abs(k - 1) *
                                                                  abs(a!1(k) * ALPH ^ (k - 2))
                                                            ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (INST -1 "3") (("1" (LEMMA "powerseries_abs_conv") (("1" (INST - "fseq(a!1)") (("1" (SPLIT -1) (("1" (INST - "ALPH") (("1" (CASE-REPLACE "abs(powerseq(fseq(a!1),ALPH)) = powerseq((LAMBDA n:
             abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
             abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (EXPAND "powerseq") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                                                                ALPH ^ k
                                                                                                                          ENDIF)
                                                                                                                   = (LAMBDA n:
                                                                                                                          abs(1 + n) * abs(2 + n) *
                                                                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (HIDE -1) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -2 -3 -4) (("2" (REWRITE "abs_mult") (("2" (ASSERT) (("2" (REWRITE "abs_hat") (("2" (CASE-REPLACE "abs(ALPH) = ALPH") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -8) (("2" (HIDE -2 -3 -4 -5 2 4) (("2" (REPLACE -1 * RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (EXPAND "fseq") (("2" (REWRITE "ABC_LEM") (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = (LAMBDA n: abs(1 + n) * abs(2 + n) * abs(a!1(2 + n)))") (("1" (HIDE 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = abs(fseq(a!1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) (("1" (EXPAND "fseq") (("1" (CASE-REPLACE "(2 * a!1(2 + x!2) + 3 * (a!1(2 + x!2) * x!2) +
           a!1(2 + x!2) * x!2 * x!2) = a!1(2 + x!2) * (1 + x!2) * (2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (HIDE -1) (("1" (CASE-REPLACE "a!1(2 + x!2) + a!1(2 + x!2) * x!2 = (1+x!2)*a!1(2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (ASSERT) (("3" (HIDE 2) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE 2) (("4" (ASSERT) (("4" (EXPAND "abs") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (EXPAND "conv_powerseries?") (("2" (INST?) (("2" (EXPAND "derivseq") (("2" (EXPAND "fseq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "ball") (("2" (INST - "x!1") (("2" (LEMMA "ball") (("2" (INST - "xp!1") (("2" (HIDE -5 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL) NIL) (|A2_conv-3| "asdf" 3299574158 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                IF k < 2 THEN k
                                                ELSE abs(k) * abs(k - 1) *
                                                      abs(a!1(k) * ALPH ^ (k - 2))
                                                ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "A2_prep") (("1" (INST - "a!1" "ALPH") (("1" (SPLIT -1) (("1" (CASE-REPLACE "abs(powerseq((LAMBDA
                                                                                      n:
                                                                                      (1 + n) * (2 + n) * a!1(2 + n)),
                                                                                     ALPH)) = powerseq((LAMBDA
                                                                                      n:
                                                                                      abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
                                                                                     abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                                ALPH ^ k
                                                                                          ENDIF)
                                                                                   = (LAMBDA n:
                                                                                          abs(1 + n) * abs(2 + n) *
                                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (GROUND) (("1" (HIDE 3) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (HIDE -2 -3 -4 -5 2 4) (("1" (REPLACE -1 * RL) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL NIL) (|A2_conv-2| "asdf" 3299518193 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                                IF k < 2 THEN k
                                                ELSE abs(k) * abs(k - 1) *
                                                      abs(a!1(k) * ALPH ^ (k - 2))
                                                ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "A2_prep") (("1" (INST - "a!1" "ALPH") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|asdf| "asdf" 3299518171 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                          IF k < 2 THEN k
                                          ELSE abs(k) * abs(k - 1) *
                                                abs(a!1(k) * ALPH ^ (k - 2))
                                          ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "A2_prep") (("1" (INST - "a!1" "ALPH") (("1" (LEMMA "powerseries_conv_abs") (("1" (INST - "(LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))") (("1" (SPLIT -1) (("1" (POSTPONE) NIL NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|A2_conv-1| |nil| 3299500900 ("" (SKOSIMP*) (("" (NAME "ALPH" "max(abs(x!1), abs(xp!1))") (("" (CASE "ALPH /= 0") (("1" (FLATTEN) (("1" (EXPAND "A2seq") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "conv_derivseq") (("1" (INST - "derivseq(a!1)") (("1" (SPLIT -1) (("1" (LEMMA "conv_series_shift") (("1" (INST - "2" "(LAMBDA (k):
                                          IF k < 2 THEN k
                                          ELSE abs(k) * abs(k - 1) *
                                                abs(a!1(k) * ALPH ^ (k - 2))
                                          ENDIF)") (("1" (ASSERT) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 1 5) (("1" (LEMMA "A2_prep") (("1" (INST - "a!1" "ALPH") (("1" (LEMMA "powerseries_conv_abs") (("1" (INST - "(LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))") (("1" (SPLIT -1) (("1" (INST - "ALPH") (("1" (CASE-REPLACE "abs(powerseq((LAMBDA
                                                                          n:
                                                                          (1 + n) * (2 + n) * a!1(2 + n)),
                                                                         ALPH)) = powerseq((LAMBDA
                                                                          n:
                                                                          abs(1 + n) * abs(2 + n) * abs(a!1(2 + n))),
                                                                         abs(ALPH))") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(ALPH) = ALPH") (("1" (EXPAND "powerseq") (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (k: nat):
                                                                          IF k = 0 THEN abs(1) * abs(2) * abs(a!1(2))
                                                                          ELSE abs(a!1(2 + k)) * abs(1 + k) * abs(2 + k) *
                                                                                ALPH ^ k
                                                                          ENDIF)
                                                                   = (LAMBDA n:
                                                                          abs(1 + n) * abs(2 + n) *
                                                                           abs(a!1(2 + n) * ALPH ^ n))") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (REWRITE "abs_mult") (("2" (ASSERT) (("2" (REWRITE "abs_hat") (("2" (CASE-REPLACE "abs(ALPH) = ALPH") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -8) (("2" (HIDE -2 -3 -4 -5 2 4) (("2" (REPLACE -1 * RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (HIDE -) (("2" (LEMMA "ABC_LEM") (("2" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = (LAMBDA n: abs(1 + n) * abs(2 + n) * abs(a!1(2 + n)))") (("1" (HIDE 2) (("1" (CASE-REPLACE "abs((LAMBDA n: (1 + n) * (2 + n) * a!1(2 + n))) = abs(fseq(a!1))") (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) (("1" (CASE-REPLACE "fseq(a!1)(x!2) =  (1 + x!2) * (2 + x!2) * a!1(2 + x!2)") (("1" (REWRITE "abs_mult") (("1" (HIDE -1) (("1" (CASE-REPLACE "2 + x!2 + (x!2 * x!2 + 2 * x!2) = (2+x!2)*(1+x!2)") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "fseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE 2 3) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -12) (("2" (HIDE 2) (("2" (LEMMA "ball") (("2" (INST - "x!1") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "xp!1") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (REPLACE -3) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "conv_derivseq") (("2" (INST - "a!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|Gseq_conv| 0 (|Gseq_conv-8| "" 3882462056 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "(LAMBDA (k):
                                                              IF k < 2 THEN k * a!1(k)
                                                              ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                    k * a!1(k) * x!1 ^ (k - 1)
                                                              ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                               IF k < 2 THEN 0
                                               ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                     abs(h!1 * k)
                                               ENDIF) =
                                     (LAMBDA (k): abs(h!1)*
                                               IF k < 2 THEN 0
                                               ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                               ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                           abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                              abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                          a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                       abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 4 "abs(a!1(n!1))") (("1" (FIELD 4) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_eq_0") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "PKM1!1 = 0") (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                 (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                 =
                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -2 2) (("3" (EXPAND "derivable?" -1) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                         (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)")) (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Gseq_conv-7| "" 3791740942 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "(LAMBDA (k):
                                                              IF k < 2 THEN k * a!1(k)
                                                              ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                    k * a!1(k) * x!1 ^ (k - 1)
                                                              ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                               IF k < 2 THEN 0
                                               ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                     abs(h!1 * k)
                                               ENDIF) =
                                     (LAMBDA (k): abs(h!1)*
                                               IF k < 2 THEN 0
                                               ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                               ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                           abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                              abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                          a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                       abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 4 "abs(a!1(n!1))") (("1" (FIELD 4) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_eq_0") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "PKM1!1 = 0") (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                 (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                 =
                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA DERIV_DOMAIN) (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable?" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                         (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)")) (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_series?| CONST-DECL "bool" |series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|GET_tk| CONST-DECL "{tk: between[T](x, x + h) | ((x + h) ^ k - x ^ k) / h = k * tk ^ (k - 1)}" |power_series_deriv_scaf| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|h!1| SKOLEM-CONST-DECL "(A(x!1))" |power_series_deriv_scaf| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|conv_scaf0| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (ALPH SKOLEM-CONST-DECL "{z: nonneg_real | z >= abs(x!1) AND z >= abs(h!1 + x!1)}" |power_series_deriv_scaf| NIL) (|conv_series_scal| FORMULA-DECL NIL |series| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|series_scal| FORMULA-DECL NIL |series| NIL) (|ball| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|not_one_element| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|deriv_x_to_n| FORMULA-DECL NIL |derivatives| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (<= CONST-DECL "bool" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |power_series_deriv_scaf| NIL) (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|) (PKM1!1 SKOLEM-CONST-DECL "between[T](x!1, TK)" |power_series_deriv_scaf| NIL) (TK SKOLEM-CONST-DECL "{tk: between[T](x!1, h!1 + x!1) |
   ((h!1 + x!1) ^ n!1 - x!1 ^ n!1) / h!1 = n!1 * tk ^ (n!1 - 1)}" |power_series_deriv_scaf| NIL) (|abs_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|abs_eq_0| FORMULA-DECL NIL |abs_lems| |reals|) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (|both_sides_expt_pos_ge| FORMULA-DECL NIL |exponentiation| NIL) (FDX_91 SKOLEM-CONST-DECL "{n: nonneg_real | n >= n!1 - 1 AND n >= -(n!1 - 1)}" |power_series_deriv_scaf| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (FDX_90 SKOLEM-CONST-DECL "{n: nonneg_real | n >= n!1 - 1 AND n >= -(n!1 - 1)}" |power_series_deriv_scaf| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|comparison_test_gen| FORMULA-DECL NIL |series| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|Gseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|Gseq_conv-6| |nil| 3445341743 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "(LAMBDA (k):
                                                              IF k < 2 THEN k * a!1(k)
                                                              ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                    k * a!1(k) * x!1 ^ (k - 1)
                                                              ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                               IF k < 2 THEN 0
                                               ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                     abs(h!1 * k)
                                               ENDIF) =
                                     (LAMBDA (k): abs(h!1)*
                                               IF k < 2 THEN 0
                                               ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                               ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                           abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                              abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                          a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                       abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 4 "abs(a!1(n!1))") (("1" (FIELD 4) (("1" (MULT-INEQ -2 -8) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_eq_0") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "PKM1!1 = 0") (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                 (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                 =
                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA DERIV_DOMAIN) (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable?" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                         (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_domain") (("2" (LEMMA "connected_deriv_domain[T]") (("2" (REPLACE -2) (("2" (LEMMA DERIV_DOMAIN) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|Gseq_conv-5| |nil| 3299840221 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "(LAMBDA (k):
                                                        IF k < 2 THEN k * a!1(k)
                                                        ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                              k * a!1(k) * x!1 ^ (k - 1)
                                                        ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                     IF k < 2 THEN 0
                                     ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                           abs(h!1 * k)
                                     ENDIF) =
                           (LAMBDA (k): abs(h!1)*
                                     IF k < 2 THEN 0
                                     ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))

                                     ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                            abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                               abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                       a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                    abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 4 "abs(a!1(n!1))") (("1" (FIELD 4) (("1" (MULT-INEQ -2 -8) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "abs(PKM1!1) /= 0") (("1" (FLATTEN) (("1" (REWRITE "abs_eq_0") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "PKM1!1 = 0") (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                             (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                         =
                               (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (LEMMA "connected_domain") (("4" (SKOSIMP*) NIL NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                   (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|Gseq_conv-4| |nil| 3298994988 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "(LAMBDA (k):
                                                  IF k < 2 THEN k * a!1(k)
                                                  ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                        k * a!1(k) * x!1 ^ (k - 1)
                                                  ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                           IF k < 2 THEN 0
                           ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                 abs(h!1 * k)
                           ENDIF) =
                 (LAMBDA (k): abs(h!1)*
                           IF k < 2 THEN 0
                           ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                 
                           ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "convergent_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REVEAL -2) (("2" (REPLACE -1 * RL) (("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                             abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                    a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                 abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 5 "abs(a!1(n!1))") (("2" (FIELD 5) (("2" (MULT-INEQ -3 -10) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (REWRITE "zero_hat") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                         (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
 =
       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "connected_domain") (("4" (PROPAX) NIL NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable" -1) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1)) (("3" (EXPAND "derivable" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                             (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REVEAL -4) (("3" (REPLACE -1 * RL) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -4) (("4" (REPLACE -1 * RL) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable" -4) (("3" (INST?) NIL NIL)) NIL)) NIL) ("3" (EXPAND "derivable" -4) (("3" (INST?) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|Gseq_conv-3| |nil| 3298987688 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "(LAMBDA (k):
                                            IF k < 2 THEN k * a!1(k)
                                            ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                  k * a!1(k) * x!1 ^ (k - 1)
                                            ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (POSTPONE) NIL NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                              abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                 abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                 a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                              abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 5 "abs(a!1(n!1))") (("2" (FIELD 5) (("2" (MULT-INEQ -3 -10) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (REWRITE "zero_hat") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                     (n!1-1)*c!1^(n!1-2)") (("1" (LEMMA "abs_neg") (("1" (INST -1 "x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1)") (("1" (ASSERT) (("1" (REPLACE -1 + RL) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Gseq_conv-2| |nil| 3298986947 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "(LAMBDA (k):
                                IF k < 2 THEN k * a!1(k)
                                ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                      k * a!1(k) * x!1 ^ (k - 1)
                                ENDIF)" "(LAMBDA (k): abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^k-2))") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (POSTPONE) NIL NIL) ("2" (INST 1 "2") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                   abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
        abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
           a!1(n!1) * n!1*(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Gseq_conv-1| |nil| 3298804872 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "(LAMBDA (k):
                          IF k < 2 THEN k * a!1(k)
                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                k * a!1(k) * x!1 ^ (k - 1)
                          ENDIF)" "(LAMBDA (k): abs(h!1*k*(k-1))*abs(a!1(k)*ALPH^k-2))") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (POSTPONE) NIL NIL) ("2" (INST 1 "2") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                 abs(x!1^(n!1-1) - TK^(n!1-1)) =
                    abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|abs_Gseq_conv| 0 (|abs_Gseq_conv-7| "" 3882463093 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "abs(LAMBDA (k):
                                                                          IF k < 2 THEN k * a!1(k)
                                                                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                k * a!1(k) * x!1 ^ (k - 1)
                                                                          ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                                         abs(h!1 * k)
                                                                   ENDIF) =
                                                         (LAMBDA (k): abs(h!1)*
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                                                   ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                                                         abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                                                            abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                                                                a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                                                             abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 4 "abs(a!1(n!1))") (("2" (FIELD 4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "PKM1!1 /= 0") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                           (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                                                                   =
                                                                                                         (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -2 2) (("3" (EXPAND "derivable?" -1) (("3" (SKOSIMP*) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                       (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)")) (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|abs_Gseq_conv-6| "" 3791740956 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST - "abs(LAMBDA (k):
                                                                          IF k < 2 THEN k * a!1(k)
                                                                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                k * a!1(k) * x!1 ^ (k - 1)
                                                                          ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                                         abs(h!1 * k)
                                                                   ENDIF) =
                                                         (LAMBDA (k): abs(h!1)*
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                                                   ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                                                         abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                                                            abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                                                                a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                                                             abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 4 "abs(a!1(n!1))") (("2" (FIELD 4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "PKM1!1 /= 0") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                           (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                                                                   =
                                                                                                         (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA DERIV_DOMAIN) (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable?" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                       (n!1-1)*c!1^(n!1-2)")) (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (WITH-TCCS (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)")) (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_series?| CONST-DECL "bool" |series| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|GET_tk| CONST-DECL "{tk: between[T](x, x + h) | ((x + h) ^ k - x ^ k) / h = k * tk ^ (k - 1)}" |power_series_deriv_scaf| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|h!1| SKOLEM-CONST-DECL "(A(x!1))" |power_series_deriv_scaf| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|conv_scaf0| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (ALPH SKOLEM-CONST-DECL "{z: nonneg_real | z >= abs(x!1) AND z >= abs(h!1 + x!1)}" |power_series_deriv_scaf| NIL) (|conv_series_scal| FORMULA-DECL NIL |series| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|series_scal| FORMULA-DECL NIL |series| NIL) (|ball| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_domain| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|not_one_element| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|c!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|deriv_x_to_n| FORMULA-DECL NIL |derivatives| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (<= CONST-DECL "bool" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |power_series_deriv_scaf| NIL) (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|) (PKM1!1 SKOLEM-CONST-DECL "between[T](x!1, TK)" |power_series_deriv_scaf| NIL) (TK SKOLEM-CONST-DECL "{tk: between[T](x!1, h!1 + x!1) |
   ((h!1 + x!1) ^ n!1 - x!1 ^ n!1) / h!1 = n!1 * tk ^ (n!1 - 1)}" |power_series_deriv_scaf| NIL) (|abs_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|abs_eq_0| FORMULA-DECL NIL |abs_lems| |reals|) (|a!1| SKOLEM-CONST-DECL "sequence[real]" |power_series_deriv_scaf| NIL) (FDX_95 SKOLEM-CONST-DECL "{n: nonneg_real | n >= a!1(n!1) AND n >= -a!1(n!1)}" |power_series_deriv_scaf| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (|both_sides_expt_pos_ge| FORMULA-DECL NIL |exponentiation| NIL) (FDX_94 SKOLEM-CONST-DECL "{n: nonneg_real | n >= n!1 - 1 AND n >= -(n!1 - 1)}" |power_series_deriv_scaf| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (FDX_93 SKOLEM-CONST-DECL "{n: nonneg_real | n >= n!1 - 1 AND n >= -(n!1 - 1)}" |power_series_deriv_scaf| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|abs_abs| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|comparison_test_gen| FORMULA-DECL NIL |series| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|Gseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|abs_Gseq_conv-5| |nil| 3471698183 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "abs(LAMBDA (k):
                                                                          IF k < 2 THEN k * a!1(k)
                                                                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                                k * a!1(k) * x!1 ^ (k - 1)
                                                                          ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                                         abs(h!1 * k)
                                                                   ENDIF) =
                                                         (LAMBDA (k): abs(h!1)*
                                                                   IF k < 2 THEN 0
                                                                   ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                                                   ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                                                         abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                                                            abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                                                                a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                                                             abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 4 "abs(a!1(n!1))") (("2" (FIELD 4) (("2" (MULT-INEQ -4 -11) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "PKM1!1 /= 0") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                           (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                                                                   =
                                                                                                         (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (LEMMA DERIV_DOMAIN) (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable?" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                                                       (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_domain") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|abs_Gseq_conv-4| |nil| 3445341764 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "abs(LAMBDA (k):
                                                                    IF k < 2 THEN k * a!1(k)
                                                                    ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                          k * a!1(k) * x!1 ^ (k - 1)
                                                                    ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                                         IF k < 2 THEN 0
                                                         ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                               abs(h!1 * k)
                                                         ENDIF) =
                                               (LAMBDA (k): abs(h!1)*
                                                         IF k < 2 THEN 0
                                                         ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                                         ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                                          abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                                             abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                                             a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                                          abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 4 "abs(a!1(n!1))") (("2" (FIELD 4) (("2" (MULT-INEQ -4 -11) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "PKM1!1 /= 0") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                     (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                                         =
                                                                               (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (LEMMA "connected_domain") (("4" (SKOSIMP*) (("4" (LEMMA "connected_deriv_domain[T]") (("4" (REPLACE -2) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable?" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                                               (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_domain") (("2" (LEMMA "connected_deriv_domain[T]") (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|abs_Gseq_conv-3| |nil| 3299840277 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "abs(LAMBDA (k):
                                                              IF k < 2 THEN k * a!1(k)
                                                              ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                                    k * a!1(k) * x!1 ^ (k - 1)
                                                              ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                               IF k < 2 THEN 0
                                               ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                                     abs(h!1 * k)
                                               ENDIF) =
                                     (LAMBDA (k): abs(h!1)*
                                               IF k < 2 THEN 0
                                               ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))
                                               ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "conv_series_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (REWRITE "abs_mult") (("2" (REWRITE "abs_mult") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                                           abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                                              abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                                          a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                                       abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 4 "abs(a!1(n!1))") (("2" (FIELD 4) (("2" (MULT-INEQ -4 -11) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "PKM1!1 /= 0") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                 (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                                                 =
                                                       (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (SKOSIMP*) NIL NIL)) NIL) ("4" (LEMMA "connected_domain") (("4" (SKOSIMP*) NIL NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable" -1) (("5" (SKOSIMP*) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                                         (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|abs_Gseq_conv-2| |nil| 3299495917 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (EXPAND "Gseq") (("" (CASE "FORALL (k: above(1)): abs(x!1 - GET_tk(x!1, h!1, k)) < abs(h!1)") (("1" (LEMMA "comparison_test_gen") (("1" (NAME "ALPH" "max(abs(x!1),abs(x!1+h!1))") (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (ASSERT) (("1" (INST - "abs(LAMBDA (k):
                                                        IF k < 2 THEN k * a!1(k)
                                                        ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                                              k * a!1(k) * x!1 ^ (k - 1)
                                                        ENDIF)" "(LAMBDA (k): IF k < 2 THEN 0 ELSE abs(h!1*k)*abs(k-1)*abs(a!1(k)*ALPH^(k-2)) ENDIF)") (("1" (ASSERT) (("1" (HIDE 1) (("1" (SPLIT +) (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "(LAMBDA (k):
                                     IF k < 2 THEN 0
                                     ELSE abs(k - 1) * abs(a!1(k) * ALPH ^ (k - 2)) *
                                           abs(h!1 * k)
                                     ENDIF) =
                           (LAMBDA (k): abs(h!1)*
                                     IF k < 2 THEN 0
                                     ELSE abs(k)*abs(k - 1) * abs(a!1(k)) * abs(ALPH ^ (k - 2))

                                     ENDIF)") (("1" (HIDE -1) (("1" (LEMMA "conv_scaf0") (("1" (INST?) (("1" (INST - "ALPH") (("1" (ASSERT) (("1" (LEMMA "convergent_scal") (("1" (INST?) (("1" (INST - "abs(h!1)") (("1" (ASSERT) (("1" (REWRITE "series_scal") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REVEAL -4) (("2" (REPLACE -1 * RL) (("2" (HIDE -1 -2 2) (("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (ASSERT) (("2" (LEMMA "ball") (("2" (INST - "(h!1 + x!1)") (("2" (LEMMA "ball") (("2" (INST - "(x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REVEAL -2) (("2" (REPLACE -1 * RL) (("2" (HIDE-ALL-BUT -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "3") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST -3 "n!1") (("2" (EXPAND "abs" 2 2) (("2" (REWRITE "abs_abs") (("2" (NAME "TK" "GET_tk(x!1, h!1, n!1)") (("2" (CASE "(EXISTS (PKM1: between[T](x!1,TK)):
                                                                                            abs(x!1^(n!1-1) - TK^(n!1-1)) =
                                                                                               abs(x!1 - TK)*abs(n!1-1)*abs(PKM1^(n!1-2)))") (("1" (SKOSIMP*) (("1" (REPLACE -2) (("1" (CASE "abs(PKM1!1) <= abs(ALPH)") (("1" (CASE "abs(a!1(n!1) * TK ^(n!1 - 1) * n!1 -
                                                                                       a!1(n!1) * x!1 ^ (n!1 - 1) * n!1) =
                                                                                    abs(a!1(n!1))*abs(n!1)*abs(TK ^ (n!1 - 1) - x!1 ^ (n!1 - 1))") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (AUTO-REWRITE "abs_0") (("1" (CASE-REPLACE "ALPH = 0") (("1" (HIDE-ALL-BUT -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (DIV-BY 3 "abs(n!1)*abs(n!1-1)") (("1" (FIELD 3) (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 ^ (n!1 - 1) - TK ^ (n!1 - 1))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -5) (("1" (DIV-BY 3 "abs(n!1-1)") (("1" (FIELD 3) (("1" (HIDE -1 |-3-6| -7 -10) (("1" (LEMMA "both_sides_expt_pos_ge") (("1" (INST - "(n!1-2)" "abs(ALPH)" "abs(PKM1!1)") (("1" (ASSERT) (("1" (REWRITE "abs_hat" :DIR RL) (("1" (DIV-BY 3 "abs(a!1(n!1))") (("1" (FIELD 3) (("1" (CASE-REPLACE "PKM1!1 = 0") (("1" (ASSERT) (("1" (REWRITE "zero_hat") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REWRITE "abs_hat" :DIR RL) (("2" (DIV-BY 5 "abs(a!1(n!1))") (("2" (FIELD 5) (("2" (MULT-INEQ -3 -10) (("1" (ASSERT) NIL NIL) ("2" (AUTO-REWRITE "abs_abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "abs_eq_0") (("2" (INST - "PKM1!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (REWRITE "zero_hat") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (MULT-CASES 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "a!1(n!1) * TK ^ (n!1 - 1) * n!1 -
                                                                           a!1(n!1) * x!1 ^ (n!1 - 1) * n!1 =
                                                                           a!1(n!1) * n!1*(TK ^(n!1 - 1) - x!1^(n!1 - 1))") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -4 * RL) (("2" (HIDE -4) (("2" (HIDE -1 -2) (("2" (HIDE -3) (("2" (CASE-REPLACE "abs(max(abs(x!1), abs(h!1 + x!1))) = (max(abs(x!1), abs(h!1 + x!1)))") (("1" (HIDE -1) (("1" (HIDE -2) (("1" (TYPEPRED "TK") (("1" (HIDE -5) (("1" (TYPEPRED "PKM1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "mean_value[T]") (("1" (INST - "TK" "x!1" "(LAMBDA (x:T): x^(n!1-1))") (("1" (LEMMA "deriv_x_to_n[T]") (("1" (INST - "(n!1-1)" "1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                             (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (REPLACE -1 * RL) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_x_to_n[T]") (("2" (ASSERT) (("2" (INST - "(n!1-1)" "1") (("2" (FLATTEN) (("2" (CASE-REPLACE "(LAMBDA (x: T): 1 * x ^ (n!1 - 1)) = (LAMBDA (x: T): x ^ (n!1 - 1))") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (ASSERT) (("1" (EXPAND "deriv" -2) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x_1: T): deriv((LAMBDA (x: T): x ^ (n!1 - 1)), x_1))(c!1)
                         =
                               (LAMBDA (x: T): (x ^ (n!1 - 2)) * n!1 - x ^ (n!1 - 2))(c!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (LEMMA "not_one_element") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "connected_domain") (("4" (PROPAX) NIL NIL)) NIL) ("5" (HIDE -2 2) (("5" (EXPAND "derivable" -1) (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 1)) (("3" (EXPAND "derivable" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "x!1 = TK") (("1" (ASSERT) (("1" (REWRITE "abs_0") (("1" (ASSERT) (("1" (TYPEPRED "TK") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mean_value[T]") (("2" (INST - "x!1" "TK" "(LAMBDA (x:T): x^(n!1-1))") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "c!1") (("1" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) =
                                                                                   (n!1-1)*c!1^(n!1-2)") (("1" (FACTOR -4 L) (("1" (HIDE-ALL-BUT (-4 1 2 3)) (("1" (NAME-REPLACE "NM1" "n!1-1") (("1" (LEMMA "abs_neg") (("1" (INST - "(x!1 - TK)") (("1" (REPLACE -1 * RL) (("1" (NAME-REPLACE "TKMx" "(TK - x!1)") (("1" (HIDE -1) (("1" (CASE-REPLACE "abs(x!1 ^ NM1 - TK ^ NM1) = abs(TK ^ NM1 - x!1 ^ NM1) ") (("1" (REPLACE -2 * RL) (("1" (HIDE -1 -2) (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REVEAL -4) (("3" (REPLACE -1 * RL) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -4) (("4" (REPLACE -1 * RL) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "deriv((LAMBDA (x: T): x ^ (n!1 - 1)), c!1) = deriv(LAMBDA (x: T): x ^ (n!1 - 1))(c!1)") (("1" (REPLACE -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "deriv" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "derivable" -4) (("3" (INST?) NIL NIL)) NIL)) NIL) ("3" (EXPAND "derivable" -4) (("3" (INST?) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "not_one_element") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "connected_domain") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "GET_tk(x!1, h!1, k!1)") (("2" (NAME-REPLACE "TK" "GET_tk(x!1, h!1, k!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|abs_Gseq_conv-1| |nil| 3299494108 ("" (SKOSIMP*) (("" (EXPAND "conv_series?") (("" (LEMMA "powerseries_abs_conv") (("" (EXPAND "powerseries") (("" (EXPAND "powerseq") (("" (EXPAND "Gseq") (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|inf_sum_Gseq_abs_TCC1| 0 (|inf_sum_Gseq_abs_TCC1-2| "" 3790091739 ("" (SKOSIMP*) (("" (LEMMA "Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Gseq_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|inf_sum_Gseq_abs| SUBTYPE "power_series_deriv_scaf.Gseq(power_series_deriv_scaf.a, power_series_deriv_scaf.x, power_series_deriv_scaf.h)" "{s | series.conv_series?(series.s, 2)}")) (|inf_sum_Gseq_abs_TCC1-1| |nil| 3299340692 ("" (SKOSIMP*) (("" (LEMMA "Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK (|inf_sum_Gseq_abs| SUBTYPE "power_series_deriv_scaf.Gseq(power_series_deriv_scaf.a, power_series_deriv_scaf.x, power_series_deriv_scaf.h)" "{s | series.conv_series?(series.s, 2)}"))) (|inf_sum_Gseq_abs_TCC2| 0 (|inf_sum_Gseq_abs_TCC2-2| "" 3790091739 ("" (SKOSIMP*) (("" (LEMMA "abs_Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|abs_Gseq_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|inf_sum_Gseq_abs| SUBTYPE "series.abs(power_series_deriv_scaf.Gseq(power_series_deriv_scaf.a, power_series_deriv_scaf.x, power_series_deriv_scaf.h))" "{s | series.conv_series?(series.s, 2)}")) (|inf_sum_Gseq_abs_TCC2-1| |nil| 3299340692 ("" (SKOSIMP*) (("" (LEMMA "abs_Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK (|inf_sum_Gseq_abs| SUBTYPE "series.abs(power_series_deriv_scaf.Gseq(power_series_deriv_scaf.a, power_series_deriv_scaf.x, power_series_deriv_scaf.h))" "{s | series.conv_series?(series.s, 2)}"))) (|inf_sum_Gseq_abs| 0 (|inf_sum_Gseq_abs-3| "" 3790091740 ("" (SKOSIMP*) (("" (LEMMA "inf_sum_triangle") (("" (INST?) (("" (LEMMA "abs_Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_series?") (("" (HIDE 2) (("" (LEMMA "end_series_conv") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|inf_sum_triangle| FORMULA-DECL NIL |series| NIL) (|abs_Gseq_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "sequence[real]" |series| NIL) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|conv_series?| CONST-DECL "bool" |series| NIL) (|Gseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|inf_sum_Gseq_abs-2| |nil| 3299581924 ("" (SKOSIMP*) (("" (LEMMA "inf_sum_triangle") (("" (INST?) (("" (LEMMA "abs_Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_series?") (("" (HIDE 2) (("" (LEMMA "end_series_conv") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL) NIL) (|inf_sum_Gseq_abs-1| |nil| 3299496498 ("" (SKOSIMP*) (("" (LEMMA "series_triangle") (("" (INST?) (("" (LEMMA "abs_Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (EXPAND "conv_series?") (("" (HIDE 2) (("" (LEMMA "end_series_conv") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL) SHOSTAK)) (|conv_scaf2| 0 (|conv_scaf2-1| |nil| 3298973028 ("" (SKOSIMP*) (("" (LEMMA "deriv_powerseries_conv") (("" (INST?) (("" (ASSERT) (("" (LEMMA "Gseq_conv") (("" (INST?) (("" (ASSERT) (("" (EXPAND "Gseq") (("" (EXPAND "deriv_powerseq") (("" (INST - "x!1") (("" (INST - "h!1") (("" (INST - "x!1") (("" (EXPAND "conv_series?") (("" (LEMMA "end_series_conv") (("" (INST - "(LAMBDA k:
                          IF k = 0 THEN 0
                          ELSIF k = 1 THEN a!1(1)
                          ELSE k * a!1(k) * x!1 ^ (k - 1)
                          ENDIF)" "2") (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "convergent_sum") (("1" (INST?) (("1" (INST - "series(LAMBDA (k):
                          IF k < 2 THEN k * a!1(k)
                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1) -
                                k * a!1(k) * x!1 ^ (k - 1)
                          ENDIF,
                        2)") (("1" (ASSERT) (("1" (HIDE -2 -3) (("1" (REWRITE "series_m_sum") (("1" (EXPAND "+
") (("1" (LEMMA "series_m_eq") (("1" (INST?) (("1" (INST - "(LAMBDA k:
                          IF k < 2 THEN k * a!1(k)
                          ELSE k * a!1(k) * GET_tk(x!1, h!1, k) ^ (k - 1)
                          ENDIF)") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "end_series_conv") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deriv_powerseries_conv| FORMULA-DECL NIL |power_series_derivseq| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Gseq| CONST-DECL "real" |power_series_deriv_scaf| NIL) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|convergent_sum| FORMULA-DECL NIL |convergence_ops| |analysis|) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|h!1| SKOLEM-CONST-DECL "(A(x!1))" |power_series_deriv_scaf| NIL) (|GET_tk| CONST-DECL "{tk: between[T](x, x + h) | ((x + h) ^ k - x ^ k) / h = k * tk ^ (k - 1)}" |power_series_deriv_scaf| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|series_m_eq| FORMULA-DECL NIL |series| NIL) (|series_m_sum| FORMULA-DECL NIL |series| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|conv_series?| CONST-DECL "bool" |series| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|deriv_powerseq| CONST-DECL "sequence[real]" |power_series_derivseq| NIL) (|Gseq_conv| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|conv_scaf1_TCC1| 0 (|conv_scaf1_TCC1-1| |nil| 3298796755 ("" (SUBTYPE-TCC) NIL NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|) (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|) (|series| CONST-DECL "sequence[real]" |series| NIL) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL)) SHOSTAK (|conv_scaf1| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(power_series_deriv_scaf.h, power_series_deriv_scaf.x) = 0), reals.>=(i, 0))}"))) (|conv_scaf1_TCC2| 0 (|conv_scaf1_TCC2-1| |nil| 3299579922 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|conv_scaf1| SUBTYPE "power_series_deriv_scaf.k" "{i: integers.int | booleans.OR(power_series_deriv_scaf.x /= 0, reals.>=(i, 0))}"))) (|conv_scaf1| 0 (|conv_scaf1-1| |nil| 3298974817 ("" (SKOSIMP*) (("" (EXPAND "conv_powerseries?") (("" (INST-CP - "x!1") (("" (INST - "x!1+h!1") (("1" (EXPAND "powerseries") (("1" (EXPAND "powerseq") (("1" (LEMMA "convergent_diff") (("1" (INST?) (("1" (INST - "series(LAMBDA (k: nat): a!1(k) * x!1 ^ k)") (("1" (ASSERT) (("1" (HIDE -2 -3) (("1" (REWRITE "series_diff") (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h!1") (("2" (EXPAND "A") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_powerseries?| CONST-DECL "bool" |power_series_conv| NIL) (|h!1| SKOLEM-CONST-DECL "(A(x!1))" |power_series_deriv_scaf| NIL) (|x!1| SKOLEM-CONST-DECL "T" |power_series_deriv_scaf| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|powerseq| CONST-DECL "sequence[real]" |power_series| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|series_diff| FORMULA-DECL NIL |series| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|convergent_diff| FORMULA-DECL NIL |convergence_ops| |analysis|) (|powerseries| CONST-DECL "sequence[real]" |power_series| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|conv_scaf3| 0 (|conv_scaf3-1| |nil| 3298976633 ("" (SKOSIMP*) (("" (LEMMA "conv_scaf1") (("" (INST?) (("" (INST?) (("" (ASSERT) (("" (INST - "h!1") (("" (ASSERT) (("" (EXPAND "conv_series?") (("" (LEMMA "end_series_conv") (("" (INST - "(LAMBDA (k: nat):  a!1(k) * (h!1 + x!1) ^ k - a!1(k) * x!1 ^ k)" "1") (("" (ASSERT) (("" (HIDE -2) (("" (LEMMA "convergent_scal") (("" (INST?) (("" (INST - "1/h!1") (("" (ASSERT) (("" (REWRITE "series_m_scal") (("" (EXPAND "*") (("" (HIDE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conv_scaf1| FORMULA-DECL NIL |power_series_deriv_scaf| NIL) (T FORMAL-SUBTYPE-DECL NIL |power_series_deriv_scaf| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |power_series_deriv_scaf| NIL) (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|) (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|conv_series?| CONST-DECL "bool" |series| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|series| CONST-DECL "sequence[real]" |series| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|series_m_scal| FORMULA-DECL NIL |series| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|convergent_scal| FORMULA-DECL NIL |convergence_ops| |analysis|) (|end_series_conv| FORMULA-DECL NIL |series| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|limit_eq_rew| 0 (|limit_eq_rew-1| |nil| 3299837334 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)))
